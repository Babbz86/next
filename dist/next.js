/*!
 * @alifd/next@1.27.0-alpha.0 (https://fusion.design)
 * Copyright 2018-present Alibaba Group,
 * Licensed under MIT (https://github.com/alibaba-fusion/next/blob/master/LICENSE)
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"), require("moment"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "react-dom", "moment"], factory);
	else if(typeof exports === 'object')
		exports["Next"] = factory(require("react"), require("react-dom"), require("moment"));
	else
		root["Next"] = factory(root["React"], root["ReactDOM"], root["moment"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_16__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 483);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["__extends"] = __extends;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (immutable) */ __webpack_exports__["__rest"] = __rest;
/* harmony export (immutable) */ __webpack_exports__["__decorate"] = __decorate;
/* harmony export (immutable) */ __webpack_exports__["__param"] = __param;
/* harmony export (immutable) */ __webpack_exports__["__esDecorate"] = __esDecorate;
/* harmony export (immutable) */ __webpack_exports__["__runInitializers"] = __runInitializers;
/* harmony export (immutable) */ __webpack_exports__["__propKey"] = __propKey;
/* harmony export (immutable) */ __webpack_exports__["__setFunctionName"] = __setFunctionName;
/* harmony export (immutable) */ __webpack_exports__["__metadata"] = __metadata;
/* harmony export (immutable) */ __webpack_exports__["__awaiter"] = __awaiter;
/* harmony export (immutable) */ __webpack_exports__["__generator"] = __generator;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__createBinding", function() { return __createBinding; });
/* harmony export (immutable) */ __webpack_exports__["__exportStar"] = __exportStar;
/* harmony export (immutable) */ __webpack_exports__["__values"] = __values;
/* harmony export (immutable) */ __webpack_exports__["__read"] = __read;
/* harmony export (immutable) */ __webpack_exports__["__spread"] = __spread;
/* harmony export (immutable) */ __webpack_exports__["__spreadArrays"] = __spreadArrays;
/* harmony export (immutable) */ __webpack_exports__["__spreadArray"] = __spreadArray;
/* harmony export (immutable) */ __webpack_exports__["__await"] = __await;
/* harmony export (immutable) */ __webpack_exports__["__asyncGenerator"] = __asyncGenerator;
/* harmony export (immutable) */ __webpack_exports__["__asyncDelegator"] = __asyncDelegator;
/* harmony export (immutable) */ __webpack_exports__["__asyncValues"] = __asyncValues;
/* harmony export (immutable) */ __webpack_exports__["__makeTemplateObject"] = __makeTemplateObject;
/* harmony export (immutable) */ __webpack_exports__["__importStar"] = __importStar;
/* harmony export (immutable) */ __webpack_exports__["__importDefault"] = __importDefault;
/* harmony export (immutable) */ __webpack_exports__["__classPrivateFieldGet"] = __classPrivateFieldGet;
/* harmony export (immutable) */ __webpack_exports__["__classPrivateFieldSet"] = __classPrivateFieldSet;
/* harmony export (immutable) */ __webpack_exports__["__classPrivateFieldIn"] = __classPrivateFieldIn;
/* harmony export (immutable) */ __webpack_exports__["__addDisposableResource"] = __addDisposableResource;
/* harmony export (immutable) */ __webpack_exports__["__disposeResources"] = __disposeResources;
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};

function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};

function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});

function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

/** @deprecated */
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

/** @deprecated */
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        env.stack.push({ value: value, dispose: dispose, async: async });
    }
    else if (async) {
        env.stack.push({ async: true });
    }
    return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
    function fail(e) {
        env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
    }
    function next() {
        while (env.stack.length) {
            var rec = env.stack.pop();
            try {
                var result = rec.dispose && rec.dispose.call(rec.value);
                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
            }
            catch (e) {
                fail(e);
            }
        }
        if (env.hasError) throw env.error;
    }
    return next();
}

/* harmony default export */ __webpack_exports__["default"] = ({
    __extends: __extends,
    __assign: __assign,
    __rest: __rest,
    __decorate: __decorate,
    __param: __param,
    __metadata: __metadata,
    __awaiter: __awaiter,
    __generator: __generator,
    __createBinding: __createBinding,
    __exportStar: __exportStar,
    __values: __values,
    __read: __read,
    __spread: __spread,
    __spreadArrays: __spreadArrays,
    __spreadArray: __spreadArray,
    __await: __await,
    __asyncGenerator: __asyncGenerator,
    __asyncDelegator: __asyncDelegator,
    __asyncValues: __asyncValues,
    __makeTemplateObject: __makeTemplateObject,
    __importStar: __importStar,
    __importDefault: __importDefault,
    __classPrivateFieldGet: __classPrivateFieldGet,
    __classPrivateFieldSet: __classPrivateFieldSet,
    __classPrivateFieldIn: __classPrivateFieldIn,
    __addDisposableResource: __addDisposableResource,
    __disposeResources: __disposeResources,
});


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (false) {
  var ReactIs = require('react-is');

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(204)();
}


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;
	var nativeCodeString = '[native code]';

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				if (arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				}
			} else if (argType === 'object') {
				if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {
					classes.push(arg.toString());
					continue;
				}

				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		window.classNames = classNames;
	}
}());


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.pickAttrs = exports.datejs = exports.KEYCODE = exports.guid = exports.htmlId = exports.focus = exports.support = exports.str = exports.obj = exports.log = exports.func = exports.events = exports.env = exports.dom = void 0;
var tslib_1 = __webpack_require__(0);
exports.dom = __webpack_require__(111);
exports.env = __webpack_require__(123);
exports.events = __webpack_require__(238);
exports.func = __webpack_require__(239);
exports.log = __webpack_require__(122);
exports.obj = __webpack_require__(30);
exports.str = __webpack_require__(121);
exports.support = __webpack_require__(247);
exports.focus = __webpack_require__(248);
exports.htmlId = __webpack_require__(249);
var guid_1 = __webpack_require__(126);
Object.defineProperty(exports, "guid", { enumerable: true, get: function get() {
    return guid_1.default;
  } });
var keycode_1 = __webpack_require__(125);
Object.defineProperty(exports, "KEYCODE", { enumerable: true, get: function get() {
    return keycode_1.default;
  } });
var date_1 = __webpack_require__(81);
Object.defineProperty(exports, "datejs", { enumerable: true, get: function get() {
    return date_1.default;
  } });
var pick_attrs_1 = __webpack_require__(250);
Object.defineProperty(exports, "pickAttrs", { enumerable: true, get: function get() {
    return pick_attrs_1.default;
  } });
tslib_1.__exportStar(__webpack_require__(251), exports);

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var get_context_props_1 = __webpack_require__(127);
var config_1 = __webpack_require__(252);
var consumer_1 = __webpack_require__(256);
var error_boundary_1 = __webpack_require__(128);
var cache_1 = __webpack_require__(257);
var date_1 = __webpack_require__(81);
var childContextCache = new cache_1.default();
var setMomentLocale = function setMomentLocale(locale) {
    return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var moment, e_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2,, 3]);
                    return [4 /*yield*/, Promise.resolve().then(function () {
                        return __webpack_require__(16);
                    })];
                case 1:
                    moment = _a.sent();
                    if (moment && moment.default && moment.default.isMoment) moment = moment.default;
                    return [3 /*break*/, 3];
                case 2:
                    e_1 = _a.sent();
                    return [3 /*break*/, 3];
                case 3:
                    if (moment && moment.locale && locale) {
                        moment.locale(locale.momentLocale);
                    }
                    return [2 /*return*/];
            }
        });
    });
};
var setDateLocale = function setDateLocale(locale) {
    if (locale) {
        date_1.default.locale(locale.dateLocale || locale.momentLocale);
    }
};
var ConfigProvider = /** @class */function (_super) {
    tslib_1.__extends(ConfigProvider, _super);
    function ConfigProvider(props, context) {
        var _this = _super.call(this, props, context) || this;
        childContextCache.add(_this, (0, _extends3.default)({}, childContextCache.get(_this, {}), _this.getChildContext()));
        setMomentLocale(_this.props.locale);
        setDateLocale(_this.props.locale);
        _this.state = {
            locale: _this.props.locale
        };
        return _this;
    }
    ConfigProvider.prototype.getChildContext = function () {
        var _a = this.props,
            prefix = _a.prefix,
            locale = _a.locale,
            defaultPropsConfig = _a.defaultPropsConfig,
            pure = _a.pure,
            warning = _a.warning,
            rtl = _a.rtl,
            device = _a.device,
            popupContainer = _a.popupContainer,
            errorBoundary = _a.errorBoundary;
        var _b = this.context,
            nextPrefix = _b.nextPrefix,
            nextDefaultPropsConfig = _b.nextDefaultPropsConfig,
            nextLocale = _b.nextLocale,
            nextPure = _b.nextPure,
            nextRtl = _b.nextRtl,
            nextWarning = _b.nextWarning,
            nextDevice = _b.nextDevice,
            nextPopupContainer = _b.nextPopupContainer,
            nextErrorBoundary = _b.nextErrorBoundary;
        return {
            nextPrefix: prefix || nextPrefix,
            nextDefaultPropsConfig: defaultPropsConfig || nextDefaultPropsConfig,
            nextLocale: locale || nextLocale,
            nextPure: typeof pure === 'boolean' ? pure : nextPure,
            nextRtl: typeof rtl === 'boolean' ? rtl : nextRtl,
            nextWarning: typeof warning === 'boolean' ? warning : nextWarning,
            nextDevice: device || nextDevice,
            nextPopupContainer: popupContainer || nextPopupContainer,
            nextErrorBoundary: errorBoundary || nextErrorBoundary
        };
    };
    ConfigProvider.getDerivedStateFromProps = function (nextProps, prevState) {
        if (nextProps.locale !== prevState.locale) {
            setMomentLocale(nextProps.locale);
            setDateLocale(nextProps.locale);
            return {
                locale: nextProps.locale
            };
        }
        return null;
    };
    ConfigProvider.prototype.componentDidUpdate = function () {
        childContextCache.add(this, (0, _extends3.default)({}, childContextCache.get(this, {}), this.getChildContext()));
    };
    ConfigProvider.prototype.componentWillUnmount = function () {
        childContextCache.remove(this);
    };
    ConfigProvider.prototype.render = function () {
        return react_1.Children.only(this.props.children);
    };
    ConfigProvider.propTypes = {
        /**
         * 样式类名的品牌前缀
         */
        prefix: PropTypes.string,
        /**
         * 国际化文案对象，属性为组件的 displayName
         */
        locale: PropTypes.object,
        /**
         * 组件 API 的默认配置
         */
        defaultPropsConfig: PropTypes.object,
        /**
         * 是否开启错误捕捉 errorBoundary
         * 如需自定义参数，请传入对象 对象接受参数列表如下：
         *
         * fallbackUI `Function(error?: {}, errorInfo?: {}) => Element` 捕获错误后的展示
         * afterCatch `Function(error?: {}, errorInfo?: {})` 捕获错误后的行为，比如埋点上传
         */
        errorBoundary: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
        /**
         * 是否开启 Pure Render 模式，会提高性能，但是也会带来副作用
         */
        pure: PropTypes.bool,
        /**
         * 是否在开发模式下显示组件属性被废弃的 warning 提示
         */
        warning: PropTypes.bool,
        /**
         * 是否开启 rtl 模式
         */
        rtl: PropTypes.bool,
        /**
         * 设备类型，针对不同的设备类型组件做出对应的响应式变化
         */
        device: PropTypes.oneOf(['tablet', 'desktop', 'phone']),
        /**
         * 组件树
         */
        children: PropTypes.any,
        /**
         * 指定浮层渲染的父节点，可以为节点 id 的字符串，也可以返回节点的函数
         */
        popupContainer: PropTypes.any
    };
    ConfigProvider.defaultProps = {
        warning: true,
        errorBoundary: false
    };
    ConfigProvider.contextTypes = {
        nextPrefix: PropTypes.string,
        nextLocale: PropTypes.object,
        nextDefaultPropsConfig: PropTypes.object,
        nextPure: PropTypes.bool,
        nextRtl: PropTypes.bool,
        nextWarning: PropTypes.bool,
        nextDevice: PropTypes.oneOf(['tablet', 'desktop', 'phone']),
        nextPopupContainer: PropTypes.any,
        nextErrorBoundary: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])
    };
    ConfigProvider.childContextTypes = {
        nextPrefix: PropTypes.string,
        nextLocale: PropTypes.object,
        nextDefaultPropsConfig: PropTypes.object,
        nextPure: PropTypes.bool,
        nextRtl: PropTypes.bool,
        nextWarning: PropTypes.bool,
        nextDevice: PropTypes.oneOf(['tablet', 'desktop', 'phone']),
        nextPopupContainer: PropTypes.any,
        nextErrorBoundary: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])
    };
    /**
     * 传入组件，生成受 ConfigProvider 控制的 HOC 组件
     * @param Component - 组件类
     * @param options - 可选项
     * @returns 被 HOC 后的组件
     */
    ConfigProvider.config = config_1.config;
    ConfigProvider.initLocales = config_1.initLocales;
    ConfigProvider.setLanguage = config_1.setLanguage;
    ConfigProvider.setLocale = config_1.setLocale;
    ConfigProvider.setDirection = config_1.setDirection;
    ConfigProvider.getLanguage = config_1.getLanguage;
    ConfigProvider.getLocale = config_1.getLocale;
    ConfigProvider.getDirection = config_1.getDirection;
    ConfigProvider.Consumer = consumer_1.default;
    ConfigProvider.ErrorBoundary = error_boundary_1.default;
    /**
     * 传入组件的 props 和 displayName，得到和 childContext 计算过的包含有 preifx/locale/pure 的对象，一般用于通过静态方法生成脱离组件树的组件
     * @param props - 组件的 props
     * @param displayName - 组件的 displayName
     * @returns 新的 context props
     */
    ConfigProvider.getContextProps = function (props, displayName) {
        return (0, get_context_props_1.default)(props, childContextCache.root() || {}, displayName);
    };
    ConfigProvider.clearCache = function () {
        childContextCache.clear();
    };
    ConfigProvider.getContext = function () {
        var _a = childContextCache.root() || {},
            nextPrefix = _a.nextPrefix,
            nextLocale = _a.nextLocale,
            nextDefaultPropsConfig = _a.nextDefaultPropsConfig,
            nextPure = _a.nextPure,
            nextRtl = _a.nextRtl,
            nextWarning = _a.nextWarning,
            nextDevice = _a.nextDevice,
            nextPopupContainer = _a.nextPopupContainer,
            nextErrorBoundary = _a.nextErrorBoundary;
        return {
            prefix: nextPrefix,
            locale: nextLocale,
            defaultPropsConfig: nextDefaultPropsConfig,
            pure: nextPure,
            rtl: nextRtl,
            warning: nextWarning,
            device: nextDevice,
            popupContainer: nextPopupContainer,
            errorBoundary: nextErrorBoundary
        };
    };
    return ConfigProvider;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(ConfigProvider);

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "polyfill", function() { return polyfill; });
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function componentWillMount() {
  // Call this.constructor.gDSFP to support sub-classes.
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== undefined) {
    this.setState(state);
  }
}

function componentWillReceiveProps(nextProps) {
  // Call this.constructor.gDSFP to support sub-classes.
  // Use the setState() updater to ensure state isn't stale in certain edge cases.
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== undefined ? state : null;
  }
  // Binding "this" is important for shallow renderer support.
  this.setState(updater.bind(this));
}

function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}

// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

function polyfill(Component) {
  var prototype = Component.prototype;

  if (!prototype || !prototype.isReactComponent) {
    throw new Error('Can only polyfill class components');
  }

  if (
    typeof Component.getDerivedStateFromProps !== 'function' &&
    typeof prototype.getSnapshotBeforeUpdate !== 'function'
  ) {
    return Component;
  }

  // If new component APIs are defined, "unsafe" lifecycles won't be called.
  // Error if any of these lifecycles are present,
  // Because they would work differently between older and newer (16.3+) versions of React.
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === 'function') {
    foundWillMountName = 'componentWillMount';
  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    foundWillMountName = 'UNSAFE_componentWillMount';
  }
  if (typeof prototype.componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'componentWillReceiveProps';
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
  }
  if (typeof prototype.componentWillUpdate === 'function') {
    foundWillUpdateName = 'componentWillUpdate';
  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
  }
  if (
    foundWillMountName !== null ||
    foundWillReceivePropsName !== null ||
    foundWillUpdateName !== null
  ) {
    var componentName = Component.displayName || Component.name;
    var newApiName =
      typeof Component.getDerivedStateFromProps === 'function'
        ? 'getDerivedStateFromProps()'
        : 'getSnapshotBeforeUpdate()';

    throw Error(
      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
        componentName +
        ' uses ' +
        newApiName +
        ' but also contains the following legacy lifecycles:' +
        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
        (foundWillReceivePropsName !== null
          ? '\n  ' + foundWillReceivePropsName
          : '') +
        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
        'https://fb.me/react-async-component-lifecycle-hooks'
    );
  }

  // React <= 16.2 does not support static getDerivedStateFromProps.
  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
  // Newer versions of React will ignore these lifecycles if gDSFP exists.
  if (typeof Component.getDerivedStateFromProps === 'function') {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }

  // React <= 16.2 does not support getSnapshotBeforeUpdate.
  // As a workaround, use cWU to invoke the new lifecycle.
  // Newer versions of React will ignore that lifecycle if gSBU exists.
  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    if (typeof prototype.componentDidUpdate !== 'function') {
      throw new Error(
        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
      );
    }

    prototype.componentWillUpdate = componentWillUpdate;

    var componentDidUpdate = prototype.componentDidUpdate;

    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
      prevProps,
      prevState,
      maybeSnapshot
    ) {
      // 16.3+ will not execute our will-update method;
      // It will pass a snapshot value to did-update though.
      // Older versions will require our polyfilled will-update value.
      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
      // Because for <= 15.x versions this might be a "prevContext" object.
      // We also can't just check "__reactInternalSnapshot",
      // Because get-snapshot might return a falsy value.
      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
      var snapshot = this.__reactInternalSnapshotFlag
        ? this.__reactInternalSnapshot
        : maybeSnapshot;

      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }

  return Component;
}




/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var config_provider_1 = __webpack_require__(5);
var icon_font_1 = __webpack_require__(278);
var icon_1 = __webpack_require__(137);
icon_1.default.createFromIconfontCN = icon_font_1.default;
exports.default = config_provider_1.default.config(icon_1.default);

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var locale = {
    momentLocale: 'zh-cn',
    Timeline: {
        expand: '展开',
        fold: '收起'
    },
    Balloon: {
        close: '关闭'
    },
    Card: {
        expand: '展开',
        fold: '收起'
    },
    Calendar: {
        today: '今天',
        now: '此刻',
        ok: '确定',
        clear: '清除',
        month: '月',
        year: '年',
        prevYear: '上一年',
        nextYear: '下一年',
        prevMonth: '上个月',
        nextMonth: '下个月',
        prevDecade: '上十年',
        nextDecade: '后十年',
        yearSelectAriaLabel: '选择年份',
        monthSelectAriaLabel: '选择月份'
    },
    DatePicker: {
        placeholder: '请选择日期',
        datetimePlaceholder: '请选择日期和时间',
        monthPlaceholder: '请选择月',
        yearPlaceholder: '请选择年',
        weekPlaceholder: '请选择周',
        now: '此刻',
        selectTime: '选择时间',
        selectDate: '选择日期',
        ok: '确定',
        clear: '清除',
        startPlaceholder: '起始日期',
        endPlaceholder: '结束日期',
        hour: '时',
        minute: '分',
        second: '秒'
    },
    Dialog: {
        close: '关闭',
        ok: '确定',
        cancel: '取消'
    },
    Drawer: {
        close: '关闭'
    },
    Message: {
        closeAriaLabel: '关闭'
    },
    Pagination: {
        prev: '上一页',
        next: '下一页',
        goTo: '到第',
        page: '页',
        go: '确定',
        total: '第{current}页，共{total}页',
        labelPrev: '上一页，当前第{current}页',
        labelNext: '下一页，当前第{current}页',
        inputAriaLabel: '请输入跳转到第几页',
        selectAriaLabel: '请选择每页显示几条',
        pageSize: '每页显示：'
    },
    Input: {
        clear: '清除'
    },
    List: {
        empty: '没有数据'
    },
    Select: {
        selectPlaceholder: '请选择',
        autoCompletePlaceholder: '请输入',
        notFoundContent: '无选项',
        maxTagPlaceholder: '已选择 {selected}/{total} 项',
        selectAll: '全选'
    },
    TreeSelect: {
        maxTagPlaceholder: '已选择 {selected}/{total} 项',
        shortMaxTagPlaceholder: '已选择 {selected} 项'
    },
    Table: {
        empty: '没有数据',
        ok: '确认',
        reset: '重置',
        asc: '升序',
        desc: '降序',
        expanded: '已展开',
        folded: '已折叠',
        filter: '筛选',
        selectAll: '全选'
    },
    TimePicker: {
        placeholder: '请选择时间',
        clear: '清除',
        hour: '时',
        minute: '分',
        second: '秒',
        ok: '确定'
    },
    Transfer: {
        items: '项',
        item: '项',
        moveAll: '移动全部',
        searchPlaceholder: '请输入',
        moveToLeft: '撤销选中元素',
        moveToRight: '提交选中元素'
    },
    Upload: {
        card: {
            cancel: '取消',
            addPhoto: '上传图片',
            download: '下载',
            delete: '删除'
        },
        drag: {
            text: '点击或者拖动文件到虚线框内上传',
            hint: '支持 docx, xls, PDF, rar, zip, PNG, JPG 等类型的文件'
        },
        upload: {
            delete: '删除'
        }
    },
    Search: {
        buttonText: '搜索'
    },
    Tag: {
        delete: '删除'
    },
    Rating: {
        description: '评分选项'
    },
    Switch: {
        on: '已打开',
        off: '已关闭'
    },
    Tab: {
        closeAriaLabel: '关闭'
    },
    Form: {
        Validate: {
            default: '%s 校验失败',
            required: '%s 是必填字段',
            format: {
                number: '%s 不是合法的数字',
                email: '%s 不是合法的 email 地址',
                url: '%s 不是合法的 URL 地址',
                tel: '%s 不是合法的电话号码'
            },
            number: {
                length: '%s 长度必须是 %s',
                min: '%s 不得小于 %s',
                max: '%s 不得大于 %s',
                minLength: '%s 字段字符长度不得少于 %s',
                maxLength: '%s 字段字符长度不得超过 %s'
            },
            string: {
                length: '%s 长度必须是 %s',
                min: '%s 不得小于 %s',
                max: '%s 不得大于 %s',
                minLength: '%s 长度不得少于 %s',
                maxLength: '%s 长度不得超过 %s'
            },
            array: {
                length: '%s 个数必须是 %s',
                minLength: '%s 个数不得少于 %s',
                maxLength: '%s 个数不得超过 %s'
            },
            pattern: '%s 数值 %s 不匹配正则 %s'
        }
    }
};
exports.default = locale;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(206);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(223);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _assign = __webpack_require__(234);

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var config_provider_1 = __webpack_require__(5);
var overlay_1 = __webpack_require__(133);
var overlay_v2_1 = __webpack_require__(273);
var gateway_1 = __webpack_require__(134);
var position_1 = __webpack_require__(135);
var popup_1 = __webpack_require__(276);
var popup_v2_1 = __webpack_require__(277);
var util_1 = __webpack_require__(4);
var Overlay = /** @class */function (_super) {
    tslib_1.__extends(Overlay, _super);
    function Overlay(props) {
        var _this = _super.call(this, props) || this;
        _this.overlayRef = null;
        _this.saveRef = _this.saveRef.bind(_this);
        return _this;
    }
    Overlay.prototype.saveRef = function (ref) {
        this.overlayRef = ref;
    };
    /**
     * 兼容 1.x API, will be removed in 2.1.0
     */
    Overlay.prototype.getContent = function () {
        if (this.overlayRef) {
            return this.overlayRef.getContent();
        }
        return null;
    };
    /**
     * 兼容 1.x API, will be removed in 2.1.0
     */
    Overlay.prototype.getContentNode = function () {
        if (this.overlayRef) {
            return this.overlayRef.getContentNode();
        }
        return null;
    };
    Overlay.prototype.render = function () {
        var _a = this.props,
            v2 = _a.v2,
            others = tslib_1.__rest(_a, ["v2"]);
        if (v2) {
            if ('needAdjust' in others) {
                util_1.log.deprecated('needAdjust', 'autoAdjust', 'Overlay v2');
                others.autoAdjust = others.needAdjust;
                delete others.needAdjust;
            }
            return react_1.default.createElement(overlay_v2_1.default, tslib_1.__assign({}, others));
        } else {
            return react_1.default.createElement(overlay_1.default, tslib_1.__assign({}, others, { ref: this.saveRef }));
        }
    };
    return Overlay;
}(react_1.default.Component);
// eslint-disable-next-line
var Popup = /** @class */function (_super) {
    tslib_1.__extends(Popup, _super);
    function Popup(props) {
        var _this = _super.call(this, props) || this;
        _this.overlay = null;
        _this.saveRef = _this.saveRef.bind(_this);
        return _this;
    }
    Popup.prototype.saveRef = function (ref) {
        if (ref) {
            this.overlay = ref.overlay;
        }
    };
    Popup.prototype.render = function () {
        var _a = this.props,
            v2 = _a.v2,
            others = tslib_1.__rest(_a, ["v2"]);
        if (v2) {
            if ('needAdjust' in others) {
                util_1.log.deprecated('needAdjust', 'needAdjust', 'Popup v2');
                others.autoAdjust = others.needAdjust;
                delete others.needAdjust;
            }
            if ('shouldUpdatePosition' in others) {
                delete others.shouldUpdatePosition;
            }
            return react_1.default.createElement(popup_v2_1.default, tslib_1.__assign({}, others));
        } else {
            return react_1.default.createElement(popup_1.default, tslib_1.__assign({}, others, { ref: this.saveRef }));
        }
    };
    return Popup;
}(react_1.default.Component);
Overlay.Gateway = gateway_1.default;
Overlay.Position = position_1.default;
Overlay.Popup = config_provider_1.default.config(Popup, {
    exportNames: ['overlay']
});
exports.default = config_provider_1.default.config(Overlay, {
    exportNames: ['getContent', 'getContentNode']
});

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var menu_1 = __webpack_require__(139);
var sub_menu_1 = __webpack_require__(140);
var selectable_item_1 = __webpack_require__(85);
var checkbox_item_1 = __webpack_require__(282);
var radio_item_1 = __webpack_require__(287);
var popup_item_1 = __webpack_require__(141);
var group_1 = __webpack_require__(288);
var divider_1 = __webpack_require__(289);
var create_1 = __webpack_require__(290);
menu_1.default.SubMenu = sub_menu_1.default;
menu_1.default.Item = selectable_item_1.default;
menu_1.default.CheckboxItem = checkbox_item_1.default;
menu_1.default.RadioItem = radio_item_1.default;
menu_1.default.PopupItem = popup_item_1.default;
menu_1.default.Group = group_1.default;
menu_1.default.Divider = divider_1.default;
menu_1.default.create = create_1.default;
/* istanbul ignore next */
var transform = function transform(props, deprecated) {
    if ('indentSize' in props) {
        deprecated('indentSize', 'inlineIndent', 'Menu');
        var indentSize = props.indentSize,
            others = tslib_1.__rest(props, ["indentSize"]);
        props = tslib_1.__assign({ inlineIndent: indentSize }, others);
    }
    if ('onDeselect' in props) {
        deprecated('onDeselect', 'onSelect', 'Menu');
        if (props.onDeselect) {
            var onDeselect_1 = props.onDeselect,
                onSelect_1 = props.onSelect,
                others = tslib_1.__rest(props, ["onDeselect", "onSelect"]);
            var newOnSelect = function newOnSelect(selectedKeys, item, extra) {
                if (!extra.select) {
                    onDeselect_1(extra.key);
                }
                if (onSelect_1) {
                    onSelect_1(selectedKeys, item, extra);
                }
            };
            props = tslib_1.__assign({ onSelect: newOnSelect }, others);
        }
    }
    return props;
};
exports.default = config_provider_1.default.config(menu_1.default, {
    transform: transform
});

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var button_1 = __webpack_require__(292);
var group_1 = __webpack_require__(293);
var WithSubButton = button_1.default;
WithSubButton.Group = group_1.default;
exports.default = config_provider_1.default.config(WithSubButton, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('shape' in props) {
            deprecated('shape', 'text | warning | ghost', 'Button');
            var shape = props.shape,
                type = props.type,
                others = tslib_1.__rest(props, ["shape", "type"]);
            var newType = type;
            if (type === 'light' || type === 'dark' || type === 'secondary' && shape === 'warning') {
                newType = 'normal';
            }
            var ghost = void 0;
            if (shape === 'ghost') {
                ghost = {
                    primary: 'dark',
                    secondary: 'dark',
                    normal: 'light',
                    dark: 'dark',
                    light: 'light'
                }[type || button_1.default.defaultProps.type];
            }
            var text = shape === 'text';
            var warning = shape === 'warning';
            return tslib_1.__assign({ type: newType, ghost: ghost, text: text, warning: warning }, others);
        }
        return props;
    }
});

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var input_1 = __webpack_require__(147);
var password_1 = __webpack_require__(300);
var textarea_1 = __webpack_require__(301);
var group_1 = __webpack_require__(149);
input_1.default.Password = config_provider_1.default.config(password_1.default, {
    exportNames: ['getInputNode', 'focus'],
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('hasLimitHint' in props) {
            deprecated('hasLimitHint', 'showLimitHint', 'Input');
            var hasLimitHint = props.hasLimitHint,
                others = tslib_1.__rest(props, ["hasLimitHint"]);
            props = tslib_1.__assign({ showLimitHint: hasLimitHint }, others);
        }
        return props;
    }
});
input_1.default.TextArea = config_provider_1.default.config(textarea_1.default, {
    exportNames: ['getInputNode', 'focus'],
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('hasLimitHint' in props) {
            deprecated('hasLimitHint', 'showLimitHint', 'Input');
            var hasLimitHint = props.hasLimitHint,
                others = tslib_1.__rest(props, ["hasLimitHint"]);
            props = tslib_1.__assign({ showLimitHint: hasLimitHint }, others);
        }
        return props;
    }
});
input_1.default.Group = group_1.default;
// 用来自动生成文档的工具底层依赖的 react-docgen，无法解析生成 HOC 的方法中存在第二个参数的情况
// 所以不能在 input.jsx／textarea.jsx 中生成 HOC
exports.default = config_provider_1.default.config(input_1.default, {
    exportNames: ['getInputNode', 'focus'],
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('hasLimitHint' in props) {
            deprecated('hasLimitHint', 'showLimitHint', 'Input');
            var hasLimitHint = props.hasLimitHint,
                others = tslib_1.__rest(props, ["hasLimitHint"]);
            props = tslib_1.__assign({ showLimitHint: hasLimitHint }, others);
        }
        return props;
    }
});

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_16__;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var animate_1 = __webpack_require__(129);
var expand_1 = __webpack_require__(266);
var overlay_animate_1 = __webpack_require__(267);
animate_1.default.Expand = expand_1.default;
animate_1.default.OverlayAnimate = overlay_animate_1.default;
exports.default = animate_1.default;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.setStickyStyle = exports.fetchDataByPath = exports.statics = void 0;
var tslib_1 = __webpack_require__(0);
var classnames_1 = __webpack_require__(3);
var blackList = ['defaultProps', 'propTypes', 'contextTypes', 'childContextTypes', 'displayName', 'getDerivedStateFromProps'];
var statics = function statics(Target, Component) {
    Object.keys(Component).forEach(function (property) {
        if (blackList.indexOf(property) === -1) {
            Target[property] = Component[property];
        }
    });
};
exports.statics = statics;
var fetchDataByPath = function fetchDataByPath(object, path) {
    if (!object || !path) {
        return false;
    }
    path = path.toString();
    var field = path.split('.');
    var val, key;
    if (field.length) {
        key = field[0];
        // lists[1].name
        if (key.indexOf('[') >= 0) {
            key = key.match(/(.*)\[(.*)\]/);
            if (key && (0, _typeof3.default)(key[1]) === 'object' && (0, _typeof3.default)(object[key[1]]) === 'object') {
                val = object[key[1]][key[2]];
            }
        } else {
            val = object[field[0]];
        }
        if (val) {
            for (var colIndex = 1; colIndex < field.length; colIndex++) {
                val = val[field[colIndex]];
                if (typeof val === 'undefined') {
                    break;
                }
            }
        }
    }
    return val;
};
exports.fetchDataByPath = fetchDataByPath;
/**
 * @param {Array} lockChildren
 * @param {String} dir 'left', 'right'
 */
var setStickyStyle = function setStickyStyle(lockChildren, flatenChildren, dir, offsetArr, prefix) {
    if (offsetArr === void 0) {
        offsetArr = [];
    }
    var len = flatenChildren.length;
    flatenChildren.forEach(function (col, index) {
        var _a;
        var isLeftLast = dir === 'left' && index === len - 1;
        var isRightFirst = dir === 'right' && index === 0;
        var style = {
            position: 'sticky'
        };
        var offset = offsetArr[index];
        if (offset > -1) {
            style[dir] = offset;
        }
        col.className = (0, classnames_1.default)(col.className, (_a = {}, _a["".concat(prefix, "table-fix-").concat(dir)] = true, _a["".concat(prefix, "table-fix-left-last")] = isLeftLast, _a["".concat(prefix, "table-fix-right-first")] = isRightFirst, _a));
        col.style = tslib_1.__assign(tslib_1.__assign({}, col.style), style);
        col.cellStyle = style;
    });
    var setOffset = function setOffset(col, index, dir, isBorder) {
        var _a;
        var style = {
            position: 'sticky'
        };
        var offset = offsetArr[index];
        if (offset > -1) {
            style[dir] = offset;
        }
        col.className = (0, classnames_1.default)(col.className, (_a = {}, _a["".concat(prefix, "table-fix-").concat(dir)] = true, _a["".concat(prefix, "table-fix-left-last")] = dir === 'left' && isBorder, _a["".concat(prefix, "table-fix-right-first")] = dir === 'right' && isBorder, _a));
        col.style = tslib_1.__assign(tslib_1.__assign({}, col.style), style);
        col.cellStyle = style;
    };
    // 查看当前元素的叶子结点数量
    var getLeafNodes = function getLeafNodes(node) {
        var nodesLen = 0;
        var arrLen = Array.isArray(node && node.children) && node.children.length || 0;
        if (arrLen > 0) {
            nodesLen = node.children.reduce(function (ret, item, idx) {
                return ret + getLeafNodes(item.children);
            }, 0);
        } else {
            nodesLen = 1;
        }
        return nodesLen;
    };
    var getPreNodes = function getPreNodes(arr, idx) {
        return arr.reduce(function (ret, item, i) {
            if (i < idx) {
                return ret + getLeafNodes(item);
            }
            return ret;
        }, 0);
    };
    // for multiple header
    // nodesLen 前序叶子结点数
    var loop = function loop(arr, i) {
        dir === 'right' && arr.reverse();
        arr.forEach(function (child, j) {
            var p = dir === 'right' ? i - getPreNodes(arr, j) : i + getPreNodes(arr, j);
            if (child.children) {
                // 合并单元格的节点
                loop(child.children, p);
                // 查询当前元素下的 前序叶子结点数 比如为n
                // const isBorder = (dir === 'right' && j === 0) || (dir === 'left' && j === (arr.length - 1));
                setOffset(child, p, dir, j === arr.length - 1);
            }
        });
        dir === 'right' && arr.reverse();
    };
    loop(lockChildren, dir === 'left' ? 0 : len - 1);
};
exports.setStickyStyle = setStickyStyle;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.getMonths = exports.getYears = exports.getLocaleData = exports.preFormatDateValue = exports.isSameYearMonth = exports.getVisibleMonth = exports.formatDateValue = exports.checkMomentObj = exports.isDisabledDate = exports.CALENDAR_MODES = exports.CALENDAR_MODE_DATE = exports.CALENDAR_MODE_MONTH = exports.CALENDAR_MODE_YEAR = exports.YEAR_TABLE_COL_COUNT = exports.YEAR_TABLE_ROW_COUNT = exports.MONTH_TABLE_COL_COUNT = exports.MONTH_TABLE_ROW_COUNT = exports.CALENDAR_TABLE_ROW_COUNT = exports.CALENDAR_TABLE_COL_COUNT = exports.DAYS_OF_WEEK = void 0;
var tslib_1 = __webpack_require__(0);
var moment_1 = __webpack_require__(16);
exports.DAYS_OF_WEEK = 7;
exports.CALENDAR_TABLE_COL_COUNT = 7;
exports.CALENDAR_TABLE_ROW_COUNT = 6;
exports.MONTH_TABLE_ROW_COUNT = 4;
exports.MONTH_TABLE_COL_COUNT = 3;
exports.YEAR_TABLE_ROW_COUNT = 4;
exports.YEAR_TABLE_COL_COUNT = 3;
exports.CALENDAR_MODE_YEAR = 'year';
exports.CALENDAR_MODE_MONTH = 'month';
exports.CALENDAR_MODE_DATE = 'date';
exports.CALENDAR_MODES = [exports.CALENDAR_MODE_DATE, exports.CALENDAR_MODE_MONTH, exports.CALENDAR_MODE_YEAR];
function isDisabledDate(date, fn, view) {
    if (typeof fn === 'function' && fn(date, view)) {
        return true;
    }
    return false;
}
exports.isDisabledDate = isDisabledDate;
function checkMomentObj(props, propName, componentName) {
    if (props[propName] && !moment_1.default.isMoment(props[propName])) {
        return new Error("Invalid prop ".concat(propName, " supplied to ").concat(componentName, ". Required a moment object"));
    }
}
exports.checkMomentObj = checkMomentObj;
function formatDateValue(value, reservedValue) {
    if (reservedValue === void 0) {
        reservedValue = null;
    }
    if (value && moment_1.default.isMoment(value)) {
        return value;
    }
    return reservedValue;
}
exports.formatDateValue = formatDateValue;
function getVisibleMonth(defaultVisibleMonth, value) {
    var getVM = defaultVisibleMonth;
    if (typeof getVM !== 'function' || !moment_1.default.isMoment(getVM())) {
        getVM = function getVM() {
            if (value) {
                return value;
            }
            return (0, moment_1.default)();
        };
    }
    return getVM();
}
exports.getVisibleMonth = getVisibleMonth;
function isSameYearMonth(dateA, dateB) {
    return dateA.month() === dateB.month() && dateA.year() === dateB.year();
}
exports.isSameYearMonth = isSameYearMonth;
function preFormatDateValue(value, format) {
    var val = typeof value === 'string' ? (0, moment_1.default)(value, format, false) : value;
    if (val && moment_1.default.isMoment(val) && val.isValid()) {
        return val;
    }
    return null;
}
exports.preFormatDateValue = preFormatDateValue;
function getLocaleData(_a, localeData) {
    var _months = _a.months,
        shortMonths = _a.shortMonths,
        _firstDayOfWeek = _a.firstDayOfWeek,
        _weekdays = _a.weekdays,
        shortWeekdays = _a.shortWeekdays,
        veryShortWeekdays = _a.veryShortWeekdays;
    return tslib_1.__assign(tslib_1.__assign({}, localeData), { monthsShort: function monthsShort() {
            return shortMonths || localeData.monthsShort();
        }, months: function months() {
            return _months || localeData.months();
        }, firstDayOfWeek: function firstDayOfWeek() {
            return _firstDayOfWeek || localeData.firstDayOfWeek();
        }, weekdays: function weekdays() {
            return _weekdays || localeData.weekdays;
        }, weekdaysShort: function weekdaysShort() {
            return shortWeekdays || localeData.weekdaysShort();
        }, weekdaysMin: function weekdaysMin() {
            return veryShortWeekdays || localeData.weekdaysMin();
        } });
}
exports.getLocaleData = getLocaleData;
/* istanbul ignore next */
function getYears(yearRange, yearRangeOffset, year) {
    var options = [];
    var _a = tslib_1.__read(yearRange, 2),
        startYear = _a[0],
        endYear = _a[1];
    if (!startYear || !endYear) {
        startYear = year - yearRangeOffset;
        endYear = year + yearRangeOffset;
    }
    for (var i = startYear; i <= endYear; i++) {
        options.push({
            label: i,
            value: i
        });
    }
    return options;
}
exports.getYears = getYears;
/* istanbul ignore next */
function getMonths(momentLocale) {
    var localeMonths = momentLocale.monthsShort();
    var options = [];
    for (var i = 0; i < 12; i++) {
        options.push({
            value: i,
            label: localeMonths[i]
        });
    }
    return options;
}
exports.getMonths = getMonths;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(42)(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 22 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),
/* 23 */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var select_1 = __webpack_require__(296);
var auto_complete_1 = __webpack_require__(304);
var option_1 = __webpack_require__(305);
var option_group_1 = __webpack_require__(306);
select_1.default.AutoComplete = config_provider_1.default.config(auto_complete_1.default, {
    componentName: 'Select'
});
select_1.default.Option = option_1.default;
select_1.default.OptionGroup = option_group_1.default;
// compatible with 0.x version
/* istanbul ignore next */
function _transform(props, deprecated) {
    var shape = props.shape,
        container = props.container,
        multiple = props.multiple,
        filterBy = props.filterBy,
        overlay = props.overlay,
        safeNode = props.safeNode,
        noFoundContent = props.noFoundContent,
        others = tslib_1.__rest(props, ["shape", "container", "multiple", "filterBy", "overlay", "safeNode", "noFoundContent"]);
    var newprops = others;
    if (shape === 'arrow-only') {
        deprecated('shape=arrow-only', 'hasBorder=false', 'Select');
        newprops.hasBorder = false;
    }
    if (container) {
        deprecated('container', 'popupContainer', 'Select');
        newprops.popupContainer = container;
    }
    if (multiple) {
        deprecated('multiple', 'mode=multiple', 'Select');
        newprops.mode = 'multiple';
    }
    if (filterBy) {
        deprecated('filterBy', 'filter', 'Select');
        newprops.filter = filterBy;
    }
    if (overlay) {
        deprecated('overlay', 'popupContent', 'Select');
        newprops.popupContent = overlay;
        newprops.autoWidth = false;
    }
    if (noFoundContent) {
        deprecated('noFoundContent', 'notFoundContent', 'Select');
        newprops.notFoundContent = noFoundContent;
    }
    if (safeNode) {
        deprecated('safeNode', 'popupProps={safeNode}', 'Select');
        newprops.popupProps = {
            safeNode: safeNode
        };
    }
    return newprops;
}
// compatible with 0.x version: Select.Combobox
select_1.default.Combobox = config_provider_1.default.config(select_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        deprecated('Select.Combobox', '<Select showSearch={true}/>', 'Select');
        var newprops = _transform(props, deprecated);
        if (props.onInputUpdate) {
            newprops.onSearch = props.onInputUpdate;
            newprops.showSearch = true;
        }
        return newprops;
    }
});
exports.default = config_provider_1.default.config(select_1.default, {
    transform: _transform,
    exportNames: ['focusInput', 'handleSearchClear']
});

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.onTimeKeydown = exports.onDateKeydown = exports.extend = exports.getDateTimeFormat = exports.checkDateValue = exports.formatDateValue = exports.resetValueTime = exports.isFunction = exports.DEFAULT_TIME_FORMAT = exports.PANEL = void 0;
var moment_1 = __webpack_require__(16);
var util_1 = __webpack_require__(4);
exports.PANEL = {
    TIME: 'time-panel',
    DATE: 'date-panel'
};
exports.DEFAULT_TIME_FORMAT = 'HH:mm:ss';
function isFunction(obj) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
}
exports.isFunction = isFunction;
/**
 * 将 source 的 time 替换为 target 的 time
 * @param {Object} source 输入值
 * @param {Object} target 目标值
 */
function resetValueTime(source, target) {
    if (!moment_1.default.isMoment(source) || !moment_1.default.isMoment(target)) {
        return source;
    }
    return source.clone().hour(target.hour()).minute(target.minute()).second(target.second());
}
exports.resetValueTime = resetValueTime;
function formatDateValue(value, format) {
    var val = typeof value === 'string' ? (0, moment_1.default)(value, format, false) : value;
    if (val && moment_1.default.isMoment(val) && val.isValid()) {
        return val;
    }
    return null;
}
exports.formatDateValue = formatDateValue;
function checkDateValue(props, propName, componentName) {
    // 支持传入 moment 对象或字符串，字符串不检测是否为日期字符串
    if (props[propName] && !moment_1.default.isMoment(props[propName]) && typeof props[propName] !== 'string') {
        return new Error("Invalid prop ".concat(propName, " supplied to ").concat(componentName, ". Required a moment object or format date string!"));
    }
}
exports.checkDateValue = checkDateValue;
function getDateTimeFormat(format, showTime, type) {
    if (!format && type) {
        format = {
            date: 'YYYY-MM-DD',
            month: 'YYYY-MM',
            year: 'YYYY',
            time: ''
        }[type];
    }
    var timeFormat = showTime ? showTime.format || exports.DEFAULT_TIME_FORMAT : '';
    var dateTimeFormat = timeFormat ? "".concat(format, " ").concat(timeFormat) : format;
    return {
        format: format,
        timeFormat: timeFormat,
        dateTimeFormat: dateTimeFormat
    };
}
exports.getDateTimeFormat = getDateTimeFormat;
function extend(source, target) {
    for (var key in source) {
        if (source.hasOwnProperty(key)) {
            target[key] = source[key];
        }
    }
    return target;
}
exports.extend = extend;
/**
 * 监听键盘事件，操作日期字符串
 * @param {KeyboardEvent} e 事件对象
 * @param {Object} param1
 * @param {String} type 类型 year month day
 */
function onDateKeydown(e, _a, type) {
    var format = _a.format,
        dateInputStr = _a.dateInputStr,
        value = _a.value;
    if ([util_1.KEYCODE.UP, util_1.KEYCODE.DOWN, util_1.KEYCODE.PAGE_UP, util_1.KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1) {
        return;
    }
    if (e.altKey && [util_1.KEYCODE.PAGE_UP, util_1.KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1 || e.controlKey || e.shiftKey) {
        return;
    }
    var date = (0, moment_1.default)(dateInputStr, format, true);
    if (date.isValid()) {
        var stepUnit = e.altKey ? 'year' : 'month';
        switch (e.keyCode) {
            case util_1.KEYCODE.UP:
                date.subtract(1, type);
                break;
            case util_1.KEYCODE.DOWN:
                date.add(1, type);
                break;
            case util_1.KEYCODE.PAGE_UP:
                date.subtract(1, stepUnit);
                break;
            case util_1.KEYCODE.PAGE_DOWN:
                date.add(1, stepUnit);
                break;
        }
    } else if (value) {
        date = value.clone();
    } else {
        date = (0, moment_1.default)();
    }
    e.preventDefault();
    return date.format(format);
}
exports.onDateKeydown = onDateKeydown;
/**
 * 监听键盘事件，操作时间
 * @param {KeyboardEvent} e
 * @param {Object} param1
 * @param {String} type second hour minute
 */
function onTimeKeydown(e, _a, type) {
    var format = _a.format,
        timeInputStr = _a.timeInputStr,
        steps = _a.steps,
        value = _a.value;
    if ([util_1.KEYCODE.UP, util_1.KEYCODE.DOWN, util_1.KEYCODE.PAGE_UP, util_1.KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1) return;
    if (e.altKey && [util_1.KEYCODE.PAGE_UP, util_1.KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1 || e.controlKey || e.shiftKey) return;
    var time = (0, moment_1.default)(timeInputStr, format, true);
    if (time.isValid()) {
        var stepUnit = e.altKey ? 'hour' : 'minute';
        switch (e.keyCode) {
            case util_1.KEYCODE.UP:
                time.subtract(steps[type], type);
                break;
            case util_1.KEYCODE.DOWN:
                time.add(steps[type], type);
                break;
            case util_1.KEYCODE.PAGE_UP:
                time.subtract(steps[stepUnit], stepUnit);
                break;
            case util_1.KEYCODE.PAGE_DOWN:
                time.add(steps[stepUnit], stepUnit);
                break;
        }
    } else if (value) {
        time = value.clone();
    } else {
        time = (0, moment_1.default)().hours(0).minutes(0).seconds(0);
    }
    e.preventDefault();
    return time.format(format);
}
exports.onTimeKeydown = onTimeKeydown;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(27);
var createDesc = __webpack_require__(52);
module.exports = __webpack_require__(21) ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(51);
var IE8_DOM_DEFINE = __webpack_require__(113);
var toPrimitive = __webpack_require__(71);
var dP = Object.defineProperty;

exports.f = __webpack_require__(21) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(118);
var defined = __webpack_require__(69);
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(74)('wks');
var uid = __webpack_require__(54);
var Symbol = __webpack_require__(20).Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.values = exports.isReactFragment = exports.isClassComponent = exports.isFunctionComponent = exports.deepMerge = exports.isNil = exports.pickAttrsWith = exports.pickProps = exports.pickOthers = exports.each = exports.shallowEqual = exports.isPlainObject = exports.isPromise = exports.isArrayLike = exports.typeOf = void 0;
var tslib_1 = __webpack_require__(0);
var React = __webpack_require__(1);
/**
 * 获取对象的类型
 * @example
 * typeOf([]) === 'Array'
 * typeOf() === 'Undefined'
 * typeOf(1) === 'Number'
 */
function typeOf(obj) {
    return Object.prototype.toString.call(obj).replace(/\[object\s|]/g, '');
}
exports.typeOf = typeOf;
/**
 * 判断是否是数组或类数组对象
 * @example
 * isArrayLike([]) === true
 * isArrayLike(arguments) === true
 * isArrayLike(this.props.children) === true
 */
function isArrayLike(obj) {
    if (!obj || (typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) !== 'object') {
        return false;
    }
    var length = !!obj && 'length' in obj && obj.length;
    var type = typeOf(obj);
    return type === 'Array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
}
exports.isArrayLike = isArrayLike;
/**
 * 判断对象是否是一个 promise，即是否可以用.then
 */
function isPromise(obj) {
    return !!obj && ((typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
}
exports.isPromise = isPromise;
/**
 * 是否是一个纯净的对象
 * @see https://github.com/jonschlinkert/is-plain-object
 */
function isPlainObject(obj) {
    if (typeOf(obj) !== 'Object') {
        return false;
    }
    var ctor = obj.constructor;
    if (typeof ctor !== 'function') {
        return false;
    }
    var prot = ctor.prototype;
    if (typeOf(prot) !== 'Object') {
        return false;
    }
    if (!prot.hasOwnProperty('isPrototypeOf')) {
        return false;
    }
    return true;
}
exports.isPlainObject = isPlainObject;
/**
 * 对象浅比较
 * @example
 * object.shallowEqual(\{a: 100\}, \{a: 100\}); // true
 */
function shallowEqual(objA, objB, compare) {
    if (objA === objB) {
        return true;
    }
    // 其中一个不是 object，则不相等
    if (!objA || !objB || (typeof objA === "undefined" ? "undefined" : (0, _typeof3.default)(objA)) + (typeof objB === "undefined" ? "undefined" : (0, _typeof3.default)(objB)) !== 'objectobject') {
        return false;
    }
    var keyA = Object.keys(objA);
    var keyB = Object.keys(objB);
    var len = keyA.length;
    // key 数量不一致则不相等
    if (len !== keyB.length) {
        return false;
    }
    var hasCallback = typeof compare === 'function';
    for (var i = 0; i < len; i++) {
        var key = keyA[i];
        if (!Object.prototype.hasOwnProperty.call(objB, key)) {
            return false;
        }
        var valA = objA[key];
        var valB = objB[key];
        var ret = hasCallback ? compare(valA, valB, key) : void 0;
        if (ret === false || ret === void 0 && valA !== valB) {
            return false;
        }
    }
    return true;
}
exports.shallowEqual = shallowEqual;
/**
 * 遍历对象或数组，或者类数组，例如 React 中的 children 对象、arguments 等
 * @param obj - 目标对象或类数组
 * @param callback - fn(n, i) or fn(val, key)
 * @param direction - 是否倒序遍历，只对数组有效，传入 -1 则是倒序
 *
 * @example
 * // 遍历数组
 * object.each([100, 200, 300], (n, i) =\> console.log(n, i));
 * // 遍历json对象
 * object.each(\{a: 100, b: 200\}, (value, key) =\> console.log(key, value));
 * // 遍历React子节点
 * object.each(this.props.children, (child, index) =\> console.log(child));
 * // 遍历arguments
 * object.each(arguments, (arg, i) =\> console.log(arg));
 */
function each(obj, callback, direction) {
    var reversed = direction === -1;
    if (isArrayLike(obj)) {
        var length_1 = obj.length;
        for (var i = reversed ? length_1 - 1 : 0; i < length_1 && i >= 0; reversed ? i-- : i++) {
            var shouldContinue = callback.call(obj[i], obj[i], i);
            if (shouldContinue === false) {
                break;
            }
        }
    } else {
        for (var key in obj) {
            /* istanbul ignore else */
            if (obj.hasOwnProperty(key)) {
                var shouldContinue = callback.call(obj[key], obj[key], key);
                if (shouldContinue === false) {
                    break;
                }
            }
        }
    }
    return obj;
}
exports.each = each;
// @private 判断 key 是否在数组或对象中
var _isInObj = function _isInObj(key, obj, isArray) {
    return isArray ? obj.indexOf(key) > -1 : key in obj;
};
/**
 * 过滤出其它属性
 * @param holdProps - 过滤的参照对象，最终的结果只保留不在参照对象中的 key
 * @param props - 被过滤的对象
 *
 * @example
 * object.pickOthers(FooComponent.propTypes, this.props);
 * object.pickOthers(['className', 'onChange'], this.props);
 */
function pickOthers(holdProps, props) {
    var others = {};
    var isArray = typeOf(holdProps) === 'Array';
    for (var key in props) {
        if (!_isInObj(key, holdProps, isArray)) {
            others[key] = props[key];
        }
    }
    return others;
}
exports.pickOthers = pickOthers;
/**
 * 过滤出需要的属性
 * @param holdProps - 过滤的参照对象，最终的结果只保留在参照对象中的 key
 * @param props - 被过滤的对象
 *
 * @example
 * object.pickProps(FooComponent.propTypes, this.props);
 * object.pickProps(['className', 'onChange'], this.props);
 */
function pickProps(holdProps, props) {
    var others = {};
    var isArray = typeOf(holdProps) === 'Array';
    for (var key in props) {
        if (_isInObj(key, holdProps, isArray)) {
            others[key] = props[key];
        }
    }
    return others;
}
exports.pickProps = pickProps;
/**
 * 过滤出带 prefix 的属性
 * @param holdProps - 过滤的参照对象，最终的结果只保留不在参照对象中的 key
 * @param prefix - 包含的字符串
 *
 * @example
 * object.pickAttrsWith(FooComponent.propTypes, 'data-');
 */
function pickAttrsWith(holdProps, prefix) {
    var others = {};
    for (var key in holdProps) {
        if (key.match(prefix)) {
            others[key] = holdProps[key];
        }
    }
    return others;
}
exports.pickAttrsWith = pickAttrsWith;
/**
 * Checks if value is `null` or `undefined`.
 */
function isNil(value) {
    // It will returns `true` only if `null` or `undefined` compare with `null`
    // with loose equaliy
    return value == null; // eslint-disable-line eqeqeq
}
exports.isNil = isNil;
/**
 * Deep merge two objects.
 * @see https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge?page=1&tab=votes#tab-top
 */
function deepMerge(target) {
    var _a, _b;
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    if (!sources.length) return target;
    var source = sources.shift();
    if (!isPlainObject(target)) {
        target = {};
    }
    if (isPlainObject(target) && isPlainObject(source)) {
        for (var key in source) {
            // 如果是 object 进行深拷贝
            if (isPlainObject(source[key]) && !React.isValidElement(source[key])) {
                if (!target[key]) (0, _extends3.default)(target, (_a = {}, _a[key] = {}, _a));
                // fix {a: 'te'}, {a:{b:3}}
                if (!isPlainObject(target[key])) {
                    target[key] = source[key];
                }
                deepMerge(target[key], source[key]);
                // string/number/function/react node 等直接复制
            } else {
                (0, _extends3.default)(target, (_b = {}, _b[key] = source[key], _b));
            }
        }
    }
    return deepMerge.apply(void 0, tslib_1.__spreadArray([target], tslib_1.__read(sources), false));
}
exports.deepMerge = deepMerge;
/**
 * 组件是否为 Fucntion Component
 * @param component - 传入的组件
 */
function isFunctionComponent(component) {
    return typeOf(component) === 'Function' && component.prototype && component.prototype.isReactComponent === undefined;
}
exports.isFunctionComponent = isFunctionComponent;
/**
 * 组件是否为 Class Component
 * @param component - 传入的组件
 */
function isClassComponent(component) {
    return typeOf(component) === 'Function' && component.prototype && component.prototype.isReactComponent !== undefined;
}
exports.isClassComponent = isClassComponent;
/**
 * 判断是否为 ReactFragment
 * @param component - 传入的组件
 */
function isReactFragment(component) {
    if (isNil(component)) {
        return false;
    }
    if (component.type) {
        return component.type === React.Fragment;
    }
    return component === React.Fragment;
}
exports.isReactFragment = isReactFragment;
/**
 * Creates an array of the own enumerable string keyed property values of object.
 * @example
 * // returns [1, 2]
 * values(\{a: 1, b: 2\})
 */
function values(obj) {
    if (Object.values) {
        return Object.values(obj);
    }
    var vals = [];
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
            vals.push(obj[key]);
        }
    }
    return vals;
}
exports.values = values;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var util_1 = __webpack_require__(4);
var bindCtx = util_1.func.bindCtx;
var pickOthers = util_1.obj.pickOthers;
var Item = /** @class */function (_super) {
    tslib_1.__extends(Item, _super);
    function Item(props) {
        var _this = _super.call(this, props) || this;
        bindCtx(_this, ['handleClick', 'handleKeyDown']);
        return _this;
    }
    Item.prototype.componentDidMount = function () {
        this.itemNode = (0, react_dom_1.findDOMNode)(this);
        var _a = this.props,
            parentMode = _a.parentMode,
            root = _a.root,
            menu = _a.menu;
        if (menu) {
            this.menuNode = (0, react_dom_1.findDOMNode)(menu);
        } else if (parentMode === 'popup') {
            this.menuNode = this.itemNode.parentNode;
        } else {
            this.menuNode = (0, react_dom_1.findDOMNode)(root);
            var _b = root.props,
                prefix = _b.prefix,
                header = _b.header,
                footer = _b.footer;
            if (header || footer) {
                this.menuNode = this.menuNode.querySelector(".".concat(prefix, "menu-content"));
            }
        }
        this.setFocus();
    };
    Item.prototype.componentDidUpdate = function () {
        var root = this.props.root;
        if (root.props.focusable && root.state.focusedKey !== this.lastFocusedKey) {
            this.setFocus();
        }
    };
    Item.prototype.focusable = function () {
        var _a = this.props,
            root = _a.root,
            type = _a.type,
            disabled = _a.disabled;
        var focusable = root.props.focusable;
        return focusable && (type === 'submenu' || !disabled);
    };
    Item.prototype.getFocused = function () {
        var _a = this.props,
            _key = _a._key,
            root = _a.root;
        var focusedKey = root.state.focusedKey;
        return focusedKey === _key;
    };
    Item.prototype.setFocus = function () {
        var focused = this.getFocused();
        this.lastFocusedKey = this.props.root.state.focusedKey;
        if (focused) {
            if (this.focusable()) {
                this.itemNode.focus({ preventScroll: true });
            }
            if (this.menuNode && this.menuNode.scrollHeight > this.menuNode.clientHeight) {
                var scrollBottom = this.menuNode.clientHeight + this.menuNode.scrollTop;
                var itemBottom = this.itemNode.offsetTop + this.itemNode.offsetHeight;
                if (itemBottom > scrollBottom) {
                    this.menuNode.scrollTop = itemBottom - this.menuNode.clientHeight;
                } else if (this.itemNode.offsetTop < this.menuNode.scrollTop) {
                    this.menuNode.scrollTop = this.itemNode.offsetTop;
                }
            }
        }
    };
    Item.prototype.handleClick = function (e) {
        e.stopPropagation();
        var _a = this.props,
            _key = _a._key,
            root = _a.root,
            disabled = _a.disabled;
        if (!disabled) {
            root.handleItemClick(_key, this, e);
            this.props.onClick && this.props.onClick(e);
        } else {
            e.preventDefault();
        }
    };
    Item.prototype.handleKeyDown = function (e) {
        var _a = this.props,
            _key = _a._key,
            root = _a.root,
            type = _a.type;
        if (this.focusable()) {
            root.handleItemKeyDown(_key, type, this, e);
            switch (e.keyCode) {
                case util_1.KEYCODE.ENTER:
                    {
                        if (!(type === 'submenu')) {
                            this.handleClick(e);
                        }
                        break;
                    }
            }
        }
        this.props.onKeyDown && this.props.onKeyDown(e);
    };
    Item.prototype.getTitle = function (children) {
        if (typeof children === 'string') {
            return children;
        }
        return;
    };
    Item.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            inlineLevel = _c.inlineLevel,
            root = _c.root,
            replaceClassName = _c.replaceClassName,
            groupIndent = _c.groupIndent,
            component = _c.component,
            disabled = _c.disabled,
            className = _c.className,
            children = _c.children,
            needIndent = _c.needIndent,
            parentMode = _c.parentMode,
            _key = _c._key;
        var others = pickOthers(Object.keys(Item.propTypes), this.props);
        var _d = root.props,
            prefix = _d.prefix,
            focusable = _d.focusable,
            inlineIndent = _d.inlineIndent,
            itemClassName = _d.itemClassName,
            rtl = _d.rtl;
        var focused = this.getFocused();
        var newClassName = replaceClassName ? className : (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "menu-item")] = true, _a["".concat(prefix, "disabled")] = disabled, _a["".concat(prefix, "focused")] = !focusable && focused, _a[itemClassName] = !!itemClassName, _a[className] = !!className, _a));
        if (disabled) {
            others['aria-disabled'] = true;
            others['aria-hidden'] = true;
        }
        others.tabIndex = root.state.tabbableKey === _key ? '0' : '-1';
        if (parentMode === 'inline' && inlineLevel > 1 && inlineIndent > 0 && needIndent) {
            var paddingProp = rtl ? 'paddingRight' : 'paddingLeft';
            others.style = tslib_1.__assign(tslib_1.__assign({}, others.style || {}), (_b = {}, _b[paddingProp] = "".concat(inlineLevel * inlineIndent - (groupIndent || 0) * 0.4 * inlineIndent, "px"), _b));
        }
        var TagName = component;
        var role = 'menuitem';
        if ('selectMode' in root.props) {
            role = 'option';
        }
        return react_1.default.createElement(TagName, tslib_1.__assign({ role: role, title: this.getTitle(children) }, others, { className: newClassName, onClick: this.handleClick, onKeyDown: this.handleKeyDown }), react_1.default.createElement("div", { className: "".concat(prefix, "menu-item-inner") }, children));
    };
    Item.propTypes = {
        _key: prop_types_1.default.string,
        level: prop_types_1.default.number,
        inlineLevel: prop_types_1.default.number,
        groupIndent: prop_types_1.default.number,
        root: prop_types_1.default.object,
        menu: prop_types_1.default.any,
        parent: prop_types_1.default.object,
        parentMode: prop_types_1.default.oneOf(['inline', 'popup']),
        type: prop_types_1.default.oneOf(['submenu', 'item']),
        component: prop_types_1.default.string,
        disabled: prop_types_1.default.bool,
        className: prop_types_1.default.string,
        onClick: prop_types_1.default.func,
        onKeyDown: prop_types_1.default.func,
        needIndent: prop_types_1.default.bool,
        replaceClassName: prop_types_1.default.bool
    };
    Item.defaultProps = {
        component: 'li',
        groupIndent: 0,
        replaceClassName: false,
        needIndent: true
    };
    return Item;
}(react_1.Component);
exports.default = Item;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var utils_1 = __webpack_require__(19);
var calendar_1 = __webpack_require__(294);
var range_calendar_1 = __webpack_require__(157);
/* istanbul ignore next */
var transform = function transform(props, deprecated) {
    var type = props.type,
        onChange = props.onChange,
        base = props.base,
        disabledMonth = props.disabledMonth,
        disabledYear = props.disabledYear,
        others = tslib_1.__rest(props, ["type", "onChange", "base", "disabledMonth", "disabledYear"]);
    var newProps = others;
    if ('type' in props) {
        deprecated('type', 'shape', 'Calendar');
        newProps.shape = type;
        if ('shape' in props) {
            newProps.shape = props.shape;
        }
    }
    if ('base' in props) {
        deprecated('base', 'defaultVisibleMonth', 'Calendar');
        var newDefaultVisibleMonth = function newDefaultVisibleMonth() {
            (0, utils_1.preFormatDateValue)(base, 'YYYY-MM-DD');
        };
        if ('defaultVisibleMonth' in props) {
            newDefaultVisibleMonth = props.defaultVisibleMonth;
        }
        newProps.defaultVisibleMonth = newDefaultVisibleMonth;
    }
    if ('onChange' in props && typeof onChange === 'function') {
        deprecated('onChange', 'onSelect', 'Calendar');
        var newOnSelect = function newOnSelect(date) {
            onChange({ mode: others.mode, value: date });
            if ('onSelect' in props) {
                props.onSelect(date);
            }
        };
        newProps.onSelect = newOnSelect;
    }
    if ('disabledMonth' in props && typeof disabledMonth === 'function') {
        deprecated('disabledMonth', 'disabledDate', 'Calendar');
    }
    if ('disabledYear' in props && typeof disabledYear === 'function') {
        deprecated('disabledYear', 'disabledDate', 'Calendar');
    }
    if ('yearCellRender' in props && typeof yearCellRender === 'function') {
        deprecated('yearCellRender', 'monthCellRender/dateCellRender', 'Calendar');
    }
    if ('language' in props) {
        deprecated('language', 'moment.locale', 'Calendar');
    }
    return newProps;
};
calendar_1.default.RangeCalendar = range_calendar_1.default;
exports.default = config_provider_1.default.config(calendar_1.default, {
    transform: transform
});

/***/ }),
/* 33 */
/***/ (function(module, exports) {

function _typeof(o) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(o);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(23);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.format = format;
exports.asyncMap = asyncMap;
exports.asyncMapPromise = asyncMapPromise;
exports.complementError = complementError;
exports.processErrorResults = processErrorResults;

var _regenerator = _interopRequireDefault(__webpack_require__(94));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(95));

var formatRegExp = /%[sdj%]/g;

function format() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var i = 1;
  var f = args[0];
  var len = args.length;

  if (typeof f === 'function') {
    return f(args.slice(1));
  }

  if (typeof f === 'string') {
    var str = String(f).replace(formatRegExp, function (x) {
      if (x === '%%') {
        return '%';
      }

      if (i >= len) {
        return x;
      }

      switch (x) {
        case '%s':
          return String(args[i++]);

        case '%d':
          return Number(args[i++]);

        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }

        default:
          return x;
      }
    });
    return str;
  }

  return f;
}

function asyncSerialArray(arr, func, callback) {
  var index = 0;
  var arrLength = arr.length;

  function next(errors) {
    if (errors && errors.length) {
      callback(errors);
      return;
    }

    var original = index;
    index = index + 1;

    if (original < arrLength) {
      func(arr[original], next);
    } else {
      return callback([]);
    }
  }

  next([]);
}
/**
 * 平铺规则
 * @param  {object} objArr [description]
 * @return {Array}        [description]
 */


function flattenObjArr(objArr) {
  var ret = [];
  Object.keys(objArr).forEach(function (k) {
    Object.keys(objArr[k]).forEach(function (r) {
      ret.push(objArr[k][r]);
    });
  });
  return ret;
}
/**
 * 异步调用
 * @param  {map}   objArr   校验规则对象列表
 * @param  {object}   option   配置项
 * @param  {Function} func     每个校验规则
 * @param  {Function} callback 全部完成后的执行
 */


function asyncMap(objArr, option, func, callback) {
  // 发现第一个错误即返回
  if (option.first) {
    var flattenArr = flattenObjArr(objArr);
    return asyncSerialArray(flattenArr, func, callback);
  }

  var objArrKeys = Object.keys(objArr);
  var objArrLength = objArrKeys.length;
  var total = 0;
  var results = [];

  var next = function next(errors) {
    results.push(errors);
    total++;

    if (total === objArrLength) {
      return callback(results);
    }
  };

  objArrKeys.forEach(function (key) {
    var arr = objArr[key];
    asyncSerialArray(arr, func, next);
  });
}

function resolveErrorPromiseInSeries(_x, _x2) {
  return _resolveErrorPromiseInSeries.apply(this, arguments);
}

function _resolveErrorPromiseInSeries() {
  _resolveErrorPromiseInSeries = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(arr, func) {
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", arr.reduce( /*#__PURE__*/function () {
              var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(prevPromise, next) {
                var errors;
                return _regenerator.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return prevPromise;

                      case 3:
                        errors = _context.sent;
                        _context.next = 9;
                        break;

                      case 6:
                        _context.prev = 6;
                        _context.t0 = _context["catch"](0);
                        errors = _context.t0;

                      case 9:
                        if (!(errors && errors.length)) {
                          _context.next = 11;
                          break;
                        }

                        return _context.abrupt("return", errors);

                      case 11:
                        return _context.abrupt("return", func(next));

                      case 12:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[0, 6]]);
              }));

              return function (_x6, _x7) {
                return _ref.apply(this, arguments);
              };
            }(), Promise.resolve()));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _resolveErrorPromiseInSeries.apply(this, arguments);
}

function asyncMapPromise(_x3, _x4, _x5) {
  return _asyncMapPromise.apply(this, arguments);
}

function _asyncMapPromise() {
  _asyncMapPromise = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(objArr, option, func) {
    var flatObjArr, objArrValues;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!option.first) {
              _context3.next = 3;
              break;
            }

            flatObjArr = flattenObjArr(objArr);
            return _context3.abrupt("return", resolveErrorPromiseInSeries(flatObjArr, func));

          case 3:
            objArrValues = Object.values(objArr);
            return _context3.abrupt("return", Promise.all(objArrValues.map(function (val) {
              return resolveErrorPromiseInSeries(val, func);
            })));

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _asyncMapPromise.apply(this, arguments);
}

function complementError(rule) {
  return function (oe) {
    if (oe && oe.message) {
      oe.field = rule.field;
      return oe;
    }

    return {
      message: oe,
      field: rule.field
    };
  };
}
/**
 *
 * @param {Array} results errors from running validation
 * @returns {Object} { errors: Array, fields: Object }
 */


function processErrorResults() {
  var results = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var errors = [];
  var fields = {};

  function add(e) {
    if (Array.isArray(e)) {
      errors = errors.concat(e);
    } else {
      errors.push(e);
    }
  }

  for (var i = 0; i < results.length; i++) {
    add(results[i]);
  }

  if (!errors.length) {
    errors = null;
    fields = null;
  } else {
    for (var _i = 0; _i < errors.length; _i++) {
      var field = errors[_i].field;

      if (field) {
        fields[field] = fields[field] || [];
        fields[field].push(errors[_i]);
      }
    }
  }

  return {
    errors: errors,
    fields: fields
  };
}

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.getDragging = exports.isEqual = exports.getPrecision = exports.getPercent = exports.inRange = void 0;
function inRange(value, range, min) {
    if (!Array.isArray(range)) {
        range = [min, range];
    }
    return value >= range[0] && value <= range[1];
}
exports.inRange = inRange;
function getPercent(min, max, value) {
    return (value - min) * 100 / (max - min);
}
exports.getPercent = getPercent;
function getPrecision(step) {
    var precision = 0;
    var stepString = step.toString();
    if (stepString.indexOf('.') !== -1) {
        precision = stepString.length - stepString.indexOf('.') - 1;
    }
    return precision;
}
exports.getPrecision = getPrecision;
function isEqual(left, right) {
    if (Array.isArray(left)) {
        return left[0] === right[0] && left[1] === right[1];
    } else {
        return left === right;
    }
}
exports.isEqual = isEqual;
function getDragging(current, preValue) {
    var dragging = 'upper';
    if (current > preValue[1]) {
        dragging = 'upper';
    } else if (current < preValue[0]) {
        dragging = 'lower';
    } else {
        var mid = (preValue[0] + preValue[1]) / 2;
        dragging = current < mid ? 'lower' : 'upper';
    }
    return dragging;
}
exports.getDragging = getDragging;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.errorCode = exports.previewFile = exports.removeFileItem = exports.getFileItem = exports.fileToObject = exports.uid = void 0;
var now = +new Date();
/**
 * 生成唯一的id
 * @return {String} uid
 */
function uid() {
    return (now++).toString(36);
}
exports.uid = uid;
function fileToObject(file) {
    if (!file.uid) {
        file.uid = uid();
    }
    return {
        lastModified: file.lastModified,
        lastModifiedDate: file.lastModifiedDate,
        name: file.filename || file.name,
        size: file.size,
        type: file.type,
        uid: file.uid,
        error: file.error,
        percent: 0,
        originFileObj: file
    };
}
exports.fileToObject = fileToObject;
function getFileItem(file, fileList) {
    var matchKey = file.uid !== undefined ? 'uid' : 'name';
    return fileList.filter(function (item) {
        return item[matchKey] === file[matchKey];
    })[0];
}
exports.getFileItem = getFileItem;
function removeFileItem(file, fileList) {
    var matchKey = file.uid !== undefined ? 'uid' : 'name';
    var removed = fileList.filter(function (item) {
        return item[matchKey] !== file[matchKey];
    });
    if (removed.length === fileList.length) {
        return null;
    }
    return removed;
}
exports.removeFileItem = removeFileItem;
// https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
function previewFile(file, callback) {
    var reader = new FileReader();
    reader.onloadend = function () {
        return callback(reader.result);
    };
    reader.readAsDataURL(file);
}
exports.previewFile = previewFile;
exports.errorCode = {
    EXCEED_LIMIT: 'EXCEED_LIMIT',
    BEFOREUPLOAD_REJECT: 'BEFOREUPLOAD_REJECT',
    RESPONSE_FAIL: 'RESPONSE_FAIL'
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.isValueChanged = exports.fmtValue = exports.mode2unit = exports.switchInputType = exports.setTime = void 0;
var util_1 = __webpack_require__(4);
var constant_1 = __webpack_require__(38);
function setTime(targetVal, sourceVal) {
    if (sourceVal && targetVal) {
        return targetVal.hour(sourceVal.hour()).minute(sourceVal.minute()).second(sourceVal.second()).millisecond(sourceVal.millisecond());
    }
    return targetVal;
}
exports.setTime = setTime;
function switchInputType(inputType) {
    var BEGIN = constant_1.DATE_INPUT_TYPE.BEGIN,
        END = constant_1.DATE_INPUT_TYPE.END;
    return inputType === BEGIN ? END : BEGIN;
}
exports.switchInputType = switchInputType;
function mode2unit(mode) {
    return mode === 'date' ? 'day' : mode;
}
exports.mode2unit = mode2unit;
/**
 * 获取输入框值
 * @param {*} value 日期值
 * @param {string | funtion} format 日期格式
 * @returns {string | string[]}
 */
function fmtValue(value, fmt) {
    var formater = function formater(v, idx) {
        var _fmt = fmt;
        if (Array.isArray(fmt)) {
            _fmt = fmt[idx];
        }
        return v ? typeof _fmt === 'function' ? _fmt(v) : v.format(_fmt) : '';
    };
    return Array.isArray(value) ? value.map(function (v, idx) {
        return formater(v, idx);
    }) : formater(value);
}
exports.fmtValue = fmtValue;
/**
 * 判断值是否改变
 * @param {dayjs.ConfigType}} newValue
 * @param {dayjs.ConfigType} oldValue
 * @returns {boolean}
 */
function isValueChanged(newValue, oldValue) {
    return Array.isArray(newValue) ? isValueChanged(newValue[0], oldValue && oldValue[0]) || isValueChanged(newValue[1], oldValue && oldValue[1]) : newValue !== oldValue && !(0, util_1.datejs)(newValue).isSame(oldValue);
}
exports.isValueChanged = isValueChanged;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.DATE_PICKER_MODE = exports.DATE_INPUT_TYPE = exports.DATE_PICKER_TYPE = void 0;
exports.DATE_PICKER_TYPE = {
    DATE: 'date',
    RANGE: 'range'
};
exports.DATE_INPUT_TYPE = {
    BEGIN: 0,
    END: 1
};
exports.DATE_PICKER_MODE = {
    DATE: 'date',
    MONTH: 'month',
    WEEK: 'week',
    QUARTER: 'quarter',
    YEAR: 'year'
};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.error = void 0;
var PT = __webpack_require__(2);
var constant_1 = __webpack_require__(38);
var util_1 = __webpack_require__(4);
var error = function error(propName, ComponentName) {
    return new Error("Invalid prop ".concat(propName, " supplied to ").concat(ComponentName, ". Validation failed."));
};
exports.error = error;
function checkType(type) {
    return function (props, propName, componentName) {
        var value = props[propName];
        if (value) {
            if (!Array.isArray(value)) {
                value = [value];
            }
            if (!Array.isArray(type)) {
                type = [type];
            }
            if (!value.every(function (v) {
                return type.includes(typeof v === "undefined" ? "undefined" : (0, _typeof3.default)(v));
            })) {
                throw (0, exports.error)(propName, componentName);
            }
        }
    };
}
var SharedPT = {
    date: function date(props, propName, componentName) {
        if (propName in props && !(0, util_1.datejs)(props.propName).isValid()) {
            throw (0, exports.error)(propName, componentName);
        }
    },
    value: function value(props, propName, componentName) {
        if (props[propName]) {
            var value = props[propName];
            if (props.type === constant_1.DATE_PICKER_TYPE.RANGE && !Array.isArray(value)) {
                throw (0, exports.error)(propName, componentName);
            } else if (!Array.isArray(value)) {
                value = [value];
            }
            if (!value.every(function (v) {
                return !v || (0, util_1.datejs)(v).isValid();
            })) {
                throw (0, exports.error)(propName, componentName);
            }
        }
    },
    format: checkType(['string', 'function']),
    inputValue: checkType('string'),
    placeholder: checkType('string'),
    readOnly: checkType('boolean'),
    disabled: checkType('boolean'),
    disabledTime: checkType(['object', 'function']),
    ariaLabel: checkType('string'),
    render: PT.oneOfType([PT.node, PT.func]),
    mode: PT.oneOf(Object.values(constant_1.DATE_PICKER_MODE)),
    type: PT.oneOf(Object.values(constant_1.DATE_PICKER_TYPE)),
    inputType: PT.oneOf(Object.values(constant_1.DATE_INPUT_TYPE)),
    size: PT.oneOf(['small', 'medium', 'large'])
};
exports.default = SharedPT;

/***/ }),
/* 40 */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.12' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 41 */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var dropdown_1 = __webpack_require__(281);
exports.default = config_provider_1.default.config(dropdown_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('triggerType' in props) {
            var triggerType = Array.isArray(props.triggerType) ? tslib_1.__spreadArray([], tslib_1.__read(props.triggerType), false) : [props.triggerType];
            if (triggerType.indexOf('focus') > -1) {
                deprecated('triggerType[focus]', 'triggerType[hover, click]', 'Balloon');
            }
        }
        return props;
    }
});

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var checkbox_1 = __webpack_require__(143);
var checkbox_group_1 = __webpack_require__(284);
var config_provider_1 = __webpack_require__(5);
checkbox_1.default.Group = config_provider_1.default.config(checkbox_group_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('itemDirection' in props) {
            deprecated('itemDirection', 'direction', 'Checkbox');
            var itemDirection = props.itemDirection,
                others = tslib_1.__rest(props, ["itemDirection"]);
            props = tslib_1.__assign({ direction: itemDirection }, others);
        }
        return props;
    }
});
exports.default = checkbox_1.default;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var radio_1 = __webpack_require__(145);
var radio_group_1 = __webpack_require__(286);
var config_provider_1 = __webpack_require__(5);
radio_1.default.Group = config_provider_1.default.config(radio_group_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('itemDirection' in props) {
            deprecated('itemDirection', 'direction', 'Radio');
            var itemDirection = props.itemDirection,
                others = tslib_1.__rest(props, ["itemDirection"]);
            props = tslib_1.__assign({ direction: itemDirection }, others);
        }
        return props;
    }
});
exports.default = radio_1.default;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var config_provider_1 = __webpack_require__(5);
var virtual_list_1 = __webpack_require__(303);
exports.default = config_provider_1.default.config(virtual_list_1.default);

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(33)["default"];
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != _typeof(e) && "function" != typeof e) return {
    "default": e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n["default"] = e, t && t.set(e, n), n;
}
module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.CALENDAR_CELL_STATE = exports.DATE_PANEL_MODE = exports.CALENDAR_MODE = exports.CALENDAR_SHAPE = void 0;
// 日历shape
exports.CALENDAR_SHAPE = {
    FULLSCREEN: 'fullscreen',
    CARD: 'card',
    PANEL: 'panel'
};
// 日历模式
exports.CALENDAR_MODE = {
    MONTH: 'month',
    YEAR: 'year'
};
// 日期面板的模式
exports.DATE_PANEL_MODE = {
    DATE: 'date',
    WEEK: 'week',
    MONTH: 'month',
    QUARTER: 'quarter',
    YEAR: 'year',
    DECADE: 'decade'
};
// 单元格选中状态
exports.CALENDAR_CELL_STATE = {
    UN_SELECTED: 0,
    SELECTED: 1,
    SELECTED_BEGIN: 2,
    SELECTED_END: 3
};

/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(global) {/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */
/* eslint-disable require-jsdoc, valid-jsdoc */
var MapShim = (function () {
    if (typeof Map !== 'undefined') {
        return Map;
    }
    /**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */
    function getIndex(arr, key) {
        var result = -1;
        arr.some(function (entry, index) {
            if (entry[0] === key) {
                result = index;
                return true;
            }
            return false;
        });
        return result;
    }
    return /** @class */ (function () {
        function class_1() {
            this.__entries__ = [];
        }
        Object.defineProperty(class_1.prototype, "size", {
            /**
             * @returns {boolean}
             */
            get: function () {
                return this.__entries__.length;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {*} key
         * @returns {*}
         */
        class_1.prototype.get = function (key) {
            var index = getIndex(this.__entries__, key);
            var entry = this.__entries__[index];
            return entry && entry[1];
        };
        /**
         * @param {*} key
         * @param {*} value
         * @returns {void}
         */
        class_1.prototype.set = function (key, value) {
            var index = getIndex(this.__entries__, key);
            if (~index) {
                this.__entries__[index][1] = value;
            }
            else {
                this.__entries__.push([key, value]);
            }
        };
        /**
         * @param {*} key
         * @returns {void}
         */
        class_1.prototype.delete = function (key) {
            var entries = this.__entries__;
            var index = getIndex(entries, key);
            if (~index) {
                entries.splice(index, 1);
            }
        };
        /**
         * @param {*} key
         * @returns {void}
         */
        class_1.prototype.has = function (key) {
            return !!~getIndex(this.__entries__, key);
        };
        /**
         * @returns {void}
         */
        class_1.prototype.clear = function () {
            this.__entries__.splice(0);
        };
        /**
         * @param {Function} callback
         * @param {*} [ctx=null]
         * @returns {void}
         */
        class_1.prototype.forEach = function (callback, ctx) {
            if (ctx === void 0) { ctx = null; }
            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                var entry = _a[_i];
                callback.call(ctx, entry[1], entry[0]);
            }
        };
        return class_1;
    }());
})();

/**
 * Detects whether window and document objects are available in current environment.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

// Returns global object of a current environment.
var global$1 = (function () {
    if (typeof global !== 'undefined' && global.Math === Math) {
        return global;
    }
    if (typeof self !== 'undefined' && self.Math === Math) {
        return self;
    }
    if (typeof window !== 'undefined' && window.Math === Math) {
        return window;
    }
    // eslint-disable-next-line no-new-func
    return Function('return this')();
})();

/**
 * A shim for the requestAnimationFrame which falls back to the setTimeout if
 * first one is not supported.
 *
 * @returns {number} Requests' identifier.
 */
var requestAnimationFrame$1 = (function () {
    if (typeof requestAnimationFrame === 'function') {
        // It's required to use a bounded function because IE sometimes throws
        // an "Invalid calling object" error if rAF is invoked without the global
        // object on the left hand side.
        return requestAnimationFrame.bind(global$1);
    }
    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
})();

// Defines minimum timeout before adding a trailing call.
var trailingTimeout = 2;
/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */
function throttle (callback, delay) {
    var leadingCall = false, trailingCall = false, lastCallTime = 0;
    /**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */
    function resolvePending() {
        if (leadingCall) {
            leadingCall = false;
            callback();
        }
        if (trailingCall) {
            proxy();
        }
    }
    /**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */
    function timeoutCallback() {
        requestAnimationFrame$1(resolvePending);
    }
    /**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */
    function proxy() {
        var timeStamp = Date.now();
        if (leadingCall) {
            // Reject immediately following calls.
            if (timeStamp - lastCallTime < trailingTimeout) {
                return;
            }
            // Schedule new call to be in invoked when the pending one is resolved.
            // This is important for "transitions" which never actually start
            // immediately so there is a chance that we might miss one if change
            // happens amids the pending invocation.
            trailingCall = true;
        }
        else {
            leadingCall = true;
            trailingCall = false;
            setTimeout(timeoutCallback, delay);
        }
        lastCallTime = timeStamp;
    }
    return proxy;
}

// Minimum delay before invoking the update of observers.
var REFRESH_DELAY = 20;
// A list of substrings of CSS properties used to find transition events that
// might affect dimensions of observed elements.
var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
// Check if MutationObserver is available.
var mutationObserverSupported = typeof MutationObserver !== 'undefined';
/**
 * Singleton controller class which handles updates of ResizeObserver instances.
 */
var ResizeObserverController = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserverController.
     *
     * @private
     */
    function ResizeObserverController() {
        /**
         * Indicates whether DOM listeners have been added.
         *
         * @private {boolean}
         */
        this.connected_ = false;
        /**
         * Tells that controller has subscribed for Mutation Events.
         *
         * @private {boolean}
         */
        this.mutationEventsAdded_ = false;
        /**
         * Keeps reference to the instance of MutationObserver.
         *
         * @private {MutationObserver}
         */
        this.mutationsObserver_ = null;
        /**
         * A list of connected observers.
         *
         * @private {Array<ResizeObserverSPI>}
         */
        this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
    }
    /**
     * Adds observer to observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be added.
     * @returns {void}
     */
    ResizeObserverController.prototype.addObserver = function (observer) {
        if (!~this.observers_.indexOf(observer)) {
            this.observers_.push(observer);
        }
        // Add listeners if they haven't been added yet.
        if (!this.connected_) {
            this.connect_();
        }
    };
    /**
     * Removes observer from observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be removed.
     * @returns {void}
     */
    ResizeObserverController.prototype.removeObserver = function (observer) {
        var observers = this.observers_;
        var index = observers.indexOf(observer);
        // Remove observer if it's present in registry.
        if (~index) {
            observers.splice(index, 1);
        }
        // Remove listeners if controller has no connected observers.
        if (!observers.length && this.connected_) {
            this.disconnect_();
        }
    };
    /**
     * Invokes the update of observers. It will continue running updates insofar
     * it detects changes.
     *
     * @returns {void}
     */
    ResizeObserverController.prototype.refresh = function () {
        var changesDetected = this.updateObservers_();
        // Continue running updates if changes have been detected as there might
        // be future ones caused by CSS transitions.
        if (changesDetected) {
            this.refresh();
        }
    };
    /**
     * Updates every observer from observers list and notifies them of queued
     * entries.
     *
     * @private
     * @returns {boolean} Returns "true" if any observer has detected changes in
     *      dimensions of it's elements.
     */
    ResizeObserverController.prototype.updateObservers_ = function () {
        // Collect observers that have active observations.
        var activeObservers = this.observers_.filter(function (observer) {
            return observer.gatherActive(), observer.hasActive();
        });
        // Deliver notifications in a separate cycle in order to avoid any
        // collisions between observers, e.g. when multiple instances of
        // ResizeObserver are tracking the same element and the callback of one
        // of them changes content dimensions of the observed target. Sometimes
        // this may result in notifications being blocked for the rest of observers.
        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
        return activeObservers.length > 0;
    };
    /**
     * Initializes DOM listeners.
     *
     * @private
     * @returns {void}
     */
    ResizeObserverController.prototype.connect_ = function () {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already added.
        if (!isBrowser || this.connected_) {
            return;
        }
        // Subscription to the "Transitionend" event is used as a workaround for
        // delayed transitions. This way it's possible to capture at least the
        // final state of an element.
        document.addEventListener('transitionend', this.onTransitionEnd_);
        window.addEventListener('resize', this.refresh);
        if (mutationObserverSupported) {
            this.mutationsObserver_ = new MutationObserver(this.refresh);
            this.mutationsObserver_.observe(document, {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true
            });
        }
        else {
            document.addEventListener('DOMSubtreeModified', this.refresh);
            this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
    };
    /**
     * Removes DOM listeners.
     *
     * @private
     * @returns {void}
     */
    ResizeObserverController.prototype.disconnect_ = function () {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already removed.
        if (!isBrowser || !this.connected_) {
            return;
        }
        document.removeEventListener('transitionend', this.onTransitionEnd_);
        window.removeEventListener('resize', this.refresh);
        if (this.mutationsObserver_) {
            this.mutationsObserver_.disconnect();
        }
        if (this.mutationEventsAdded_) {
            document.removeEventListener('DOMSubtreeModified', this.refresh);
        }
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
    };
    /**
     * "Transitionend" event handler.
     *
     * @private
     * @param {TransitionEvent} event
     * @returns {void}
     */
    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
        // Detect whether transition may affect dimensions of an element.
        var isReflowProperty = transitionKeys.some(function (key) {
            return !!~propertyName.indexOf(key);
        });
        if (isReflowProperty) {
            this.refresh();
        }
    };
    /**
     * Returns instance of the ResizeObserverController.
     *
     * @returns {ResizeObserverController}
     */
    ResizeObserverController.getInstance = function () {
        if (!this.instance_) {
            this.instance_ = new ResizeObserverController();
        }
        return this.instance_;
    };
    /**
     * Holds reference to the controller's instance.
     *
     * @private {ResizeObserverController}
     */
    ResizeObserverController.instance_ = null;
    return ResizeObserverController;
}());

/**
 * Defines non-writable/enumerable properties of the provided target object.
 *
 * @param {Object} target - Object for which to define properties.
 * @param {Object} props - Properties to be defined.
 * @returns {Object} Target object.
 */
var defineConfigurable = (function (target, props) {
    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
        var key = _a[_i];
        Object.defineProperty(target, key, {
            value: props[key],
            enumerable: false,
            writable: false,
            configurable: true
        });
    }
    return target;
});

/**
 * Returns the global object associated with provided element.
 *
 * @param {Object} target
 * @returns {Object}
 */
var getWindowOf = (function (target) {
    // Assume that the element is an instance of Node, which means that it
    // has the "ownerDocument" property from which we can retrieve a
    // corresponding global object.
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
    // Return the local global object if it's not possible extract one from
    // provided element.
    return ownerGlobal || global$1;
});

// Placeholder of an empty content rectangle.
var emptyRect = createRectInit(0, 0, 0, 0);
/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */
function toFloat(value) {
    return parseFloat(value) || 0;
}
/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */
function getBordersSize(styles) {
    var positions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        positions[_i - 1] = arguments[_i];
    }
    return positions.reduce(function (size, position) {
        var value = styles['border-' + position + '-width'];
        return size + toFloat(value);
    }, 0);
}
/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */
function getPaddings(styles) {
    var positions = ['top', 'right', 'bottom', 'left'];
    var paddings = {};
    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
        var position = positions_1[_i];
        var value = styles['padding-' + position];
        paddings[position] = toFloat(value);
    }
    return paddings;
}
/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */
function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
}
/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */
function getHTMLElementContentRect(target) {
    // Client width & height properties can't be
    // used exclusively as they provide rounded values.
    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
    // By this condition we can catch all non-replaced inline, hidden and
    // detached elements. Though elements with width & height properties less
    // than 0.5 will be discarded as well.
    //
    // Without it we would need to implement separate methods for each of
    // those cases and it's not possible to perform a precise and performance
    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
    // gives wrong results for elements with width & height less than 0.5.
    if (!clientWidth && !clientHeight) {
        return emptyRect;
    }
    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom;
    // Computed styles of width & height are being used because they are the
    // only dimensions available to JS that contain non-rounded values. It could
    // be possible to utilize the getBoundingClientRect if only it's data wasn't
    // affected by CSS transformations let alone paddings, borders and scroll bars.
    var width = toFloat(styles.width), height = toFloat(styles.height);
    // Width & height include paddings and borders when the 'border-box' box
    // model is applied (except for IE).
    if (styles.boxSizing === 'border-box') {
        // Following conditions are required to handle Internet Explorer which
        // doesn't include paddings and borders to computed CSS dimensions.
        //
        // We can say that if CSS dimensions + paddings are equal to the "client"
        // properties then it's either IE, and thus we don't need to subtract
        // anything, or an element merely doesn't have paddings/borders styles.
        if (Math.round(width + horizPad) !== clientWidth) {
            width -= getBordersSize(styles, 'left', 'right') + horizPad;
        }
        if (Math.round(height + vertPad) !== clientHeight) {
            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
        }
    }
    // Following steps can't be applied to the document's root element as its
    // client[Width/Height] properties represent viewport area of the window.
    // Besides, it's as well not necessary as the <html> itself neither has
    // rendered scroll bars nor it can be clipped.
    if (!isDocumentElement(target)) {
        // In some browsers (only in Firefox, actually) CSS width & height
        // include scroll bars size which can be removed at this step as scroll
        // bars are the only difference between rounded dimensions + paddings
        // and "client" properties, though that is not always true in Chrome.
        var vertScrollbar = Math.round(width + horizPad) - clientWidth;
        var horizScrollbar = Math.round(height + vertPad) - clientHeight;
        // Chrome has a rather weird rounding of "client" properties.
        // E.g. for an element with content width of 314.2px it sometimes gives
        // the client width of 315px and for the width of 314.7px it may give
        // 314px. And it doesn't happen all the time. So just ignore this delta
        // as a non-relevant.
        if (Math.abs(vertScrollbar) !== 1) {
            width -= vertScrollbar;
        }
        if (Math.abs(horizScrollbar) !== 1) {
            height -= horizScrollbar;
        }
    }
    return createRectInit(paddings.left, paddings.top, width, height);
}
/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
var isSVGGraphicsElement = (function () {
    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
    // interface.
    if (typeof SVGGraphicsElement !== 'undefined') {
        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
    }
    // If it's so, then check that element is at least an instance of the
    // SVGElement and that it has the "getBBox" method.
    // eslint-disable-next-line no-extra-parens
    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&
        typeof target.getBBox === 'function'); };
})();
/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
}
/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */
function getContentRect(target) {
    if (!isBrowser) {
        return emptyRect;
    }
    if (isSVGGraphicsElement(target)) {
        return getSVGContentRect(target);
    }
    return getHTMLElementContentRect(target);
}
/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */
function createReadOnlyRect(_a) {
    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
    // If DOMRectReadOnly is available use it as a prototype for the rectangle.
    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype);
    // Rectangle's properties are not writable and non-enumerable.
    defineConfigurable(rect, {
        x: x, y: y, width: width, height: height,
        top: y,
        right: x + width,
        bottom: height + y,
        left: x
    });
    return rect;
}
/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */
function createRectInit(x, y, width, height) {
    return { x: x, y: y, width: width, height: height };
}

/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */
var ResizeObservation = /** @class */ (function () {
    /**
     * Creates an instance of ResizeObservation.
     *
     * @param {Element} target - Element to be observed.
     */
    function ResizeObservation(target) {
        /**
         * Broadcasted width of content rectangle.
         *
         * @type {number}
         */
        this.broadcastWidth = 0;
        /**
         * Broadcasted height of content rectangle.
         *
         * @type {number}
         */
        this.broadcastHeight = 0;
        /**
         * Reference to the last observed content rectangle.
         *
         * @private {DOMRectInit}
         */
        this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
    }
    /**
     * Updates content rectangle and tells whether it's width or height properties
     * have changed since the last broadcast.
     *
     * @returns {boolean}
     */
    ResizeObservation.prototype.isActive = function () {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return (rect.width !== this.broadcastWidth ||
            rect.height !== this.broadcastHeight);
    };
    /**
     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
     * from the corresponding properties of the last observed content rectangle.
     *
     * @returns {DOMRectInit} Last observed content rectangle.
     */
    ResizeObservation.prototype.broadcastRect = function () {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
    };
    return ResizeObservation;
}());

var ResizeObserverEntry = /** @class */ (function () {
    /**
     * Creates an instance of ResizeObserverEntry.
     *
     * @param {Element} target - Element that is being observed.
     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
     */
    function ResizeObserverEntry(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        // According to the specification following properties are not writable
        // and are also not enumerable in the native implementation.
        //
        // Property accessors are not being used as they'd require to define a
        // private WeakMap storage which may cause memory leaks in browsers that
        // don't support this type of collections.
        defineConfigurable(this, { target: target, contentRect: contentRect });
    }
    return ResizeObserverEntry;
}());

var ResizeObserverSPI = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback function that is invoked
     *      when one of the observed elements changes it's content dimensions.
     * @param {ResizeObserverController} controller - Controller instance which
     *      is responsible for the updates of observer.
     * @param {ResizeObserver} callbackCtx - Reference to the public
     *      ResizeObserver instance which will be passed to callback function.
     */
    function ResizeObserverSPI(callback, controller, callbackCtx) {
        /**
         * Collection of resize observations that have detected changes in dimensions
         * of elements.
         *
         * @private {Array<ResizeObservation>}
         */
        this.activeObservations_ = [];
        /**
         * Registry of the ResizeObservation instances.
         *
         * @private {Map<Element, ResizeObservation>}
         */
        this.observations_ = new MapShim();
        if (typeof callback !== 'function') {
            throw new TypeError('The callback provided as parameter 1 is not a function.');
        }
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
    }
    /**
     * Starts observing provided element.
     *
     * @param {Element} target - Element to be observed.
     * @returns {void}
     */
    ResizeObserverSPI.prototype.observe = function (target) {
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
            return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
            throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        // Do nothing if element is already being observed.
        if (observations.has(target)) {
            return;
        }
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        // Force the update of observations.
        this.controller_.refresh();
    };
    /**
     * Stops observing provided element.
     *
     * @param {Element} target - Element to stop observing.
     * @returns {void}
     */
    ResizeObserverSPI.prototype.unobserve = function (target) {
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
            return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
            throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        // Do nothing if element is not being observed.
        if (!observations.has(target)) {
            return;
        }
        observations.delete(target);
        if (!observations.size) {
            this.controller_.removeObserver(this);
        }
    };
    /**
     * Stops observing all elements.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.disconnect = function () {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
    };
    /**
     * Collects observation instances the associated element of which has changed
     * it's content rectangle.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.gatherActive = function () {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function (observation) {
            if (observation.isActive()) {
                _this.activeObservations_.push(observation);
            }
        });
    };
    /**
     * Invokes initial callback function with a list of ResizeObserverEntry
     * instances collected from active resize observations.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.broadcastActive = function () {
        // Do nothing if observer doesn't have active observations.
        if (!this.hasActive()) {
            return;
        }
        var ctx = this.callbackCtx_;
        // Create ResizeObserverEntry instance for every active observation.
        var entries = this.activeObservations_.map(function (observation) {
            return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
    };
    /**
     * Clears the collection of active observations.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.clearActive = function () {
        this.activeObservations_.splice(0);
    };
    /**
     * Tells whether observer has active observations.
     *
     * @returns {boolean}
     */
    ResizeObserverSPI.prototype.hasActive = function () {
        return this.activeObservations_.length > 0;
    };
    return ResizeObserverSPI;
}());

// Registry of internal observers. If WeakMap is not available use current shim
// for the Map collection as it has all required methods and because WeakMap
// can't be fully polyfilled anyway.
var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
/**
 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
 * exposing only those methods and properties that are defined in the spec.
 */
var ResizeObserver = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback that is invoked when
     *      dimensions of the observed elements change.
     */
    function ResizeObserver(callback) {
        if (!(this instanceof ResizeObserver)) {
            throw new TypeError('Cannot call a class as a function.');
        }
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
    }
    return ResizeObserver;
}());
// Expose public methods of ResizeObserver.
[
    'observe',
    'unobserve',
    'disconnect'
].forEach(function (method) {
    ResizeObserver.prototype[method] = function () {
        var _a;
        return (_a = observers.get(this))[method].apply(_a, arguments);
    };
});

var index = (function () {
    // Export existing implementation if available.
    if (typeof global$1.ResizeObserver !== 'undefined') {
        return global$1.ResizeObserver;
    }
    return ResizeObserver;
})();

/* harmony default export */ __webpack_exports__["default"] = (index);

/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(110)))

/***/ }),
/* 50 */
/***/ (function(module, exports) {

module.exports = true;


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(41);
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(117);
var enumBugKeys = __webpack_require__(75);

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),
/* 54 */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),
/* 55 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var balloon_1 = __webpack_require__(270);
var tooltip_1 = __webpack_require__(279);
var inner_1 = __webpack_require__(83);
balloon_1.default.Tooltip = config_provider_1.default.config(tooltip_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('text' in props) {
            deprecated('text', 'children', 'Tooltip');
            var text = props.text,
                others = tslib_1.__rest(props, ["text"]);
            props = tslib_1.__assign({ children: text }, others);
        }
        return props;
    }
});
balloon_1.default.Inner = inner_1.default;
exports.default = config_provider_1.default.config(balloon_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if (props.alignment) {
            deprecated('alignment', 'alignEdge', 'Balloon');
            var alignment = props.alignment,
                others = tslib_1.__rest(props, ["alignment"]);
            props = tslib_1.__assign({ alignEdge: alignment === 'edge' }, others);
        }
        if (props.onCloseClick) {
            deprecated('onCloseClick', 'onVisibleChange(visible, [type = "closeClick"])', 'Balloon');
            var onCloseClick_1 = props.onCloseClick,
                onVisibleChange_1 = props.onVisibleChange,
                others = tslib_1.__rest(props, ["onCloseClick", "onVisibleChange"]);
            var newOnVisibleChange = function newOnVisibleChange(visible, type) {
                if (type === 'closeClick') {
                    onCloseClick_1();
                }
                if (onVisibleChange_1) {
                    onVisibleChange_1(visible, type);
                }
            };
            props = tslib_1.__assign({ onVisibleChange: newOnVisibleChange }, others);
        }
        return props;
    }
});

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var react_dom_1 = __webpack_require__(8);
function findNode(target, param) {
    if (!target) {
        return null;
    }
    if (typeof target === 'string') {
        return document.getElementById(target);
    }
    if (typeof target === 'function') {
        try {
            target = target(param);
        } catch (err) {
            target = null;
        }
    }
    if (!target) {
        return null;
    }
    try {
        return (0, react_dom_1.findDOMNode)(target);
    } catch (err) {
        return target;
    }
}
exports.default = findNode;

/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/extends.js
var helpers_extends = __webpack_require__(59);
var extends_default = /*#__PURE__*/__webpack_require__.n(helpers_extends);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
var objectWithoutPropertiesLoose = __webpack_require__(136);
var objectWithoutPropertiesLoose_default = /*#__PURE__*/__webpack_require__.n(objectWithoutPropertiesLoose);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inheritsLoose.js
var inheritsLoose = __webpack_require__(274);
var inheritsLoose_default = /*#__PURE__*/__webpack_require__.n(inheritsLoose);

// EXTERNAL MODULE: external {"root":"React","commonjs2":"react","commonjs":"react","amd":"react"}
var external___root___React___commonjs2___react___commonjs___react___amd___react__ = __webpack_require__(1);
var external___root___React___commonjs2___react___commonjs___react___amd___react___default = /*#__PURE__*/__webpack_require__.n(external___root___React___commonjs2___react___commonjs___react___amd___react__);

// EXTERNAL MODULE: external {"root":"ReactDOM","commonjs2":"react-dom","commonjs":"react-dom","amd":"react-dom"}
var external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__ = __webpack_require__(8);
var external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom___default = /*#__PURE__*/__webpack_require__.n(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__);

// EXTERNAL MODULE: ./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
var ResizeObserver_es = __webpack_require__(49);

// CONCATENATED MODULE: ./node_modules/@alifd/overlay/es/utils.js


function useListener(nodeList, eventName, callback, useCapture, condition) {
  Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useEffect"])(function () {
    if (condition) {
      if (!Array.isArray(nodeList)) {
        nodeList = [nodeList];
      }
      nodeList.forEach(function (n) {
        n && n.addEventListener && n.addEventListener(eventName, callback, useCapture || false);
      });
      return function () {
        Array.isArray(nodeList) && nodeList.forEach(function (n) {
          n && n.removeEventListener && n.removeEventListener(eventName, callback, useCapture || false);
        });
      };
    }
    return undefined;
  }, [condition]);
}

/**
 * 将N个方法合并为一个链式调用的方法
 * @return {Function}     合并后的方法
 *
 * @example
 * func.makeChain(this.handleChange, this.props.onChange);
 */
function makeChain() {
  var _this = this;
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    for (var i = 0, j = fns.length; i < j; i++) {
      if (fns[i] && fns[i].apply) {
        // @ts-ignore
        fns[i].apply(_this, args);
      }
    }
  };
}
function callRef(ref, element) {
  if (!ref) {
    return;
  }
  if (typeof ref === 'string') {
    throw new Error("can not set ref string for " + ref);
  } else if (typeof ref === 'function') {
    ref(element);
  } else if (Object.prototype.hasOwnProperty.call(ref, 'current')) {
    ref.current = element;
  }
}
function saveRef(ref) {
  if (!ref) {
    return null;
  }
  return function (element) {
    if (typeof ref === 'string') {
      throw new Error("can not set ref string for " + ref);
    } else if (typeof ref === 'function') {
      ref(element);
    } else if (Object.prototype.hasOwnProperty.call(ref, 'current')) {
      ref.current = element;
    }
  };
}

/**
 * 获取 position != static ，用来计算相对位置的容器
 * @param container
 * @returns
 */
var getRelativeContainer = function getRelativeContainer(container) {
  if (typeof document === 'undefined') {
    return container;
  }
  var calcContainer = container;
  while (getStyle(calcContainer, 'position') === 'static') {
    if (!calcContainer || calcContainer === document.documentElement) {
      return document.documentElement;
    }
    calcContainer = calcContainer.parentNode;
  }
  return calcContainer;
};

/**
 * 获取 target 和 container 之间会滚动的元素 (不包含 target、container)
 * 用来监听滚动元素，自动更新弹窗位置
 * @param targetNode
 * @param container
 * @returns
 */
var getOverflowNodes = function getOverflowNodes(targetNode, container) {
  if (typeof document === 'undefined') {
    return [];
  }
  var overflowNodes = [];
  // 使用getViewPort方式获取滚动节点，考虑元素可能会跳出最近的滚动容器的情况（绝对定位，containingBlock等原因）
  // 原先的只获取了可滚动的滚动容器（滚动高度超出容器高度），改成只要具有滚动属性即可，因为后面可能会发生内容变化导致其变得可滚动了
  var overflowNode = getViewPort(targetNode.parentElement);
  while (overflowNode && container.contains(overflowNode) && container !== overflowNode) {
    overflowNodes.push(overflowNode);
    if (overflowNode.parentElement) {
      overflowNode = getViewPort(overflowNode.parentElement);
    } else {
      break;
    }
  }
  return overflowNodes;
};

/**
 * 是否是webkit内核
 */
function isWebKit() {
  if (typeof CSS === 'undefined' || !CSS.supports) {
    return false;
  }
  return CSS.supports('-webkit-backdrop-filter', 'none');
}

/**
 * 判断元素是否是会影响后代节点定位的 containing block
 * https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
 */
function isContainingBlock(ele) {
  var webkit = isWebKit();
  var css = getComputedStyle(ele);
  return Boolean(css.transform && css.transform !== 'none' || css.perspective && css.perspective !== 'none' || css.containerType && css.containerType !== 'normal' || !webkit && css.backdropFilter && css.backdropFilter !== 'none' || !webkit && css.filter && css.filter !== 'none' || ['transform', 'perspective', 'filter'].some(function (value) {
    return (css.willChange || '').includes(value);
  }) || ['paint', 'layout', 'strict', 'content'].some(function (value) {
    return (css.contain || '').includes(value);
  }));
}

/**
 * 判断元素是否是 html 或 body 元素
 */
function isLastTraversableElement(ele) {
  return ['html', 'body'].includes(ele.tagName.toLowerCase());
}

/**
 * 获取 containing block
 * https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
 */
function getContainingBlock(element) {
  var currentElement = element.parentElement;
  while (currentElement && !isLastTraversableElement(currentElement)) {
    if (isContainingBlock(currentElement)) {
      return currentElement;
    } else {
      currentElement = currentElement.parentElement;
    }
  }
  return null;
}

/**
 * 判断元素是否会裁剪内容区域
 * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow
 */
var isContentClippedElement = function isContentClippedElement(element) {
  var overflow = getStyle(element, 'overflow');
  // 测试环境overflow默认为 ''
  return overflow && overflow !== 'visible';
};

/**
 * 获取最近的裁剪内容区域的祖先节点
 */
function getContentClippedElement(element) {
  if (isContentClippedElement(element)) {
    return element;
  }
  var parent = element.parentElement;
  while (parent) {
    if (isContentClippedElement(parent)) {
      return parent;
    }
    parent = parent.parentElement;
  }
  return null;
}

/**
 * 获取定位节点，忽略表格元素影响
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent
 * @param element
 * @returns closest positioned ancestor element
 */
function getOffsetParent(element) {
  var offsetParent = element.offsetParent;
  while (offsetParent && ['table', 'th', 'td'].includes(offsetParent.tagName.toLowerCase())) {
    offsetParent = offsetParent.offsetParent;
  }
  return offsetParent;
}

/**
 * 获取可视区域，用来计算弹窗应该相对哪个节点做上下左右的位置变化。
 * @param container
 * @returns
 */
function getViewPort(container) {
  var fallbackViewportElement = document.documentElement;
  if (!container) {
    return fallbackViewportElement;
  }

  // 若 container 本身就是滚动容器，则直接返回
  if (isContentClippedElement(container)) {
    return container;
  }

  // 若 container 的 position 是 absolute 或 fixed，则有可能会脱离其最近的滚动容器，需要根据 offsetParent 和 containing block来综合判断
  if (['fixed', 'absolute'].includes(getStyle(container, 'position'))) {
    // 先获取定位节点（若无则使用 containerBlock）
    var offsetParent = getOffsetParent(container) || getContainingBlock(container);
    // 拥有定位节点
    if (offsetParent) {
      // 从定位节点开始寻找父级滚动容器
      return getViewPort(offsetParent);
    } else {
      // 无定位节点，也无containingBlock影响，则用 fallback元素
      return fallbackViewportElement;
    }
  }
  if (container.parentElement) {
    return getViewPort(container.parentElement) || fallbackViewportElement;
  }
  return fallbackViewportElement;
}
function getStyle(elt, name) {
  if (!elt || elt.nodeType !== 1) {
    return null;
  }
  var style = window.getComputedStyle(elt, null);
  return style.getPropertyValue(name);
}
var PIXEL_PATTERN = /margin|padding|width|height|max|min|offset|size|top|left/i;
function setStyle(node, name, value) {
  if (!node) {
    return;
  }
  if (typeof name === 'string') {
    if (typeof value === 'number' && PIXEL_PATTERN.test(name)) {
      value = value + "px";
    }
    // @ts-ignore
    node.style[name] = value;
  } else if (typeof name === 'object' && arguments.length === 2) {
    // @ts-ignore
    Object.keys(name).forEach(function (key) {
      return setStyle(node, key, name[key]);
    });
  }
}

// 默认首次调用是立刻执行
function throttle(func, wait) {
  var previous = -wait;
  return function () {
    var now = Date.now();
    var args = arguments;
    if (now - previous > wait) {
      // @ts-ignore
      func.apply(this, args);
      previous = now;
    }
  };
}
function debounce(func, wait) {
  var _arguments = arguments,
    _this2 = this;
  var timeoutID;
  return function () {
    var args = _arguments;
    clearTimeout(timeoutID);
    timeoutID = setTimeout(function () {
      // @ts-ignore
      func.apply(_this2, args);
    }, wait);
  };
}

/**
 * 元素相对于可视区的 left/top
 * @param node
 * @returns
 */
function getViewTopLeft(node) {
  /**
   * document.body 向下滚动后 scrollTop 一直为0，同时 top=-xx 为负数，相当于本身是没有滚动条的，这个逻辑是正确的。
   * document.documentElement 向下滚动后 scrollTop/top 都在变化，会影响计算逻辑，所以这里写死 0
   */
  if (node === document.documentElement) {
    return {
      top: 0,
      left: 0
    };
  }
  var _node$getBoundingClie = node.getBoundingClientRect(),
    left = _node$getBoundingClie.left,
    top = _node$getBoundingClie.top;
  return {
    top: top,
    left: left
  };
}

/**
 * get element size
 * offsetWidth/offsetHeight 更容易获取真实大小，不会受到动画影响优先使用。
 * @param       {Element} element
 * @return      {Object}
 */
function getWidthHeight(element) {
  // element like `svg` do not have offsetWidth and offsetHeight prop
  // then getBoundingClientRect
  if ('offsetWidth' in element && 'offsetHeight' in element) {
    return {
      width: element.offsetWidth,
      height: element.offsetHeight
    };
  } else {
    var _getBoundingClientRec = element.getBoundingClientRect(),
      width = _getBoundingClientRec.width,
      height = _getBoundingClientRec.height;
    return {
      width: width,
      height: height
    };
  }
}

/**
 * 获取默认的滚动条大小
 * @return {Number} width
 */
function getScrollbarWidth() {
  var scrollDiv = document.createElement('div');
  scrollDiv.className += 'just-to-get-scrollbar-size';
  setStyle(scrollDiv, {
    position: 'absolute',
    width: '100px',
    height: '100px',
    overflow: 'scroll',
    top: '-9999px'
  });
  document.body && document.body.appendChild(scrollDiv);
  var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  document.body.removeChild(scrollDiv);
  return scrollbarWidth;
}

/**
 * 元素是否可见
 * @private
 * @param   {Element}  node
 * @return  {Boolean}
 */
function _isVisible(node) {
  while (node) {
    if (node === document.body || node === document.documentElement) {
      break;
    }
    if (node.style.display === 'none' || node.style.visibility === 'hidden') {
      return false;
    }
    node = node.parentNode;
  }
  return true;
}

/**
 * 元素是否可以获取焦点
 * @private
 * @param   {Element}  node
 * @return  {Boolean}
 */
function _isFocusable(node) {
  var nodeName = node.nodeName.toLowerCase();
  var tabIndex = parseInt(node.getAttribute('tabindex'), 10);
  var hasTabIndex = !isNaN(tabIndex) && tabIndex > -1;
  if (_isVisible(node)) {
    if (nodeName === 'input') {
      // @ts-ignore
      return !node.disabled && node.type !== 'hidden';
    } else if (['select', 'textarea', 'button'].indexOf(nodeName) > -1) {
      // @ts-ignore
      return !node.disabled;
    } else if (nodeName === 'a') {
      return node.getAttribute('href') || hasTabIndex;
    } else {
      return hasTabIndex;
    }
  }
  return false;
}

/**
 * 列出能获取焦点的子节点
 * @param  {Element} node 容器节点
 * @return {Array<Element>}
 */
function getFocusNodeList(node) {
  var res = [];
  var nodeList = node.querySelectorAll('*');
  nodeList.forEach(function (item) {
    if (_isFocusable(item)) {
      var method = item.getAttribute('data-auto-focus') ? 'unshift' : 'push';
      res[method](item);
    }
  });
  if (_isFocusable(node)) {
    res.unshift(node);
  }
  return res;
}
function getHTMLElement(node) {
  if (node) {
    if (node.nodeType) {
      if (node.nodeType === 1) {
        return node;
      } else {
        return document.body;
      }
    } else if (node === window) {
      return document.body;
    } else {
      return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(node);
    }
  }
  return node;
}
function getTargetNode(target) {
  if (typeof target === 'function') {
    return target();
  } else if (typeof target === 'string') {
    return document.getElementById(target);
  }

  // 兼容 target = HTMLElement
  return target;
}
function isSameObject(object1, object2) {
  if (!object1 || !object2) {
    return false;
  }
  var o1keys = Object.keys(object1);
  var o2keys = Object.keys(object2);
  if (o2keys.length !== o1keys.length) return false;
  for (var i = 0; i <= o1keys.length - 1; i++) {
    var _key3 = o1keys[i];
    if (!o2keys.includes(_key3)) return false;
    // @ts-ignore
    if (object2[_key3] !== object1[_key3]) return false;
  }
  return true;
}
var utils_useEvent = function useEvent(handler) {
  var handleRef = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])(handler);
  Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useLayoutEffect"])(function () {
    handleRef.current = handler;
  });
  return Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useCallback"])(function () {
    var fn = handleRef.current;
    return fn.apply(void 0, arguments);
  }, []);
};
// CONCATENATED MODULE: ./node_modules/@alifd/overlay/es/placement.js
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

var placementMap = {
  tl: ['bl', 'tl'],
  t: ['bc', 'tc'],
  tr: ['br', 'tr'],
  lt: ['tr', 'tl'],
  l: ['cr', 'cl'],
  lb: ['br', 'bl'],
  bl: ['tl', 'bl'],
  b: ['tc', 'bc'],
  br: ['tr', 'br'],
  rt: ['tl', 'tr'],
  r: ['cl', 'cr'],
  rb: ['bl', 'br']
};
function getXY(p, staticInfo) {
  var targetInfo = staticInfo.targetInfo,
    containerInfo = staticInfo.containerInfo,
    overlayInfo = staticInfo.overlayInfo,
    opoints = staticInfo.points,
    placementOffset = staticInfo.placementOffset,
    offset = staticInfo.offset,
    rtl = staticInfo.rtl;
  var basex = targetInfo.left - containerInfo.left + containerInfo.scrollLeft;
  var basey = targetInfo.top - containerInfo.top + containerInfo.scrollTop;
  function setPointX(point, positive, width) {
    if (positive === void 0) {
      positive = true;
    }
    var plus = positive ? 1 : -1;
    switch (point) {
      case 'l':
        basex += 0;
        break;
      case 'c':
        basex += plus * width / 2;
        break;
      case 'r':
        basex += plus * width;
        break;
      // no default
    }
  }

  function setPointY(point, positive, height) {
    if (positive === void 0) {
      positive = true;
    }
    var plus = positive ? 1 : -1;
    switch (point) {
      case 't':
        basey += 0;
        break;
      case 'c':
        basey += plus * height / 2;
        break;
      case 'b':
        basey += plus * height;
        break;
      // no default
    }
  }

  var points = [].concat(opoints);
  if (p && p in placementMap) {
    points = placementMap[p];
  }

  // rtl 左右对调
  if (rtl) {
    if (points[0].match(/l/)) {
      points[0] = points[0].replace('l', 'r');
    } else if (points[0].match(/r/)) {
      points[0] = points[0].replace('r', 'l');
    }
    if (points[1].match(/l/)) {
      points[1] = points[1].replace('l', 'r');
    } else if (points[1].match(/r/)) {
      points[1] = points[1].replace('r', 'l');
    }
  }

  // 目标元素
  setPointY(points[1][0], true, targetInfo.height);
  setPointX(points[1][1], true, targetInfo.width);
  setPointY(points[0][0], false, overlayInfo.height);
  setPointX(points[0][1], false, overlayInfo.width);
  if (placementOffset && p.length >= 1) {
    switch (p[0]) {
      case 't':
        basey -= placementOffset;
        break;
      case 'b':
        basey += placementOffset;
        break;
      case 'l':
        basex -= placementOffset;
        break;
      case 'r':
        basex += placementOffset;
        break;
      // no default
    }
  }

  return {
    points: points,
    left: basex + offset[0],
    top: basey + offset[1]
  };
}
function shouldResizePlacement(l, t, viewport, staticInfo) {
  var container = staticInfo.container,
    containerInfo = staticInfo.containerInfo,
    overlayInfo = staticInfo.overlayInfo;
  if (viewport !== container) {
    // 说明 container 不具备滚动属性
    var _getViewTopLeft = getViewTopLeft(viewport),
      vleft = _getViewTopLeft.left,
      vtop = _getViewTopLeft.top;
    var vwidth = viewport.scrollWidth,
      vheight = viewport.scrollHeight,
      vscrollTop = viewport.scrollTop,
      vscrollLeft = viewport.scrollLeft;
    var nt = t + containerInfo.top - vtop + vscrollTop;
    var nl = l + containerInfo.left - vleft + vscrollLeft;
    return nt < 0 || nl < 0 || nt + overlayInfo.height > vheight || nl + overlayInfo.width > vwidth;
  }
  return t < 0 || l < 0 || t + overlayInfo.height > containerInfo.height || l + overlayInfo.width > containerInfo.width;
}
function getNewPlacements(l, t, p, staticInfo) {
  var overlayInfo = staticInfo.overlayInfo,
    viewportInfo = staticInfo.viewportInfo;
  var _p$split = p.split(''),
    direction = _p$split[0],
    _p$split$ = _p$split[1],
    align = _p$split$ === void 0 ? '' : _p$split$;
  var topOut = t < 0;
  var leftOut = l < 0;
  var rightOut = l + overlayInfo.width > viewportInfo.width;
  var bottomOut = t + overlayInfo.height > viewportInfo.height;
  var forbiddenSet = new Set();
  var forbid = function forbid() {
    for (var _len = arguments.length, ps = new Array(_len), _key = 0; _key < _len; _key++) {
      ps[_key] = arguments[_key];
    }
    return ps.forEach(function (t) {
      return forbiddenSet.add(t);
    });
  };
  // 上方超出
  if (topOut) {
    forbid('t', 'tl', 'tr');
  }

  // 右侧超出
  if (rightOut) {
    forbid('r', 'rt', 'rb');
  }

  // 下方超出
  if (bottomOut) {
    forbid('b', 'bl', 'br');
  }

  // 左侧超出
  if (leftOut) {
    forbid('l', 'lt', 'lb');
  }
  var allPlacements = Object.keys(placementMap);
  // 过滤出所有可用的
  var canTryPlacements = allPlacements.filter(function (t) {
    return !forbiddenSet.has(t);
  });

  // 无可用
  if (!canTryPlacements.length) {
    return null;
  }

  // 排序规则: 同向 > 对向 > 其他方向; 同align > 其他align; 中间 > l = t > r = b; align规则仅在同侧比较时生效
  // 参考： https://github.com/alibaba-fusion/overlay/issues/23

  var reverseMap = {
    l: 'r',
    r: 'l',
    t: 'b',
    b: 't',
    '': ''
  };
  // direction权重, l=t > r=b
  // 权重差值 4
  var directionOrderWeights = {
    t: 10,
    b: 6,
    l: 10,
    r: 6
  };
  // 用户的 direction 最高
  directionOrderWeights[direction] = 12;
  // 用户 direction 的反转方向其次
  directionOrderWeights[reverseMap[direction]] = 11;

  // align排序权重: '' > l=t > r=b
  // 此处取值 2, 1, 0 意为远小于 direction 权重值和其差值，使得在加权和比较时不影响 direction，达到"仅同向比较align的目的"
  var alignOrderWeights = {
    '': 2,
    l: 1,
    r: 0,
    t: 1,
    b: 0
  };
  // 用户的 align 权重最高
  alignOrderWeights[align] = 3;
  canTryPlacements.sort(function (after, before) {
    var _after$split = after.split(''),
      afterDirection = _after$split[0],
      _after$split$ = _after$split[1],
      afterAlign = _after$split$ === void 0 ? '' : _after$split$;
    var _before$split = before.split(''),
      beforeDirection = _before$split[0],
      _before$split$ = _before$split[1],
      beforeAlign = _before$split$ === void 0 ? '' : _before$split$;
    var afterDirectionWeight = directionOrderWeights[afterDirection];
    var afterAlignWeight = alignOrderWeights[afterAlign];
    var beforeDirectionWeight = directionOrderWeights[beforeDirection];
    var beforeAlighWeight = alignOrderWeights[beforeAlign];
    // direction都相同，比较align weight
    if (afterDirection === beforeDirection) {
      return afterAlignWeight > beforeAlighWeight ? -1 : 1;
    }

    // align 相同，比较 direction weight
    if (afterAlign === beforeAlign) {
      return afterDirectionWeight > beforeDirectionWeight ? -1 : 1;
    }

    // 都不同
    // 与用户 direction相同情况优先最高
    if ([afterDirection, beforeDirection].includes(direction)) {
      return afterDirection === direction ? -1 : 1;
    }
    var reverseDirection = reverseMap[direction];
    // 与用户 reverse direction 相同则优先级其次
    if ([afterDirection, beforeDirection].includes(reverseDirection)) {
      return afterDirection === reverseDirection ? -1 : 1;
    }

    // 与用户align相同,则优先级更高
    if ([afterAlign, beforeAlign].includes(align)) {
      return afterAlign === align ? -1 : 1;
    }

    // 没有特殊情况，进行加权和比较
    return afterDirectionWeight + afterAlignWeight > beforeDirectionWeight + beforeAlighWeight ? -1 : 1;
  });
  return canTryPlacements;
}

/**
 * 任意预设位置都无法完全容纳overlay，则走兜底逻辑，原则是哪边空间大用哪边
 * fixme: 在overlay尺寸宽高超过滚动容器宽高情况没有考虑，先走adjustXY逻辑
 */
function getBackupPlacement(l, t, p, staticInfo) {
  var overlayInfo = staticInfo.overlayInfo,
    viewportInfo = staticInfo.viewportInfo;
  var _p$split2 = p.split(''),
    direction = _p$split2[0],
    align = _p$split2[1];
  var topOut = t < 0;
  var leftOut = l < 0;
  var rightOut = l + overlayInfo.width > viewportInfo.width;
  var bottomOut = t + overlayInfo.height > viewportInfo.height;
  var outNumber = [topOut, leftOut, rightOut, bottomOut].filter(Boolean).length;
  if (outNumber === 3) {
    var _maps$find;
    // 三面超出，则使用未超出的方向
    var maps = [{
      direction: 't',
      value: topOut
    }, {
      direction: 'r',
      value: rightOut
    }, {
      direction: 'b',
      value: bottomOut
    }, {
      direction: 'l',
      value: leftOut
    }];
    var backDirection = (_maps$find = maps.find(function (t) {
      return !t.value;
    })) === null || _maps$find === void 0 ? void 0 : _maps$find.direction;
    // 若原来的方向跟调整后不一致，则使用调整后的
    if (backDirection && backDirection !== direction) {
      return backDirection;
    }
  }
  return null;
}

/**
 * 基于xy的兜底调整
 * @param left overlay距离定位节点左侧距离
 * @param top overlay距离定位节点上方距离
 * @param placement 位置
 * @param staticInfo 其它信息
 */
function adjustXY(left, top, placement, staticInfo) {
  var viewport = staticInfo.viewport,
    viewportInfo = staticInfo.viewportInfo,
    container = staticInfo.container,
    containerInfo = staticInfo.containerInfo,
    overlayInfo = staticInfo.overlayInfo,
    rtl = staticInfo.rtl;
  if (!shouldResizePlacement(left, top, viewport, staticInfo)) {
    // 无需调整
    return null;
  }
  // 仍然需要调整
  var x = left;
  var y = top;
  var xAdjust = 0;
  var yAdjust = 0;
  // 调整为基于 viewport 的xy
  if (viewport !== container) {
    var cLeft = containerInfo.left,
      cTop = containerInfo.top,
      scrollLeft = containerInfo.scrollLeft,
      scrollTop = containerInfo.scrollTop;
    xAdjust = cLeft - scrollLeft;
    yAdjust = cTop - scrollTop;
    x += xAdjust;
    y += yAdjust;
  }
  var oWidth = overlayInfo.width,
    oHeight = overlayInfo.height;
  var vWidth = viewportInfo.width,
    vHeight = viewportInfo.height;
  var leftOut = x < 0;
  var topOut = y < 0;
  var rightOut = x + oWidth > vWidth;
  var bottomOut = y + oHeight > vHeight;
  if (oWidth > vWidth || oHeight > vHeight) {
    // overlay 比 可视区域还要大，方案有：
    // 1. 根据rtl模式，强制对齐习惯侧边缘，忽略另一侧超出
    // 2. 强制调整overlay宽高，并设置overflow
    // 第二种会影响用户布局，先采用第一种办法吧

    if (oWidth > vWidth) {
      if (rtl) {
        x = vWidth - oWidth;
      } else {
        x = 0;
      }
    }
    if (oHeight > vHeight) {
      y = 0;
    }
  } else {
    // viewport可以容纳 overlay
    // 则哪边超出，哪边重置为边缘位置
    if (leftOut) {
      x = 0;
    }
    if (topOut) {
      y = 0;
    }
    if (rightOut) {
      x = vWidth - oWidth;
    }
    if (bottomOut) {
      y = vHeight - oHeight;
    }
  }
  return {
    left: x - xAdjust,
    top: y - yAdjust,
    placement: placement
  };
}
function autoAdjustPosition(l, t, p, staticInfo) {
  var left = l;
  var top = t;
  var viewport = staticInfo.viewport,
    container = staticInfo.container,
    containerInfo = staticInfo.containerInfo;
  var cLeft = containerInfo.left,
    cTop = containerInfo.top,
    scrollLeft = containerInfo.scrollLeft,
    scrollTop = containerInfo.scrollTop;

  // 此时left&top是相对于container的，若container不是 viewport，则需要调整为相对 viewport 的 left & top 再计算
  if (viewport !== container) {
    left += cLeft - scrollLeft;
    top += cTop - scrollTop;
  }

  // 根据位置超出情况，获取所有可以尝试的位置列表
  var placements = getNewPlacements(left, top, p, staticInfo);
  // 按顺序寻找能够容纳的位置
  for (var _iterator = _createForOfIteratorHelperLoose(placements), _step; !(_step = _iterator()).done;) {
    var placement = _step.value;
    var _getXY2 = getXY(placement, staticInfo),
      _nLeft = _getXY2.left,
      _nTop = _getXY2.top;
    if (!shouldResizePlacement(_nLeft, _nTop, viewport, staticInfo)) {
      return {
        left: _nLeft,
        top: _nTop,
        placement: placement
      };
    }
  }
  var backupPlacement = getBackupPlacement(left, top, p, staticInfo);
  if (backupPlacement) {
    var _getXY = getXY(backupPlacement, staticInfo),
      nLeft = _getXY.left,
      nTop = _getXY.top;
    return {
      left: nLeft,
      top: nTop,
      placement: backupPlacement
    };
  }
  return null;
}

/**
 * 获取滚动容器的尺寸位置信息
 * 滚动宽高代替宽高
 */
function getScrollerRect(scroller) {
  var _getViewTopLeft2 = getViewTopLeft(scroller),
    left = _getViewTopLeft2.left,
    top = _getViewTopLeft2.top;
  var width = scroller.scrollWidth,
    height = scroller.scrollHeight,
    scrollTop = scroller.scrollTop,
    scrollLeft = scroller.scrollLeft;
  return {
    left: left,
    top: top,
    width: width,
    height: height,
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

/**
 * 计算相对于 container 的偏移位置
 * @param config
 * @returns
 */
function getPlacements(config) {
  var target = config.target,
    overlay = config.overlay,
    container = config.container,
    scrollNode = config.scrollNode,
    oplacement = config.placement,
    _config$placementOffs = config.placementOffset,
    placementOffset = _config$placementOffs === void 0 ? 0 : _config$placementOffs,
    _config$points = config.points,
    opoints = _config$points === void 0 ? ['tl', 'bl'] : _config$points,
    _config$offset = config.offset,
    offset = _config$offset === void 0 ? [0, 0] : _config$offset,
    _config$position = config.position,
    position = _config$position === void 0 ? 'absolute' : _config$position,
    beforePosition = config.beforePosition,
    _config$autoAdjust = config.autoAdjust,
    autoAdjust = _config$autoAdjust === void 0 ? true : _config$autoAdjust,
    _config$autoHideScrol = config.autoHideScrollOverflow,
    autoHideScrollOverflow = _config$autoHideScrol === void 0 ? true : _config$autoHideScrol,
    rtl = config.rtl;
  var placement = oplacement;

  /**
   * 可视窗口是浏览器给用户展示的窗口
   * getBoundingClientRect(): top/left 是相对 viewport
   * node: offsetTop/offsetarget.Left 是相对 parent 元素的
   *
   * top: 元素上边  距离可视窗口 上边框的距离
   * left: 元素左边 距离可视窗口 左边框的距离
   *
   * scrollTop: 容器上下滚动距离
   * scrollLeft: 容器左右滚动距离
   */
  var _getWidthHeight = getWidthHeight(overlay),
    owidth = _getWidthHeight.width,
    oheight = _getWidthHeight.height;
  if (position === 'fixed') {
    var _result = {
      config: {
        placement: undefined,
        points: undefined
      },
      style: {
        position: position,
        left: offset[0],
        top: offset[1]
      }
    };
    if (beforePosition && typeof beforePosition) {
      return beforePosition(_result, {
        overlay: {
          node: overlay,
          width: owidth,
          height: oheight
        }
      });
    }
    return _result;
  }
  var _target$getBoundingCl = target.getBoundingClientRect(),
    twidth = _target$getBoundingCl.width,
    theight = _target$getBoundingCl.height,
    tleft = _target$getBoundingCl.left,
    ttop = _target$getBoundingCl.top;
  var containerInfo = getScrollerRect(container);

  // 获取可视区域，来计算容器相对位置
  var viewport = getViewPort(container);
  var viewportInfo = containerInfo;
  if (viewport !== container) {
    viewportInfo = getScrollerRect(viewport);
  }
  var staticInfo = {
    targetInfo: {
      width: twidth,
      height: theight,
      left: tleft,
      top: ttop
    },
    containerInfo: containerInfo,
    overlay: overlay,
    overlayInfo: {
      width: owidth,
      height: oheight
    },
    points: opoints,
    placementOffset: placementOffset,
    offset: offset,
    container: container,
    rtl: rtl,
    viewport: viewport,
    viewportInfo: viewportInfo
  };

  // step1: 根据 placement 计算位置
  var _getXY3 = getXY(placement, staticInfo),
    left = _getXY3.left,
    top = _getXY3.top,
    points = _getXY3.points;

  // step2: 根据 viewport（挂载容器不一定是可视区, eg: 挂载在父节点，但是弹窗超出父节点）重新计算位置. 根据可视区域优化位置
  // 位置动态优化思路见 https://github.com/alibaba-fusion/overlay/issues/23
  if (autoAdjust && placement && shouldResizePlacement(left, top, viewport, staticInfo)) {
    var adjustResult = autoAdjustPosition(left, top, placement, staticInfo);
    if (adjustResult) {
      left = adjustResult.left;
      top = adjustResult.top;
      placement = adjustResult.placement;
    }
    var adjustXYResult = adjustXY(left, top, placement, staticInfo);
    if (adjustXYResult) {
      left = adjustXYResult.left;
      top = adjustXYResult.top;
      placement = adjustXYResult.placement;
    }
  }
  var result = {
    config: {
      placement: placement,
      points: points
    },
    style: {
      position: position,
      left: Math.round(left),
      top: Math.round(top)
    }
  };

  /**
   * step3: 滚动隐藏弹窗逻辑。避免出现 target 已经滚动消失，弹层飘在页面最上方的情况。详细见 https://github.com/alibaba-fusion/overlay/issues/3
   * 触发条件: target 和 document.body 之间存在 overflow 滚动元素， target 进入不可见区域
   */
  if (autoHideScrollOverflow && placement && scrollNode !== null && scrollNode !== void 0 && scrollNode.length) {
    // 滚动改成 transform 提高性能, 但是有动效问题
    // result.style.transform = `translate3d(${result.style.left}px, ${result.style.top}px, 0px)`;
    // result.style.left = 0;
    // result.style.top = 0;

    for (var _iterator2 = _createForOfIteratorHelperLoose(scrollNode), _step2; !(_step2 = _iterator2()).done;) {
      var node = _step2.value;
      var _node$getBoundingClie = node.getBoundingClientRect(),
        _top = _node$getBoundingClie.top,
        _left = _node$getBoundingClie.left,
        width = _node$getBoundingClie.width,
        height = _node$getBoundingClie.height;
      if (ttop + theight < _top || ttop > _top + height || tleft + twidth < _left || tleft > _left + width) {
        result.style.display = 'none';
        break;
      } else {
        result.style.display = '';
      }
    }
  }
  if (beforePosition && typeof beforePosition) {
    return beforePosition(result, {
      target: {
        node: target,
        width: twidth,
        height: theight,
        left: tleft,
        top: ttop
      },
      overlay: {
        node: overlay,
        width: owidth,
        height: oheight
      }
    });
  }
  return result;
}
// CONCATENATED MODULE: ./node_modules/@alifd/overlay/es/overlay-context.js

var OverlayContext = /*#__PURE__*/Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["createContext"])({
  setVisibleOverlayToParent: function setVisibleOverlayToParent() {}
});
/* harmony default export */ var overlay_context = (OverlayContext);
// CONCATENATED MODULE: ./node_modules/@alifd/overlay/es/overlay.js



var _excluded = ["target", "children", "wrapperClassName", "maskClassName", "maskStyle", "hasMask", "canCloseByMask", "maskRender", "points", "offset", "fixed", "visible", "onRequestClose", "onOpen", "onClose", "container", "placement", "placementOffset", "disableScroll", "canCloseByOutSideClick", "canCloseByEsc", "safeNode", "beforePosition", "onPosition", "cache", "autoAdjust", "autoFocus", "isAnimationEnd", "rtl", "wrapperStyle"],
  _excluded2 = ["setVisibleOverlayToParent"];
function overlay__createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = overlay__unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function overlay__unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return overlay__arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return overlay__arrayLikeToArray(o, minLen); }
function overlay__arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }






var isScrollDisplay = function isScrollDisplay(element) {
  try {
    var scrollbarStyle = window.getComputedStyle(element, '::-webkit-scrollbar');
    return !scrollbarStyle || scrollbarStyle.getPropertyValue('display') !== 'none';
  } catch (e) {
    // ignore error for firefox
  }
  return true;
};
var overlay_hasScroll = function hasScroll(containerNode) {
  var overflow = getStyle(containerNode, 'overflow');
  if (overflow === 'hidden') {
    return false;
  }
  var parentNode = containerNode.parentNode;
  return parentNode && parentNode.scrollHeight > parentNode.clientHeight && getScrollbarWidth() > 0 && isScrollDisplay(parentNode) && isScrollDisplay(containerNode);
};

/**
 * 传入的组件可能是没有 forwardRef 包裹的 Functional Component, 会导致取不到 ref
 */
var overlay_RefWrapper = /*#__PURE__*/function (_React$Component) {
  inheritsLoose_default()(RefWrapper, _React$Component);
  function RefWrapper() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = RefWrapper.prototype;
  _proto.render = function render() {
    return this.props.children;
  };
  return RefWrapper;
}(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Component);
var Overlay = /*#__PURE__*/external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.forwardRef(function (props, ref) {
  var _overflowRef$current;
  var body = function body() {
    return document.body;
  };
  var target = props.target,
    children = props.children,
    wrapperClassName = props.wrapperClassName,
    maskClassName = props.maskClassName,
    maskStyle = props.maskStyle,
    hasMask = props.hasMask,
    _props$canCloseByMask = props.canCloseByMask,
    canCloseByMask = _props$canCloseByMask === void 0 ? true : _props$canCloseByMask,
    maskRender = props.maskRender,
    points = props.points,
    offset = props.offset,
    fixed = props.fixed,
    visible = props.visible,
    _props$onRequestClose = props.onRequestClose,
    onRequestClose = _props$onRequestClose === void 0 ? function () {} : _props$onRequestClose,
    onOpen = props.onOpen,
    onClose = props.onClose,
    _props$container = props.container,
    popupContainer = _props$container === void 0 ? body : _props$container,
    placement = props.placement,
    placementOffset = props.placementOffset,
    _props$disableScroll = props.disableScroll,
    disableScroll = _props$disableScroll === void 0 ? false : _props$disableScroll,
    _props$canCloseByOutS = props.canCloseByOutSideClick,
    canCloseByOutSideClick = _props$canCloseByOutS === void 0 ? true : _props$canCloseByOutS,
    _props$canCloseByEsc = props.canCloseByEsc,
    canCloseByEsc = _props$canCloseByEsc === void 0 ? true : _props$canCloseByEsc,
    safeNode = props.safeNode,
    beforePosition = props.beforePosition,
    onPosition = props.onPosition,
    _props$cache = props.cache,
    cache = _props$cache === void 0 ? false : _props$cache,
    autoAdjust = props.autoAdjust,
    _props$autoFocus = props.autoFocus,
    autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
    _props$isAnimationEnd = props.isAnimationEnd,
    isAnimationEnd = _props$isAnimationEnd === void 0 ? true : _props$isAnimationEnd,
    rtl = props.rtl,
    owrapperStyle = props.wrapperStyle,
    others = objectWithoutPropertiesLoose_default()(props, _excluded);
  var position = fixed ? 'fixed' : 'absolute';
  var _useState = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useState"])(visible),
    firstVisible = _useState[0],
    setFirst = _useState[1];
  var _useState2 = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useState"])(null),
    forceUpdate = _useState2[1];
  var positionStyleRef = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])({
    position: position
  });
  var getContainer = typeof popupContainer === 'string' ? function () {
    return document.getElementById(popupContainer);
  } : typeof popupContainer !== 'function' ? function () {
    return popupContainer;
  } : popupContainer;
  var _useState3 = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useState"])(null),
    container = _useState3[0],
    setContainer = _useState3[1];
  var targetRef = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])(null);
  var preTarget = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])(target);
  var overlayRef = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])(null);
  var containerRef = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])(null);
  var maskRef = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])(null);
  var overflowRef = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])([]);
  var lastFocus = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])(null);
  var ro = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])(null);
  var _useState4 = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useState"])(Date.now().toString(36)),
    uuid = _useState4[0];
  var _useContext = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useContext"])(overlay_context),
    setVisibleOverlayToParent = _useContext.setVisibleOverlayToParent,
    otherContext = objectWithoutPropertiesLoose_default()(_useContext, _excluded2);
  var childIDMap = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])(new Map());
  var handleOpen = function handleOpen(node) {
    setVisibleOverlayToParent(uuid, node);
    onOpen === null || onOpen === void 0 ? void 0 : onOpen(node);
  };
  var handleClose = function handleClose() {
    positionStyleRef.current = null;
    setVisibleOverlayToParent(uuid, null);
    onClose === null || onClose === void 0 ? void 0 : onClose();
  };
  var getVisibleOverlayFromChild = function getVisibleOverlayFromChild(id, node) {
    if (node) {
      childIDMap.current.set(id, node);
    } else {
      childIDMap.current["delete"](id);
    }
    // 让父级也感知
    setVisibleOverlayToParent(id, node);
  };
  var child = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.only(children);
  if (typeof child.ref === 'string') {
    throw new Error('Can not set ref by string in Overlay, use function instead.');
  }
  var updatePosition = utils_useEvent(function () {
    var overlayNode = overlayRef.current;
    var containerNode = containerRef.current;
    var targetNode = targetRef.current;
    if (!overlayNode || !containerNode || !targetNode) {
      return;
    }
    var placements = getPlacements({
      target: targetNode,
      overlay: overlayNode,
      container: containerNode,
      scrollNode: overflowRef.current,
      points: points,
      offset: offset,
      position: position,
      placement: placement,
      placementOffset: placementOffset,
      beforePosition: beforePosition,
      autoAdjust: autoAdjust,
      rtl: rtl,
      autoHideScrollOverflow: others.autoHideScrollOverflow
    });
    if (!isSameObject(positionStyleRef.current, placements.style)) {
      positionStyleRef.current = placements.style;
      setStyle(overlayNode, placements.style);
      typeof onPosition === 'function' && onPosition(placements);
    }
  });

  // 弹窗挂载
  var overlayRefCallback = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useCallback"])(function (nodeRef) {
    var node = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(nodeRef);
    overlayRef.current = node;
    callRef(ref, node);
    if (node !== null && container) {
      var containerNode = getRelativeContainer(getHTMLElement(container));
      containerRef.current = containerNode;
      var targetElement = target === 'viewport' ? hasMask ? maskRef.current : body() : getTargetNode(target) || body();
      var targetNode = getHTMLElement(targetElement);
      targetRef.current = targetNode;
      overflowRef.current = getOverflowNodes(targetNode, containerNode);

      // fixme: 在followTrigger且空间受限且overlay自动宽度情况下，overlay宽度会跟随left设定自动撑满containing block最右侧，这里建议手动设定overlay宽度或拥有固定内容宽度的overlay来解决，这里暂时使用原来的-1000位置的方案隐藏overlay并不影响容器宽高
      setStyle(node, {
        position: fixed ? 'fixed' : 'absolute',
        top: -1000,
        left: -1000
      });
      var waitTime = 100;
      var throttledUpdatePosition = throttle(updatePosition, waitTime);
      ro.current = new ResizeObserver_es["default"](throttledUpdatePosition);
      ro.current.observe(containerNode);
      ro.current.observe(node);
      // fist call, 不依赖 ResizeObserver observe时的首次执行(测试环境不会执行)，因为 throttle 原因也不会执行两次
      throttledUpdatePosition();
      forceUpdate({});
      if (autoFocus) {
        // 这里setTimeout是等弹窗位置计算完成再进行 focus，否则弹窗还在页面最低端，会出现突然滚动到页面最下方的情况
        setTimeout(function () {
          var focusableNodes = getFocusNodeList(node);
          if (focusableNodes.length > 0 && focusableNodes[0]) {
            lastFocus.current = document.activeElement;
            focusableNodes[0].focus();
          }
        }, waitTime);
      }
      !cache && handleOpen(node);
    } else {
      !cache && handleClose();
      if (ro.current) {
        ro.current.disconnect();
        ro.current = null;
      }
    }
  }, [container]);
  var clickEvent = function clickEvent(e) {
    // 点击在子元素上面，则忽略。为了兼容 react16，这里用 contains 判断而不利用 e.stopPropagation() 阻止冒泡的特性来处理
    for (var _iterator = overlay__createForOfIteratorHelperLoose(childIDMap.current.entries()), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
        oNode = _step$value[1];
      var _node2 = getHTMLElement(oNode);
      if (_node2 && (_node2 === e.target || _node2.contains(e.target))) {
        return;
      }
    }
    if (!visible) {
      return;
    }

    // 点击遮罩关闭
    if (hasMask && maskRef.current === e.target) {
      if (canCloseByMask) {
        onRequestClose('maskClick', e); // TODO: will rename to `mask` in 1.0
      }

      return;
    }
    var safeNodeList = Array.isArray(safeNode) ? safeNode : [safeNode];

    // 弹层默认是安全节点
    if (overlayRef.current) {
      safeNodeList.push(function () {
        return overlayRef.current;
      });
    }

    // 安全节点不关闭
    for (var i = 0; i < safeNodeList.length; i++) {
      var _safeNode = getTargetNode(safeNodeList[i]);
      var _node = getHTMLElement(_safeNode);
      if (_node && (_node === e.target || _node.contains(e.target))) {
        return;
      }
    }
    if (canCloseByOutSideClick) {
      onRequestClose('docClick', e); // TODO: will rename to `doc` in 1.0
    }
  };

  // 这里用 mousedown 而不是用 click。因为 click 是 mouseup 才触发。
  // 如果用 click 带来的问题: mousedown 在弹窗内部，然后按住鼠标不放拖动到弹窗外触发 mouseup 结果弹窗关了，这是不期望的展示。 https://github.com/alibaba-fusion/next/issues/742
  // react 17 冒泡问题:
  //  - react17 中，如果弹窗 mousedown 阻止了 e.stopPropagation(), 那么 document 就不会监听到事件，因为事件冒泡到挂载节点 rootElement 就中断了。
  //  - https://reactjs.org/blog/2020/08/10/react-v17-rc.html#changes-to-event-delegation
  useListener(document, 'mousedown', clickEvent, false, !!(visible && overlayRef.current && (canCloseByOutSideClick || hasMask && canCloseByMask)));
  var keydownEvent = function keydownEvent(e) {
    if (!visible) {
      return;
    }

    // 无子元素才能 esc 取消关闭
    if (e.keyCode === 27 && canCloseByEsc && !childIDMap.current.size) {
      onRequestClose('esc', e);
    }
  };
  useListener(document, 'keydown', keydownEvent, false, !!(visible && overlayRef.current && canCloseByEsc));
  var scrollEvent = function scrollEvent(e) {
    if (!visible) {
      return;
    }
    updatePosition();
  };
  useListener(overflowRef.current, 'scroll', scrollEvent, false, !!(visible && overlayRef.current && (_overflowRef$current = overflowRef.current) !== null && _overflowRef$current !== void 0 && _overflowRef$current.length));

  // 有弹窗情况下在 body 增加 overflow:hidden，两个弹窗同时存在也没问题，会按照堆的方式依次 pop
  Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useEffect"])(function () {
    if (visible && disableScroll) {
      var originStyle = document.body.getAttribute('style');
      setStyle(document.body, 'overflow', 'hidden');
      if (overlay_hasScroll(document.body)) {
        var scrollWidth = getScrollbarWidth();
        if (scrollWidth) {
          setStyle(document.body, 'padding-right', "calc(" + getStyle(document.body, 'padding-right') + " + " + scrollWidth + "px)");
        }
      }
      return function () {
        document.body.setAttribute('style', originStyle || '');
      };
    }
    return undefined;
  }, [visible && disableScroll]);

  // 第一次加载并且 visible=false 的情况不挂载弹窗
  Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useEffect"])(function () {
    if (!firstVisible && visible) {
      setFirst(true);
    }
  }, [visible]);

  // cache 情况下的模拟 onOpen/onClose
  var overlayNode = overlayRef.current; // overlayRef.current 可能会异步变化，所以要先接下
  Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useEffect"])(function () {
    if (cache && overlayNode) {
      if (visible) {
        updatePosition();
        handleOpen(overlayNode);
      } else {
        handleClose();
      }
    }
  }, [visible, cache && overlayNode]);

  // target 动态更新则重新刷新定位
  Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useEffect"])(function () {
    if (visible && overlayNode) {
      if (target && targetRef.current && preTarget.current !== target) {
        var targetElement = target === 'viewport' ? hasMask ? maskRef.current : body() : getTargetNode(target) || body();
        var targetNode = getHTMLElement(targetElement);
        if (targetNode && targetRef.current !== targetNode) {
          targetRef.current = targetNode;
          updatePosition();
        }
        preTarget.current = target;
      }
    }
  }, [target]);
  Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useEffect"])(function () {
    if (visible && overlayNode) {
      updatePosition();
    }
  }, [offset, placement, placementOffset, points, autoAdjust, rtl]);

  // autoFocus 弹窗关闭后回到触发点
  Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useEffect"])(function () {
    if (!visible && autoFocus && lastFocus.current) {
      lastFocus.current.focus();
      lastFocus.current = null;
    }
  }, [!visible && autoFocus && lastFocus.current]);

  // container 异步加载, 因为 container 很可能还没渲染完成，所以 visible 后这里异步设置下
  Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useEffect"])(function () {
    if (visible) {
      // 首次更新
      if (!container) {
        setContainer(getContainer());
      } else if (getContainer() !== container) {
        setContainer(getContainer());
      }
    }
  }, [visible, popupContainer]);
  if (firstVisible === false || !container) {
    return null;
  }
  if (!visible && !cache && isAnimationEnd) {
    return null;
  }
  var newChildren = child ? /*#__PURE__*/external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(overlay_RefWrapper, {
    ref: overlayRefCallback
  }, /*#__PURE__*/Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["cloneElement"])(child, extends_default()({}, others, {
    style: extends_default()({
      top: 0,
      left: 0
    }, child.props.style, positionStyleRef.current)
  }))) : null;
  var wrapperStyle = extends_default()({}, owrapperStyle);
  if (cache && !visible && isAnimationEnd) {
    wrapperStyle.display = 'none';
  }
  var maskNode = /*#__PURE__*/external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement("div", {
    className: maskClassName,
    style: maskStyle,
    ref: maskRef
  });
  var content = /*#__PURE__*/external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement("div", {
    className: wrapperClassName,
    style: wrapperStyle
  }, hasMask ? maskRender ? maskRender(maskNode) : maskNode : null, newChildren);
  return /*#__PURE__*/external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(overlay_context.Provider, {
    value: extends_default()({}, otherContext, {
      setVisibleOverlayToParent: getVisibleOverlayFromChild
    })
  }, /*#__PURE__*/Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["createPortal"])(content, container));
});
/* harmony default export */ var es_overlay = (Overlay);
// CONCATENATED MODULE: ./node_modules/@alifd/overlay/es/popup.js


var popup__excluded = ["overlay", "triggerType", "triggerClickKeyCode", "children", "defaultVisible", "className", "onVisibleChange", "container", "style", "placement", "canCloseByTrigger", "delay", "overlayProps", "safeNode", "followTrigger", "target", "disabled"];




var Popup = /*#__PURE__*/external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.forwardRef(function (props, ref) {
  var body = function body() {
    return document.body;
  };
  var overlay = props.overlay,
    _props$triggerType = props.triggerType,
    triggerType = _props$triggerType === void 0 ? 'click' : _props$triggerType,
    triggerClickKeyCode = props.triggerClickKeyCode,
    children = props.children,
    defaultVisible = props.defaultVisible,
    className = props.className,
    _props$onVisibleChang = props.onVisibleChange,
    onVisibleChange = _props$onVisibleChang === void 0 ? function () {} : _props$onVisibleChang,
    _props$container = props.container,
    container = _props$container === void 0 ? body : _props$container,
    _props$style = props.style,
    style = _props$style === void 0 ? {} : _props$style,
    _props$placement = props.placement,
    placement = _props$placement === void 0 ? 'bl' : _props$placement,
    _props$canCloseByTrig = props.canCloseByTrigger,
    canCloseByTrigger = _props$canCloseByTrig === void 0 ? true : _props$canCloseByTrig,
    _props$delay = props.delay,
    delay = _props$delay === void 0 ? 200 : _props$delay,
    _props$overlayProps = props.overlayProps,
    overlayProps = _props$overlayProps === void 0 ? {} : _props$overlayProps,
    safeNode = props.safeNode,
    _props$followTrigger = props.followTrigger,
    followTrigger = _props$followTrigger === void 0 ? false : _props$followTrigger,
    otarget = props.target,
    _props$disabled = props.disabled,
    disabled = _props$disabled === void 0 ? false : _props$disabled,
    others = objectWithoutPropertiesLoose_default()(props, popup__excluded);
  var _useState = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useState"])(defaultVisible || props.visible),
    visible = _useState[0],
    setVisible = _useState[1];
  var triggerRef = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])(null);
  var overlayRef = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])(null);
  var mouseLeaveTimer = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])(null);
  var mouseEnterTimer = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])(null);
  var overlayClick = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useRef"])(false);
  var child = children && external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.only(children);
  var overlayChild = external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Children.only(overlay);
  Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useEffect"])(function () {
    if ('visible' in props) {
      setVisible(props.visible);
    }
  }, [props.visible]);
  var handleVisibleChange = function handleVisibleChange(visible, e, triggerType) {
    if (triggerType === void 0) {
      triggerType = 'fromTrigger';
    }
    if (disabled) {
      return;
    }
    if (!('visible' in props)) {
      if (visible || overlayRef.current) {
        setVisible(visible);
      }
    }
    onVisibleChange(visible, triggerType, e);
  };
  var handleClick = function handleClick(e) {
    if (visible && !canCloseByTrigger) {
      return;
    }
    handleVisibleChange(!visible, e); // todo: rename to trigger in 1.x
  };

  var handleKeyDown = function handleKeyDown(e) {
    var keycodes = Array.isArray(triggerClickKeyCode) ? triggerClickKeyCode : [triggerClickKeyCode];
    if (keycodes.includes(e.keyCode)) {
      handleVisibleChange(!visible, e); // todo: rename to trigger in 1.x
    }
  };

  var handleMouseEnter = function handleMouseEnter(targetType) {
    return function (e) {
      if (mouseLeaveTimer.current && visible) {
        clearTimeout(mouseLeaveTimer.current);
        mouseLeaveTimer.current = null;
        return;
      }
      if (!mouseEnterTimer.current && !visible) {
        mouseEnterTimer.current = setTimeout(function () {
          handleVisibleChange(true, e, targetType);
          mouseEnterTimer.current = null;
        }, delay);
      }
    };
  };
  var handleMouseLeave = function handleMouseLeave(targetType) {
    return function (e) {
      if (!mouseLeaveTimer.current && visible) {
        mouseLeaveTimer.current = setTimeout(function () {
          handleVisibleChange(false, e, targetType);
          mouseLeaveTimer.current = null;
        }, delay);
      }
      if (mouseEnterTimer.current && !visible) {
        clearTimeout(mouseEnterTimer.current);
        mouseEnterTimer.current = null;
      }
    };
  };
  var handleFocus = function handleFocus(e) {
    handleVisibleChange(true, e);
  };
  var handleBlur = function handleBlur(e) {
    if (overlayClick.current) {
      overlayClick.current = false;
      return;
    }
    handleVisibleChange(false, e);
  };

  // 点击弹窗的时候不能被 onBlur 关闭
  var handleOverlayClick = function handleOverlayClick(e) {
    overlayClick.current = true;
  };
  var handleRequestClose = function handleRequestClose(targetType, e) {
    handleVisibleChange(false, e, targetType);
  };
  var triggerProps = {};
  var overlayOtherProps = {};
  var safeNodes = Array.isArray(safeNode) ? safeNode : [safeNode];
  if (child && !disabled) {
    var triggerTypeList = typeof triggerType === 'string' ? [triggerType] : triggerType;
    triggerTypeList.forEach(function (t) {
      var _child$props, _child$props2, _child$props3, _child$props4, _child$props5, _child$props6;
      switch (t) {
        case 'click':
          triggerProps.onClick = makeChain(handleClick, (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.onClick);
          triggerProps.onKeyDown = makeChain(handleKeyDown, (_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2.onKeyDown);
          break;
        case 'hover':
          triggerProps.onMouseEnter = makeChain(handleMouseEnter('fromTrigger'), (_child$props3 = child.props) === null || _child$props3 === void 0 ? void 0 : _child$props3.onMouseEnter);
          triggerProps.onMouseLeave = makeChain(handleMouseLeave('fromTrigger'), (_child$props4 = child.props) === null || _child$props4 === void 0 ? void 0 : _child$props4.onMouseLeave);
          overlayOtherProps.onMouseEnter = makeChain(handleMouseEnter('overlay'), overlayProps.onMouseEnter);
          overlayOtherProps.onMouseLeave = makeChain(handleMouseLeave('overlay'), overlayProps.onMouseLeave);
          break;
        case 'focus':
          triggerProps.onFocus = makeChain(handleFocus, (_child$props5 = child.props) === null || _child$props5 === void 0 ? void 0 : _child$props5.onFocus);
          triggerProps.onBlur = makeChain(handleBlur, (_child$props6 = child.props) === null || _child$props6 === void 0 ? void 0 : _child$props6.onBlur);
          overlayOtherProps.onMouseDown = makeChain(handleOverlayClick, overlayProps.onMouseDown);
          break;
      }
    });

    // trigger 是安全节点
    safeNodes.push(function () {
      return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(triggerRef.current);
    });
  }
  var target = otarget || (child ? function () {
    return Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(triggerRef.current);
  } : body);
  var getContainer = typeof container === 'string' ? function () {
    return document.getElementById(container);
  } : typeof container !== 'function' ? function () {
    return container;
  } : function () {
    return container(Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(triggerRef.current));
  };
  var overlayContainer = followTrigger ? function () {
    var _findDOMNode;
    return (_findDOMNode = Object(external___root___ReactDOM___commonjs2___react_dom___commonjs___react_dom___amd___react_dom__["findDOMNode"])(triggerRef.current)) === null || _findDOMNode === void 0 ? void 0 : _findDOMNode.parentNode;
  } : getContainer;

  // triggerRef 可能会更新，等计算的时候再通过 findDOMNode 取真实值
  var refWrapperRef = Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useCallback"])(function (ref) {
    triggerRef.current = ref;
  }, []);
  return /*#__PURE__*/external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.Fragment, null, child && /*#__PURE__*/external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(overlay_RefWrapper, {
    ref: refWrapperRef
  }, /*#__PURE__*/external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.cloneElement(child, triggerProps)), /*#__PURE__*/external___root___React___commonjs2___react___commonjs___react___amd___react___default.a.createElement(es_overlay, extends_default()({}, others, overlayOtherProps, {
    placement: placement,
    container: overlayContainer,
    safeNode: safeNodes,
    visible: visible,
    target: target,
    onRequestClose: handleRequestClose,
    ref: Object(external___root___React___commonjs2___react___commonjs___react___amd___react__["useCallback"])(makeChain(saveRef(overlayRef), saveRef(ref)), [])
  }), overlayChild));
});
/* harmony default export */ var popup = (Popup);
// CONCATENATED MODULE: ./node_modules/@alifd/overlay/es/index.js



var es_Overlay = es_overlay;
es_Overlay.Popup = popup;
es_Overlay.OverlayContext = overlay_context;
/* harmony default export */ var es = __webpack_exports__["default"] = (es_Overlay);

/***/ }),
/* 59 */
/***/ (function(module, exports) {

function _extends() {
  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _extends.apply(this, arguments);
}
module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.valueToSelectKey = exports.getValueDataSource = exports.filterDataSource = exports.flattingDataSource = exports.normalizeDataSource = exports.parseDataSourceFromChildren = exports.loopMap = exports.filter = exports.escapeForReg = exports.isNull = exports.isSingle = void 0;
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
/**
 * util module
 */
/**
 * 是否是单选模式
 * @param {string} mode
 * @return {boolean} is single mode
 */
function isSingle(mode) {
    return !mode || mode === 'single';
}
exports.isSingle = isSingle;
/**
 * 在 Select 中，认为 null 和 undefined 都是空值
 * @param {*} n any object
 * @return {boolean}
 */
function isNull(n) {
    return n === null || n === undefined;
}
exports.isNull = isNull;
/**
 * 将字符串中的正则表达式关键字符添加转义
 * @param {string} str
 * @return {string}
 */
function escapeForReg(str) {
    return str.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
}
exports.escapeForReg = escapeForReg;
/**
 * filter by key
 * @param {string} key filter key
 * @param {object} item item object
 * @return {boolean} it's filtered
 */
function filter(key, item) {
    var _key = escapeForReg("".concat(key));
    var regExp = new RegExp("(".concat(_key, ")"), 'ig');
    return regExp.test("".concat(item.value)) || regExp.test("".concat(item.label));
}
exports.filter = filter;
/**
 * loop map
 * @param {Array} dataSource
 * @param {function} callback
 * @return {Array}
 * ----
 * @callback ~loopCallback
 * @param {object} option
 */
function loopMap(dataSource, callback) {
    var result = [];
    dataSource.forEach(function (option) {
        if (option.children) {
            var children = loopMap(option.children, callback);
            result.push(tslib_1.__assign(tslib_1.__assign({}, option), { children: children }));
        } else {
            // eslint-disable-next-line callback-return
            var tmp = callback(option);
            tmp && result.push(tmp);
        }
    });
    return result;
}
exports.loopMap = loopMap;
/**
 * Parse dataSource from MenuItem
 * @static
 * @param {Array<Element>} children
 * @param {number} [deep=0] recursion deep level
 */
function parseDataSourceFromChildren(children, deep) {
    if (deep === void 0) {
        deep = 0;
    }
    var source = [];
    react_1.Children.forEach(children, function (child, index) {
        if (!child) {
            return;
        }
        var type = child.type,
            childProps = child.props;
        var item2 = { deep: deep };
        var isOption = false;
        var isOptionGroup = false;
        if (typeof type === 'function' && type._typeMark === 'next_select_option' || type === 'option') {
            isOption = true;
        }
        if (typeof type === 'function' && type._typeMark === 'next_select_option_group' || type === 'optgroup') {
            isOptionGroup = true;
        }
        if (!isOption && !isOptionGroup) {
            return;
        }
        if (isOption) {
            // option
            // If children is a string, it can be used as value
            var isStrChild = typeof childProps.children === 'string';
            // value > key > string children > index
            item2.value = 'value' in childProps ? childProps.value : 'key' in childProps ? childProps.key : isStrChild ? childProps.children : "".concat(index);
            item2.label = childProps.label || childProps.children || "".concat(item2.value);
            if ('title' in childProps) {
                item2.title = childProps.title;
            }
            childProps.disabled === true && (item2.disabled = true);
            // You can put your extra data here, and use it in `itemRender` or `labelRender`
            (0, _extends3.default)(item2, childProps['data-extra'] || {});
        } else if (isOptionGroup && deep < 1) {
            // option group
            item2.label = childProps.label || 'Group';
            // parse children nodes
            item2.children = parseDataSourceFromChildren(childProps.children, deep + 1);
        }
        source.push(item2);
    });
    return source;
}
exports.parseDataSourceFromChildren = parseDataSourceFromChildren;
/**
 * Normalize dataSource
 * @static
 * @param {Array} dataSource
 * @param {number} [deep=0] recursion deep level
 * ----
 * value priority: value > 'index'
 * label priority: label > 'value' > 'index'
 * disabled: disabled === true
 */
function normalizeDataSource(dataSource, deep, showDataSourceChildren) {
    if (deep === void 0) {
        deep = 0;
    }
    if (showDataSourceChildren === void 0) {
        showDataSourceChildren = true;
    }
    var source = [];
    dataSource.forEach(function (item, index) {
        // enable array of basic type
        if (/string|boolean|number/.test(typeof item === "undefined" ? "undefined" : (0, _typeof3.default)(item)) || item === null || item === undefined) {
            item = { label: "".concat(item), value: item };
        }
        // filter off addon item
        if (item && item.__isAddon) {
            return;
        }
        var item2 = { deep: deep };
        // deep < 1: only 2 level allowed
        if (Array.isArray(item.children) && deep < 1 && showDataSourceChildren) {
            // handle group
            item2.label = item.label || item.value || "Group ".concat(index);
            // parse children
            item2.children = normalizeDataSource(item.children, deep + 1);
        } else {
            var value = item.value,
                label = item.label,
                disabled = item.disabled,
                title = item.title,
                others = tslib_1.__rest(item, ["value", "label", "disabled", "title"]);
            // undefined 认为是没传取 index 值替代
            item2.value = typeof value !== 'undefined' ? value : "".concat(index);
            item2.label = label || "".concat(item2.value);
            if ('title' in item) {
                item2.title = title;
            }
            disabled === true && (item2.disabled = true);
            (0, _extends3.default)(item2, others);
        }
        source.push(item2);
    });
    return source;
}
exports.normalizeDataSource = normalizeDataSource;
/**
 * Get flatten dataSource
 * @static
 * @param  {Array} dataSource structured dataSource
 * @return {Array}
 */
function flattingDataSource(dataSource) {
    var source = [];
    dataSource.forEach(function (item) {
        if (Array.isArray(item.children)) {
            source.push.apply(source, tslib_1.__spreadArray([], tslib_1.__read(flattingDataSource(item.children)), false));
        } else {
            source.push(item);
        }
    });
    return source;
}
exports.flattingDataSource = flattingDataSource;
function filterDataSource(dataSource, key, filter, addonKey) {
    if (!Array.isArray(dataSource)) {
        return [];
    }
    if (typeof key === 'undefined' || key === null) {
        return [].concat(dataSource);
    }
    var addKey = true;
    var menuDataSource = loopMap(dataSource, function (option) {
        if (key === "".concat(option.value)) {
            addKey = false;
        }
        return filter(key, option) && !option.__isAddon && option;
    });
    // if key not in menuDataSource, add key to dataSource
    if (addonKey && key && addKey) {
        menuDataSource.unshift({
            value: key,
            label: key,
            __isAddon: true
        });
    }
    return menuDataSource;
}
exports.filterDataSource = filterDataSource;
function getKeyItemByValue(value, valueMap) {
    var item;
    if ((typeof value === "undefined" ? "undefined" : (0, _typeof3.default)(value)) === 'object') {
        if (value.hasOwnProperty('value')) {
            item = value;
        } else {
            item = tslib_1.__assign({ value: '' }, value);
        }
    } else {
        item = valueMap["".concat(value)] || {
            value: value,
            label: value
        };
    }
    return item;
}
/**
 * compute valueDataSource by new value
 * @param {Array/String} value 数据
 * @param {Object} mapValueDS   上个value的缓存数据 value => {value,label} 的映射关系表
 * @param {*} mapMenuDS  通过 dataSource 建立 value => {value,label} 的映射关系表
 * @returns {Object} value: [value]; valueDS: [{value,label}]; mapValueDS: {value: {value,label}}
 */
function getValueDataSource(value, mapValueDS, mapMenuDS) {
    var _a;
    if (isNull(value)) {
        return {};
    }
    var newValue = [];
    var newValueDS = [];
    var newMapValueDS = {};
    var _newMapDS = (0, _extends3.default)({}, mapValueDS, mapMenuDS);
    if (Array.isArray(value)) {
        value.forEach(function (v) {
            var item = getKeyItemByValue(v, _newMapDS);
            newValueDS.push(item);
            newMapValueDS["".concat(item.value)] = item;
            newValue.push(item.value);
        });
        return {
            value: newValue, // [value]
            valueDS: newValueDS, // [{value,label}]
            mapValueDS: newMapValueDS // {value: {value,label}}
        };
    } else {
        var item = getKeyItemByValue(value, _newMapDS);
        return {
            value: item.value,
            valueDS: item,
            mapValueDS: (_a = {}, _a["".concat(item.value)] = item, _a)
        };
    }
}
exports.getValueDataSource = getValueDataSource;
/**
 * Get flatten dataSource
 * @static
 * @param  {any} value structured dataSource
 * @return {String}
 */
function valueToSelectKey(value) {
    var val;
    if ((typeof value === "undefined" ? "undefined" : (0, _typeof3.default)(value)) === 'object' && value.hasOwnProperty('value')) {
        val = value.value;
    } else {
        val = value;
    }
    return "".concat(val);
}
exports.valueToSelectKey = valueToSelectKey;
/**
 * UP Down 改进双向链表方法
 */
// function DoubleLinkList(element){
//     this.prev = null;
//     this.next = null;
//     this.element = element;
// }
//
// export function mapDoubleLinkList(dataSource){
//
//     const mapDS = {};
//     let doubleLink = null;
//
//     let head = null;
//     let tail = null;
//
//     function  append(element) {
//         if (!doubleLink) {
//             doubleLink = new DoubleLinkList(element);
//             head = doubleLink;
//             tail = doubleLink;
//             return doubleLink;
//         }
//
//         const node = new DoubleLinkList(element);
//         tail.next = node;
//         node.prev = tail;
//         tail = node;
//
//         return tail;
//     }
//
//     dataSource.forEach((item => {
//         if (item.disabled) {
//             return;
//         }
//         mapDS[`${item.value}`] = append(item);
//     }));
//
//     return mapDS;
// }
//

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var row_1 = __webpack_require__(62);
var cell_1 = __webpack_require__(63);
var util_1 = __webpack_require__(4);
var noop = function noop() {};
var Body = /** @class */function (_super) {
    tslib_1.__extends(Body, _super);
    function Body() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.getRowRef = function (i, row) {
            _this.props.rowRef(i, row);
        };
        _this.onRowClick = function (record, index, e) {
            _this.props.onRowClick(record, index, e);
        };
        _this.onRowMouseEnter = function (record, index, e) {
            _this.props.onRowMouseEnter(record, index, e);
        };
        _this.onRowMouseLeave = function (record, index, e) {
            _this.props.onRowMouseLeave(record, index, e);
        };
        _this.onBodyMouseOver = function (e) {
            _this.props.onBodyMouseOver(e);
        };
        _this.onBodyMouseOut = function (e) {
            _this.props.onBodyMouseOut(e);
        };
        _this.getEmptyNode = function (ref) {
            _this.emptyNode = ref;
        };
        _this.setEmptyDomStyle = function () {
            var tableEl = _this.props.tableEl;
            // getboundingclientRect 获取的是除 margin 之外的内容区，可能带小数点，不四舍五入
            var borderLeftWidth = util_1.dom.getStyle(tableEl, 'borderLeftWidth');
            var tableWidth = tableEl && tableEl.getBoundingClientRect().width;
            var totalWidth = tableWidth - borderLeftWidth - 1 || '100%';
            util_1.dom.setStyle(_this.emptyNode, { width: totalWidth });
        };
        return _this;
    }
    Body.prototype.componentDidMount = function () {
        util_1.events.on(window, 'resize', this.setEmptyDomStyle);
    };
    Body.prototype.componentDidUpdate = function () {
        this.setEmptyDomStyle();
    };
    Body.prototype.componentWillUnmount = function () {
        util_1.events.off(window, 'resize', this.setEmptyDomStyle);
    };
    Body.prototype.render = function () {
        var _this = this;
        /*eslint-disable no-unused-vars */
        var _a = this.props,
            prefix = _a.prefix,
            className = _a.className,
            children = _a.children,
            Tag = _a.component,
            colGroup = _a.colGroup,
            loading = _a.loading,
            emptyContent = _a.emptyContent,
            components = _a.components,
            getCellProps = _a.getCellProps,
            primaryKey = _a.primaryKey,
            getRowProps = _a.getRowProps,
            dataSource = _a.dataSource,
            cellRef = _a.cellRef,
            columns = _a.columns,
            rowRef = _a.rowRef,
            onRowClick = _a.onRowClick,
            onRowMouseEnter = _a.onRowMouseEnter,
            onRowMouseLeave = _a.onRowMouseLeave,
            onBodyMouseOver = _a.onBodyMouseOver,
            onBodyMouseOut = _a.onBodyMouseOut,
            locale = _a.locale,
            pure = _a.pure,
            expandedIndexSimulate = _a.expandedIndexSimulate,
            tableEl = _a.tableEl,
            rtl = _a.rtl,
            crossline = _a.crossline,
            tableWidth = _a.tableWidth,
            others = tslib_1.__rest(_a, ["prefix", "className", "children", "component", "colGroup", "loading", "emptyContent", "components", "getCellProps", "primaryKey", "getRowProps", "dataSource", "cellRef", "columns", "rowRef", "onRowClick", "onRowMouseEnter", "onRowMouseLeave", "onBodyMouseOver", "onBodyMouseOut", "locale", "pure", "expandedIndexSimulate", "tableEl", "rtl", "crossline", "tableWidth"]);
        var totalWidth = +(tableEl && tableEl.clientWidth) - 1 || '100%';
        var _b = components.Row,
            Row = _b === void 0 ? row_1.default : _b,
            _c = components.Cell,
            Cell = _c === void 0 ? cell_1.default : _c;
        var empty = loading ? react_1.default.createElement("span", null, "\xA0") : emptyContent || locale.empty;
        var rows = react_1.default.createElement("tr", null, react_1.default.createElement("td", { colSpan: columns.length }, react_1.default.createElement("div", { ref: this.getEmptyNode, className: "".concat(prefix, "table-empty"), style: { position: 'sticky', left: 0, overflow: 'hidden', width: totalWidth } }, empty)));
        if (Tag === 'div') {
            rows = react_1.default.createElement("table", { role: "table" }, react_1.default.createElement("tbody", null, rows));
        }
        if (dataSource.length) {
            rows = dataSource.map(function (record, index) {
                var _a;
                var rowProps = {};
                // record may be a string
                var rowIndex = (typeof record === "undefined" ? "undefined" : (0, _typeof3.default)(record)) === 'object' && '__rowIndex' in record ? record.__rowIndex : index;
                if (expandedIndexSimulate) {
                    rowProps = record.__expanded ? {} : getRowProps(record, index / 2);
                } else {
                    rowProps = getRowProps(record, rowIndex);
                }
                rowProps = rowProps || {};
                var rowClass = rowProps.className;
                var className = (0, classnames_1.default)((_a = {
                    first: index === 0,
                    last: index === dataSource.length - 1
                }, _a[rowClass] = rowClass, _a));
                var expanded = record.__expanded ? 'expanded' : '';
                return react_1.default.createElement(Row, tslib_1.__assign({ key: "".concat(record[primaryKey] || (record[primaryKey] === 0 ? 0 : rowIndex)).concat(expanded) }, rowProps, { ref: _this.getRowRef.bind(_this, expanded ? "".concat(rowIndex, "_expanded") : rowIndex), colGroup: colGroup, rtl: rtl, columns: columns, primaryKey: primaryKey, record: record, rowIndex: rowIndex, __rowIndex: rowIndex, prefix: prefix, pure: pure, cellRef: cellRef, getCellProps: getCellProps, className: className, Cell: Cell, tableEl: tableEl, onClick: _this.onRowClick, locale: locale, onMouseEnter: _this.onRowMouseEnter, onMouseLeave: _this.onRowMouseLeave }));
            });
        } else {
            // 异步设置空数据时的宽度
            this.setEmptyDomStyle();
        }
        var event = crossline ? {
            onMouseOver: this.onBodyMouseOver,
            onMouseOut: this.onBodyMouseOut
        } : {};
        return react_1.default.createElement(Tag, tslib_1.__assign({ className: className }, others, event), rows, children);
    };
    Body.propTypes = {
        loading: prop_types_1.default.bool,
        emptyContent: prop_types_1.default.any,
        tableEl: prop_types_1.default.any,
        prefix: prop_types_1.default.string,
        pure: prop_types_1.default.bool,
        components: prop_types_1.default.object,
        getCellProps: prop_types_1.default.func,
        cellRef: prop_types_1.default.func,
        primaryKey: prop_types_1.default.oneOfType([prop_types_1.default.symbol, prop_types_1.default.string]),
        getRowProps: prop_types_1.default.func,
        rowRef: prop_types_1.default.func,
        dataSource: prop_types_1.default.array,
        children: prop_types_1.default.any,
        className: prop_types_1.default.string,
        component: prop_types_1.default.string,
        colGroup: prop_types_1.default.object,
        columns: prop_types_1.default.array,
        onRowClick: prop_types_1.default.func,
        onRowMouseEnter: prop_types_1.default.func,
        onRowMouseLeave: prop_types_1.default.func,
        onBodyMouseOver: prop_types_1.default.func,
        onBodyMouseOut: prop_types_1.default.func,
        locale: prop_types_1.default.object,
        crossline: prop_types_1.default.bool,
        tableWidth: prop_types_1.default.number
    };
    Body.defaultProps = {
        loading: false,
        prefix: 'next-',
        components: {},
        getCellProps: noop,
        cellRef: noop,
        primaryKey: 'id',
        getRowProps: noop,
        rowRef: noop,
        dataSource: [],
        component: 'tbody',
        columns: []
    };
    return Body;
}(react_1.default.Component);
exports.default = Body;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(18);
var noop = function noop() {};
var Row = /** @class */function (_super) {
    tslib_1.__extends(Row, _super);
    function Row() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.onClick = function (e) {
            var _a = _this.props,
                record = _a.record,
                rowIndex = _a.rowIndex;
            _this.props.onClick(record, rowIndex, e);
        };
        _this.onMouseEnter = function (e) {
            var _a = _this.props,
                record = _a.record,
                rowIndex = _a.rowIndex,
                __rowIndex = _a.__rowIndex;
            var row = __rowIndex || rowIndex;
            _this.onRowHover(record, row, true, e);
        };
        _this.onMouseLeave = function (e) {
            var _a = _this.props,
                record = _a.record,
                rowIndex = _a.rowIndex,
                __rowIndex = _a.__rowIndex;
            var row = __rowIndex || rowIndex;
            _this.onRowHover(record, row, false, e);
        };
        return _this;
    }
    Row.prototype.shouldComponentUpdate = function (nextProps) {
        if (nextProps.pure) {
            var isEqual = util_1.obj.shallowEqual(this.props, nextProps);
            return !isEqual;
        }
        return true;
    };
    Row.prototype.onRowHover = function (record, index, isEnter, e) {
        var _a = this.props,
            onMouseEnter = _a.onMouseEnter,
            onMouseLeave = _a.onMouseLeave,
            currentRow = (0, react_dom_1.findDOMNode)(this);
        if (isEnter) {
            onMouseEnter(record, index, e);
            currentRow && util_1.dom.addClass(currentRow, 'hovered');
        } else {
            onMouseLeave(record, index, e);
            currentRow && util_1.dom.removeClass(currentRow, 'hovered');
        }
    };
    Row.prototype.renderCells = function (record, rowIndex) {
        var _this = this;
        var _a = this.props,
            Cell = _a.Cell,
            columns = _a.columns,
            getCellProps = _a.getCellProps,
            cellRef = _a.cellRef,
            prefix = _a.prefix,
            primaryKey = _a.primaryKey,

        // __rowIndex 是连贯的table行的索引，只有在开启expandedIndexSimulate的ExpandedTable模式下__rowIndex可能会不等于rowIndex
        __rowIndex = _a.__rowIndex,
            pure = _a.pure,
            locale = _a.locale,
            rtl = _a.rtl;
        // use params first, it's for list
        rowIndex = rowIndex !== undefined ? rowIndex : this.props.rowIndex;
        var lockType = this.context.lockType;
        return columns.map(function (child, index) {
            var _a;
            /* eslint-disable no-unused-vars, prefer-const */
            var dataIndex = child.dataIndex,
                align = child.align,
                alignHeader = child.alignHeader,
                width = child.width,
                colSpan = child.colSpan,
                style = child.style,
                cellStyle = child.cellStyle,
                __colIndex = child.__colIndex,
                others = tslib_1.__rest(child, ["dataIndex", "align", "alignHeader", "width", "colSpan", "style", "cellStyle", "__colIndex"]);
            var colIndex = '__colIndex' in child ? __colIndex : index;
            // colSpan should show in body td by the way of <Table.Column colSpan={2} />
            // tbody's cell merge should only by the way of <Table cellProps={} />
            var value = (0, util_2.fetchDataByPath)(record, dataIndex);
            var attrs = getCellProps(rowIndex, colIndex, dataIndex, record) || {};
            if (_this.context.notRenderCellIndex) {
                var matchCellIndex = _this.context.notRenderCellIndex.map(function (cellIndex) {
                    return cellIndex.toString();
                }).indexOf([rowIndex, colIndex].toString());
                if (matchCellIndex > -1) {
                    _this.context.notRenderCellIndex.splice(matchCellIndex, 1);
                    return null;
                }
            }
            if (attrs.colSpan && attrs.colSpan > 1 || attrs.rowSpan && attrs.rowSpan > 1) {
                _this._getNotRenderCellIndex(colIndex, rowIndex, attrs.colSpan || 1, attrs.rowSpan || 1);
            }
            var cellClass = attrs.className;
            var className = (0, classnames_1.default)((_a = {
                first: lockType !== 'right' && colIndex === 0,
                last: lockType !== 'left' && (colIndex === columns.length - 1 || colIndex + attrs.colSpan === columns.length)
            }, _a[child.className] = child.className, _a[cellClass] = cellClass, _a));
            var newStyle = tslib_1.__assign(tslib_1.__assign({}, attrs.style), cellStyle);
            return react_1.default.createElement(Cell, tslib_1.__assign({ key: "".concat(__rowIndex, "-").concat(colIndex) }, others, attrs, { style: newStyle, "data-next-table-col": colIndex, "data-next-table-row": rowIndex, ref: function ref(cell) {
                    return cellRef(__rowIndex, colIndex, cell);
                }, prefix: prefix, pure: pure, primaryKey: primaryKey, record: record, className: className, value: value, colIndex: colIndex, rowIndex: rowIndex, align: align, locale: locale, rtl: rtl, width: width }));
        });
    };
    Row.prototype._getNotRenderCellIndex = function (colIndex, rowIndex, colSpan, rowSpan) {
        var maxColIndex = colSpan;
        var maxRowIndex = rowSpan;
        var notRenderCellIndex = [];
        for (var i = 0; i < maxColIndex; i++) {
            for (var j = 0; j < maxRowIndex; j++) {
                notRenderCellIndex.push([rowIndex + j, colIndex + i]);
            }
        }
        [].push.apply(this.context.notRenderCellIndex, notRenderCellIndex);
    };
    Row.prototype.render = function () {
        var _a;
        /* eslint-disable no-unused-vars*/
        var _b = this.props,
            prefix = _b.prefix,
            className = _b.className,
            onClick = _b.onClick,
            onMouseEnter = _b.onMouseEnter,
            onMouseLeave = _b.onMouseLeave,
            columns = _b.columns,
            Cell = _b.Cell,
            getCellProps = _b.getCellProps,
            rowIndex = _b.rowIndex,
            record = _b.record,
            __rowIndex = _b.__rowIndex,
            children = _b.children,
            primaryKey = _b.primaryKey,
            cellRef = _b.cellRef,
            colGroup = _b.colGroup,
            pure = _b.pure,
            locale = _b.locale,
            expandedIndexSimulate = _b.expandedIndexSimulate,
            tableEl = _b.tableEl,
            rtl = _b.rtl,
            wrapper = _b.wrapper,
            others = tslib_1.__rest(_b, ["prefix", "className", "onClick", "onMouseEnter", "onMouseLeave", "columns", "Cell", "getCellProps", "rowIndex", "record", "__rowIndex", "children", "primaryKey", "cellRef", "colGroup", "pure", "locale", "expandedIndexSimulate", "tableEl", "rtl", "wrapper"]);
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "table-row")] = true, _a[className] = className, _a));
        var tr = react_1.default.createElement("tr", tslib_1.__assign({ className: cls, role: "row" }, others, { onClick: this.onClick, onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave }), this.renderCells(record), children);
        return wrapper(tr);
    };
    Row.propTypes = {
        prefix: prop_types_1.default.string,
        pure: prop_types_1.default.bool,
        primaryKey: prop_types_1.default.oneOfType([prop_types_1.default.symbol, prop_types_1.default.string]),
        className: prop_types_1.default.string,
        columns: prop_types_1.default.array,
        record: prop_types_1.default.any,
        Cell: prop_types_1.default.func,
        rowIndex: prop_types_1.default.number,
        getCellProps: prop_types_1.default.func,
        onClick: prop_types_1.default.func,
        onMouseEnter: prop_types_1.default.func,
        onMouseLeave: prop_types_1.default.func,
        children: prop_types_1.default.any,
        cellRef: prop_types_1.default.func,
        colGroup: prop_types_1.default.object,
        locale: prop_types_1.default.object,
        wrapper: prop_types_1.default.func
    };
    Row.defaultProps = {
        prefix: 'next-',
        primaryKey: 'id',
        columns: [],
        record: {},
        getCellProps: noop,
        onClick: noop,
        onMouseEnter: noop,
        onMouseLeave: noop,
        cellRef: noop,
        colGroup: {},
        wrapper: function wrapper(row) {
            return row;
        }
    };
    Row.contextTypes = {
        notRenderCellIndex: prop_types_1.default.array,
        lockType: prop_types_1.default.oneOf(['left', 'right'])
    };
    return Row;
}(react_1.default.Component);
exports.default = Row;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var util_1 = __webpack_require__(4);
var Cell = /** @class */function (_super) {
    tslib_1.__extends(Cell, _super);
    function Cell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Cell.prototype.shouldComponentUpdate = function (nextProps) {
        if (nextProps.pure) {
            var isEqual = util_1.obj.shallowEqual(this.props, nextProps);
            return !isEqual;
        }
        return true;
    };
    Cell.prototype.render = function () {
        var _a;
        /* eslint-disable no-unused-vars */
        var _b = this.props,
            prefix = _b.prefix,
            className = _b.className,
            cell = _b.cell,
            value = _b.value,
            resizable = _b.resizable,
            asyncResizable = _b.asyncResizable,
            colIndex = _b.colIndex,
            rowIndex = _b.rowIndex,
            __colIndex = _b.__colIndex,
            record = _b.record,
            context = _b.context,
            align = _b.align,
            _c = _b.style,
            style = _c === void 0 ? {} : _c,
            Tag = _b.component,
            children = _b.children,
            title = _b.title,
            width = _b.width,
            innerStyle = _b.innerStyle,
            primaryKey = _b.primaryKey,
            __normalized = _b.__normalized,
            filterMode = _b.filterMode,
            filterMenuProps = _b.filterMenuProps,
            filterProps = _b.filterProps,
            filters = _b.filters,
            sortable = _b.sortable,
            sortDirections = _b.sortDirections,
            lock = _b.lock,
            pure = _b.pure,
            locale = _b.locale,
            expandedIndexSimulate = _b.expandedIndexSimulate,
            rtl = _b.rtl,
            isIconLeft = _b.isIconLeft,
            type = _b.type,
            htmlTitle = _b.htmlTitle,
            wordBreak = _b.wordBreak,
            others = tslib_1.__rest(_b, ["prefix", "className", "cell", "value", "resizable", "asyncResizable", "colIndex", "rowIndex", "__colIndex", "record", "context", "align", "style", "component", "children", "title", "width", "innerStyle", "primaryKey", "__normalized", "filterMode", "filterMenuProps", "filterProps", "filters", "sortable", "sortDirections", "lock", "pure", "locale", "expandedIndexSimulate", "rtl", "isIconLeft", "type", "htmlTitle", "wordBreak"]);
        var tagStyle = tslib_1.__assign({}, style);
        var cellProps = { value: value, index: rowIndex, record: record, context: context };
        var content = cell;
        if (react_1.default.isValidElement(content)) {
            // header情况下， props.cell为 column.title，不需要传递这些props
            content = react_1.default.cloneElement(content, type === 'header' ? undefined : cellProps);
        } else if (typeof content === 'function') {
            content = content(value, rowIndex, record, context);
        }
        if (align) {
            tagStyle.textAlign = align;
            if (rtl) {
                tagStyle.textAlign = align === 'left' ? 'right' : align === 'right' ? 'left' : align;
            }
        }
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "table-cell")] = true, _a["".concat(prefix, "table-word-break-").concat(wordBreak)] = !!wordBreak, _a[className] = className, _a));
        return react_1.default.createElement(Tag, tslib_1.__assign({}, (0, util_1.pickAttrs)(others), { className: cls, style: tagStyle, role: "gridcell" }), react_1.default.createElement("div", { className: "".concat(prefix, "table-cell-wrapper"), ref: this.props.getCellDomRef, style: innerStyle, title: htmlTitle, "data-next-table-col": __colIndex, "data-next-table-row": rowIndex }, isIconLeft ? children : content, isIconLeft ? content : children));
    };
    Cell.propTypes = {
        prefix: prop_types_1.default.string,
        pure: prop_types_1.default.bool,
        primaryKey: prop_types_1.default.oneOfType([prop_types_1.default.symbol, prop_types_1.default.string]),
        className: prop_types_1.default.string,
        record: prop_types_1.default.any,
        value: prop_types_1.default.any,
        isIconLeft: prop_types_1.default.bool,
        colIndex: prop_types_1.default.number,
        rowIndex: prop_types_1.default.number,
        // 经过锁列调整后的列索引，lock right的列会从非0开始
        __colIndex: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        title: prop_types_1.default.any,
        width: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        context: prop_types_1.default.any,
        cell: prop_types_1.default.oneOfType([prop_types_1.default.element, prop_types_1.default.node, prop_types_1.default.func]),
        align: prop_types_1.default.oneOf(['left', 'center', 'right']),
        component: prop_types_1.default.oneOf(['td', 'th', 'div']),
        children: prop_types_1.default.any,
        style: prop_types_1.default.object,
        innerStyle: prop_types_1.default.object,
        filterMode: prop_types_1.default.oneOf(['single', 'multiple']),
        filterMenuProps: prop_types_1.default.object,
        filterProps: prop_types_1.default.object,
        filters: prop_types_1.default.array,
        sortable: prop_types_1.default.bool,
        sortDirections: prop_types_1.default.arrayOf(prop_types_1.default.oneOf(['desc', 'asc', 'default'])),
        lock: prop_types_1.default.any,
        type: prop_types_1.default.oneOf(['header', 'body']),
        resizable: prop_types_1.default.bool,
        asyncResizable: prop_types_1.default.bool,
        __normalized: prop_types_1.default.bool
    };
    Cell.defaultProps = {
        component: 'td',
        type: 'body',
        isIconLeft: false,
        cell: function cell(value) {
            return value;
        },
        prefix: 'next-'
    };
    return Cell;
}(react_1.default.Component);
exports.default = Cell;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var header_1 = __webpack_require__(181);
/* eslint-disable react/prefer-stateless-function */
var FixedHeader = /** @class */function (_super) {
    tslib_1.__extends(FixedHeader, _super);
    function FixedHeader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FixedHeader.prototype.componentDidMount = function () {
        this.context.getNode('header', (0, react_dom_1.findDOMNode)(this));
    };
    // 这里的 style={{overflow: 'unset'}} 可以删掉，只是为了解决用户js升级但是样式没升级的情况
    // 这里的 style={{position: 'absolute', right: 0}} 也可以删掉，是为了兼容用户js升级但是样式没升级的情况
    FixedHeader.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            className = _a.className,
            colGroup = _a.colGroup,
            tableWidth = _a.tableWidth,
            others = tslib_1.__rest(_a, ["prefix", "className", "colGroup", "tableWidth"]);
        var _b = this.context,
            onFixedScrollSync = _b.onFixedScrollSync,
            lockType = _b.lockType;
        return react_1.default.createElement("div", { className: className, onScroll: onFixedScrollSync }, react_1.default.createElement("div", { className: "".concat(prefix, "table-header-inner"), style: { overflow: 'unset' } }, react_1.default.createElement("table", { style: { width: tableWidth } }, colGroup, react_1.default.createElement(header_1.default, tslib_1.__assign({}, others, { prefix: prefix })))), !lockType && react_1.default.createElement("div", { className: "".concat(prefix, "table-header-fixer"), style: { position: 'absolute', right: 0 } }));
    };
    FixedHeader.propTypes = {
        children: prop_types_1.default.any,
        prefix: prop_types_1.default.string,
        className: prop_types_1.default.string,
        colGroup: prop_types_1.default.any,
        tableWidth: prop_types_1.default.number
    };
    FixedHeader.contextTypes = {
        getNode: prop_types_1.default.func,
        onFixedScrollSync: prop_types_1.default.func,
        lockType: prop_types_1.default.oneOf(['left', 'right'])
    };
    return FixedHeader;
}(react_1.default.Component);
exports.default = FixedHeader;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
/* eslint-disable react/prefer-stateless-function */
var FixedWrapper = /** @class */function (_super) {
    tslib_1.__extends(FixedWrapper, _super);
    function FixedWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FixedWrapper.prototype.render = function () {
        var _a = this.props,
            children = _a.children,
            wrapperContent = _a.wrapperContent,
            prefix = _a.prefix;
        return react_1.default.createElement("div", { className: "".concat(prefix, "table-inner") }, children, wrapperContent);
    };
    FixedWrapper.propTypes = {
        children: prop_types_1.default.any,
        prefix: prop_types_1.default.string,
        colGroup: prop_types_1.default.any,
        wrapperContent: prop_types_1.default.any
    };
    return FixedWrapper;
}(react_1.default.Component);
exports.default = FixedWrapper;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var React = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
var classNames = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
/**
 * Typography.Text
 */
var Text = /** @class */function (_super) {
    tslib_1.__extends(Text, _super);
    function Text() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Text.prototype.wrapChildren = function (children, wrapper) {
        return React.createElement(wrapper, {}, children);
    };
    Text.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            className = _a.className,
            component = _a.component,
            strong = _a.strong,
            underline = _a.underline,
            deleteProp = _a.delete,
            code = _a.code,
            mark = _a.mark,
            rtl = _a.rtl,
            children = _a.children,
            others = tslib_1.__rest(_a, ["prefix", "className", "component", "strong", "underline", "delete", "code", "mark", "rtl", "children"]);
        var Component = component;
        var formattedChildren = children;
        if (strong) {
            formattedChildren = this.wrapChildren(formattedChildren, 'strong');
        }
        if (underline) {
            formattedChildren = this.wrapChildren(formattedChildren, 'u');
        }
        if (deleteProp) {
            formattedChildren = this.wrapChildren(formattedChildren, 'del');
        }
        if (code) {
            formattedChildren = this.wrapChildren(formattedChildren, 'code');
        }
        if (mark) {
            formattedChildren = this.wrapChildren(formattedChildren, 'mark');
        }
        if (rtl) {
            others.dir = 'rtl';
        }
        var cls = classNames("".concat(prefix, "typography"), className);
        return React.createElement(Component, tslib_1.__assign({}, others, { className: cls }), formattedChildren);
    };
    Text.propTypes = {
        prefix: PropTypes.string,
        delete: PropTypes.bool,
        mark: PropTypes.bool,
        underline: PropTypes.bool,
        strong: PropTypes.bool,
        code: PropTypes.bool,
        component: PropTypes.elementType,
        children: PropTypes.node,
        rtl: PropTypes.bool
    };
    Text.defaultProps = {
        prefix: 'next-',
        delete: false,
        mark: false,
        underline: false,
        strong: false,
        code: false,
        component: 'span',
        rtl: false
    };
    return Text;
}(React.Component);
exports.default = config_provider_1.default.config(Text);

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var React = __webpack_require__(1);
var react_1 = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
var classnames = __webpack_require__(3);
var resize_observer_polyfill_1 = __webpack_require__(49);
var react_lifecycles_compat_1 = __webpack_require__(6);
var util_1 = __webpack_require__(4);
var config_provider_1 = __webpack_require__(5);
var util_2 = __webpack_require__(258);
/** Affix */
var Affix = /** @class */function (_super) {
    tslib_1.__extends(Affix, _super);
    function Affix(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._clearContainerEvent = function () {
            if (_this.timeout) {
                clearTimeout(_this.timeout);
                _this.timeout = null;
            }
            var container = _this.props.container;
            _this._removeEventHandlerForContainer(container);
        };
        _this.updatePosition = function () {
            _this._updateNodePosition();
        };
        _this._updateNodePosition = function () {
            var affixMode = _this.state.affixMode;
            var _a = _this.props,
                container = _a.container,
                useAbsolute = _a.useAbsolute;
            var affixContainer = container();
            if (!affixContainer || !_this.affixNode) {
                return false;
            }
            var containerScrollTop = (0, util_2.getScroll)(affixContainer, true); // 容器在垂直位置上的滚动 offset
            var affixOffset = _this._getOffset(_this.affixNode, affixContainer); // 目标节点当前相对于容器的 offset
            var containerHeight = (0, util_2.getNodeHeight)(affixContainer); // 容器的高度
            var affixHeight = _this.affixNode.offsetHeight;
            var containerRect = (0, util_2.getRect)(affixContainer);
            var affixChildHeight = _this.affixChildNode.offsetHeight;
            var affixStyle = {
                width: affixOffset.width
            };
            var containerStyle = {
                width: affixOffset.width,
                height: affixChildHeight
            };
            var positionStyle = null;
            if (affixMode.top && containerScrollTop > affixOffset.top - affixMode.offset) {
                // affix top
                if (useAbsolute) {
                    affixStyle.position = 'absolute';
                    affixStyle.top = containerScrollTop - (affixOffset.top - affixMode.offset);
                    positionStyle = 'relative';
                } else {
                    affixStyle.position = 'fixed';
                    affixStyle.top = affixMode.offset + containerRect.top;
                }
                _this._setAffixStyle(affixStyle, true);
                _this._setContainerStyle(containerStyle);
            } else if (affixMode.bottom && containerScrollTop < affixOffset.top + affixHeight + affixMode.offset - containerHeight) {
                // affix bottom
                affixStyle.height = affixHeight;
                if (useAbsolute) {
                    affixStyle.position = 'absolute';
                    affixStyle.top = containerScrollTop - (affixOffset.top + affixHeight + affixMode.offset - containerHeight);
                    positionStyle = 'relative';
                } else {
                    affixStyle.position = 'fixed';
                    affixStyle.bottom = affixMode.offset;
                }
                _this._setAffixStyle(affixStyle, true);
                _this._setContainerStyle(containerStyle);
            } else {
                _this._setAffixStyle(null);
                _this._setContainerStyle(null);
            }
            if (_this.state.positionStyle !== positionStyle) {
                _this.setState({ positionStyle: positionStyle });
            }
        };
        _this._affixNodeRefHandler = function (ref) {
            _this.affixNode = ref;
        };
        _this._affixChildNodeRefHandler = function (ref) {
            _this.affixChildNode = ref;
        };
        _this.state = {
            style: null,
            containerStyle: null,
            positionStyle: null,
            affixMode: Affix._getAffixMode(props)
        };
        _this.resizeObserver = new resize_observer_polyfill_1.default(_this._updateNodePosition);
        return _this;
    }
    Affix._getAffixMode = function (nextProps) {
        var affixMode = {
            top: false,
            bottom: false,
            offset: 0
        };
        if (!nextProps) {
            return affixMode;
        }
        var offsetTop = nextProps.offsetTop,
            offsetBottom = nextProps.offsetBottom;
        if (typeof offsetTop !== 'number' && typeof offsetBottom !== 'number') {
            // set default
            affixMode.top = true;
        } else if (typeof offsetTop === 'number') {
            affixMode.top = true;
            affixMode.bottom = false;
            affixMode.offset = offsetTop;
        } else if (typeof offsetBottom === 'number') {
            affixMode.bottom = true;
            affixMode.top = false;
            affixMode.offset = offsetBottom;
        }
        return affixMode;
    };
    Affix.getDerivedStateFromProps = function (nextProps) {
        if ('offsetTop' in nextProps || 'offsetBottom' in nextProps) {
            return {
                affixMode: Affix._getAffixMode(nextProps)
            };
        }
        return null;
    };
    Affix.prototype.componentDidMount = function () {
        var _this = this;
        var container = this.props.container;
        // wait for parent rendered
        this.timeout = setTimeout(function () {
            _this._updateNodePosition();
            _this._setEventHandlerForContainer(container);
        });
    };
    Affix.prototype.componentDidUpdate = function (prevProps) {
        var _this = this;
        if (prevProps.container() !== this.props.container()) {
            this._clearContainerEvent();
            this.timeout = setTimeout(function () {
                _this._setEventHandlerForContainer(_this.props.container);
            });
        }
        setTimeout(this._updateNodePosition);
    };
    Affix.prototype.componentWillUnmount = function () {
        this._clearContainerEvent();
    };
    Affix.prototype._setEventHandlerForContainer = function (getContainer) {
        var container = getContainer();
        if (!container) {
            return;
        }
        util_1.events.on(container, 'scroll', this._updateNodePosition, false);
        this.resizeObserver.observe(this.affixNode);
    };
    Affix.prototype._removeEventHandlerForContainer = function (getContainer) {
        var container = getContainer();
        if (container) {
            util_1.events.off(container, 'scroll', this._updateNodePosition);
            this.resizeObserver.disconnect();
        }
    };
    Affix.prototype._setAffixStyle = function (affixStyle, affixed) {
        if (affixed === void 0) {
            affixed = false;
        }
        if (util_1.obj.shallowEqual(affixStyle, this.state.style)) {
            return;
        }
        this.setState({
            style: affixStyle
        });
        var onAffix = this.props.onAffix;
        if (affixed) {
            setTimeout(function () {
                return onAffix(true);
            });
        } else if (!affixStyle) {
            setTimeout(function () {
                return onAffix(false);
            });
        }
    };
    Affix.prototype._setContainerStyle = function (containerStyle) {
        if (util_1.obj.shallowEqual(containerStyle, this.state.containerStyle)) {
            return;
        }
        this.setState({ containerStyle: containerStyle });
    };
    Affix.prototype._getOffset = function (affixNode, affixContainer) {
        var affixRect = affixNode.getBoundingClientRect(); // affix 元素 相对浏览器窗口的位置
        var containerRect = (0, util_2.getRect)(affixContainer); // affix 容器 相对浏览器窗口的位置
        var containerScrollTop = (0, util_2.getScroll)(affixContainer, true);
        var containerScrollLeft = (0, util_2.getScroll)(affixContainer, false);
        return {
            top: affixRect.top - containerRect.top + containerScrollTop,
            left: affixRect.left - containerRect.left + containerScrollLeft,
            width: affixRect.width,
            height: affixRect.height
        };
    };
    Affix.prototype.render = function () {
        var _a;
        var _b = this.state,
            affixMode = _b.affixMode,
            positionStyle = _b.positionStyle;
        var _c = this.props,
            prefix = _c.prefix,
            className = _c.className,
            style = _c.style,
            children = _c.children;
        var state = this.state;
        var classNames = classnames((_a = {}, _a["".concat(prefix, "affix")] = state.style, _a["".concat(prefix, "affix-top")] = !state.style && affixMode.top, _a["".concat(prefix, "affix-bottom")] = !state.style && affixMode.bottom, _a[className] = className, _a));
        var wrapperStyle = tslib_1.__assign(tslib_1.__assign({}, style), { position: positionStyle || undefined });
        return React.createElement("div", { ref: this._affixNodeRefHandler, style: wrapperStyle }, state.style && React.createElement("div", { style: state.containerStyle, "aria-hidden": "true" }), React.createElement("div", { ref: this._affixChildNodeRefHandler, className: classNames, style: state.style }, children));
    };
    Affix.propTypes = {
        prefix: PropTypes.string,
        container: PropTypes.func,
        offsetTop: PropTypes.number,
        offsetBottom: PropTypes.number,
        onAffix: PropTypes.func,
        useAbsolute: PropTypes.bool,
        className: PropTypes.string,
        style: PropTypes.object,
        children: PropTypes.any
    };
    Affix.defaultProps = {
        prefix: 'next-',
        container: function container() {
            return window;
        },
        onAffix: util_1.func.noop
    };
    return Affix;
}(react_1.Component);
exports.default = config_provider_1.default.config((0, react_lifecycles_compat_1.polyfill)(Affix));

/***/ }),
/* 68 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),
/* 69 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(20);
var core = __webpack_require__(40);
var ctx = __webpack_require__(210);
var hide = __webpack_require__(26);
var has = __webpack_require__(22);
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(41);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 72 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(74)('keys');
var uid = __webpack_require__(54);
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(40);
var global = __webpack_require__(20);
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(50) ? 'pure' : 'global',
  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 75 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(27).f;
var has = __webpack_require__(22);
var TAG = __webpack_require__(29)('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(69);
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(29);


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(20);
var core = __webpack_require__(40);
var LIBRARY = __webpack_require__(50);
var wksExt = __webpack_require__(78);
var defineProperty = __webpack_require__(27).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 80 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var dayjs = __webpack_require__(124);
var customParseFormat = __webpack_require__(240);
var updateLocale = __webpack_require__(241);
var localeData = __webpack_require__(242);
var quarterOfYear = __webpack_require__(243);
var advancedFormat = __webpack_require__(244);
var weekOfYear = __webpack_require__(245);
__webpack_require__(246);
dayjs.extend(advancedFormat);
dayjs.extend(quarterOfYear);
dayjs.extend(customParseFormat);
dayjs.extend(updateLocale);
dayjs.extend(localeData);
dayjs.extend(weekOfYear);
dayjs.locale('zh-cn');
var datejs = dayjs;
datejs.isSelf = dayjs.isDayjs;
dayjs.localeData();
exports.default = datejs;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _CSSTransition = _interopRequireDefault(__webpack_require__(259));

var _ReplaceTransition = _interopRequireDefault(__webpack_require__(263));

var _TransitionGroup = _interopRequireDefault(__webpack_require__(132));

var _Transition = _interopRequireDefault(__webpack_require__(130));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = {
  Transition: _Transition.default,
  TransitionGroup: _TransitionGroup.default,
  ReplaceTransition: _ReplaceTransition.default,
  CSSTransition: _CSSTransition.default
};

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var util_1 = __webpack_require__(4);
var icon_1 = __webpack_require__(7);
var zh_cn_1 = __webpack_require__(9);
var alignMap_1 = __webpack_require__(84);
/**
 * Created by xiachi on 17/2/10.
 */
var noop = util_1.func.noop;
var BalloonInner = /** @class */function (_super) {
    tslib_1.__extends(BalloonInner, _super);
    function BalloonInner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BalloonInner.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            prefix = _c.prefix,
            closable = _c.closable,
            className = _c.className,
            style = _c.style,
            isTooltip = _c.isTooltip,
            align = _c.align,
            title = _c.title,
            type = _c.type,
            onClose = _c.onClose,
            alignEdge = _c.alignEdge,
            v2 = _c.v2,
            children = _c.children,
            rtl = _c.rtl,
            locale = _c.locale,
            others = tslib_1.__rest(_c, ["prefix", "closable", "className", "style", "isTooltip", "align", "title", "type", "onClose", "alignEdge", "v2", "children", "rtl", "locale"]);
        var alignMap = alignEdge || v2 ? alignMap_1.edgeMap : alignMap_1.normalMap;
        var _prefix = prefix;
        if (isTooltip) {
            _prefix = "".concat(_prefix, "balloon-tooltip");
        } else {
            _prefix = "".concat(_prefix, "balloon");
        }
        var closableInTitle = closable && title !== undefined;
        var closableInContent = closable && title === undefined;
        var classes = (0, classnames_1.default)((_a = {}, _a["".concat(_prefix)] = true, _a["".concat(_prefix, "-").concat(type)] = type, _a["".concat(_prefix, "-medium")] = true, _a["".concat(_prefix, "-").concat(alignMap[align].arrow)] = alignMap[align], _a["".concat(_prefix, "-closable")] = closableInContent, _a[className] = className, _a["".concat(_prefix, "-v2")] = v2, _a));
        var titleCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "balloon-title")] = true, _b["".concat(_prefix, "-closable")] = closableInTitle, _b));
        var closeIcon = react_1.default.createElement("a", { role: "button", "aria-label": locale.close, tabIndex: "0", className: "".concat(_prefix, "-close"), onClick: onClose }, react_1.default.createElement(icon_1.default, { type: "close", size: "small" }));
        return react_1.default.createElement("div", tslib_1.__assign({ role: "tooltip", "aria-live": "polite", dir: rtl ? 'rtl' : undefined, className: classes, style: style }, util_1.obj.pickOthers(Object.keys(BalloonInner.propTypes), others)), react_1.default.createElement("div", { className: "".concat(prefix, "balloon-arrow") }, react_1.default.createElement("div", { className: "".concat(prefix, "balloon-arrow-content") })), title && react_1.default.createElement("div", { className: titleCls }, title, closableInTitle && closeIcon), react_1.default.createElement("div", { className: "".concat(prefix, "balloon-content") }, children), closableInContent && closeIcon);
    };
    BalloonInner.contextTypes = {
        prefix: prop_types_1.default.string
    };
    BalloonInner.propTypes = {
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        closable: prop_types_1.default.bool,
        children: prop_types_1.default.any,
        title: prop_types_1.default.node,
        className: prop_types_1.default.string,
        alignEdge: prop_types_1.default.bool,
        onClose: prop_types_1.default.func,
        style: prop_types_1.default.any,
        align: prop_types_1.default.string,
        type: prop_types_1.default.string,
        isTooltip: prop_types_1.default.bool,
        locale: prop_types_1.default.object,
        pure: prop_types_1.default.bool,
        v2: prop_types_1.default.bool
    };
    BalloonInner.defaultProps = {
        prefix: 'next-',
        closable: true,
        onClose: noop,
        locale: zh_cn_1.default.Balloon,
        align: 'b',
        type: 'normal',
        alignEdge: false,
        pure: false
    };
    return BalloonInner;
}(react_1.default.Component);
exports.default = BalloonInner;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Created by xiachi on 17/1/17.
 */

Object.defineProperty(exports, "__esModule", { value: true });
exports.edgeMap = exports.normalMap = void 0;
var normalMap = {
    t: {
        align: 'bc tc',
        rtlAlign: 'bc tc',
        arrow: 'bottom',
        trOrigin: 'bottom',
        rtlTrOrigin: 'bottom',
        offset: [0, -12]
    },
    r: {
        align: 'cl cr',
        rtlAlign: 'cr cl',
        arrow: 'left',
        trOrigin: 'left',
        rtlTrOrigin: 'right',
        offset: [12, 0]
    },
    b: {
        align: 'tc bc',
        rtlAlign: 'tc bc',
        arrow: 'top',
        trOrigin: 'top',
        rtlTrOrigin: 'top',
        offset: [0, 12]
    },
    l: {
        align: 'cr cl',
        rtlAlign: 'cl cr',
        arrow: 'right',
        trOrigin: 'right',
        rtlTrOrigin: 'left',
        offset: [-12, 0]
    },
    tl: {
        align: 'br tc',
        rtlAlign: 'bl tc',
        arrow: 'bottom-right',
        trOrigin: 'bottom right',
        rtlTrOrigin: 'bottom left',
        offset: [20, -12]
    },
    tr: {
        align: 'bl tc',
        rtlAlign: 'br tc',
        arrow: 'bottom-left',
        trOrigin: 'bottom left',
        rtlTrOrigin: 'bottom right',
        offset: [-20, -12]
    },
    rt: {
        align: 'bl cr',
        rtlAlign: 'br cl',
        arrow: 'left-bottom',
        trOrigin: 'bottom left',
        rtlTrOrigin: 'bottom right',
        offset: [12, 20]
    },
    rb: {
        align: 'tl cr',
        rtlAlign: 'tr cl',
        arrow: 'left-top',
        trOrigin: 'top left',
        rtlTrOrigin: 'top right',
        offset: [12, -20]
    },
    bl: {
        align: 'tr bc',
        rtlAlign: 'tl bc',
        arrow: 'top-right',
        trOrigin: 'top right',
        rtlTrOrigin: 'top left',
        offset: [20, 12]
    },
    br: {
        align: 'tl bc',
        rtlAlign: 'tr bc',
        arrow: 'top-left',
        trOrigin: 'top left',
        rtlTrOrigin: 'top right',
        offset: [-20, 12]
    },
    lt: {
        align: 'br cl',
        rtlAlign: 'bl cr',
        arrow: 'right-bottom',
        trOrigin: 'bottom right',
        rtlTrOrigin: 'bottom left',
        offset: [-12, 20]
    },
    lb: {
        align: 'tr cl',
        rtlAlign: 'tl cr',
        arrow: 'right-top',
        trOrigin: 'top right',
        rtlTrOrigin: 'top left',
        offset: [-12, -20]
    }
};
exports.normalMap = normalMap;
var edgeMap = {
    t: {
        align: 'bc tc',
        rtlAlign: 'bc tc',
        arrow: 'bottom',
        trOrigin: 'bottom',
        rtlTrOrigin: 'bottom',
        offset: [0, -12]
    },
    r: {
        align: 'cl cr',
        rtlAlign: 'cr cl',
        arrow: 'left',
        trOrigin: 'left',
        rtlTrOrigin: 'right',
        offset: [12, 0]
    },
    b: {
        align: 'tc bc',
        rtlAlign: 'tc bc',
        arrow: 'top',
        trOrigin: 'top',
        rtlTrOrigin: 'top',
        offset: [0, 12]
    },
    l: {
        align: 'cr cl',
        rtlAlign: 'cl cr',
        arrow: 'right',
        trOrigin: 'right',
        rtlTrOrigin: 'left',
        offset: [-12, 0]
    },
    tl: {
        align: 'bl tl',
        rtlAlign: 'br tr',
        arrow: 'bottom-left',
        trOrigin: 'bottom left',
        rtlTrOrigin: 'bottom right',
        offset: [0, -12]
    },
    tr: {
        align: 'br tr',
        rtlAlign: 'bl tl',
        arrow: 'bottom-right',
        trOrigin: 'bottom right',
        rtlTrOrigin: 'bottom left',
        offset: [0, -12]
    },
    rt: {
        align: 'tl tr',
        rtlAlign: 'tr tl',
        arrow: 'left-top',
        trOrigin: 'top left',
        rtlTrOrigin: 'top right',
        offset: [12, 0]
    },
    rb: {
        align: 'bl br',
        rtlAlign: 'br bl',
        arrow: 'left-bottom',
        trOrigin: 'bottom left',
        rtlTrOrigin: 'bottom right',
        offset: [12, 0]
    },
    bl: {
        align: 'tl bl',
        rtlAlign: 'tr br',
        arrow: 'top-left',
        trOrigin: 'top left',
        rtlTrOrigin: 'top right',
        offset: [0, 12]
    },
    br: {
        align: 'tr br',
        rtlAlign: 'tl bl',
        arrow: 'top-right',
        trOrigin: 'top right',
        rtlTrOrigin: 'top left',
        offset: [0, 12]
    },
    lt: {
        align: 'tr tl',
        rtlAlign: 'tl tr',
        arrow: 'right-top',
        trOrigin: 'top right',
        rtlTrOrigin: 'top left',
        offset: [-12, 0]
    },
    lb: {
        align: 'br bl',
        rtlAlign: 'bl br',
        arrow: 'right-bottom',
        trOrigin: 'bottom right',
        rtlTrOrigin: 'bottom left',
        offset: [-12, 0]
    }
};
exports.edgeMap = edgeMap;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
var item_1 = __webpack_require__(31);
var bindCtx = util_1.func.bindCtx;
var pickOthers = util_1.obj.pickOthers;
/**
 * Menu.Item
 * @order 0
 */
var SelectableItem = /** @class */function (_super) {
    tslib_1.__extends(SelectableItem, _super);
    function SelectableItem(props) {
        var _this = _super.call(this, props) || this;
        bindCtx(_this, ['handleKeyDown', 'handleClick']);
        return _this;
    }
    SelectableItem.prototype.getSelected = function () {
        var _a = this.props,
            _key = _a._key,
            root = _a.root,
            selected = _a.selected;
        var selectMode = root.props.selectMode;
        var selectedKeys = root.state.selectedKeys;
        return selected || !!selectMode && selectedKeys.indexOf(_key) > -1;
    };
    SelectableItem.prototype.handleSelect = function (e) {
        var _a = this.props,
            _key = _a._key,
            root = _a.root,
            onSelect = _a.onSelect;
        if (onSelect) {
            onSelect(!this.getSelected(), this, e);
        } else {
            root.handleSelect(_key, !this.getSelected(), this);
        }
    };
    SelectableItem.prototype.handleKeyDown = function (e) {
        if (e.keyCode === util_1.KEYCODE.SPACE && !this.props.disabled) {
            this.handleSelect(e);
        }
        this.props.onKeyDown && this.props.onKeyDown(e);
    };
    SelectableItem.prototype.handleClick = function (e) {
        this.handleSelect(e);
        this.props.onClick && this.props.onClick(e);
    };
    SelectableItem.prototype.renderSelectedIcon = function (selected) {
        var _a;
        var _b = this.props,
            root = _b.root,
            inlineIndent = _b.inlineIndent,
            needIndent = _b.needIndent,
            hasSelectedIcon = _b.hasSelectedIcon,
            isSelectIconRight = _b.isSelectIconRight,
            type = _b.type;
        var _c = root.props,
            prefix = _c.prefix,
            rootSelectedIcon = _c.hasSelectedIcon,
            rootSelectIconRight = _c.isSelectIconRight,
            icons = _c.icons;
        var iconsSelect = icons.select;
        if (!(0, react_1.isValidElement)(icons.select) && icons.select) {
            iconsSelect = react_1.default.createElement("span", null, icons.select);
        }
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "menu-icon-selected")] = true, _a["".concat(prefix, "menu-symbol-icon-selected")] = !iconsSelect, _a["".concat(prefix, "menu-icon-right")] = ('isSelectIconRight' in this.props ? isSelectIconRight : rootSelectIconRight) && type !== 'submenu', _a));
        return ('hasSelectedIcon' in this.props ? hasSelectedIcon : rootSelectedIcon) && selected ? react_1.default.cloneElement(iconsSelect || react_1.default.createElement(icon_1.default, { type: "select" }), {
            style: needIndent && inlineIndent > 0 ? { left: "".concat(inlineIndent, "px") } : null,
            className: cls
        }) : null;
    };
    SelectableItem.prototype.render = function () {
        var _a;
        var _b = this.props,
            _key = _b._key,
            root = _b.root,
            className = _b.className,
            disabled = _b.disabled,
            helper = _b.helper,
            children = _b.children,
            needIndent = _b.needIndent;
        var prefix = root.props.prefix;
        var others = pickOthers(Object.keys(SelectableItem.propTypes), this.props);
        var selected = this.getSelected();
        var newProps = tslib_1.__assign({ _key: _key, root: root, disabled: disabled, type: 'item', className: (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "selected")] = selected, _a[className] = !!className, _a)), onKeyDown: this.handleKeyDown, onClick: !disabled ? this.handleClick : this.props.onClick, needIndent: needIndent }, others);
        if (!('title' in newProps) && typeof children === 'string') {
            newProps.title = children;
        }
        var textProps = {};
        if ('selectMode' in root.props) {
            textProps['aria-selected'] = selected;
        }
        return react_1.default.createElement(item_1.default, tslib_1.__assign({}, newProps), this.renderSelectedIcon(selected), react_1.default.createElement("span", tslib_1.__assign({ className: "".concat(prefix, "menu-item-text") }, textProps), children), helper ? react_1.default.createElement("div", { className: "".concat(prefix, "menu-item-helper") }, helper) : null);
    };
    SelectableItem.menuChildType = 'item';
    SelectableItem.propTypes = {
        _key: prop_types_1.default.string,
        root: prop_types_1.default.object,
        selected: prop_types_1.default.bool,
        onSelect: prop_types_1.default.func,
        inlineIndent: prop_types_1.default.number,
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 帮助文本
         */
        helper: prop_types_1.default.node,
        /**
         * 菜单项标签内容
         */
        children: prop_types_1.default.node,
        className: prop_types_1.default.string,
        onKeyDown: prop_types_1.default.func,
        onClick: prop_types_1.default.func,
        needIndent: prop_types_1.default.bool,
        hasSelectedIcon: prop_types_1.default.bool,
        isSelectIconRight: prop_types_1.default.bool,
        icons: prop_types_1.default.object
    };
    SelectableItem.defaultProps = {
        disabled: false,
        needIndent: true,
        icons: {}
    };
    return SelectableItem;
}(react_1.Component);
exports.default = SelectableItem;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.getChildSelected = exports.getFirstAvaliablelChildKey = exports.isAvailablePos = exports.isAncestor = exports.isSibling = exports.normalizeToArray = exports.getWidth = void 0;
var getWidth = function getWidth(elem) {
    var width = elem && typeof elem.getBoundingClientRect === 'function' && elem.getBoundingClientRect().width;
    if (width) {
        width = +width.toFixed(6);
    }
    return width || 0;
};
exports.getWidth = getWidth;
var normalizeToArray = function normalizeToArray(items) {
    if (items) {
        if (Array.isArray(items)) {
            return items;
        }
        return [items];
    }
    return [];
};
exports.normalizeToArray = normalizeToArray;
var isSibling = function isSibling(currentPos, targetPos) {
    var currentNums = currentPos.split('-').slice(0, -1);
    var targetNums = targetPos.split('-').slice(0, -1);
    return currentNums.length === targetNums.length && currentNums.every(function (num, index) {
        return num === targetNums[index];
    });
};
exports.isSibling = isSibling;
var isAncestor = function isAncestor(currentPos, targetPos) {
    var currentNums = currentPos.split('-');
    var targetNums = targetPos.split('-');
    return currentNums.length > targetNums.length && targetNums.every(function (num, index) {
        return num === currentNums[index];
    });
};
exports.isAncestor = isAncestor;
var isAvailablePos = function isAvailablePos(refPos, targetPos, _p2n) {
    var _a = _p2n[targetPos],
        type = _a.type,
        disabled = _a.disabled;
    return (0, exports.isSibling)(refPos, targetPos) && (type === 'item' && !disabled || type === 'submenu');
};
exports.isAvailablePos = isAvailablePos;
var getFirstAvaliablelChildKey = function getFirstAvaliablelChildKey(parentPos, _p2n) {
    var pos = Object.keys(_p2n).find(function (p) {
        return (0, exports.isAvailablePos)("".concat(parentPos, "-0"), p, _p2n);
    });
    return pos ? _p2n[pos].key : null;
};
exports.getFirstAvaliablelChildKey = getFirstAvaliablelChildKey;
/**
 * 如果 key 在 SelectedKeys 的选中链上（例如 SelectedKeys 是['0-1-2'],  key是 0-1 ），那么返回true
 *
 * selectMode?: string; 当前的选择模式，一般为 multiple single
 * selectedKeys?: string[]; 选中的key值
 * k2n?: object[] mapping;
 * _key?: string; 待测试的key值
 *
 * @return bool 当前元素是否有孩子被选中
 */
var getChildSelected = function getChildSelected(_a) {
    var selectMode = _a.selectMode,
        selectedKeys = _a.selectedKeys,
        _k2n = _a._k2n,
        _key = _a._key;
    if (!_k2n) {
        return false;
    }
    var _keyPos = "".concat(_k2n[_key] && _k2n[_key].pos, "-");
    return !!selectMode && selectedKeys.some(function (key) {
        return _k2n[key] && _k2n[key].pos.indexOf(_keyPos) === 0;
    });
};
exports.getChildSelected = getChildSelected;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var animate_1 = __webpack_require__(17);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
var zh_cn_1 = __webpack_require__(9);
var config_provider_1 = __webpack_require__(5);
var noop = util_1.func.noop,
    bindCtx = util_1.func.bindCtx;
var PRESET_COLOR_REG = /blue|green|orange|red|turquoise|yellow/;
/**
 * Tag
 */
var Tag = /** @class */function (_super) {
    tslib_1.__extends(Tag, _super);
    function Tag(props) {
        var _this = _super.call(this, props) || this;
        _this.onKeyDown = function (e) {
            // 针对无障碍化要求 添加键盘SPACE事件
            var _a = _this.props,
                closable = _a.closable,
                closeArea = _a.closeArea,
                onClick = _a.onClick,
                disabled = _a.disabled;
            if (e.keyCode !== util_1.KEYCODE.SPACE || disabled) {
                return;
            }
            e.preventDefault();
            e.stopPropagation();
            if (closable) {
                _this.handleClose(closeArea);
            } else {
                typeof onClick === 'function' && onClick(e);
            }
        };
        _this.state = {
            visible: true
        };
        bindCtx(_this, ['handleBodyClick', 'handleTailClick', 'handleAnimationInit', 'handleAnimationEnd', 'renderTailNode']);
        return _this;
    }
    Tag.prototype.componentWillUnmount = function () {
        this.__destroyed = true;
    };
    Tag.prototype.handleClose = function (from) {
        var _this = this;
        var _a = this.props,
            animation = _a.animation,
            onClose = _a.onClose;
        var hasAnimation = util_1.support.animation && animation;
        // 先执行回调
        var result = onClose(from, this.tagNode);
        // 如果回调函数返回 false，则阻止关闭行为
        if (result !== false && !this.__destroyed) {
            this.setState({
                visible: false
            }, function () {
                // 如果没有动画，则直接执行 afterClose
                !hasAnimation && _this.props.afterClose(_this.tagNode);
            });
        }
    };
    // 标签体点击
    Tag.prototype.handleBodyClick = function (e) {
        var _a = this.props,
            closable = _a.closable,
            closeArea = _a.closeArea,
            onClick = _a.onClick;
        var node = e.currentTarget;
        if (node && (node === e.target || node.contains(e.target))) {
            if (closable && closeArea === 'tag') {
                this.handleClose('tag');
            }
            if (typeof onClick === 'function') {
                return onClick(e);
            }
        }
    };
    Tag.prototype.handleTailClick = function (e) {
        e && e.preventDefault();
        e && e.stopPropagation();
        this.handleClose('tail');
    };
    Tag.prototype.handleAnimationInit = function (node) {
        this.props.afterAppear(node);
    };
    Tag.prototype.handleAnimationEnd = function (node) {
        this.props.afterClose(node);
    };
    Tag.prototype.renderAnimatedTag = function (children, animationName) {
        return react_1.default.createElement(animate_1.default, { animation: animationName, afterAppear: this.handleAnimationInit, afterLeave: this.handleAnimationEnd }, children);
    };
    Tag.prototype.renderTailNode = function () {
        var _a = this.props,
            prefix = _a.prefix,
            closable = _a.closable,
            locale = _a.locale;
        if (!closable) {
            return null;
        }
        return react_1.default.createElement("span", { className: "".concat(prefix, "tag-close-btn"), onClick: this.handleTailClick, role: "button", "aria-label": locale.delete }, react_1.default.createElement(icon_1.default, { type: "close" }));
    };
    Tag.prototype.isPresetColor = function () {
        var color = this.props.color;
        if (!color) {
            return false;
        }
        return PRESET_COLOR_REG.test(color);
    };
    Tag.prototype.getTagStyle = function () {
        var _a = this.props,
            _b = _a.color,
            color = _b === void 0 ? '' : _b,
            style = _a.style;
        var isPresetColor = this.isPresetColor();
        var customColorStyle = {
            backgroundColor: color,
            borderColor: color,
            color: '#fff'
        };
        return tslib_1.__assign(tslib_1.__assign({}, color && !isPresetColor ? customColorStyle : null), style);
    };
    Tag.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props,
            prefix = _b.prefix,
            type = _b.type,
            size = _b.size,
            color = _b.color,
            _shape = _b._shape,
            closable = _b.closable,
            closeArea = _b.closeArea,
            className = _b.className,
            children = _b.children,
            animation = _b.animation,
            disabled = _b.disabled,
            rtl = _b.rtl;
        var visible = this.state.visible;
        var isPresetColor = this.isPresetColor();
        var others = util_1.obj.pickOthers(Tag.propTypes, this.props);
        // eslint-disable-next-line no-unused-vars
        var style = others.style,
            otherTagProps = tslib_1.__rest(others, ["style"]);
        var shape = closable ? 'closable' : _shape;
        var bodyClazz = (0, classnames_1.default)(["".concat(prefix, "tag"), "".concat(prefix, "tag-").concat(shape), "".concat(prefix, "tag-").concat(size)], (_a = {}, _a["".concat(prefix, "tag-level-").concat(type)] = !color, _a["".concat(prefix, "tag-closable")] = closable, _a["".concat(prefix, "tag-body-pointer")] = closable && closeArea === 'tag', _a["".concat(prefix, "tag-").concat(color)] = color && isPresetColor && type === 'primary', _a["".concat(prefix, "tag-").concat(color, "-inverse")] = color && isPresetColor && type === 'normal', _a), className);
        // close btn
        var tailNode = this.renderTailNode();
        // tag node
        var tagNode = !visible ? null : react_1.default.createElement("div", tslib_1.__assign({ className: bodyClazz, onClick: this.handleBodyClick, onKeyDown: this.onKeyDown, tabIndex: disabled ? '' : '0', role: "button", "aria-disabled": disabled, disabled: disabled, dir: rtl ? 'rtl' : undefined, ref: function ref(n) {
                return _this.tagNode = n;
            }, style: this.getTagStyle() }, otherTagProps), react_1.default.createElement("span", { className: "".concat(prefix, "tag-body") }, children), tailNode);
        if (animation && util_1.support.animation) {
            return this.renderAnimatedTag(tagNode, "".concat(prefix, "tag-zoom"));
        }
        // 未开启或不支持动画
        return tagNode;
    };
    Tag.propTypes = {
        /**
         * 标签类名前缀,提供给二次开发者用
         * @default next-
         */
        prefix: prop_types_1.default.string,
        /**
         * 标签的类型
         * @enumdesc 普通, 主要
         */
        type: prop_types_1.default.oneOf(['normal', 'primary']),
        /**
         * 标签的尺寸（large 尺寸为兼容表单场景 large = medium）
         * @enumdesc 小, 中, 大
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        /**
         * 标签颜色, 目前支持：blue、 green、 orange、red、 turquoise、 yellow 和 hex 颜色值 （`color keywords`作为 Tag 组件的保留字，请勿直接使用 ）, `1.19.0` 以上版本生效
         */
        color: prop_types_1.default.string,
        /**
         * 是否开启动效
         */
        animation: prop_types_1.default.bool,
        closeArea: prop_types_1.default.oneOf(['tag', 'tail']),
        closable: prop_types_1.default.bool,
        onClose: prop_types_1.default.func,
        afterClose: prop_types_1.default.func,
        /**
         * 标签出现动画结束后执行的回调
         */
        afterAppear: prop_types_1.default.func,
        className: prop_types_1.default.any,
        children: prop_types_1.default.node,
        /**
         * 点击回调
         */
        onClick: prop_types_1.default.func,
        _shape: prop_types_1.default.oneOf(['default', 'closable', 'checkable']),
        disabled: prop_types_1.default.bool,
        rtl: prop_types_1.default.bool,
        locale: prop_types_1.default.object
    };
    Tag.defaultProps = {
        prefix: 'next-',
        type: 'normal',
        size: 'medium',
        closeArea: 'tail',
        animation: false,
        onClose: noop,
        afterClose: noop,
        afterAppear: noop,
        onClick: noop,
        _shape: 'default',
        disabled: false,
        rtl: false,
        locale: zh_cn_1.default.Tag
    };
    return Tag;
}(react_1.Component);
exports.default = config_provider_1.default.config(Tag);

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var moment_1 = __webpack_require__(16);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var time_menu_1 = __webpack_require__(326);
var utils_1 = __webpack_require__(89);
var noop = util_1.func.noop;
var TimePickerPanel = /** @class */function (_super) {
  tslib_1.__extends(TimePickerPanel, _super);
  function TimePickerPanel() {
    var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
    _this.onSelectMenuItem = function (index, type) {
      var value = _this.props.value;
      var clonedValue = value ? value.clone() : (0, moment_1.default)('00:00:00', 'HH:mm:ss', true);
      switch (type) {
        case 'hour':
          clonedValue.hour(index);
          break;
        case 'minute':
          clonedValue.minute(index);
          break;
        case 'second':
          clonedValue.second(index);
          break;
      }
      _this.props.onSelect(clonedValue);
    };
    return _this;
  }
  TimePickerPanel.prototype.render = function () {
    var _a = this.props,
        prefix = _a.prefix,
        value = _a.value,
        locale = _a.locale,
        className = _a.className,
        disabled = _a.disabled,
        showHour = _a.showHour,
        showMinute = _a.showMinute,
        showSecond = _a.showSecond,
        hourStep = _a.hourStep,
        minuteStep = _a.minuteStep,
        secondStep = _a.secondStep,
        disabledHours = _a.disabledHours,
        disabledMinutes = _a.disabledMinutes,
        disabledSeconds = _a.disabledSeconds,
        renderTimeMenuItems = _a.renderTimeMenuItems,
        others = tslib_1.__rest(_a, ["prefix", "value", "locale", "className", "disabled", "showHour", "showMinute", "showSecond", "hourStep", "minuteStep", "secondStep", "disabledHours", "disabledMinutes", "disabledSeconds", "renderTimeMenuItems"]);
    var colLen = [showHour, showMinute, showSecond].filter(function (v) {
      return v;
    }).length;
    var classNames = (0, classnames_1.default)("".concat(prefix, "time-picker-panel"), "".concat(prefix, "time-picker-panel-col-").concat(colLen), className);
    var commonProps = {
      prefix: prefix,
      disabled: disabled,
      onSelect: this.onSelectMenuItem,
      renderTimeMenuItems: renderTimeMenuItems,
      value: value
    };
    var activeHour;
    var activeMinute;
    var activeSecond;
    if (value && moment_1.default.isMoment(value)) {
      activeHour = value.hour();
      activeMinute = value.minute();
      activeSecond = value.second();
    }
    return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: classNames }), showHour ? react_1.default.createElement(time_menu_1.default, tslib_1.__assign({}, commonProps, { activeIndex: activeHour, title: locale.hour, mode: "hour", step: hourStep, disabledItems: disabledHours })) : null, showMinute ? react_1.default.createElement(time_menu_1.default, tslib_1.__assign({}, commonProps, { activeIndex: activeMinute, title: locale.minute, mode: "minute", step: minuteStep, disabledItems: disabledMinutes })) : null, showSecond ? react_1.default.createElement(time_menu_1.default, tslib_1.__assign({}, commonProps, { activeIndex: activeSecond, title: locale.second, step: secondStep, mode: "second", disabledItems: disabledSeconds })) : null);
  };
  TimePickerPanel.propTypes = {
    prefix: prop_types_1.default.string,
    /**
     * 时间值（moment 对象）
     */
    value: utils_1.checkMomentObj,
    /**
     * 是否显示小时
     */
    showHour: prop_types_1.default.bool,
    /**
     * 是否显示分钟
     */
    showMinute: prop_types_1.default.bool,
    /**
     * 是否显示秒
     */
    showSecond: prop_types_1.default.bool,
    /**
     * 小时选项步长
     */
    hourStep: prop_types_1.default.number,
    /**
     * 分钟选项步长
     */
    minuteStep: prop_types_1.default.number,
    /**
     * 秒钟选项步长
     */
    secondStep: prop_types_1.default.number,
    /**
     * 禁用小时函数
     * @param {Number} index 时 0 - 23
     * @return {Boolean} 是否禁用
     */
    disabledHours: prop_types_1.default.func,
    /**
     * 禁用分钟函数
     * @param {Number} index 分 0 - 59
     * @return {Boolean} 是否禁用
     */
    disabledMinutes: prop_types_1.default.func,
    /**
     * 禁用秒函数
     * @param {Number} index 秒 0 - 59
     * @return {Boolean} 是否禁用
     */
    disabledSeconds: prop_types_1.default.func,
    /**
     * 渲染的可选择时间列表
     * [{
     *  label: '01',
     *  value: 1
     * }]
     * @param {Array} list 默认渲染的列表
     * @param {String} mode 渲染的菜单 hour, minute, second
     * @param {moment} value 当前时间，可能为 null
     * @return {Array} 返回需要渲染的数据
     */
    renderTimeMenuItems: prop_types_1.default.func,
    /**
     * 选择某个日期值时的回调
     * @param {Object} 选中后的日期值
     */
    onSelect: prop_types_1.default.func,
    locale: prop_types_1.default.object,
    disabled: prop_types_1.default.bool,
    className: prop_types_1.default.string
  };
  TimePickerPanel.defaultProps = {
    prefix: 'next-',
    showHour: true,
    showSecond: true,
    showMinute: true,
    disabledHours: noop,
    disabledMinutes: noop,
    disabledSeconds: noop,
    onSelect: noop,
    disabled: false,
    locale: zh_cn_1.default.TimePicker
  };
  return TimePickerPanel;
}(react_1.Component);
exports.default = TimePickerPanel;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.formatDateValue = exports.checkDateValue = exports.checkMomentObj = void 0;
var moment_1 = __webpack_require__(16);
// 检查传入值是否为 moment 对象
function checkMomentObj(props, propName, componentName) {
    if (props[propName] && !moment_1.default.isMoment(props[propName])) {
        return new Error("Invalid prop ".concat(propName, " supplied to ").concat(componentName, ". Required a moment object"));
    }
}
exports.checkMomentObj = checkMomentObj;
// 检查传入值是否为 moment 对象或时间字符串，字符串不检测是否为日期字符串
function checkDateValue(props, propName, componentName) {
    if (props[propName] && !moment_1.default.isMoment(props[propName]) && typeof props[propName] !== 'string') {
        return new Error("Invalid prop ".concat(propName, " supplied to ").concat(componentName, ". Required a moment object or format date string!"));
    }
}
exports.checkDateValue = checkDateValue;
function formatDateValue(value, format) {
    var val = typeof value === 'string' ? (0, moment_1.default)(value, format, true) : value;
    if (val && moment_1.default.isMoment(val) && val.isValid()) {
        return val;
    }
    return null;
}
exports.formatDateValue = formatDateValue;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var button_1 = __webpack_require__(14);
var icon_1 = __webpack_require__(7);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var makeChain = util_1.func.makeChain;
var pickOthers = util_1.obj.pickOthers;
var noop = function noop() {};
var Inner = /** @class */function (_super) {
    tslib_1.__extends(Inner, _super);
    function Inner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Inner.prototype.componentDidUpdate = function () {
        // style 作为第一优先级
        var _a = this.props,
            pheight = _a.height,
            _b = _a.style,
            maxHeight = _b.maxHeight,
            _c = _b.height,
            sheight = _c === void 0 ? maxHeight || pheight : _c,
            v2 = _a.v2;
        if (this.bodyNode && v2 && sheight && sheight !== 'auto') {
            var style = {};
            var headerHeight = 0,
                footerHeight = 0;
            if (this.headerNode) {
                headerHeight = this.headerNode.getBoundingClientRect().height;
            }
            if (this.footerNode) {
                footerHeight = this.footerNode.getBoundingClientRect().height;
            }
            var minHeight = headerHeight + footerHeight;
            var height = sheight;
            if (sheight && typeof sheight === 'string') {
                if (height.match(/calc|vh/)) {
                    style.maxHeight = "calc(".concat(sheight, " - ").concat(minHeight, "px)");
                    style.overflowY = 'auto';
                } else {
                    height = parseInt(sheight);
                }
            }
            if (typeof height === 'number' && height > minHeight) {
                style.maxHeight = height - minHeight;
                style.overflowY = 'auto';
            }
            util_1.dom.setStyle(this.bodyNode, style);
        }
    };
    Inner.prototype.getNode = function (name, ref) {
        this[name] = ref;
    };
    Inner.prototype.renderHeader = function () {
        var _a = this.props,
            prefix = _a.prefix,
            title = _a.title;
        if (title) {
            this.titleId = (0, util_1.guid)('dialog-title-');
            return react_1.default.createElement("div", { className: "".concat(prefix, "dialog-header"), id: this.titleId, ref: this.getNode.bind(this, 'headerNode'), role: "heading", "aria-level": "1" }, title);
        }
        return null;
    };
    Inner.prototype.renderBody = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            children = _b.children,
            footer = _b.footer,
            noPadding = _b.noPadding;
        if (children) {
            return react_1.default.createElement("div", { className: (0, classnames_1.default)("".concat(prefix, "dialog-body"), (_a = {}, _a["".concat(prefix, "dialog-body-no-footer")] = footer === false, _a["".concat(prefix, "dialog-body-no-padding")] = noPadding === true, _a)), ref: this.getNode.bind(this, 'bodyNode') }, children);
        }
        return null;
    };
    Inner.prototype.renderFooter = function () {
        var _a;
        var _this = this;
        var _b = this.props,
            prefix = _b.prefix,
            footer = _b.footer,
            footerAlign = _b.footerAlign,
            footerActions = _b.footerActions,
            locale = _b.locale,
            height = _b.height;
        if (footer === false) {
            return null;
        }
        var newClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "dialog-footer")] = true, _a["".concat(prefix, "align-").concat(footerAlign)] = true, _a["".concat(prefix, "dialog-footer-fixed-height")] = !!height, _a));
        var footerContent = footer === true || !footer ? footerActions.map(function (action) {
            var btnProps = _this.props["".concat(action, "Props")];
            var newBtnProps = tslib_1.__assign(tslib_1.__assign({}, btnProps), { prefix: prefix, className: (0, classnames_1.default)("".concat(prefix, "dialog-btn"), btnProps.className), onClick: makeChain(_this.props["on".concat(action[0].toUpperCase() + action.slice(1))], btnProps.onClick), children: btnProps.children || locale[action] });
            if (action === 'ok') {
                newBtnProps.type = 'primary';
            }
            return react_1.default.createElement(button_1.default, tslib_1.__assign({ key: action }, newBtnProps));
        }) : footer;
        return react_1.default.createElement("div", { className: newClassName, ref: this.getNode.bind(this, 'footerNode') }, footerContent);
    };
    Inner.prototype.renderCloseLink = function () {
        var _a = this.props,
            prefix = _a.prefix,
            closeable = _a.closeable,
            onClose = _a.onClose,
            locale = _a.locale,
            closeIcon = _a.closeIcon;
        if (closeable) {
            return react_1.default.createElement("a", { role: "button", "aria-label": locale.close, className: "".concat(prefix, "dialog-close"), onClick: onClose }, closeIcon ? closeIcon : react_1.default.createElement(icon_1.default, { className: "".concat(prefix, "dialog-close-icon"), type: "close" }));
        }
        return null;
    };
    Inner.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            className = _b.className,
            closeable = _b.closeable,
            title = _b.title,
            role = _b.role,
            rtl = _b.rtl;
        var others = pickOthers(Object.keys(Inner.propTypes), this.props);
        var newClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "dialog")] = true, _a["".concat(prefix, "closeable")] = closeable, _a[className] = !!className, _a));
        var header = this.renderHeader();
        var body = this.renderBody();
        var footer = this.renderFooter();
        var closeLink = this.renderCloseLink();
        var ariaProps = {
            role: role,
            'aria-modal': 'true'
        };
        if (title) {
            ariaProps['aria-labelledby'] = this.titleId;
        }
        others.style = (0, _extends3.default)({}, util_1.obj.pickProps(['height', 'maxHeight', 'width'], this.props), others.style);
        return react_1.default.createElement("div", tslib_1.__assign({}, ariaProps, { className: newClassName }, others, { dir: rtl ? 'rtl' : undefined }), header, body, footer, closeLink);
    };
    Inner.propTypes = {
        prefix: prop_types_1.default.string,
        className: prop_types_1.default.string,
        title: prop_types_1.default.node,
        children: prop_types_1.default.node,
        footer: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.node]),
        footerAlign: prop_types_1.default.oneOf(['left', 'center', 'right']),
        footerActions: prop_types_1.default.array,
        onOk: prop_types_1.default.func,
        onCancel: prop_types_1.default.func,
        okProps: prop_types_1.default.object,
        cancelProps: prop_types_1.default.object,
        closeable: prop_types_1.default.bool,
        onClose: prop_types_1.default.func,
        locale: prop_types_1.default.object,
        role: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        width: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        // set value for a fixed height dialog. Passing a value will absolutely position the footer to the bottom.
        height: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        maxHeight: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        v2: prop_types_1.default.bool,
        closeIcon: prop_types_1.default.node,
        pure: prop_types_1.default.bool,
        noPadding: prop_types_1.default.bool
    };
    Inner.defaultProps = {
        prefix: 'next-',
        footerAlign: 'right',
        footerActions: ['ok', 'cancel'],
        onOk: noop,
        onCancel: noop,
        okProps: {},
        cancelProps: {},
        closeable: true,
        onClose: noop,
        locale: zh_cn_1.default.Dialog,
        role: 'dialog'
    };
    return Inner;
}(react_1.Component);
exports.default = Inner;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var config_provider_1 = __webpack_require__(5);
var message_1 = __webpack_require__(92);
var toast_1 = __webpack_require__(333);
var toast2_1 = __webpack_require__(334);
message_1.default.show = toast_1.default.show;
message_1.default.success = toast_1.default.success;
message_1.default.warning = toast_1.default.warning;
message_1.default.error = toast_1.default.error;
message_1.default.notice = toast_1.default.notice;
message_1.default.help = toast_1.default.help;
message_1.default.loading = toast_1.default.loading;
message_1.default.hide = toast_1.default.hide;
message_1.default.withContext = toast_1.withContext;
var MessageProvider = config_provider_1.default.config(message_1.default, {
    componentName: 'Message'
});
exports.default = MessageProvider;
var openV2 = false;
// 调用 config 开启 v2 版本的 message
MessageProvider.config = function (config) {
    toast2_1.default.config(config);
    if (!openV2) {
        MessageProvider.show = toast2_1.default.open; // 兼容 show 用法, 后续计划都改成 open（ Notification 已经用了 open）
        MessageProvider.open = toast2_1.default.open;
        MessageProvider.hide = toast2_1.default.close; // 兼容 hide 用法, 后续计划都改成 open（ Notification 已经用了 close)
        MessageProvider.close = toast2_1.default.close;
        MessageProvider.destory = toast2_1.default.destory;
        MessageProvider.success = toast2_1.default.success;
        MessageProvider.warning = toast2_1.default.warning;
        MessageProvider.error = toast2_1.default.error;
        MessageProvider.notice = toast2_1.default.notice;
        MessageProvider.help = toast2_1.default.help;
        MessageProvider.loading = toast2_1.default.loading;
        openV2 = true;
    }
};

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var zh_cn_1 = __webpack_require__(9);
var icon_1 = __webpack_require__(7);
var animate_1 = __webpack_require__(17);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var noop = function noop() {};
/**
 * Message
 */
var Message = /** @class */function (_super) {
    tslib_1.__extends(Message, _super);
    function Message() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.state = {
            visible: typeof _this.props.visible === 'undefined' ? _this.props.defaultVisible : _this.props.visible
        };
        _this.onClose = function () {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: false
                });
            }
            _this.props.onClose(false);
        };
        return _this;
    }
    Message.getDerivedStateFromProps = function (props) {
        if ('visible' in props) {
            return {
                visible: props.visible
            };
        }
        return {};
    };
    Message.prototype.render = function () {
        var _a;
        /* eslint-disable no-unused-vars */
        var _b = this.props,
            prefix = _b.prefix,
            pure = _b.pure,
            className = _b.className,
            style = _b.style,
            type = _b.type,
            shape = _b.shape,
            size = _b.size,
            title = _b.title,
            children = _b.children,
            defaultVisible = _b.defaultVisible,
            propsVisible = _b.visible,
            icon = _b.iconType,
            closeable = _b.closeable,
            onClose = _b.onClose,
            afterClose = _b.afterClose,
            animation = _b.animation,
            rtl = _b.rtl,
            locale = _b.locale;
        var others = tslib_1.__assign({}, util_1.obj.pickOthers(Object.keys(Message.propTypes), this.props));
        /* eslint-enable */
        var visible = this.state.visible;
        var messagePrefix = "".concat(prefix, "message");
        var classes = (0, classnames_1.default)((_a = {}, _a[messagePrefix] = true, _a["".concat(prefix, "message-").concat(type)] = type, _a["".concat(prefix).concat(shape)] = shape, _a["".concat(prefix).concat(size)] = size, _a["".concat(prefix, "title-content")] = !!title, _a["".concat(prefix, "only-content")] = !title && !!children, _a[className] = className, _a));
        var newChildren = visible ? react_1.default.createElement("div", tslib_1.__assign({ role: "alert", style: style }, others, { className: classes, dir: rtl ? 'rtl' : undefined }), closeable ? react_1.default.createElement("a", { role: "button", "aria-label": locale.closeAriaLabel, className: "".concat(messagePrefix, "-close"), onClick: this.onClose }, react_1.default.createElement(icon_1.default, { type: "close" })) : null, icon !== false ? react_1.default.createElement(icon_1.default, { className: "".concat(messagePrefix, "-symbol ").concat(!icon && "".concat(messagePrefix, "-symbol-icon")), type: icon }) : null, title ? react_1.default.createElement("div", { className: "".concat(messagePrefix, "-title") }, title) : null, children ? react_1.default.createElement("div", { className: "".concat(messagePrefix, "-content") }, children) : null) : null;
        if (animation) {
            return react_1.default.createElement(animate_1.default.Expand, { animationAppear: false, afterLeave: afterClose }, newChildren);
        }
        return newChildren;
    };
    Message.propTypes = {
        prefix: prop_types_1.default.string,
        pure: prop_types_1.default.bool,
        className: prop_types_1.default.string,
        style: prop_types_1.default.object,
        /**
         * 反馈类型
         */
        type: prop_types_1.default.oneOf(['success', 'warning', 'error', 'notice', 'help', 'loading']),
        /**
         * 反馈外观
         */
        shape: prop_types_1.default.oneOf(['inline', 'addon', 'toast']),
        /**
         * 反馈大小
         */
        size: prop_types_1.default.oneOf(['medium', 'large']),
        /**
         * 标题
         */
        title: prop_types_1.default.node,
        /**
         * 内容
         */
        children: prop_types_1.default.node,
        /**
         * 默认是否显示
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 当前是否显示
         */
        visible: prop_types_1.default.bool,
        /**
         * 显示的图标类型，会覆盖内部设置的IconType，传false不显示图标
         */
        iconType: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.bool]),
        /**
         * 显示关闭按钮
         */
        closeable: prop_types_1.default.bool,
        /**
         * 关闭按钮的回调
         */
        onClose: prop_types_1.default.func,
        /**
         * 关闭之后调用的函数
         */
        afterClose: prop_types_1.default.func,
        /**
         * 是否开启展开收起动画
         */
        animation: prop_types_1.default.bool,
        locale: prop_types_1.default.object,
        rtl: prop_types_1.default.bool
    };
    Message.defaultProps = {
        prefix: 'next-',
        pure: false,
        type: 'success',
        shape: 'inline',
        size: 'medium',
        defaultVisible: true,
        closeable: false,
        onClose: noop,
        afterClose: noop,
        animation: true,
        locale: zh_cn_1.default.Message
    };
    return Message;
}(react_1.Component);
exports.default = config_provider_1.default.config((0, react_lifecycles_compat_1.polyfill)(Message));

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var icon_1 = __webpack_require__(7);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var noop = function noop() {};
var pickOthers = util_1.obj.pickOthers;
var Inner = /** @class */function (_super) {
    tslib_1.__extends(Inner, _super);
    function Inner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Inner.prototype.renderHeader = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            title = _b.title,
            headerStyle = _b.headerStyle;
        var closeLink = this.renderCloseLink();
        var headerCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "drawer-header")] = true, _a["".concat(prefix, "drawer-no-title")] = !title, _a));
        return react_1.default.createElement("div", { className: headerCls, style: headerStyle, role: "heading", "aria-level": "1" }, title, closeLink);
    };
    Inner.prototype.renderBody = function () {
        var _a = this.props,
            prefix = _a.prefix,
            children = _a.children,
            bodyStyle = _a.bodyStyle;
        if (children) {
            return react_1.default.createElement("div", { className: "".concat(prefix, "drawer-body"), style: bodyStyle }, children);
        }
        return null;
    };
    Inner.prototype.renderCloseLink = function () {
        var _a = this.props,
            prefix = _a.prefix,
            closeable = _a.closeable,
            onClose = _a.onClose,
            locale = _a.locale;
        if (closeable) {
            return react_1.default.createElement("a", { role: "button", "aria-label": locale.close, className: "".concat(prefix, "drawer-close"), onClick: onClose }, react_1.default.createElement(icon_1.default, { className: "".concat(prefix, "drawer-close-icon"), type: "close" }));
        }
        return null;
    };
    Inner.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            className = _b.className,
            closeable = _b.closeable,
            placement = _b.placement,
            role = _b.role,
            rtl = _b.rtl,
            v2 = _b.v2;
        var others = pickOthers(Object.keys(Inner.propTypes), this.props);
        var newClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "drawer")] = true, _a["".concat(prefix, "drawer-").concat(placement)] = !v2, _a["".concat(prefix, "closeable")] = closeable, _a[className] = !!className, _a));
        var ariaProps = {
            role: role,
            'aria-modal': 'true'
        };
        var header = this.renderHeader();
        var body = this.renderBody();
        return react_1.default.createElement("div", tslib_1.__assign({}, ariaProps, { className: newClassName }, others, { dir: rtl ? 'rtl' : undefined }), v2 ? react_1.default.createElement("div", { className: "".concat(prefix, "drawer-content") }, header, body) : react_1.default.createElement("div", { style: { height: '100%', overflow: 'auto' } }, header, body));
    };
    Inner.propTypes = {
        prefix: prop_types_1.default.string,
        className: prop_types_1.default.string,
        closeable: prop_types_1.default.bool,
        role: prop_types_1.default.string,
        title: prop_types_1.default.node,
        placement: prop_types_1.default.oneOf(['top', 'right', 'bottom', 'left']),
        rtl: prop_types_1.default.bool,
        onClose: prop_types_1.default.func,
        locale: prop_types_1.default.object,
        headerStyle: prop_types_1.default.object,
        bodyStyle: prop_types_1.default.object,
        afterClose: prop_types_1.default.func,
        beforeOpen: prop_types_1.default.func,
        beforeClose: prop_types_1.default.func,
        cache: prop_types_1.default.bool,
        shouldUpdatePosition: prop_types_1.default.bool,
        v2: prop_types_1.default.bool
    };
    Inner.defaultProps = {
        prefix: 'next-',
        closeable: true,
        role: 'dialog',
        onClose: noop,
        locale: zh_cn_1.default.Drawer
    };
    return Inner;
}(react_1.Component);
exports.default = Inner;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

// TODO(Babel 8): Remove this file.

var runtime = __webpack_require__(339)();
module.exports = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),
/* 95 */
/***/ (function(module, exports) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

var toPropertyKey = __webpack_require__(171);
function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var box_1 = __webpack_require__(174);
var util_1 = __webpack_require__(4);
var create_style_1 = __webpack_require__(175);
var cell_1 = __webpack_require__(362);
var ieVersion = util_1.env.ieVersion;
var pickOthers = util_1.obj.pickOthers,
    isReactFragment = util_1.obj.isReactFragment;
var createChildren = function createChildren(children, device, gap) {
    var array = react_1.default.Children.toArray(children);
    if (!children) {
        return null;
    }
    return array.map(function (child) {
        if (isReactFragment(child)) {
            return createChildren(child.props.children, device, gap);
        }
        if (react_1.default.isValidElement(child) && ['function', 'object'].indexOf((0, _typeof3.default)(child.type)) > -1 && ['form_item', 'responsive_grid_cell'].indexOf(child.type._typeMark) > -1) {
            return react_1.default.cloneElement(child, {
                style: tslib_1.__assign(tslib_1.__assign({}, (0, create_style_1.getGridChildProps)(child.props, device, gap)), child.props.style || {})
            });
        }
        return child;
    });
};
var getStyle = function getStyle(style, props) {
    if (style === void 0) {
        style = {};
    }
    return tslib_1.__assign(tslib_1.__assign({}, (0, create_style_1.default)(tslib_1.__assign({ display: 'grid' }, props))), style);
};
/**
 * ResponsiveGrid
 */
var ResponsiveGrid = /** @class */function (_super) {
    tslib_1.__extends(ResponsiveGrid, _super);
    function ResponsiveGrid() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ResponsiveGrid.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            View = _b.component,
            style = _b.style,
            className = _b.className,
            children = _b.children,
            device = _b.device,
            rows = _b.rows,
            columns = _b.columns,
            gap = _b.gap,
            rowSpan = _b.rowSpan,
            colSpan = _b.colSpan,
            component = _b.component,
            dense = _b.dense;
        var styleProps = {
            rows: rows,
            columns: columns,
            gap: gap,
            device: device,
            rowSpan: rowSpan,
            colSpan: colSpan,
            component: component,
            dense: dense
        };
        var others = pickOthers(Object.keys(ResponsiveGrid.propTypes), this.props);
        var styleSheet = getStyle(style, styleProps);
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "responsive-grid")] = true, _a["".concat(prefix, "responsive-grid-ie")] = ieVersion, _a), className);
        return ieVersion ? react_1.default.createElement(box_1.default, tslib_1.__assign({}, this.props, { direction: "row", wrap: true, spacing: gap, children: createChildren(children, device, gap) })) : react_1.default.createElement(View, tslib_1.__assign({ style: styleSheet, className: cls }, others), createChildren(children, device, gap));
    };
    ResponsiveGrid._typeMark = 'responsive_grid';
    ResponsiveGrid.propTypes = {
        prefix: prop_types_1.default.string,
        className: prop_types_1.default.any,
        /**
         * 设备，用来做自适应，默认为 PC
         * @enumdesc 手机, 平板, PC
         */
        device: prop_types_1.default.oneOf(['phone', 'tablet', 'desktop']),
        rows: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        /**
         * 分为几列， 默认是 12 列
         */
        columns: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        /**
         * 每个 cell 之间的间距， [bottom&top, right&left]
         */
        gap: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.number), prop_types_1.default.number]),
        /**
         * 设置标签类型
         */
        component: prop_types_1.default.elementType,
        /**
         * 是否开启紧密模式，开启后尽可能能紧密填满，尽量不出现空格
         */
        dense: prop_types_1.default.bool,
        style: prop_types_1.default.object
    };
    ResponsiveGrid.defaultProps = {
        prefix: 'next-',
        component: 'div',
        device: 'desktop',
        dense: false
    };
    return ResponsiveGrid;
}(react_1.Component);
ResponsiveGrid.Cell = cell_1.default;
exports.default = config_provider_1.default.config(ResponsiveGrid);

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var React = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
var classNames = __webpack_require__(3);
var overlay_1 = __webpack_require__(12);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
/** Loading */
var Loading = /** @class */function (_super) {
    tslib_1.__extends(Loading, _super);
    function Loading() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Loading.prototype.render = function () {
        var _a, _b, _c, _d;
        var _e = this.props,
            tip = _e.tip,
            visible = _e.visible,
            children = _e.children,
            className = _e.className,
            style = _e.style,
            indicator = _e.indicator,
            color = _e.color,
            prefix = _e.prefix,
            fullScreen = _e.fullScreen,
            disableScroll = _e.disableScroll,
            onVisibleChange = _e.onVisibleChange,
            tipAlign = _e.tipAlign,
            size = _e.size,
            inline = _e.inline,
            rtl = _e.rtl,
            safeNode = _e.safeNode;
        var indicatorDom = null;
        var dotCls = "".concat(prefix, "loading-dot");
        if (indicator) {
            indicatorDom = indicator;
        } else {
            var backgroundColor = color;
            var fusionReactorCls = classNames((_a = {}, _a["".concat(prefix, "loading-fusion-reactor")] = true, _a["".concat(prefix, "loading-medium-fusion-reactor")] = size === 'medium', _a));
            indicatorDom = React.createElement("div", { className: fusionReactorCls, dir: rtl ? 'rtl' : undefined }, React.createElement("span", { className: dotCls, style: { backgroundColor: backgroundColor } }), React.createElement("span", { className: dotCls, style: { backgroundColor: backgroundColor } }), React.createElement("span", { className: dotCls, style: { backgroundColor: backgroundColor } }), React.createElement("span", { className: dotCls, style: { backgroundColor: backgroundColor } }));
        }
        var loadingCls = classNames((_b = {}, _b["".concat(prefix, "loading")] = true, _b["".concat(prefix, "open")] = visible, _b["".concat(prefix, "loading-inline")] = inline, _b[className] = className, _b));
        var tipCls = classNames((_c = {}, _c["".concat(prefix, "loading-tip")] = true, _c["".concat(prefix, "loading-tip-fullscreen")] = fullScreen,
        // 默认非 right就是 bottom
        _c["".concat(prefix, "loading-right-tip")] = tipAlign === 'right', _c));
        var others = util_1.obj.pickOthers(Loading.propTypes, this.props);
        var contentCls = classNames((_d = {}, _d["".concat(prefix, "loading-component")] = visible, _d["".concat(prefix, "loading-wrap")] = true, _d));
        return fullScreen ? [children, React.createElement(overlay_1.default, tslib_1.__assign({ key: "overlay", hasMask: true, align: "cc cc", safeNode: safeNode, disableScroll: disableScroll }, others, { className: className, style: style, visible: visible, onRequestClose: onVisibleChange }), React.createElement("div", { className: tipCls }, React.createElement("div", { className: "".concat(prefix, "loading-indicator") }, indicatorDom), React.createElement("div", { className: "".concat(prefix, "loading-tip-content") }, tip), React.createElement("div", { className: "".concat(prefix, "loading-tip-placeholder") }, tip)))] : React.createElement("div", tslib_1.__assign({ className: loadingCls, style: style }, others), visible ? React.createElement("div", { className: tipCls }, React.createElement("div", { className: "".concat(prefix, "loading-indicator") }, indicatorDom), React.createElement("div", { className: "".concat(prefix, "loading-tip-content") }, tip), React.createElement("div", { className: "".concat(prefix, "loading-tip-placeholder") }, tip)) : null, React.createElement("div", { className: contentCls }, visible ? React.createElement("div", { className: "".concat(prefix, "loading-masker") }) : null, children));
    };
    Loading.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: PropTypes.string, tip: PropTypes.any, tipAlign: PropTypes.oneOf(['right', 'bottom']), visible: PropTypes.bool, onVisibleChange: PropTypes.func, className: PropTypes.string, style: PropTypes.object, size: PropTypes.oneOf(['large', 'medium']), indicator: PropTypes.any, color: PropTypes.string, fullScreen: PropTypes.bool, disableScroll: PropTypes.bool, safeNode: PropTypes.any, children: PropTypes.any, inline: PropTypes.bool, rtl: PropTypes.bool });
    Loading.defaultProps = {
        prefix: 'next-',
        visible: true,
        onVisibleChange: util_1.func.noop,
        animate: null,
        tipAlign: 'bottom',
        size: 'large',
        inline: true,
        disableScroll: false
    };
    return Loading;
}(React.Component);
exports.default = config_provider_1.default.config(Loading);

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var progress_1 = __webpack_require__(382);
exports.default = config_provider_1.default.config(progress_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('type' in props) {
            deprecated('type', 'progressive', 'Progress');
            var type = props.type,
                others = tslib_1.__rest(props, ["type"]);
            props = tslib_1.__assign({ progressive: type === 'progressive' }, others);
        }
        if ('showInfo' in props) {
            deprecated('showInfo', 'textRender', 'Progress');
            var showInfo = props.showInfo,
                others = tslib_1.__rest(props, ["showInfo"]);
            if (showInfo) {
                props = others;
            } else {
                props = tslib_1.__assign({ textRender: function textRender() {
                        return false;
                    } }, others);
            }
        }
        if ('suffix' in props) {
            deprecated('suffix', 'textRender', 'Progress');
            var suffix_1 = props.suffix,
                others = tslib_1.__rest(props, ["suffix"]);
            props = tslib_1.__assign({ textRender: function textRender() {
                    return suffix_1;
                } }, others);
        }
        return props;
    }
});

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var styleEqual = __webpack_require__(420);
var hasOwnProperty = Object.prototype.hasOwnProperty;

function type(a) {
  return Array.isArray(a) ? 'array' : typeof a;
}

function elementEquals(a, b) {
  var typeOfA = type(a);
  var typeOfB = type(b);

  if (typeOfA !== typeOfB) return false;

  switch (typeOfA) {
    case 'array':
      if (a.length !== b.length) return false;
      for (var i = 0; i < a.length; i++) {
        if (!elementEquals(a[i], b[i])) return false;
      }
      return true;
    case 'object':
      if (!a || !b) return a === b;
      if (a.type !== b.type) return false;
      if (a.key !== b.key) return false;
      if (a.ref !== b.ref) return false;
      return shallowElementEquals(a.props, b.props);
      break;
    default:
      return a === b;
  }
}

function shallowElementEquals(a, b) {
  var aCount = 0;
  var bCount = 0;

  for (var key in a) {
    if (hasOwnProperty.call(a, key)) {
      if (key === 'style') {
        // NOTE(lmr): kind of risky, but i'm assuming that a `style` prop is a React Native style,
        // and using the `styleEqual` algorithm here.
        if (!styleEqual(a[key], b[key])) return false;
      } else if (key === 'children') {
        // will compare children later
      } else {
        if (a[key] !== b[key]) return false;
      }
      aCount++;
    }
  }

  for (var key in b) {
    if (hasOwnProperty.call(b, key)) {
      bCount++;
    }
  }

  if (aCount !== bCount) return false;

  // compare children last...
  return elementEquals(a.children, b.children);
}

module.exports = shallowElementEquals;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
/**
 * Table.Column
 * @order 0
 **/
var Column = /** @class */function (_super) {
  tslib_1.__extends(Column, _super);
  function Column() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Column.prototype.render = function () {
    return null;
  };
  Column.propTypes = {
    /**
     * 指定列对应的字段，支持`a.b`形式的快速取值
     */
    dataIndex: prop_types_1.default.string,
    /**
     * 行渲染的逻辑
     * value, rowIndex, record, context四个属性只可读不可被更改
     * Function(value, index, record) => Element
     */
    cell: prop_types_1.default.oneOfType([prop_types_1.default.element, prop_types_1.default.node, prop_types_1.default.func]),
    /**
     * 表头显示的内容
     */
    title: prop_types_1.default.oneOfType([prop_types_1.default.element, prop_types_1.default.node, prop_types_1.default.func]),
    /**
     * 写到 header 单元格上的title属性
     */
    htmlTitle: prop_types_1.default.string,
    /**
     * 是否支持排序
     */
    sortable: prop_types_1.default.bool,
    /**
     * 排序的方向。
     * 设置 ['desc', 'asc']，表示降序、升序
     * 设置 ['desc', 'asc', 'default']，表示表示降序、升序、不排序
     * @version 1.23
     */
    sortDirections: prop_types_1.default.arrayOf(prop_types_1.default.oneOf(['desc', 'asc', 'default'])),
    /**
     * 列宽，注意在锁列的情况下一定需要配置宽度
     */
    width: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
    /**
     * 单元格的对齐方式
     */
    align: prop_types_1.default.oneOf(['left', 'center', 'right']),
    /**
     * 单元格标题的对齐方式, 不配置默认读取align值
     */
    alignHeader: prop_types_1.default.oneOf(['left', 'center', 'right']),
    /**
     * 生成标题过滤的菜单, 格式为`[{label:'xxx', value:'xxx'}]`
     */
    filters: prop_types_1.default.arrayOf(prop_types_1.default.shape({
      label: prop_types_1.default.string,
      value: prop_types_1.default.oneOfType([prop_types_1.default.node, prop_types_1.default.string])
    })),
    /**
     * 过滤的模式是单选还是多选
     */
    filterMode: prop_types_1.default.oneOf(['single', 'multiple']),
    /**
     * filter 模式下传递给 Menu 菜单的属性， 默认继承 `Menu` 组件的API
     * @property {Boolean} subMenuSelectable 默认为`false` subMenu是否可选择
     * @property {Boolean} isSelectIconRight 默认为`false` 是否将选中图标居右。注意：SubMenu 上的选中图标一直居左，不受此API控制
     */
    filterMenuProps: prop_types_1.default.object,
    filterProps: prop_types_1.default.object,
    /**
     * 是否支持锁列,可选值为`left`,`right`, `true`
     */
    lock: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.string]),
    /**
     * 是否支持列宽调整, 当该值设为true，table的布局方式会修改为fixed.
     */
    resizable: prop_types_1.default.bool,
    /**
     * （推荐使用）是否支持异步列宽调整, 当该值设为true，table的布局方式会修改为fixed.
     * @version 1.24
     */
    asyncResizable: prop_types_1.default.bool,
    /**
     * header cell 横跨的格数，设置为0表示不出现此 th
     */
    colSpan: prop_types_1.default.number,
    /**
     * 设置该列单元格的word-break样式，对于id类、中文类适合用all，对于英文句子适合用word
     * @enumdesc all, word
     * @default all
     * @version 1.23
     */
    wordBreak: prop_types_1.default.oneOf(['all', 'word'])
  };
  Column.contextTypes = {
    parent: prop_types_1.default.any
  };
  Column.defaultProps = {
    cell: function cell(value) {
      return value;
    },
    filterMode: 'multiple',
    filterMenuProps: {
      subMenuSelectable: false
    },
    filterProps: {},
    resizable: false,
    asyncResizable: false
  };
  Column._typeMark = 'column';
  return Column;
}(react_1.default.Component);
exports.default = Column;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var row_1 = __webpack_require__(62);
var LockRow = /** @class */function (_super) {
    tslib_1.__extends(LockRow, _super);
    function LockRow() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.onMouseEnter = function (record, index, e) {
            var onRowMouseEnter = _this.context.onRowMouseEnter;
            var onMouseEnter = _this.props.onMouseEnter;
            onRowMouseEnter && onRowMouseEnter(record, index, e);
            onMouseEnter(record, index, e);
        };
        _this.onMouseLeave = function (record, index, e) {
            var onRowMouseLeave = _this.context.onRowMouseLeave;
            var onMouseLeave = _this.props.onMouseLeave;
            onRowMouseLeave && onRowMouseLeave(record, index, e);
            onMouseLeave(record, index, e);
        };
        return _this;
    }
    LockRow.prototype.render = function () {
        /* eslint-disable no-unused-vars*/
        return react_1.default.createElement(row_1.default, tslib_1.__assign({}, this.props, { onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave }));
    };
    LockRow.propTypes = tslib_1.__assign({}, row_1.default.propTypes);
    LockRow.contextTypes = {
        onRowMouseEnter: prop_types_1.default.func,
        onRowMouseLeave: prop_types_1.default.func
    };
    LockRow.defaultProps = tslib_1.__assign({}, row_1.default.defaultProps);
    return LockRow;
}(react_1.default.Component);
exports.default = LockRow;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var icon_1 = __webpack_require__(7);
var checkbox_1 = __webpack_require__(44);
var animate_1 = __webpack_require__(17);
var util_1 = __webpack_require__(4);
var tree_node_input_1 = __webpack_require__(449);
var tree_node_indent_1 = __webpack_require__(450);
var Expand = animate_1.default.Expand;
var bindCtx = util_1.func.bindCtx;
var isPromise = util_1.obj.isPromise,
    pickOthers = util_1.obj.pickOthers,
    pickAttrsWith = util_1.obj.pickAttrsWith;
var isRoot = function isRoot(pos) {
    return (/^0-(\d)+$/.test(pos)
    );
};
/**
 * Tree.Node
 */
var TreeNode = /** @class */function (_super) {
    tslib_1.__extends(TreeNode, _super);
    function TreeNode(props) {
        var _this = _super.call(this, props) || this;
        _this.saveRef = function (ref) {
            _this.nodeEl = ref;
        };
        _this.saveLabelWrapperRef = function (ref) {
            _this.labelWrapperEl = ref;
        };
        _this.state = {
            editing: false,
            loading: false,
            label: props.label
        };
        bindCtx(_this, ['handleExpand', 'handleSelect', 'handleCheck', 'handleEditStart', 'handleEditFinish', 'handleRightClick', 'handleDragStart', 'handleDragEnter', 'handleDragOver', 'handleDragLeave', 'handleDragEnd', 'handleDrop', 'handleInputKeyDown', 'handleKeyDown']);
        return _this;
    }
    TreeNode.getDerivedStateFromProps = function (props) {
        if ('label' in props) {
            return {
                label: props.label
            };
        }
        return null;
    };
    TreeNode.prototype.componentDidMount = function () {
        this.itemLabelWrapperNode = (0, react_dom_1.findDOMNode)(this.labelWrapperEl);
        this.setFocus();
    };
    TreeNode.prototype.componentDidUpdate = function () {
        this.setFocus();
    };
    TreeNode.prototype.getParentNode = function () {
        return this.props.root.getParentNode(this.props.pos);
    };
    TreeNode.prototype.focusable = function () {
        var _a = this.props,
            root = _a.root,
            disabled = _a.disabled;
        var focusable = root.props.focusable;
        return focusable && !disabled;
    };
    TreeNode.prototype.getFocused = function () {
        var _a = this.props,
            _key = _a._key,
            root = _a.root;
        var focusedKey = root.state.focusedKey;
        return focusedKey === _key;
    };
    TreeNode.prototype.setFocus = function () {
        var focused = this.getFocused();
        if (focused && this.focusable()) {
            this.itemLabelWrapperNode.focus({ preventScroll: true });
        }
    };
    TreeNode.prototype.handleExpand = function (e) {
        var _this = this;
        var _a = this.props,
            root = _a.root,
            expanded = _a.expanded,
            eventKey = _a.eventKey;
        if (root.props.isNodeBlock) {
            e.stopPropagation();
        }
        var loading = this.state.loading;
        if (loading) {
            return;
        }
        var returnValue = root.handleExpand(!expanded, eventKey, this);
        if (isPromise(returnValue)) {
            this.setLoading(true);
            return returnValue.then(function () {
                _this.setLoading(false);
            }, function () {
                _this.setLoading(false);
            });
        }
    };
    TreeNode.prototype.setLoading = function (loading) {
        this.setState({ loading: loading });
    };
    TreeNode.prototype.handleSelect = function (e) {
        e.preventDefault();
        var _a = this.props,
            root = _a.root,
            selected = _a.selected,
            eventKey = _a.eventKey;
        root.handleSelect(!selected, eventKey, this, e);
        var checkable = typeof this.props.checkable !== 'undefined' ? this.props.checkable : root.props.checkable;
        var clickToCheck = typeof this.props.clickToCheck !== 'undefined' ? this.props.clickToCheck : root.props.clickToCheck;
        clickToCheck && checkable && this.handleCheck();
    };
    TreeNode.prototype.handleCheck = function () {
        var _a = this.props,
            root = _a.root,
            checked = _a.checked,
            eventKey = _a.eventKey;
        root.handleCheck(!checked, eventKey, this);
    };
    TreeNode.prototype.handleEditStart = function (e) {
        e.preventDefault();
        this.setState({
            editing: true
        });
    };
    TreeNode.prototype.handleEditFinish = function (e) {
        var label = e.target.value;
        this.setState({
            editing: false
        });
        var _a = this.props,
            root = _a.root,
            eventKey = _a.eventKey;
        root.props.onEditFinish(eventKey, label, this);
    };
    TreeNode.prototype.handleRightClick = function (e) {
        this.props.root.props.onRightClick({
            event: e,
            node: this
        });
    };
    TreeNode.prototype.handleDragStart = function (e) {
        e.stopPropagation();
        this.props.root.handleDragStart(e, this);
    };
    TreeNode.prototype.handleDragEnter = function (e) {
        e.preventDefault();
        e.stopPropagation();
        this.props.root.handleDragEnter(e, this);
    };
    TreeNode.prototype.handleDragOver = function (e) {
        if (this.props.root.canDrop(this)) {
            e.preventDefault();
            this.props.root.handleDragOver(e, this);
        }
        e.stopPropagation();
    };
    TreeNode.prototype.handleDragLeave = function (e) {
        e.stopPropagation();
        this.props.root.handleDragLeave(e, this);
    };
    TreeNode.prototype.handleDragEnd = function (e) {
        e.stopPropagation();
        this.props.root.handleDragEnd(e, this);
    };
    TreeNode.prototype.handleDrop = function (e) {
        e.preventDefault();
        e.stopPropagation();
        this.props.root.handleDrop(e, this);
    };
    TreeNode.prototype.handleInputKeyDown = function (e) {
        if (e.keyCode === util_1.KEYCODE.ENTER) {
            this.handleEditFinish(e);
        }
        e.stopPropagation();
    };
    TreeNode.prototype.handleKeyDown = function (e) {
        var _a = this.props,
            _key = _a._key,
            root = _a.root,
            disabled = _a.disabled;
        if (disabled) {
            return;
        }
        if (this.focusable()) {
            root.handleItemKeyDown(_key, this, e);
        }
        this.props.onKeyDown && this.props.onKeyDown(e);
    };
    TreeNode.prototype.addCallbacks = function (props) {
        var _a = this.props,
            disabled = _a.disabled,
            root = _a.root;
        var checkable = typeof this.props.checkable !== 'undefined' ? this.props.checkable : root.props.checkable;
        var clickToCheck = typeof this.props.clickToCheck !== 'undefined' ? this.props.clickToCheck : root.props.clickToCheck;
        if (!disabled) {
            var selectable = typeof this.props.selectable !== 'undefined' ? this.props.selectable : root.props.selectable;
            if (selectable) {
                props.onClick = this.handleSelect;
            } else if (clickToCheck && checkable) {
                props.onClick = this.handleCheck;
            }
            var editable = typeof this.props.editable !== 'undefined' ? this.props.editable : root.props.editable;
            if (editable) {
                props.onDoubleClick = this.handleEditStart;
            }
            var draggable = typeof this.props.draggable !== 'undefined' ? this.props.draggable : root.props.draggable;
            if (draggable) {
                props.draggable = true;
                props.onDragStart = this.handleDragStart;
                props.onDragEnd = this.handleDragEnd;
            }
            props.onContextMenu = this.handleRightClick;
        }
    };
    TreeNode.prototype.renderSwitcher = function (showLine) {
        var _a, _b;
        var _c = this.props,
            prefix = _c.prefix,
            disabled = _c.disabled,
            expanded = _c.expanded,
            root = _c.root;
        var loadData = root.props.loadData;
        var loading = this.state.loading;
        var lineState = showLine ? 'line' : 'noline';
        var className = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "tree-switcher")] = true, _a["".concat(prefix).concat(lineState)] = !loading, _a["".concat(prefix, "close")] = !loading && !showLine && !expanded, _a["".concat(prefix, "disabled")] = disabled, _a["".concat(prefix, "loading")] = loading, _a["".concat(prefix, "loading-").concat(lineState)] = loading, _a));
        var iconType = loadData && loading ? 'loading' : showLine ? expanded ? 'minus' : 'add' : 'arrow-down';
        var iconCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "tree-switcher-icon")] = true, _b["".concat(prefix, "tree-fold-icon")] = iconType === 'arrow-down', _b["".concat(prefix, "tree-switcher-fold-icon")] = showLine && !expanded, _b["".concat(prefix, "tree-switcher-unfold-icon")] = showLine && expanded, _b));
        return (
            // eslint-disable-next-line jsx-a11y/click-events-have-key-events
            react_1.default.createElement("span", { className: className, onClick: disabled ? null : this.handleExpand }, this.renderRightAngle(showLine), react_1.default.createElement(icon_1.default, { className: iconCls, type: iconType }))
        );
    };
    TreeNode.prototype.renderNoopSwitcher = function (showLine) {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            pos = _b.pos;
        var lineState = showLine ? 'line' : 'noline';
        var className = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "tree-switcher")] = true, _a["".concat(prefix, "noop-").concat(lineState)] = true, _a["".concat(prefix, "noop-line-noroot")] = showLine && !isRoot(pos), _a));
        return react_1.default.createElement("span", { className: className }, this.renderRightAngle(showLine));
    };
    TreeNode.prototype.renderRightAngle = function (showLine) {
        var _a = this.props,
            prefix = _a.prefix,
            pos = _a.pos;
        return showLine && !isRoot(pos) ? react_1.default.createElement("span", { className: "".concat(prefix, "tree-right-angle") }) : null;
    };
    TreeNode.prototype.renderCheckbox = function () {
        var _a = this.props,
            checked = _a.checked,
            indeterminate = _a.indeterminate,
            disabled = _a.disabled,
            checkboxDisabled = _a.checkboxDisabled;
        var label = this.state.label;
        return react_1.default.createElement(checkbox_1.default, { "aria-label": typeof label === 'string' ? label : null, checked: checked, tabIndex: -1, indeterminate: indeterminate, disabled: disabled || checkboxDisabled,
            // don't use onChange, fix https://github.com/alibaba-fusion/next/issues/3850
            onClick: this.handleCheck });
    };
    TreeNode.prototype.renderLabel = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            root = _b.root,
            disabled = _b.disabled,
            icon = _b.icon,
            _key = _b._key;
        var isNodeBlock = root.props.isNodeBlock;
        var label = this.state.label;
        var selectable = typeof this.props.selectable !== 'undefined' ? this.props.selectable : root.props.selectable;
        var labelProps = {
            className: (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "tree-node-label")] = true, _a["".concat(prefix, "tree-node-label-selectable")] = selectable && !disabled, _a))
        };
        var labelWrapperProps = {
            onKeyDown: this.handleKeyDown,
            tabIndex: root.tabbableKey === _key ? '0' : '-1'
        };
        if (!isNodeBlock) {
            this.addCallbacks(labelProps);
        }
        var iconEl = typeof icon === 'string' ? react_1.default.createElement(icon_1.default, { type: icon }) : icon;
        return react_1.default.createElement("div", tslib_1.__assign({ className: "".concat(prefix, "tree-node-label-wrapper"), ref: this.saveLabelWrapperRef }, labelWrapperProps), react_1.default.createElement("div", tslib_1.__assign({}, labelProps), iconEl, label));
    };
    TreeNode.prototype.renderInput = function () {
        var prefix = this.props.prefix;
        var label = this.state.label;
        return react_1.default.createElement("div", { className: "".concat(prefix, "tree-node-label-wrapper"), ref: this.saveLabelWrapperRef }, react_1.default.createElement(tree_node_input_1.default, { prefix: prefix, defaultValue: label, onBlur: this.handleEditFinish, onKeyDown: this.handleInputKeyDown }));
    };
    TreeNode.prototype.renderChildTree = function () {
        var _a = this.props,
            prefix = _a.prefix,
            children = _a.children;
        return children && this.addAnimationIfNeeded(react_1.default.createElement("ul", { role: "group", className: "".concat(prefix, "tree-child-tree") }, children));
    };
    TreeNode.prototype.addAnimationIfNeeded = function (node) {
        var root = this.props.root;
        return root && root.props.animation ? react_1.default.createElement(Expand, { animationAppear: false }, node) : node;
    };
    TreeNode.prototype.render = function () {
        var _a, _b, _c;
        var _d = this.props,
            prefix = _d.prefix,
            rtl = _d.rtl,
            className = _d.className,
            isLeaf = _d.isLeaf,
            level = _d.level,
            root = _d.root,
            selected = _d.selected,
            checked = _d.checked,
            disabled = _d.disabled,
            dragOver = _d.dragOver,
            dragOverGapTop = _d.dragOverGapTop,
            dragOverGapBottom = _d.dragOverGapBottom,
            _key = _d._key,
            size = _d.size,
            posinset = _d.posinset,
            children = _d.children,
            expanded = _d.expanded,
            isLastChild = _d.isLastChild;
        var _e = root.props,
            isNodeBlock = _e.isNodeBlock,
            showLine = _e.showLine,
            rootDraggable = _e.draggable,
            filterTreeNode = _e.filterTreeNode;
        var label = this.state.label;
        var ARIA_PREFIX = 'aria-';
        var ariaProps = pickAttrsWith(this.props, ARIA_PREFIX);
        var others = pickOthers(Object.keys(TreeNode.propTypes), this.props);
        var hasRenderChildNodes = root && root.props.renderChildNodes;
        var shouldShouldLine = !isNodeBlock && showLine && !hasRenderChildNodes;
        var useVirtual = root && root.props.useVirtual;
        // remove aria keys
        Object.keys(others).forEach(function (key) {
            if (key.match(ARIA_PREFIX)) {
                delete others[key];
            }
        });
        if (rootDraggable) {
            others.onDragEnter = this.handleDragEnter;
            others.onDragOver = this.handleDragOver;
            others.onDragLeave = this.handleDragLeave;
            others.onDrop = this.handleDrop;
        }
        var newClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "tree-node")] = true, _a["".concat(prefix, "filtered")] = !!filterTreeNode && !!root.filterTreeNode(this), _a[className] = !!className, _a));
        var checkable = typeof this.props.checkable !== 'undefined' ? this.props.checkable : root.props.checkable;
        var innerClassName = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "tree-node-inner")] = true, _b["".concat(prefix, "selected")] = selected, _b["".concat(prefix, "disabled")] = disabled, _b["".concat(prefix, "drag-over")] = dragOver, _b["".concat(prefix, "drag-over-gap-top")] = dragOverGapTop, _b["".concat(prefix, "drag-over-gap-bottom")] = dragOverGapBottom, _b));
        var defaultPaddingLeft = (typeof isNodeBlock === "undefined" ? "undefined" : (0, _typeof3.default)(isNodeBlock)) === 'object' ? parseInt(isNodeBlock.defaultPaddingLeft || 0) : 0;
        var paddingLeftProp = rtl ? 'paddingRight' : 'paddingLeft';
        var indent = (typeof isNodeBlock === "undefined" ? "undefined" : (0, _typeof3.default)(isNodeBlock)) === 'object' ? parseInt(isNodeBlock.indent || 24) : 24;
        var innerStyle = isNodeBlock ? (_c = {}, _c[paddingLeftProp] = "".concat((useVirtual ? 0 : indent * (level - 1)) + defaultPaddingLeft, "px"), _c) : null;
        var innerProps = tslib_1.__assign({ className: innerClassName, style: innerStyle, onKeyDown: this.handleKeyDown }, ariaProps);
        if (isNodeBlock) {
            this.addCallbacks(innerProps);
        }
        var editing = this.state.editing;
        innerProps.tabIndex = root.tabbableKey === _key ? '0' : '-1';
        if (rtl) {
            others.dir = 'rtl';
        }
        return this.addAnimationIfNeeded(react_1.default.createElement("li", tslib_1.__assign({ role: "presentation", className: newClassName }, others), react_1.default.createElement("div", tslib_1.__assign({ ref: this.saveRef, role: "treeitem", "aria-selected": selected, "aria-disabled": disabled, "aria-checked": checked, "aria-expanded": !isLeaf, "aria-label": typeof label === 'string' ? label : null, "aria-level": level, "aria-posinset": posinset, "aria-setsize": size }, innerProps), useVirtual && !hasRenderChildNodes && react_1.default.createElement(tree_node_indent_1.default, { prefix: prefix, level: level, isLastChild: isLastChild, showLine: shouldShouldLine }), isLeaf ? this.renderNoopSwitcher(shouldShouldLine) : this.renderSwitcher(shouldShouldLine), checkable ? this.renderCheckbox() : null, editing ? this.renderInput() : this.renderLabel()), expanded && (hasRenderChildNodes ? children : this.renderChildTree(children))));
    };
    TreeNode.propTypes = {
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        _key: prop_types_1.default.string,
        className: prop_types_1.default.string,
        /**
         * 树节点
         */
        children: prop_types_1.default.node,
        /**
         * 节点文本内容
         */
        label: prop_types_1.default.node,
        /**
         * 单独设置是否支持选中，覆盖 Tree 的 selectable
         */
        selectable: prop_types_1.default.bool,
        /**
         * 单独设置是否出现复选框，覆盖 Tree 的 checkable
         */
        checkable: prop_types_1.default.bool,
        /**
         * 单独设置是否支持编辑，覆盖 Tree 的 editable
         */
        editable: prop_types_1.default.bool,
        /**
         * 单独设置是否支持拖拽，覆盖 Tree 的 draggable
         */
        draggable: prop_types_1.default.bool,
        /**
         * 是否禁止节点响应
         */
        disabled: prop_types_1.default.bool,
        /**
         * 是否禁止勾选节点复选框
         */
        checkboxDisabled: prop_types_1.default.bool,
        /**
         * 是否是叶子节点，设置loadData时生效
         */
        isLeaf: prop_types_1.default.bool,
        root: prop_types_1.default.object,
        eventKey: prop_types_1.default.string,
        pos: prop_types_1.default.string,
        expanded: prop_types_1.default.bool,
        selected: prop_types_1.default.bool,
        checked: prop_types_1.default.bool,
        indeterminate: prop_types_1.default.bool,
        dragOver: prop_types_1.default.bool,
        dragOverGapTop: prop_types_1.default.bool,
        dragOverGapBottom: prop_types_1.default.bool,
        parentNode: prop_types_1.default.object,
        onKeyDown: prop_types_1.default.func,
        // 无障碍化属性：aria-setsize
        size: prop_types_1.default.number,
        // 无障碍化属性：aria-posinset
        posinset: prop_types_1.default.number,
        // 是否是最后一个子节点，数组类型，包含对祖先节点的判断
        isLastChild: prop_types_1.default.arrayOf(prop_types_1.default.bool),
        /**
         * 自定义图标，可以使用 Icon 的 type，也可以使用组件 `<Icon type="icon type" />`
         * @version 1.21
         */
        icon: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.node])
    };
    TreeNode.defaultProps = {
        label: '---',
        rtl: false,
        disabled: false,
        checkboxDisabled: false,
        size: 1,
        posinset: 1
    };
    return TreeNode;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(TreeNode);

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var util_1 = __webpack_require__(4);
var icon_1 = __webpack_require__(7);
var base_1 = __webpack_require__(194);
var index_1 = __webpack_require__(458);
var html5_uploader_1 = __webpack_require__(195);
var list_1 = __webpack_require__(106);
var util_2 = __webpack_require__(36);
var noop = util_1.func.noop;
/**
 * Upload
 */
var Upload = /** @class */function (_super) {
    tslib_1.__extends(Upload, _super);
    function Upload(props) {
        var _this = _super.call(this, props) || this;
        _this.onSelect = function (files) {
            var _a = _this.props,
                autoUpload = _a.autoUpload,
                afterSelect = _a.afterSelect,
                onSelect = _a.onSelect,
                limit = _a.limit;
            // 总数
            var total = _this.state.value.length + files.length;
            // 差额
            var less = limit - _this.state.value.length;
            if (less <= 0) {
                // 差额不足 则不上传
                return;
            }
            var fileList = files.map(function (file) {
                var objFile = (0, util_2.fileToObject)(file);
                objFile.state = 'selected';
                return objFile;
            });
            // 默认全量上传
            var uploadFiles = fileList;
            var discardFiles = [];
            if (total > limit) {
                // 全量上传总数会超过limit 但是 还有差额
                uploadFiles = fileList.slice(0, less);
                discardFiles = fileList.slice(less);
            }
            var value = _this.state.value.concat(fileList);
            /* eslint-disable-next */
            _this.state.value = value;
            if (autoUpload) {
                _this.uploadFiles(uploadFiles);
            }
            onSelect(uploadFiles, value);
            discardFiles.forEach(function (file) {
                // 丢弃的文件
                var err = new Error(util_2.errorCode.EXCEED_LIMIT);
                err.code = util_2.errorCode.EXCEED_LIMIT;
                _this.onError(err, null, file);
            });
            if (!autoUpload) {
                uploadFiles.forEach(function (file) {
                    var isPassed = afterSelect(file);
                    util_1.func.promiseCall(isPassed, util_1.func.noop, function (error) {
                        _this.onError(error, null, file); // TODO: handle error message
                    });
                });
                _this.onChange(value, uploadFiles);
            }
        };
        _this.onDrop = function (files) {
            _this.onSelect(files);
            _this.props.onDrop(files);
        };
        // 替换掉队列里面的文件
        _this.replaceWithNewFile = function (old, current) {
            var newFile = (0, util_2.fileToObject)(current);
            newFile.state = 'selected';
            var matchKey = old.uid !== undefined ? 'uid' : 'name';
            var fileList = _this.state.value;
            for (var i = 0; i < fileList.length; i++) {
                var item = fileList[i];
                if (item[matchKey] === old[matchKey]) {
                    fileList.splice(i, 1, newFile);
                    break;
                }
            }
            _this.uploadFiles([newFile]);
            return newFile;
        };
        _this.onProgress = function (e, file) {
            _this.state.uploading = true;
            var value = _this.state.value;
            var targetItem = (0, util_2.getFileItem)(file, value);
            if (!targetItem) {
                return;
            }
            (0, _extends3.default)(targetItem, {
                state: 'uploading',
                percent: e.percent
            });
            _this.setState({
                value: value
            });
            _this.props.onProgress(value, targetItem);
        };
        _this.onSuccess = function (response, file) {
            var formatter = _this.props.formatter;
            if (formatter) {
                response = formatter(response, file);
            }
            try {
                if (typeof response === 'string') {
                    response = JSON.parse(response);
                }
            } catch (e) {
                e.code = util_2.errorCode.RESPONSE_FAIL;
                return _this.onError(e, response, file);
            }
            if (response.success === false) {
                var err = new Error(response.message || util_2.errorCode.RESPONSE_FAIL);
                err.code = util_2.errorCode.RESPONSE_FAIL;
                return _this.onError(err, response, file);
            }
            var value = _this.state.value;
            var targetItem = (0, util_2.getFileItem)(file, value);
            if (!targetItem) {
                return;
            }
            (0, _extends3.default)(targetItem, {
                state: 'done',
                response: response,
                url: response.url,
                downloadURL: response.downloadURL || response.url // 下载地址(可选)
            });
            if (!_this.props.useDataURL) {
                targetItem.imgURL = response.imgURL || response.url; // 缩略图地址(可选)
            }
            _this.updateUploadingState();
            _this.onChange(value, targetItem);
            _this.props.onSuccess(targetItem, value);
        };
        _this.onError = function (err, response, file) {
            var value = _this.state.value;
            var targetItem = (0, util_2.getFileItem)(file, value);
            if (!targetItem) {
                return;
            }
            (0, _extends3.default)(targetItem, {
                state: 'error',
                error: err,
                response: response
            });
            _this.updateUploadingState();
            _this.onChange(value, targetItem);
            _this.props.onError(targetItem, value);
        };
        /**
         * 删除文件
         * @param {File} file
         * @return {void}
         */
        _this.removeFile = function (file) {
            file.state = 'removed';
            _this.uploaderRef.abort(file); // 删除组件时调用组件的 `abort` 方法中断上传
            var fileList = _this.state.value;
            var targetItem = (0, util_2.getFileItem)(file, fileList);
            var index = fileList.indexOf(targetItem);
            if (index !== -1) {
                fileList.splice(index, 1);
                _this.onChange(fileList, targetItem);
            }
        };
        _this.updateUploadingState = function () {
            var inProgress = _this.state.value.some(function (i) {
                return i.state === 'uploading';
            });
            if (!inProgress) {
                _this.state.uploading = false;
            }
        };
        /**
         * 取消上传
         * @param {File} file
         * @return {void}
         */
        _this.abort = function (file) {
            var fileList = _this.state.value;
            var targetItem = (0, util_2.getFileItem)(file, fileList);
            var index = fileList.indexOf(targetItem);
            if (index !== -1) {
                fileList.splice(index, 1);
                _this.onChange(fileList, targetItem);
            }
            _this.uploaderRef.abort(file); // 取消上传时调用组件的 `abort` 方法中断上传
        };
        _this.onChange = function (value, file) {
            _this.setState({
                value: value
            });
            _this.props.onChange(value, file);
        };
        var value;
        if ('value' in props) {
            value = props.value;
        } else {
            value = props.defaultValue;
        }
        _this.state = {
            value: !Array.isArray(value) ? [] : value,
            uploading: false
        };
        return _this;
    }
    Upload.getDerivedStateFromProps = function (nextProps, prevState) {
        // 上传中不允许做受控修改
        if ('value' in nextProps && nextProps.value !== prevState.value && !prevState.uploading) {
            return {
                value: !Array.isArray(nextProps.value) ? [] : nextProps.value
            };
        }
        return null;
    };
    /**
     * 对外暴露API, 添加文件
     * @param files
     */
    Upload.prototype.selectFiles = function (files) {
        var filesArr = files.length ? Array.prototype.slice.call(files) : [files];
        this.onSelect(filesArr);
    };
    Upload.prototype.uploadFiles = function (files) {
        // NOTE: drag上传，当鼠标松开的时候回执行 onDrop，但此时onChange还没出发所以 value=[], 必须提前标识上传中
        this.state.uploading = true;
        var fileList = files.filter(function (file) {
            if (file.state === 'selected') {
                file.state = 'uploading';
                return true;
            }
            return false;
        }).map(function (file) {
            return file.originFileObj;
        });
        fileList.length && this.uploaderRef.startUpload(fileList);
    };
    /**
     * 对外暴露api，控制文件上传
     */
    Upload.prototype.startUpload = function () {
        this.uploadFiles(this.state.value);
    };
    Upload.prototype.replaceFiles = function (old, current) {
        var targetItem = (0, util_2.getFileItem)(old, this.state.value);
        if (!targetItem) {
            return;
        }
        current.uid = old.uid;
        targetItem.originFileObj = current;
    };
    Upload.prototype.isUploading = function () {
        return this.state.uploading;
    };
    Upload.prototype.render = function () {
        var _a, _b, _c, _d;
        var _e = this.props,
            listType = _e.listType,
            prefix = _e.prefix,
            dragable = _e.dragable,
            shape = _e.shape,
            className = _e.className,
            style = _e.style,
            useDataURL = _e.useDataURL,
            disabled = _e.disabled,
            limit = _e.limit,
            closable = _e.closable,
            beforeUpload = _e.beforeUpload,
            readonly = _e.readonly,
            onRemove = _e.onRemove,
            onCancel = _e.onCancel,
            onPreview = _e.onPreview,
            list = _e.list,
            extraRender = _e.extraRender,
            progressProps = _e.progressProps,
            rtl = _e.rtl,
            isPreview = _e.isPreview,
            renderPreview = _e.renderPreview,
            name = _e.name,
            _f = _e.fileKeyName,
            fileKeyName = _f === void 0 ? name : _f,
            fileNameRender = _e.fileNameRender,
            actionRender = _e.actionRender,
            previewOnFileName = _e.previewOnFileName,
            others = tslib_1.__rest(_e, ["listType", "prefix", "dragable", "shape", "className", "style", "useDataURL", "disabled", "limit", "closable", "beforeUpload", "readonly", "onRemove", "onCancel", "onPreview", "list", "extraRender", "progressProps", "rtl", "isPreview", "renderPreview", "name", "fileKeyName", "fileNameRender", "actionRender", "previewOnFileName"]);
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "upload")] = true, _a["".concat(prefix, "upload-dragable")] = dragable, _a["".concat(prefix, "disabled")] = disabled, _a["".concat(prefix, "readonly")] = readonly, _a[className] = className, _a));
        var isExceedLimit = this.state.value.length >= limit;
        var innerCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "upload-inner")] = true, _b["".concat(prefix, "hidden")] = isExceedLimit, _b));
        var children = this.props.children;
        if (shape === 'card') {
            var cardCls = (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "upload-card")] = true, _c["".concat(prefix, "disabled")] = disabled, _c));
            children = react_1.default.createElement("div", { className: cardCls }, react_1.default.createElement(icon_1.default, { size: "large", type: "add", className: "".concat(prefix, "upload-add-icon") }), react_1.default.createElement("div", { tabIndex: "0", role: "button", className: "".concat(prefix, "upload-text") }, children));
        }
        if (isPreview) {
            if (typeof renderPreview === 'function') {
                var previewCls = (0, classnames_1.default)((_d = {}, _d["".concat(prefix, "form-preview")] = true, _d[className] = !!className, _d));
                return react_1.default.createElement("div", { style: style, className: previewCls }, renderPreview(this.state.value, this.props));
            }
            if (listType) {
                return react_1.default.createElement(list_1.default, { isPreview: true, listType: listType, style: style, className: className, value: this.state.value, onPreview: onPreview });
            }
            return null;
        }
        // disabled 状态下把 remove函数替换成禁止 remove的函数
        var onRemoveFunc = disabled ? util_1.func.prevent : onRemove;
        var otherAttributes = util_1.obj.pickAttrsWith(this.props, 'data-');
        return react_1.default.createElement("div", tslib_1.__assign({ className: cls, style: style }, otherAttributes), react_1.default.createElement(index_1.default, tslib_1.__assign({}, others, { name: fileKeyName, beforeUpload: beforeUpload, dragable: dragable, disabled: disabled || isExceedLimit, className: innerCls, onSelect: this.onSelect, onDrop: this.onDrop, onProgress: this.onProgress, onSuccess: this.onSuccess, onError: this.onError, ref: this.saveUploaderRef }), children), listType && listType !== 'none' || list ? react_1.default.createElement(list_1.default, { useDataURL: useDataURL, fileNameRender: fileNameRender, actionRender: actionRender, uploader: this, listType: listType, value: this.state.value, closable: closable, onRemove: onRemoveFunc, progressProps: progressProps, onCancel: onCancel, onPreview: onPreview, extraRender: extraRender, rtl: rtl, previewOnFileName: previewOnFileName }) : null);
    };
    Upload.displayName = 'Upload';
    Upload.propTypes = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, html5_uploader_1.default.propTypes), list_1.default.propTypes), {
        /**
         * 样式前缀
         */
        prefix: prop_types_1.default.string.isRequired,
        /**
         * 上传的地址
         */
        action: prop_types_1.default.string,
        /**
         * 文件列表
         */
        value: prop_types_1.default.array,
        /**
         * 默认文件列表
         */
        defaultValue: prop_types_1.default.array,
        /**
         * 上传按钮形状
         */
        shape: prop_types_1.default.oneOf(['card']),
        /**
         * 上传列表的样式
         * @enumdesc 文字, 图文, 卡片
         */
        listType: prop_types_1.default.oneOf(['text', 'image', 'card', 'none']), list: prop_types_1.default.any,
        /**
         * 文件名字段
         */
        name: prop_types_1.default.string,
        /**
         * 上传额外传参
         */
        data: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.func]),
        /**
         * 数据格式化函数，配合自定义 action 使用，参数为服务器的响应数据，详见 [formatter](#formater)
         * @param {Object} response 返回
         * @param {File} file 文件对象
         */
        formatter: prop_types_1.default.func,
        /**
         * 最大文件上传个数
         */
        limit: prop_types_1.default.number,
        /**
         * 设置上传超时,单位ms
         */
        timeout: prop_types_1.default.number,
        /**
         * 可选参数，是否支持拖拽上传，`ie10+` 支持。
         */
        dragable: prop_types_1.default.bool, closable: prop_types_1.default.bool,
        /**
         * 可选参数，是否本地预览
         */
        useDataURL: prop_types_1.default.bool,
        /**
         * 可选参数，是否禁用上传功能
         */
        disabled: prop_types_1.default.bool,
        /**
         * 选择文件回调
         */
        onSelect: prop_types_1.default.func,
        /**
         * 上传中
         */
        onProgress: prop_types_1.default.func,
        /**
         * 上传文件改变时的状态
         * @param {Object} info 文件事件对象
         */
        onChange: prop_types_1.default.func,
        /**
         * 可选参数，上传成功回调函数，参数为请求下响应信息以及文件
         * @param {Object} file 文件
         * @param {Array<Object>} value 值
         */
        onSuccess: prop_types_1.default.func,
        /**
         * 可选参数, 用于校验文件,afterSelect仅在 autoUpload=false 的时候生效,autoUpload=true时,可以使用beforeUpload完全可以替代该功能.
         * @param {Object} file
         * @returns {Boolean} 返回false会阻止上传,其他则表示正常
         */
        afterSelect: prop_types_1.default.func,
        /**
         * 移除文件回调函数
         * @param {Object} file 文件
         * @returns {Boolean|Promise} 返回 false、Promise.resolve(false)、 Promise.reject() 将阻止文件删除
         */
        onRemove: prop_types_1.default.func,
        /**
         * 可选参数，上传失败回调函数，参数为上传失败的信息、响应信息以及文件
         * @param {Object} file 出错的文件
         * @param {Array} value 当前值
         */
        onError: prop_types_1.default.func,
        /**
         * 可选参数, 详见 [beforeUpload](#beforeUpload)
         * @param {Object} file 所有文件
         * @param {Object} options 参数
         * @returns {Boolean|Object|Promise} 返回值作用见demo
         */
        beforeUpload: prop_types_1.default.func,
        /**
         * 放文件
         */
        onDrop: prop_types_1.default.func,
        /**
         * 自定义class
         */
        className: prop_types_1.default.string,
        /**
         * 自定义内联样式
         */
        style: prop_types_1.default.object,
        /**
         * 子元素
         */
        children: prop_types_1.default.node,
        /**
         * 自动上传
         */
        autoUpload: prop_types_1.default.bool,
        /**
         * 自定义上传方法
         * @param {Object} option
         * @return {Object} object with abort method
         */
        request: prop_types_1.default.func,
        /**
         * 透传给Progress props
         */
        progressProps: prop_types_1.default.object, rtl: prop_types_1.default.bool,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {number} value 评分值
         */
        renderPreview: prop_types_1.default.func,
        /**
         * 文件对象的 key name
         * @version 1.21
         */
        fileKeyName: prop_types_1.default.string,
        /**
         * list 的自定义文件名渲染
         * @param {Object} file 文件
         * @return {Node} react node
         */
        fileNameRender: prop_types_1.default.func,
        /**
         * 操作区域额外渲染
         * @param {Object} file 文件
         * @return {Node} react node
         */
        actionRender: prop_types_1.default.func,
        /**
         * 点击文件名时触发 onPreview
         * @version 1.24
         */
        previewOnFileName: prop_types_1.default.bool });
    Upload.defaultProps = tslib_1.__assign(tslib_1.__assign({}, html5_uploader_1.default.defaultProps), { prefix: 'next-', limit: Infinity, autoUpload: true, closable: true, onSelect: noop, onProgress: noop, onChange: noop, onSuccess: noop, onRemove: noop, onError: noop, onDrop: noop, beforeUpload: noop, afterSelect: noop, previewOnFileName: false });
    return Upload;
}(base_1.default);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Upload);

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(36);
var noop = util_1.func.noop;
/**
 * Upload.Selecter
 * @description [底层能力] 可自定义样式的文件选择器
 */
var Selecter = /** @class */function (_super) {
    tslib_1.__extends(Selecter, _super);
    function Selecter() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.onSelect = function (e) {
            var files = e.target.files;
            var filesArr = files.length ? Array.prototype.slice.call(files) : [files];
            filesArr.forEach(function (file) {
                file.uid = (0, util_2.uid)();
            });
            _this.props.onSelect(filesArr);
        };
        /**
         * 点击上传按钮
         * @return {void}
         */
        _this.onClick = function () {
            var el = _this.fileRef;
            if (!el) {
                return;
            }
            // NOTE: 在 IE 下，el.value = '' 在 el.click() 之后，会触发 input[type=file] 两次 onChange
            el.value = '';
            el.click();
        };
        /**
         * 键盘事件
         * @param  {SyntheticEvent} e
         * @return {void}
         */
        _this.onKeyDown = function (e) {
            if (e.key === 'Enter') {
                _this.onClick();
            }
        };
        /**
         * 拖拽
         * @param  {SyntheticEvent} e
         * @return {void}
         */
        _this.onDrop = function (e) {
            e.preventDefault();
            var files = e.dataTransfer.files;
            var filesArr = Array.prototype.slice.call(files);
            _this.props.onDrop(filesArr);
        };
        _this.onDragOver = function (e) {
            e.preventDefault();
            _this.props.onDragOver(e);
        };
        _this.saveFileRef = function (ref) {
            _this.fileRef = ref;
        };
        return _this;
    }
    Selecter.prototype.render = function () {
        var _a = this.props,
            accept = _a.accept,
            multiple = _a.multiple,
            capture = _a.capture,
            webkitdirectory = _a.webkitdirectory,
            children = _a.children,
            id = _a.id,
            disabled = _a.disabled,
            dragable = _a.dragable,
            style = _a.style,
            className = _a.className,
            name = _a.name;
        var events = {};
        if (!disabled) {
            events = (0, _extends3.default)({
                onClick: this.onClick,
                onKeyDown: this.onKeyDown,
                tabIndex: '0'
            }, dragable ? {
                onDrop: this.onDrop,
                onDragOver: this.onDragOver,
                onDragLeave: this.props.onDragLeave
            } : {});
        }
        var otherProps = {};
        if (webkitdirectory) {
            otherProps.webkitdirectory = '';
        }
        if (capture) {
            otherProps.capture = capture;
        }
        return react_1.default.createElement("div", tslib_1.__assign({ role: "application", style: style, className: className }, events), react_1.default.createElement("input", tslib_1.__assign({}, otherProps, { type: "file", name: name, id: id, ref: this.saveFileRef, style: { display: 'none' }, accept: accept, "aria-hidden": true, multiple: multiple, onChange: this.onSelect, disabled: disabled })), children);
    };
    Selecter.propTypes = {
        id: prop_types_1.default.string,
        style: prop_types_1.default.object,
        className: prop_types_1.default.string,
        /**
         * 是否禁用上传功能
         */
        disabled: prop_types_1.default.bool,
        /**
         * 是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件
         */
        multiple: prop_types_1.default.bool,
        /**
         * 是否支持上传文件夹，仅在 chorme 下生效
         */
        webkitdirectory: prop_types_1.default.bool,
        /**
         * 调用系统设备媒体
         */
        capture: prop_types_1.default.string,
        /**
         * 是否支持拖拽上传，`ie10+` 支持。
         */
        dragable: prop_types_1.default.bool,
        /**
         * 接受上传的文件类型 (image/png, image/jpg, .doc, .ppt) 详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)
         */
        accept: prop_types_1.default.string,
        /**
         * 文件选择回调
         */
        onSelect: prop_types_1.default.func,
        /**
         * 拖拽经过回调
         */
        onDragOver: prop_types_1.default.func,
        /**
         * 拖拽离开回调
         */
        onDragLeave: prop_types_1.default.func,
        /**
         * 拖拽完成回调
         */
        onDrop: prop_types_1.default.func,
        children: prop_types_1.default.node,
        name: prop_types_1.default.string
    };
    Selecter.defaultProps = {
        name: 'file',
        multiple: false,
        onSelect: noop,
        onDragOver: noop,
        onDragLeave: noop,
        onDrop: noop
    };
    return Selecter;
}(react_1.default.Component);
exports.default = Selecter;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var progress_1 = __webpack_require__(99);
var icon_1 = __webpack_require__(7);
var button_1 = __webpack_require__(14);
var util_1 = __webpack_require__(4);
var zh_cn_1 = __webpack_require__(9);
var util_2 = __webpack_require__(36);
var transform_1 = __webpack_require__(193);
var item_1 = __webpack_require__(31);
var selecter_1 = __webpack_require__(105);
var isIE9 = util_1.env.ieVersion === 9;
var List = /** @class */function (_super) {
    tslib_1.__extends(List, _super);
    function List() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.handleClose = function (file) {
            var _a = _this.props,
                onRemove = _a.onRemove,
                uploader = _a.uploader;
            var remove = onRemove(file);
            util_1.func.promiseCall(remove, function () {
                uploader && uploader.removeFile(file);
            });
        };
        _this.handleCancel = function (file) {
            var _a = _this.props,
                onCancel = _a.onCancel,
                uploader = _a.uploader;
            var cancel = onCancel(file);
            util_1.func.promiseCall(cancel, function () {
                uploader && uploader.abort(file);
            });
        };
        _this.onImageError = function (file, obj) {
            obj.onerror = null;
            _this.props.onImageError(obj, file);
        };
        _this.onSelect = function (oldfile, files) {
            var uploader = _this.props.uploader;
            uploader && files.length && uploader.replaceWithNewFile(oldfile, files[0]);
        };
        return _this;
    }
    List.prototype.componentDidUpdate = function () {
        var _this = this;
        var _a = this.props,
            listType = _a.listType,
            useDataURL = _a.useDataURL,
            value = _a.value;
        if (listType !== 'image' && listType !== 'card') {
            return;
        }
        useDataURL && value.forEach(function (file) {
            if (typeof document === 'undefined' || typeof window === 'undefined' || !window.FileReader || !window.File || !(file.originFileObj instanceof File) || file.imgURL !== undefined) {
                return;
            }
            file.imgURL = '';
            (0, util_2.previewFile)(file.originFileObj, function (previewDataUrl) {
                file.imgURL = previewDataUrl;
                _this.forceUpdate();
            });
        });
    };
    List.prototype.onPreview = function (file, e) {
        var onPreview = this.props.onPreview;
        if (!onPreview) {
            return;
        }
        // e.preventDefault();
        return onPreview(file, e);
    };
    List.prototype.getInfo = function (file) {
        var _a;
        var prefixCls = "".concat(this.props.prefix, "upload");
        var downloadURL = file.downloadURL || file.url;
        var imgURL = file.imgURL || file.url;
        var size = this.sizeCaculator(file.size);
        var itemCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefixCls, "-list-item")] = true, _a["".concat(prefixCls, "-list-item-").concat(file.state)] = file.state, _a["".concat(prefixCls, "-list-item-error-with-msg")] = file.state === 'error' && file.errorMsg, _a));
        var alt = file.name || file.alt;
        return { prefixCls: prefixCls, downloadURL: downloadURL, imgURL: imgURL, size: size, itemCls: itemCls, alt: alt };
    };
    // transfer size from number to xx K/ XxxM / xxG
    List.prototype.sizeCaculator = function (size) {
        var fileSize = parseFloat(size, 10);
        // fileSize为浮点数 用 < 0.000001 替代 === 0
        if (isNaN(fileSize) || fileSize < 0.0000001) {
            return 0;
        }
        var SIZE_SUFFIX = ['B', 'K', 'M', 'G', 'T', 'P'];
        var suffixIndex = 0;
        // 在Mac上实验发现 取1024造成显示的大小和实际大小不一致
        // 因为单位制不同 见 https://superuser.com/questions/938234/size-of-files-in-windows-os-its-kb-or-kb
        var BIT_NUMBER_SYSTEM = 1024;
        while (fileSize >= BIT_NUMBER_SYSTEM && suffixIndex < SIZE_SUFFIX.length) {
            suffixIndex++;
            fileSize /= BIT_NUMBER_SYSTEM;
        }
        var suffix = SIZE_SUFFIX[suffixIndex];
        fileSize = fileSize.toFixed(2);
        return "".concat(fileSize).concat(suffix);
    };
    List.prototype.getTextList = function (file) {
        var _this = this;
        var _a = this.props,
            locale = _a.locale,
            extraRender = _a.extraRender,
            actionRender = _a.actionRender,
            progressProps = _a.progressProps,
            rtl = _a.rtl,
            fileNameRender = _a.fileNameRender,
            previewOnFileName = _a.previewOnFileName;
        var _b = this.getInfo(file),
            prefixCls = _b.prefixCls,
            downloadURL = _b.downloadURL,
            size = _b.size,
            itemCls = _b.itemCls;
        var onClick = function onClick() {
            return file.state === 'uploading' ? _this.handleCancel(file) : _this.handleClose(file);
        };
        var onKeyDown = function onKeyDown(e) {
            if (e.keyCode === util_1.KEYCODE.ENTER) {
                onClick();
            }
        };
        return react_1.default.createElement("div", { className: itemCls, key: file.uid || file.name }, react_1.default.createElement("div", { className: "".concat(prefixCls, "-list-item-name-wrap") }, react_1.default.createElement("a", { onClick: previewOnFileName ? this.onPreview.bind(this, file) : util_1.func.noop, href: downloadURL, target: "_blank", style: { pointerEvents: downloadURL ? '' : 'none' }, className: "".concat(prefixCls, "-list-item-name") }, react_1.default.createElement("span", null, fileNameRender(file)), !!size && react_1.default.createElement("span", { className: "".concat(prefixCls, "-list-item-size"), dir: rtl ? 'rtl' : undefined }, "(", size, ")"), react_1.default.createElement("span", { className: "".concat(prefixCls, "-extra") }, extraRender(file)))), file.state === 'uploading' ? react_1.default.createElement("div", { className: "".concat(prefixCls, "-list-item-progress") }, react_1.default.createElement(progress_1.default, tslib_1.__assign({ size: "medium", percent: file.percent, textRender: util_1.func.noop, rtl: rtl }, progressProps))) : null, file.state === 'error' && file.errorMsg ? react_1.default.createElement("div", { className: "".concat(prefixCls, "-list-item-error-msg") }, file.errorMsg) : null, react_1.default.createElement("span", { className: "".concat(prefixCls, "-list-item-op") }, actionRender(file), this.props.closable ? react_1.default.createElement(icon_1.default, { type: "close", size: "large", role: "button", "aria-label": locale.upload.delete, tabIndex: "0", onClick: onClick, onKeyDown: onKeyDown }) : null));
    };
    List.prototype.getImageList = function (file) {
        var _this = this;
        var _a = this.props,
            extraRender = _a.extraRender,
            actionRender = _a.actionRender,
            progressProps = _a.progressProps,
            rtl = _a.rtl,
            fileNameRender = _a.fileNameRender,
            previewOnFileName = _a.previewOnFileName;
        var _b = this.getInfo(file),
            prefixCls = _b.prefixCls,
            downloadURL = _b.downloadURL,
            imgURL = _b.imgURL,
            size = _b.size,
            itemCls = _b.itemCls,
            alt = _b.alt;
        var img = null;
        var onClick = function onClick() {
            return file.state === 'uploading' ? _this.handleCancel(file) : _this.handleClose(file);
        };
        var onKeyDown = function onKeyDown(e) {
            if (e.keyCode === util_1.KEYCODE.ENTER) {
                onClick();
            }
        };
        if (file.state === 'uploading' || file.state === 'selected' && !imgURL) {
            img = react_1.default.createElement(icon_1.default, { type: "picture" });
        } else if (file.state === 'error') {
            img = react_1.default.createElement(icon_1.default, { type: "cry" });
        } else {
            img = react_1.default.createElement("img", { src: imgURL, onError: this.onImageError.bind(this, file), tabIndex: "0", alt: alt, onClick: this.onPreview.bind(this, file) });
        }
        return react_1.default.createElement("div", { className: itemCls, key: file.uid || file.name }, react_1.default.createElement("div", { className: "".concat(prefixCls, "-list-item-thumbnail") }, img), react_1.default.createElement("span", { className: "".concat(prefixCls, "-list-item-op") }, actionRender(file), this.props.closable ? react_1.default.createElement(icon_1.default, { type: "close", size: "large", tabIndex: "0", role: "button", onClick: onClick, onKeyDown: onKeyDown }) : null), react_1.default.createElement("a", { onClick: previewOnFileName ? this.onPreview.bind(this, file) : util_1.func.noop, href: downloadURL, target: "_blank", style: { pointerEvents: downloadURL ? '' : 'none' }, className: "".concat(prefixCls, "-list-item-name") }, react_1.default.createElement("span", null, fileNameRender(file)), !!size && react_1.default.createElement("span", { className: "".concat(prefixCls, "-list-item-size"), dir: rtl ? 'rtl' : undefined }, "(", size, ")"), react_1.default.createElement("span", { className: "".concat(prefixCls, "-extra") }, extraRender(file))), file.state === 'uploading' ? react_1.default.createElement("div", { className: "".concat(prefixCls, "-list-item-progress") }, react_1.default.createElement(progress_1.default, tslib_1.__assign({ size: "medium", percent: file.percent, textRender: util_1.func.noop }, progressProps))) : null, file.state === 'error' && file.errorMsg ? react_1.default.createElement("div", { className: "".concat(prefixCls, "-list-item-error-msg") }, file.errorMsg) : null);
    };
    List.prototype.getPictureCardList = function (file, isPreview) {
        var _this = this;
        var _a = this.props,
            locale = _a.locale,
            progressProps = _a.progressProps,
            fileNameRender = _a.fileNameRender,
            itemRender = _a.itemRender,
            showDownload = _a.showDownload;
        var _b = this.getInfo(file),
            prefixCls = _b.prefixCls,
            downloadURL = _b.downloadURL,
            imgURL = _b.imgURL,
            itemCls = _b.itemCls,
            alt = _b.alt;
        var state = isPreview ? '' : file.state;
        var img = null;
        if (state === 'uploading' || state === 'selected' && !imgURL) {
            img = react_1.default.createElement("div", { className: "".concat(prefixCls, "-list-item-handler") }, react_1.default.createElement(icon_1.default, { type: "picture" }), react_1.default.createElement(button_1.default, { text: true, onClick: function onClick() {
                    return _this.handleCancel(file);
                } }, locale.card.cancel));
        } else if (state === 'error') {
            img = react_1.default.createElement("div", { className: "".concat(prefixCls, "-list-item-handler") }, react_1.default.createElement(icon_1.default, { type: "cry" }));
        } else {
            img = react_1.default.createElement("img", { src: imgURL, tabIndex: "0", alt: alt, onError: this.onImageError.bind(this, file), onClick: this.onPreview.bind(this, file) });
        }
        var onClose = function onClose() {
            return _this.handleClose(file);
        };
        var onKeyDownClose = function onKeyDownClose(e) {
            if (e.keyCode === util_1.KEYCODE.ENTER) {
                onClose();
            }
        };
        var item = null;
        if (state === 'uploading') {
            item = [react_1.default.createElement("div", { className: "".concat(prefixCls, "-list-item-thumbnail"), key: "img" }, img), react_1.default.createElement("div", { className: "".concat(prefixCls, "-list-item-progress"), key: "progress" }, react_1.default.createElement(progress_1.default, tslib_1.__assign({ size: "medium", percent: file.percent, textRender: util_1.func.noop }, progressProps)))];
        } else {
            /* eslint-disable no-lonely-if */
            if (typeof itemRender === 'function') {
                // 不处理上传态和选择态，太过复杂
                item = itemRender(file, { remove: onClose });
            } else {
                var Uploader = this.props.uploader || { props: {} };
                var UploaderProps = Uploader.props;
                // TODO: 2.x 中逻辑会修改为，只要有showDownload，那就有下载按钮（不管有没有downloadURL）
                item = [react_1.default.createElement("div", { className: "".concat(prefixCls, "-list-item-thumbnail"), key: "img" }, img), react_1.default.createElement("span", { key: "tool", className: "".concat(prefixCls, "-tool") }, state !== 'error' && showDownload && downloadURL ? react_1.default.createElement("a", { href: downloadURL, target: "_blank", className: "".concat(prefixCls, "-tool-item ").concat(prefixCls, "-tool-download-link") }, react_1.default.createElement(icon_1.default, { type: "download", "aria-label": locale.card.download, className: "".concat(prefixCls, "-tool-download-icon") })) : null, this.props.reUpload && !isPreview && !isIE9 ? react_1.default.createElement(selecter_1.default, { className: "".concat(prefixCls, "-tool-item ").concat(prefixCls, "-tool-reupload"), accept: UploaderProps.accept, name: UploaderProps.fileKeyName, onSelect: this.onSelect.bind(this, file) }, react_1.default.createElement(icon_1.default, { type: "edit", className: "".concat(prefixCls, "-tool-reupload-icon") })) : null, this.props.closable && !isPreview ? react_1.default.createElement("span", { className: "".concat(prefixCls, "-tool-item ").concat(prefixCls, "-tool-close") }, react_1.default.createElement(icon_1.default, { type: "ashbin", "aria-label": locale.card.delete, tabIndex: "0", role: "button", onClick: onClose, onKeyDown: onKeyDownClose })) : null)];
            }
        }
        return react_1.default.createElement("div", { className: itemCls, key: file.uid || file.name }, react_1.default.createElement("div", { className: "".concat(prefixCls, "-list-item-wrapper") }, item), react_1.default.createElement("span", { className: "".concat(prefixCls, "-list-item-name") }, fileNameRender(file)));
    };
    List.prototype.render = function () {
        var _a, _b;
        var _this = this;
        var _c = this.props,
            listType = _c.listType,
            children = _c.children,
            prefix = _c.prefix,
            rtl = _c.rtl,
            className = _c.className,
            isPreview = _c.isPreview;
        var prefixCls = "".concat(prefix, "upload");
        var list = [];
        if (isPreview) {
            var previewCls_1 = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "form-preview")] = true, _a[className] = !!className, _a));
            list = this.props.value.map(function (file) {
                if (!file) {
                    return null;
                }
                var downloadURL = file.downloadURL,
                    imgURL = file.imgURL,
                    name = file.name;
                if (listType === 'text') {
                    return react_1.default.createElement("div", { className: previewCls_1 }, react_1.default.createElement("a", { href: downloadURL, target: "_blank" }, name));
                } else if (listType === 'image' || listType === 'card') {
                    return _this.getPictureCardList(file, true);
                }
                return null;
            });
        } else {
            list = this.props.value.map(function (file) {
                if (!file) {
                    return null;
                }
                if (listType === 'text') {
                    return _this.getTextList(file);
                } else if (listType === 'image') {
                    return _this.getImageList(file);
                } else if (listType === 'card') {
                    return _this.getPictureCardList(file);
                }
                return null;
            });
        }
        if (rtl && listType === 'card' && Array.isArray(list)) {
            list = list.reverse();
        }
        var _listType = isPreview && listType === 'image' ? 'card' : this.props.listType;
        var listclassNames = (0, classnames_1.default)((_b = {}, _b["".concat(prefixCls, "-list")] = true, _b["".concat(prefixCls, "-list-").concat(_listType)] = true, _b["".concat(prefixCls, "-ie9")] = isIE9, _b), className);
        var others = util_1.obj.pickAttrsWith(this.props, 'data-');
        return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: listclassNames, dir: rtl ? 'rtl' : undefined }), rtl ? children : list, rtl ? list : children);
    };
    List.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 多语言
         */
        locale: prop_types_1.default.object,
        /**
         * 文件列表，数据格式请参考 文件对象
         */
        listType: prop_types_1.default.oneOf(['text', 'image', 'card']),
        /**
         * 文件列表
         */
        value: prop_types_1.default.array,
        closable: prop_types_1.default.bool,
        /**
         * 删除文件回调(支持Promise)
         */
        onRemove: prop_types_1.default.func,
        /**
         * 取消上传回调(支持Promise)
         */
        onCancel: prop_types_1.default.func,
        /**
         * 头像加载出错回调
         */
        onImageError: prop_types_1.default.func,
        /**
         * 点击图片回调
         */
        onPreview: prop_types_1.default.func,
        /**
         * 点击文件名时触发 onPreview
         */
        previewOnFileName: prop_types_1.default.bool,
        /**
         * 自定义额外渲染
         */
        extraRender: prop_types_1.default.func,
        /**
         * 自定义操作渲染
         */
        actionRender: prop_types_1.default.func,
        /**
         * 卡片自定义渲染（目前只支持 Card)
         * @param {Object} file 文件对象
         * @param {Object} {remove} remove:删除回调
         * @retuns {ReactNode} React元素
         */
        itemRender: prop_types_1.default.func,
        /**
         * 透传给Progress props
         */
        progressProps: prop_types_1.default.object,
        children: prop_types_1.default.node,
        uploader: prop_types_1.default.any,
        showDownload: prop_types_1.default.bool,
        /**
         * 可选参数，是否本地预览
         */
        useDataURL: prop_types_1.default.bool,
        rtl: prop_types_1.default.bool,
        isPreview: prop_types_1.default.bool,
        fileNameRender: prop_types_1.default.func
    };
    List.defaultProps = {
        prefix: 'next-',
        listType: 'text',
        value: [],
        locale: zh_cn_1.default.Upload,
        closable: false,
        showDownload: true,
        onRemove: util_1.func.noop,
        onCancel: util_1.func.noop,
        extraRender: util_1.func.noop,
        actionRender: util_1.func.noop,
        onImageError: util_1.func.noop,
        progressProps: {},
        fileNameRender: function fileNameRender(file) {
            return file.name;
        },
        previewOnFileName: false
    };
    return List;
}(react_1.Component);
// Wrap <List> with <ConfigProvider> to avoid context missing if it is
// referenced by other internal modules.
// https://github.com/alibaba-fusion/next/blob/build/1.13.9/src/upload/upload.jsx#L521
exports.default = config_provider_1.default.config(List, {
    componentName: 'Upload',
    transform: transform_1.default
});

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.error = void 0;
var PT = __webpack_require__(2);
var constant_1 = __webpack_require__(108);
var util_1 = __webpack_require__(4);
var error = function error(propName, ComponentName) {
    return new Error("Invalid prop ".concat(propName, " supplied to ").concat(ComponentName, ". Validation failed."));
};
exports.error = error;
function checkType(type) {
    return function (props, propName, componentName) {
        var value = props[propName];
        if (value) {
            if (!Array.isArray(value)) {
                value = [value];
            }
            if (!Array.isArray(type)) {
                type = [type];
            }
            if (!value.every(function (v) {
                return type.includes(typeof v === "undefined" ? "undefined" : (0, _typeof3.default)(v));
            })) {
                throw (0, exports.error)(propName, componentName);
            }
        }
    };
}
var SharedPT = {
    date: function date(props, propName, componentName) {
        if (propName in props && !(0, util_1.datejs)(props.propName).isValid()) {
            throw (0, exports.error)(propName, componentName);
        }
    },
    value: function value(props, propName, componentName) {
        if (props[propName]) {
            var value = props[propName];
            if (props.type === constant_1.TIME_PICKER_TYPE.RANGE && !Array.isArray(value)) {
                throw (0, exports.error)(propName, componentName);
            } else if (!Array.isArray(value)) {
                value = [value];
            }
            if (!value.every(function (v) {
                return !v || (0, util_1.datejs)(v).isValid() || typeof v === 'string';
            })) {
                throw (0, exports.error)(propName, componentName);
            }
        }
    },
    format: checkType(['string', 'function']),
    inputValue: checkType('string'),
    placeholder: checkType('string'),
    readOnly: checkType('boolean'),
    disabled: checkType('boolean'),
    render: PT.oneOfType([PT.node, PT.func]),
    type: PT.oneOf(Object.values(constant_1.TIME_PICKER_TYPE)),
    inputType: PT.oneOf(Object.values(constant_1.TIME_INPUT_TYPE)),
    size: PT.oneOf(['small', 'medium', 'large'])
};
exports.default = SharedPT;

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.TIME_INPUT_TYPE = exports.TIME_PICKER_TYPE = void 0;
exports.TIME_PICKER_TYPE = {
    TIME: 'time',
    RANGE: 'range'
};
exports.TIME_INPUT_TYPE = {
    BEGIN: 0,
    END: 1
};

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var config_provider_1 = __webpack_require__(5);
var calendar_1 = __webpack_require__(478);
exports.default = config_provider_1.default.config(calendar_1.default);

/***/ }),
/* 110 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.saveRef = exports.getClosest = exports.getMatches = exports.getPixels = exports.getOffset = exports.hasScroll = exports.scrollbar = exports.getNodeHozWhitespace = exports.setStyle = exports.getStyle = exports.matches = exports.toggleClass = exports.removeClass = exports.addClass = exports.hasClass = exports.hasDOM = void 0;
var string_1 = __webpack_require__(121);
var object_1 = __webpack_require__(30);
/**
 * 是否能使用 DOM 方法
 */
exports.hasDOM = typeof window !== 'undefined' && !!window.document && !!document.createElement;
/**
 * 节点是否包含指定 className
 *
 * @example
 * dom.hasClass(document.body, 'foo');
 */
function hasClass(node, className) {
    /* istanbul ignore if */
    if (!exports.hasDOM || !node) {
        return false;
    }
    if (node.classList) {
        // @ts-expect-error fixme: className can be undefined, conflict with containes
        return node.classList.contains(className);
    } else {
        // @ts-expect-error fixme: className can be undefined, conflict with containes
        return node.className.indexOf(className) > -1;
    }
}
exports.hasClass = hasClass;
/**
 * 添加 className
 *
 * @example
 * dom.addClass(document.body, 'foo');
 */
function addClass(node, className, _force) {
    if (_force === void 0) {
        _force = false;
    }
    /* istanbul ignore if */
    if (!exports.hasDOM || !node) {
        return;
    }
    if (node.classList) {
        node.classList.add(className);
    } else if (_force === true || !hasClass(node, className)) {
        node.className += " ".concat(className);
    }
}
exports.addClass = addClass;
/**
 * 移除 className
 *
 * @example
 * dom.removeClass(document.body, 'foo');
 */
function removeClass(node, className, _force) {
    if (_force === void 0) {
        _force = false;
    }
    /* istanbul ignore if */
    if (!exports.hasDOM || !node) {
        return;
    }
    if (node.classList) {
        node.classList.remove(className);
    } else if (_force === true || hasClass(node, className)) {
        node.className = node.className.replace(className, '').replace(/\s+/g, ' ').trim();
    }
}
exports.removeClass = removeClass;
/**
 * 切换 className
 * @returns 执行后节点上是否还有此 className
 *
 * @example
 * dom.toggleClass(document.body, 'foo');
 */
function toggleClass(node, className) {
    /* istanbul ignore if */
    if (!exports.hasDOM || !node) {
        return false;
    }
    if (node.classList) {
        return node.classList.toggle(className);
    } else {
        var flag = hasClass(node, className);
        flag ? removeClass(node, className, true) : addClass(node, className, true);
        return !flag;
    }
}
exports.toggleClass = toggleClass;
/**
 * 元素是否匹配 CSS 选择器
 * @param node - DOM 节点
 * @param selector - CSS 选择器
 *
 * @example
 * dom.matches(mountNode, '.container'); // boolean
 */
exports.matches = function () {
    var matchesFn = null;
    /* istanbul ignore else */
    if (exports.hasDOM) {
        var _body = document.body || document.head;
        matchesFn = _body.matches ? 'matches' : _body.webkitMatchesSelector ? 'webkitMatchesSelector' : _body.msMatchesSelector ? 'msMatchesSelector' : _body.mozMatchesSelector ? 'mozMatchesSelector' : null;
    }
    return function (node, selector) {
        if (!exports.hasDOM || !node) {
            return false;
        }
        // @ts-expect-error fixme: selector can be undefined, conflict with matches
        return matchesFn ? node[matchesFn](selector) : false;
    };
}();
/**
 * 获取元素计算后的样式
 */
function _getComputedStyle(node) {
    return node && node.nodeType === 1 ? window.getComputedStyle(node, null) : {};
}
var PIXEL_PATTERN = /margin|padding|width|height|max|min|offset|size|top/i;
var removePixel = { left: 1, top: 1, right: 1, bottom: 1 };
/**
 * 校验并修正元素的样式属性值
 */
function _getStyleValue(node, type, value) {
    type = type.toLowerCase();
    if (value === 'auto') {
        if (type === 'height') {
            return node.offsetHeight || 0;
        }
        if (type === 'width') {
            return node.offsetWidth || 0;
        }
    }
    if (!(type in removePixel)) {
        // 属性值是否需要去掉 px 单位，这里假定此类的属性值都是 px 为单位的
        removePixel[type] = PIXEL_PATTERN.test(type);
    }
    return removePixel[type] ? parseFloat(value) || 0 : value;
}
var floatMap = { cssFloat: 1, styleFloat: 1, float: 1 };
/**
 * 获取元素计算后的样式
 * @param node - DOM 节点
 * @param name - 属性名
 */
function getStyle(node, name) {
    /* istanbul ignore if */
    if (!exports.hasDOM || !node) {
        return null;
    }
    var style = _getComputedStyle(node);
    // 如果不指定属性名，则返回全部值
    if (!name) {
        return style;
    }
    // if style is {}(e.g. node isn't a element node), return null
    if ((0, object_1.isPlainObject)(style)) {
        return null;
    }
    name = floatMap[name] ? 'cssFloat' in node.style ? 'cssFloat' : 'styleFloat' : name;
    return _getStyleValue(node, name, style.getPropertyValue((0, string_1.hyphenate)(name)) || node.style[(0, string_1.camelcase)(name)]);
}
exports.getStyle = getStyle;
/**
 * 设置元素的样式
 * @param node - DOM 节点
 * @param name - 属性名，或者是一个对象，包含多个属性
 * @param value - 属性值
 *
 * @example
 * // 设置单个属性值
 * dom.setStyle(mountNode, 'width', 100);
 * // 设置多条属性值
 * dom.setStyle(mountNode, \{
 *     width: 100,
 *     height: 200
 * \});
 */
function setStyle(node, name, value) {
    /* istanbul ignore if */
    if (!exports.hasDOM || !node) {
        return false;
    }
    // 批量设置多个值
    if ((typeof name === "undefined" ? "undefined" : (0, _typeof3.default)(name)) === 'object' && arguments.length === 2) {
        (0, object_1.each)(name, function (val, key) {
            return setStyle(node, key, val);
        });
    } else {
        name = floatMap[name] ? 'cssFloat' in node.style ? 'cssFloat' : 'styleFloat' : name;
        if (typeof value === 'number' && PIXEL_PATTERN.test(name)) {
            value = "".concat(value, "px");
        }
        node.style[(0, string_1.camelcase)(name)] = value; // IE8 support
    }
}
exports.setStyle = setStyle;
function getNodeHozWhitespace(node) {
    var paddingLeft = getStyle(node, 'paddingLeft');
    var paddingRight = getStyle(node, 'paddingRight');
    var marginLeft = getStyle(node, 'marginLeft');
    var marginRight = getStyle(node, 'marginRight');
    return paddingLeft + paddingRight + marginLeft + marginRight;
}
exports.getNodeHozWhitespace = getNodeHozWhitespace;
var isScrollDisplay = function isScrollDisplay(element) {
    try {
        var scrollbarStyle = window.getComputedStyle(element, '::-webkit-scrollbar');
        return !scrollbarStyle || scrollbarStyle.getPropertyValue('display') !== 'none';
    } catch (e) {
        // ignore error for firefox
    }
    return true;
};
/**
 * 获取默认的滚动条大小（通过创造一个滚动元素，读取滚动元素的滚动条信息）
 */
function scrollbar() {
    var scrollDiv = document.createElement('div');
    scrollDiv.className += 'just-to-get-scrollbar-size';
    setStyle(scrollDiv, {
        position: 'absolute',
        width: '100px',
        height: '100px',
        overflow: 'scroll',
        top: '-9999px'
    });
    document.body && document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    var scrollbarHeight = scrollDiv.offsetHeight - scrollDiv.clientHeight;
    document.body.removeChild(scrollDiv);
    return {
        width: scrollbarWidth,
        height: scrollbarHeight
    };
}
exports.scrollbar = scrollbar;
function hasScroll(containerNode) {
    // 当元素带有 overflow: hidden 一定没有滚动条
    var overflow = getStyle(containerNode, 'overflow');
    if (overflow === 'hidden') {
        return false;
    }
    var parentNode = containerNode.parentNode;
    return parentNode && parentNode.scrollHeight > parentNode.clientHeight && scrollbar().width > 0 && isScrollDisplay(parentNode) && isScrollDisplay(containerNode);
}
exports.hasScroll = hasScroll;
/**
 * 获取元素距离视口顶部和左边的偏移距离
 */
function getOffset(node) {
    var rect = node.getBoundingClientRect();
    var win = node.ownerDocument.defaultView;
    return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
    };
}
exports.getOffset = getOffset;
/**
 * 获取不同单位转为 number 的长度
 * @param len - 传入的长度
 * @returns pixels
 */
function getPixels(len) {
    var win = document.defaultView;
    if (typeof +len === 'number' && !isNaN(+len)) {
        return +len;
    }
    if (typeof len === 'string') {
        var PX_REG = /(\d+)px/;
        var VH_REG = /(\d+)vh/;
        if (Array.isArray(len.match(PX_REG))) {
            return +len.match(PX_REG)[1] || 0;
        }
        if (Array.isArray(len.match(VH_REG))) {
            var _1vh = win.innerHeight / 100;
            return +(len.match(VH_REG)[1] * _1vh) || 0;
        }
    }
    return 0;
}
exports.getPixels = getPixels;
/**
 * 如果元素被指定的选择器字符串选择，getMatches()  方法返回 true; 否则返回 false
 * @param dom - 待匹配的元素
 * @param selecotr - 选择器
 * @returns parent
 */
function getMatches(dom, selector) {
    /* istanbul ignore if */
    if (!exports.hasDOM || !dom) {
        return null;
    }
    /* istanbul ignore if */
    if (Element.prototype.matches) {
        return dom.matches(selector);
    } else if (Element.prototype.msMatchesSelector) {
        return dom.msMatchesSelector(selector);
    } else if (Element.prototype.webkitMatchesSelector) {
        return dom.webkitMatchesSelector(selector);
    }
    return null;
}
exports.getMatches = getMatches;
/**
 * 匹配特定选择器且离当前元素最近的祖先元素（也可以是当前元素本身），如果匹配不到，则返回 null
 * @param dom - 待匹配的元素
 * @param selecotr - 选择器
 * @returns parent
 */
function getClosest(dom, selector) {
    /* istanbul ignore if */
    if (!exports.hasDOM || !dom) {
        return null;
    }
    // ie9
    /* istanbul ignore if */
    if (!Element.prototype.closest) {
        if (!document.documentElement.contains(dom)) return null;
        do {
            if (getMatches(dom, selector)) return dom;
            dom = dom.parentElement;
        } while (dom !== null);
    } else {
        return dom.closest(selector);
    }
    return null;
}
exports.getClosest = getClosest;
function saveRef(ref) {
    if (!ref) {
        return null;
    }
    return function (element) {
        if (typeof ref === 'string') {
            throw new Error("can not set ref string for ".concat(ref));
        } else if (typeof ref === 'function') {
            ref(element);
        } else if (Object.prototype.hasOwnProperty.call(ref, 'current')) {
            ref.current = element;
        }
    };
}
exports.saveRef = saveRef;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(50);
var $export = __webpack_require__(70);
var redefine = __webpack_require__(115);
var hide = __webpack_require__(26);
var Iterators = __webpack_require__(72);
var $iterCreate = __webpack_require__(212);
var setToStringTag = __webpack_require__(76);
var getPrototypeOf = __webpack_require__(218);
var ITERATOR = __webpack_require__(29)('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(21) && !__webpack_require__(42)(function () {
  return Object.defineProperty(__webpack_require__(114)('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(41);
var document = __webpack_require__(20).document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(26);


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(51);
var dPs = __webpack_require__(213);
var enumBugKeys = __webpack_require__(75);
var IE_PROTO = __webpack_require__(73)('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(114)('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(217).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(22);
var toIObject = __webpack_require__(28);
var arrayIndexOf = __webpack_require__(214)(false);
var IE_PROTO = __webpack_require__(73)('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(119);
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),
/* 119 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(117);
var hiddenKeys = __webpack_require__(75).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.template = exports.hyphenate = exports.camelcase = void 0;
var log_1 = __webpack_require__(122);
var object_1 = __webpack_require__(30);
/**
 * 将字符串转化为驼峰式写法
 * @param str - 例：-webkit-transition
 * @returns 例：WebkitTransition
 */
function camelcase(str) {
    if (!/-/.test(str)) {
        return str || '';
    }
    return str.toLowerCase().replace(/-([a-z])/g, function ($0, $1) {
        return $1.toUpperCase();
    });
}
exports.camelcase = camelcase;
/**
 * 将驼峰式字符串转化为连字符写法
 * @param str - 例：WebkitTransition
 * @returns 例：-webkit-transition
 */
function hyphenate(str) {
    var strType = (0, object_1.typeOf)(str);
    if (strType !== 'String') {
        (0, log_1.warning)('[ hyphenate(str: string): string ] ' + "Expected arguments[0] to be a string but get a ".concat(strType, ".") + 'It will return an empty string without any processing.');
        return '';
    }
    return str.replace(/([A-Z])/g, function ($0) {
        return "-".concat($0.toLowerCase());
    });
}
exports.hyphenate = hyphenate;
/**
 * 替换模板字符串
 * @param tpl - 例：当前\{current\}, 共\{total\}页
 * @param object - 例：\{current: 1, total: 9\}
 */
function template(tpl, object) {
    if (object === void 0) {
        object = {};
    }
    var tplType = (0, object_1.typeOf)(tpl);
    if (tplType !== 'String') {
        (0, log_1.warning)('[ template(tpl: string, object: object): string ] ' + "Expected arguments[0] to be a string but get a ".concat(tplType, ".") + 'It will return an empty string without any processing.');
        return '';
    }
    return tpl.replace(/\{[a-z]*\}/g, function (str) {
        var key = str.substring(1, str.length - 1);
        return object[key] || '';
    });
}
exports.template = template;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.warning = exports.deprecated = void 0;
var env_1 = __webpack_require__(123);
/* eslint no-console: 0 */
/**
 * 反对使用某一方法或属性的警告
 * @param props - 过时的属性或方法名
 * @param instead - 替代的属性或方法名
 * @param component - 组件名
 *
 * @example
 * log.deprecated('onBeforeClose', 'beforeClose', 'Dialog');
 * // Warning: onBeforeClose is deprecated at [ Dialog ], use [ beforeClose ] instead of it.
 */
function deprecated(props, instead, component) {
    /* istanbul ignore else */
    if (!(0, env_1.isProduction)() && typeof console !== 'undefined' && console.error) {
        return console.error("Warning: [ ".concat(props, " ] is deprecated at [ ").concat(component, " ], use [ ").concat(instead, " ] instead of it."));
    }
}
exports.deprecated = deprecated;
/**
 * 控制台警告日志
 */
function warning(msg) {
    /* istanbul ignore else */
    if (!(0, env_1.isProduction)() && typeof console !== 'undefined' && console.error) {
        return console.error("Warning: ".concat(msg));
    }
}
exports.warning = warning;

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.isProduction = exports.ieVersion = void 0;
/**
 * IE 浏览器的渲染引擎版本号
 * 注意：此属性与浏览器版本号不同，IE 的渲染引擎版本号是可以通过 HTML header 或手动设置去更改的
 * 6 ~ 11
 */
exports.ieVersion = typeof document !== 'undefined' ? document.documentMode : undefined;
/**
 * 判断是否是生产环境
 */
var isProduction = function isProduction() {
    var PRODUCTION_ENV = 'production';
    var result = false;
    try {
        if ("production" === PRODUCTION_ENV) {
            result = true;
        }
    } catch (err) {
        //
    }
    return result;
};
exports.isProduction = isProduction;
exports.default = {
    ieVersion: exports.ieVersion,
    isProduction: exports.isProduction
};

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

!function(t,e){ true?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){"use strict";var t=1e3,e=6e4,n=36e5,r="millisecond",i="second",s="minute",u="hour",a="day",o="week",c="month",f="quarter",h="year",d="date",l="Invalid Date",$=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,y=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(t){var e=["th","st","nd","rd"],n=t%100;return"["+t+(e[(n-20)%10]||e[n]||e[0])+"]"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?"+":"-")+m(r,2,"0")+":"+m(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,c),s=n-i<0,u=e.clone().add(r+(s?-1:1),c);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:c,y:h,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:f}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},g="en",D={};D[g]=M;var p="$isDayjsObject",S=function(t){return t instanceof _||!(!t||!t[p])},w=function t(e,n,r){var i;if(!e)return g;if("string"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split("-");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},O=function(t,e){if(S(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},b=v;b.l=w,b.i=S,b.w=function(t,e){return O(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=w(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[p]=!0}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(b.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return b},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=O(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return O(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<O(t)},m.$g=function(t,e,n){return b.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!b.u(e)||e,f=b.p(t),l=function(t,e){var i=b.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return b.w(n.toDate()[t].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v="set"+(this.$u?"UTC":"");switch(f){case h:return r?l(1,0):l(31,11);case c:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+"Hours",0);case u:return $(v+"Minutes",1);case s:return $(v+"Seconds",2);case i:return $(v+"Milliseconds",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=b.p(t),f="set"+(this.$u?"UTC":""),l=(n={},n[a]=f+"Date",n[d]=f+"Date",n[c]=f+"Month",n[h]=f+"FullYear",n[u]=f+"Hours",n[s]=f+"Minutes",n[i]=f+"Seconds",n[r]=f+"Milliseconds",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===c||o===h){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[b.p(t)]()},m.add=function(r,f){var d,l=this;r=Number(r);var $=b.p(f),y=function(t){var e=O(l);return b.w(e.date(e.date()+Math.round(t*r)),l)};if($===c)return this.set(c,this.$M+r);if($===h)return this.set(h,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return b.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||"YYYY-MM-DDTHH:mm:ssZ",i=b.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,c=n.months,f=n.meridiem,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},d=function(t){return b.s(s%12||12,t,"0")},$=f||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r};return r.replace(y,(function(t,r){return r||function(t){switch(t){case"YY":return String(e.$y).slice(-2);case"YYYY":return b.s(e.$y,4,"0");case"M":return a+1;case"MM":return b.s(a+1,2,"0");case"MMM":return h(n.monthsShort,a,c,3);case"MMMM":return h(c,a);case"D":return e.$D;case"DD":return b.s(e.$D,2,"0");case"d":return String(e.$W);case"dd":return h(n.weekdaysMin,e.$W,o,2);case"ddd":return h(n.weekdaysShort,e.$W,o,3);case"dddd":return o[e.$W];case"H":return String(s);case"HH":return b.s(s,2,"0");case"h":return d(1);case"hh":return d(2);case"a":return $(s,u,!0);case"A":return $(s,u,!1);case"m":return String(u);case"mm":return b.s(u,2,"0");case"s":return String(e.$s);case"ss":return b.s(e.$s,2,"0");case"SSS":return b.s(e.$ms,3,"0");case"Z":return i}return null}(t)||i.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=this,M=b.p(d),m=O(r),v=(m.utcOffset()-this.utcOffset())*e,g=this-m,D=function(){return b.m(y,m)};switch(M){case h:$=D()/12;break;case c:$=D();break;case f:$=D()/3;break;case o:$=(g-v)/6048e5;break;case a:$=(g-v)/864e5;break;case u:$=g/n;break;case s:$=g/e;break;case i:$=g/t;break;default:$=g}return l?$:b.a($)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=w(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return b.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),k=_.prototype;return O.prototype=k,[["$ms",r],["$s",i],["$m",s],["$H",u],["$W",a],["$M",c],["$y",h],["$D",d]].forEach((function(t){k[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),O.extend=function(t,e){return t.$i||(t(e,_,O),t.$i=!0),O},O.locale=w,O.isDayjs=S,O.unix=function(t){return O(1e3*t)},O.en=D[g],O.Ls=D,O.p={},O}));

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESC: 27,
    SPACE: 32,
    END: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    // version 0.x
    ESCAPE: 27,
    LEFT_ARROW: 37,
    UP_ARROW: 38,
    RIGHT_ARROW: 39,
    DOWN_ARROW: 40,
    // MacOS
    CONTROL: 17,
    OPTION: 18,
    CMD: 91,
    COMMAND: 91,
    DELETE: 8
};

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.guid = void 0;
var timestamp = Date.now();
/**
 * 生成全局唯一的 id
 * @param prefix - 前缀字符串，默认为空串
 *
 * @example
 * guid(); // j7jv509c
 * guid('prefix-'); // prefix-j7jv509d
 */
function guid(prefix) {
  prefix = prefix || '';
  return prefix + (timestamp++).toString(36);
}
exports.guid = guid;
exports.default = guid;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
/**
 *
 * @param input - ErrorBoundaryType
 * @returns typeof obj.open === 'boolean'
 */
function parseBoundary(input) {
    var obj;
    if (input === undefined || input === null) {
        return {};
    } else if (typeof input === 'boolean') {
        obj = { open: input };
    } else {
        obj = tslib_1.__assign({ open: true }, input);
    }
    return obj;
}
function getContextProps(props, context, displayName) {
    var prefix = props.prefix,
        locale = props.locale,
        pure = props.pure,
        rtl = props.rtl,
        device = props.device,
        popupContainer = props.popupContainer,
        errorBoundary = props.errorBoundary;
    var nextPrefix = context.nextPrefix,
        nextLocale = context.nextLocale,
        nextDefaultPropsConfig = context.nextDefaultPropsConfig,
        nextPure = context.nextPure,
        nextWarning = context.nextWarning,
        nextRtl = context.nextRtl,
        nextDevice = context.nextDevice,
        nextPopupContainer = context.nextPopupContainer,
        nextErrorBoundary = context.nextErrorBoundary;
    var newPrefix = prefix || nextPrefix;
    var localeFromContext;
    var newDisplayName = displayName;
    switch (displayName) {
        case 'DatePicker2':
            newDisplayName = 'DatePicker';
            break;
        case 'Calendar2':
            newDisplayName = 'Calendar';
            break;
        case 'TimePicker2':
            newDisplayName = 'TimePicker';
            break;
        default:
            break;
    }
    if (nextLocale) {
        localeFromContext = nextLocale[newDisplayName];
        if (localeFromContext) {
            localeFromContext.momentLocale = nextLocale.momentLocale;
        }
    }
    var newLocale;
    if (locale) {
        newLocale = util_1.obj.deepMerge({}, zh_cn_1.default[newDisplayName], localeFromContext, locale);
    } else if (localeFromContext) {
        newLocale = util_1.obj.deepMerge({}, zh_cn_1.default[newDisplayName], localeFromContext);
    }
    var newPure = typeof pure === 'boolean' ? pure : nextPure;
    var newRtl = typeof rtl === 'boolean' ? rtl : nextRtl;
    // ProtoType of [nextE|e]rrorBoundary can be one of [boolean, object]
    // but typeof newErrorBoundary === 'object'
    // newErrorBoundary should always have the key 'open', which indicates ErrorBoundary on or off
    var newErrorBoundary = tslib_1.__assign(tslib_1.__assign({}, parseBoundary(nextErrorBoundary)), parseBoundary(errorBoundary));
    if (!('open' in newErrorBoundary)) {
        newErrorBoundary.open = false;
    }
    return {
        prefix: newPrefix,
        locale: newLocale,
        pure: newPure,
        rtl: newRtl,
        warning: nextWarning,
        defaultPropsConfig: nextDefaultPropsConfig || {},
        device: device || nextDevice || undefined,
        popupContainer: popupContainer || nextPopupContainer,
        errorBoundary: newErrorBoundary
    };
}
exports.default = getContextProps;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var React = __webpack_require__(1);
var react_1 = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
function DefaultUI() {
    // fixme: string is not a valid react component return type
    return '';
}
DefaultUI.propTypes = {
    error: PropTypes.object,
    errorInfo: PropTypes.object
};
var ErrorBoundary = /** @class */function (_super) {
    tslib_1.__extends(ErrorBoundary, _super);
    function ErrorBoundary(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { error: null, errorInfo: null };
        return _this;
    }
    ErrorBoundary.prototype.componentDidCatch = function (error, errorInfo) {
        this.setState({
            error: error,
            errorInfo: errorInfo
        });
        var afterCatch = this.props.afterCatch;
        if (typeof afterCatch === 'function') {
            afterCatch(error, errorInfo);
        }
    };
    ErrorBoundary.prototype.render = function () {
        var _a = this.props.fallbackUI,
            FallbackUI = _a === void 0 ? DefaultUI : _a;
        if (this.state.errorInfo) {
            return React.createElement(FallbackUI, { error: this.state.error, errorInfo: this.state.errorInfo });
        }
        // Normally, just render children
        return this.props.children;
    };
    ErrorBoundary.propTypes = {
        children: PropTypes.element,
        afterCatch: PropTypes.func,
        fallbackUI: PropTypes.func
    };
    return ErrorBoundary;
}(react_1.Component);
exports.default = ErrorBoundary;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_transition_group_1 = __webpack_require__(82);
var child_1 = __webpack_require__(265);
var noop = function noop() {};
var FirstChild = function FirstChild(props) {
  var childrenArray = react_1.default.Children.toArray(props.children);
  return childrenArray[0] || null;
};
/**
 * Animate
 */
var Animate = /** @class */function (_super) {
  tslib_1.__extends(Animate, _super);
  function Animate() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Animate.prototype.normalizeNames = function (names) {
    if (typeof names === 'string') {
      return {
        appear: "".concat(names, "-appear"),
        appearActive: "".concat(names, "-appear-active"),
        enter: "".concat(names, "-enter"),
        enterActive: "".concat(names, "-enter-active"),
        leave: "".concat(names, "-leave"),
        leaveActive: "".concat(names, "-leave-active")
      };
    }
    if ((typeof names === "undefined" ? "undefined" : (0, _typeof3.default)(names)) === 'object') {
      return {
        appear: names.appear,
        appearActive: "".concat(names.appear, "-active"),
        enter: "".concat(names.enter),
        enterActive: "".concat(names.enter, "-active"),
        leave: "".concat(names.leave),
        leaveActive: "".concat(names.leave, "-active")
      };
    }
  };
  Animate.prototype.render = function () {
    var _this = this;
    /* eslint-disable no-unused-vars */
    var _a = this.props,
        animation = _a.animation,
        children = _a.children,
        animationAppear = _a.animationAppear,
        singleMode = _a.singleMode,
        component = _a.component,
        beforeAppear = _a.beforeAppear,
        onAppear = _a.onAppear,
        afterAppear = _a.afterAppear,
        beforeEnter = _a.beforeEnter,
        onEnter = _a.onEnter,
        afterEnter = _a.afterEnter,
        beforeLeave = _a.beforeLeave,
        onLeave = _a.onLeave,
        afterLeave = _a.afterLeave,
        others = tslib_1.__rest(_a, ["animation", "children", "animationAppear", "singleMode", "component", "beforeAppear", "onAppear", "afterAppear", "beforeEnter", "onEnter", "afterEnter", "beforeLeave", "onLeave", "afterLeave"]);
    /* eslint-enable no-unused-vars */
    var animateChildren = react_1.Children.map(children, function (child) {
      return react_1.default.createElement(child_1.default, { key: child.key, names: _this.normalizeNames(animation), onAppear: beforeAppear, onAppearing: onAppear, onAppeared: afterAppear, onEnter: beforeEnter, onEntering: onEnter, onEntered: afterEnter, onExit: beforeLeave, onExiting: onLeave, onExited: afterLeave }, child);
    });
    return react_1.default.createElement(react_transition_group_1.TransitionGroup, tslib_1.__assign({ appear: animationAppear, component: singleMode ? FirstChild : component }, others), animateChildren);
  };
  Animate.propTypes = {
    /**
     * 动画 className
     */
    animation: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.object]),
    /**
     * 子元素第一次挂载时是否执行动画
     */
    animationAppear: prop_types_1.default.bool,
    /**
     * 包裹子元素的标签
     */
    component: prop_types_1.default.any,
    /**
     * 是否只有单个子元素，如果有多个子元素，请设置为 false
     */
    singleMode: prop_types_1.default.bool,
    /**
     * 子元素
     */
    children: prop_types_1.default.oneOfType([prop_types_1.default.element, prop_types_1.default.arrayOf(prop_types_1.default.element)]),
    /**
     * 执行第一次挂载动画前触发的回调函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    beforeAppear: prop_types_1.default.func,
    /**
     * 执行第一次挂载动画，添加 xxx-appear-active 类名后触发的回调函数
     *  @param {HTMLElement} node 执行动画的 dom 元素
     */
    onAppear: prop_types_1.default.func,
    /**
     * 执行完第一次挂载动画后触发的函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    afterAppear: prop_types_1.default.func,
    /**
     * 执行进场动画前触发的回调函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    beforeEnter: prop_types_1.default.func,
    /**
     * 执行进场动画，添加 xxx-enter-active 类名后触发的回调函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    onEnter: prop_types_1.default.func,
    /**
     * 执行完进场动画后触发的回调函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    afterEnter: prop_types_1.default.func,
    /**
     * 执行离场动画前触发的回调函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    beforeLeave: prop_types_1.default.func,
    /**
     * 执行离场动画，添加 xxx-leave-active 类名后触发的回调函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    onLeave: prop_types_1.default.func,
    /**
     * 执行完离场动画后触发的回调函数
     * @param {HTMLElement} node 执行动画的 dom 元素
     */
    afterLeave: prop_types_1.default.func
  };
  Animate.defaultProps = {
    animationAppear: true,
    component: 'div',
    singleMode: true,
    beforeAppear: noop,
    onAppear: noop,
    afterAppear: noop,
    beforeEnter: noop,
    onEnter: noop,
    afterEnter: noop,
    beforeLeave: noop,
    onLeave: noop,
    afterLeave: noop
  };
  return Animate;
}(react_1.Component);
exports.default = Animate;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;

var PropTypes = _interopRequireWildcard(__webpack_require__(2));

var _react = _interopRequireDefault(__webpack_require__(1));

var _reactDom = _interopRequireDefault(__webpack_require__(8));

var _reactLifecyclesCompat = __webpack_require__(6);

var _PropTypes = __webpack_require__(131);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var UNMOUNTED = 'unmounted';
exports.UNMOUNTED = UNMOUNTED;
var EXITED = 'exited';
exports.EXITED = EXITED;
var ENTERING = 'entering';
exports.ENTERING = ENTERING;
var ENTERED = 'entered';
exports.ENTERED = ENTERED;
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 0 },
 *   entered:  { opacity: 1 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */

exports.EXITING = EXITING;

var Transition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Transition, _React$Component);

  function Transition(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears

    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;

    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }

    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }

  var _proto = Transition.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      transitionGroup: null // allows for nested Transitions

    };
  };

  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;

    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }

    return null;
  }; // getSnapshotBeforeUpdate(prevProps) {
  //   let nextStatus = null
  //   if (prevProps !== this.props) {
  //     const { status } = this.state
  //     if (this.props.in) {
  //       if (status !== ENTERING && status !== ENTERED) {
  //         nextStatus = ENTERING
  //       }
  //     } else {
  //       if (status === ENTERING || status === ENTERED) {
  //         nextStatus = EXITING
  //       }
  //     }
  //   }
  //   return { nextStatus }
  // }


  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;

    if (prevProps !== this.props) {
      var status = this.state.status;

      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }

    this.updateStatus(false, nextStatus);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };

  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;

    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter; // TODO: remove fallback for next major

      appear = timeout.appear !== undefined ? timeout.appear : enter;
    }

    return {
      exit: exit,
      enter: enter,
      appear: appear
    };
  };

  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }

    if (nextStatus !== null) {
      // nextStatus will always be ENTERING or EXITING.
      this.cancelNextCallback();

      var node = _reactDom.default.findDOMNode(this);

      if (nextStatus === ENTERING) {
        this.performEnter(node, mounting);
      } else {
        this.performExit(node);
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };

  _proto.performEnter = function performEnter(node, mounting) {
    var _this2 = this;

    var enter = this.props.enter;
    var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
    // if we are mounting and running this it means appear _must_ be set

    if (!mounting && !enter) {
      this.safeSetState({
        status: ENTERED
      }, function () {
        _this2.props.onEntered(node);
      });
      return;
    }

    this.props.onEnter(node, appearing);
    this.safeSetState({
      status: ENTERING
    }, function () {
      _this2.props.onEntering(node, appearing);

      _this2.onTransitionEnd(node, enterTimeout, function () {
        _this2.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(node, appearing);
        });
      });
    });
  };

  _proto.performExit = function performExit(node) {
    var _this3 = this;

    var exit = this.props.exit;
    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

    if (!exit) {
      this.safeSetState({
        status: EXITED
      }, function () {
        _this3.props.onExited(node);
      });
      return;
    }

    this.props.onExit(node);
    this.safeSetState({
      status: EXITING
    }, function () {
      _this3.props.onExiting(node);

      _this3.onTransitionEnd(node, timeouts.exit, function () {
        _this3.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(node);
        });
      });
    });
  };

  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };

  _proto.safeSetState = function safeSetState(nextState, callback) {
    // This shouldn't be necessary, but there are weird race conditions with
    // setState callbacks and unmounting in testing, so always make sure that
    // we can cancel any pending setState callbacks after we unmount.
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };

  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;

    var active = true;

    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };

    this.nextCallback.cancel = function () {
      active = false;
    };

    return this.nextCallback;
  };

  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
    this.setNextCallback(handler);
    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }

    if (this.props.addEndListener) {
      this.props.addEndListener(node, this.nextCallback);
    }

    if (timeout != null) {
      setTimeout(this.nextCallback, timeout);
    }
  };

  _proto.render = function render() {
    var status = this.state.status;

    if (status === UNMOUNTED) {
      return null;
    }

    var _this$props = this.props,
        children = _this$props.children,
        childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition


    delete childProps.in;
    delete childProps.mountOnEnter;
    delete childProps.unmountOnExit;
    delete childProps.appear;
    delete childProps.enter;
    delete childProps.exit;
    delete childProps.timeout;
    delete childProps.addEndListener;
    delete childProps.onEnter;
    delete childProps.onEntering;
    delete childProps.onEntered;
    delete childProps.onExit;
    delete childProps.onExiting;
    delete childProps.onExited;

    if (typeof children === 'function') {
      return children(status, childProps);
    }

    var child = _react.default.Children.only(children);

    return _react.default.cloneElement(child, childProps);
  };

  return Transition;
}(_react.default.Component);

Transition.contextTypes = {
  transitionGroup: PropTypes.object
};
Transition.childContextTypes = {
  transitionGroup: function transitionGroup() {}
};
Transition.propTypes =  false ? {
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`, `'unmounted'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,

  /**
   * Show the component; triggers the enter or exit states
   */
  in: PropTypes.bool,

  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: PropTypes.bool,

  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: PropTypes.bool,

  /**
   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
   * If you want to transition on the first mount set `appear` to `true`, and the
   * component will transition in as soon as the `<Transition>` mounts.
   *
   * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
   */
  appear: PropTypes.bool,

  /**
   * Enable or disable enter transitions.
   */
  enter: PropTypes.bool,

  /**
   * Enable or disable exit transitions.
   */
  exit: PropTypes.bool,

  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt = _PropTypes.timeoutsShape;
    if (!props.addEndListener) pt = pt.isRequired;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return pt.apply(void 0, [props].concat(args));
  },

  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. **Note:** Timeouts are still used as a fallback if provided.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: PropTypes.func,

  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: PropTypes.func,

  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: PropTypes.func,

  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: PropTypes.func,

  /**
   * Callback fired before the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: PropTypes.func,

  /**
   * Callback fired after the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: PropTypes.func,

  /**
   * Callback fired after the "exited" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: PropTypes.func // Name the function so it is clearer in the documentation

} : {};

function noop() {}

Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = 0;
Transition.EXITED = 1;
Transition.ENTERING = 2;
Transition.ENTERED = 3;
Transition.EXITING = 4;

var _default = (0, _reactLifecyclesCompat.polyfill)(Transition);

exports.default = _default;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.classNamesShape = exports.timeoutsShape = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(2));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var timeoutsShape =  false ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
  enter: _propTypes.default.number,
  exit: _propTypes.default.number,
  appear: _propTypes.default.number
}).isRequired]) : null;
exports.timeoutsShape = timeoutsShape;
var classNamesShape =  false ? _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
  enter: _propTypes.default.string,
  exit: _propTypes.default.string,
  active: _propTypes.default.string
}), _propTypes.default.shape({
  enter: _propTypes.default.string,
  enterDone: _propTypes.default.string,
  enterActive: _propTypes.default.string,
  exit: _propTypes.default.string,
  exitDone: _propTypes.default.string,
  exitActive: _propTypes.default.string
})]) : null;
exports.classNamesShape = classNamesShape;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(2));

var _react = _interopRequireDefault(__webpack_require__(1));

var _reactLifecyclesCompat = __webpack_require__(6);

var _ChildMapping = __webpack_require__(264);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var values = Object.values || function (obj) {
  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
};

var defaultProps = {
  component: 'div',
  childFactory: function childFactory(child) {
    return child;
  }
  /**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

};

var TransitionGroup =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TransitionGroup, _React$Component);

  function TransitionGroup(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;

    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear


    _this.state = {
      handleExited: handleExited,
      firstRender: true
    };
    return _this;
  }

  var _proto = TransitionGroup.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      transitionGroup: {
        isMounting: !this.appeared
      }
    };
  };

  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
    this.mounted = true;
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };

  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children,
        handleExited = _ref.handleExited,
        firstRender = _ref.firstRender;
    return {
      children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };

  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
    if (child.key in currentChildMapping) return;

    if (child.props.onExited) {
      child.props.onExited(node);
    }

    if (this.mounted) {
      this.setState(function (state) {
        var children = _extends({}, state.children);

        delete children[child.key];
        return {
          children: children
        };
      });
    }
  };

  _proto.render = function render() {
    var _this$props = this.props,
        Component = _this$props.component,
        childFactory = _this$props.childFactory,
        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

    var children = values(this.state.children).map(childFactory);
    delete props.appear;
    delete props.enter;
    delete props.exit;

    if (Component === null) {
      return children;
    }

    return _react.default.createElement(Component, props, children);
  };

  return TransitionGroup;
}(_react.default.Component);

TransitionGroup.childContextTypes = {
  transitionGroup: _propTypes.default.object.isRequired
};
TransitionGroup.propTypes =  false ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: _propTypes.default.any,

  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: _propTypes.default.node,

  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: _propTypes.default.bool,

  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: _propTypes.default.bool,

  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: _propTypes.default.bool,

  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: _propTypes.default.func
} : {};
TransitionGroup.defaultProps = defaultProps;

var _default = (0, _reactLifecyclesCompat.polyfill)(TransitionGroup);

exports.default = _default;
module.exports = exports["default"];

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var util_1 = __webpack_require__(4);
var manager_1 = __webpack_require__(271);
var gateway_1 = __webpack_require__(134);
var position_1 = __webpack_require__(135);
var find_node_1 = __webpack_require__(57);
var saveLastFocusNode = util_1.focus.saveLastFocusNode,
    getFocusNodeList = util_1.focus.getFocusNodeList,
    backLastFocusNode = util_1.focus.backLastFocusNode;
var makeChain = util_1.func.makeChain,
    noop = util_1.func.noop,
    bindCtx = util_1.func.bindCtx;
var getContainerNode = function getContainerNode(props) {
    var targetNode = (0, find_node_1.default)(props.target);
    return (0, find_node_1.default)(props.container, targetNode);
};
var prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];
var getStyleProperty = function getStyleProperty(node, name) {
    var style = window.getComputedStyle(node);
    var ret = '';
    for (var i = 0; i < prefixes.length; i++) {
        ret = style.getPropertyValue(prefixes[i] + name);
        if (ret) {
            break;
        }
    }
    return ret;
};
// 存 containerNode 信息
var containerNodeList = [];
/**
 * Overlay
 */
var Overlay = /** @class */function (_super) {
    tslib_1.__extends(Overlay, _super);
    function Overlay(props) {
        var _this = _super.call(this, props) || this;
        _this.saveContentRef = function (ref) {
            _this.contentRef = ref;
        };
        _this.saveGatewayRef = function (ref) {
            _this.gatewayRef = ref;
        };
        _this.lastAlign = props.align;
        bindCtx(_this, ['handlePosition', 'handleAnimateEnd', 'handleDocumentKeyDown', 'handleDocumentClick', 'handleMaskClick', 'beforeOpen', 'beforeClose']);
        _this.state = {
            visible: false,
            status: 'none',
            animation: _this.getAnimation(props),
            willOpen: false,
            willClose: false
        };
        _this.timeoutMap = {};
        return _this;
    }
    Overlay.getDerivedStateFromProps = function (nextProps, prevState) {
        var willOpen = !prevState.visible && nextProps.visible;
        var willClose = prevState.visible && !nextProps.visible;
        var nextState = {
            willOpen: willOpen,
            willClose: willClose
        };
        if (willOpen) {
            nextProps.beforeOpen && nextProps.beforeOpen();
        } else if (willClose) {
            nextProps.beforeClose && nextProps.beforeClose();
        }
        if (nextProps.animation || nextProps.animation === false) {
            nextState.animation = nextProps.animation;
        }
        if (nextProps.animation !== false && util_1.support.animation) {
            if (willOpen) {
                nextState.visible = true;
                nextState.status = 'mounting';
            } else if (willClose) {
                // can not set visible=false directly, otherwise animation not work without dom
                // nextState.visible = false;
                nextState.status = 'leaving';
            }
        } else if ('visible' in nextProps && nextProps.visible !== prevState.visible) {
            nextState.visible = nextProps.visible;
        }
        return nextState;
    };
    Overlay.prototype.componentDidMount = function () {
        if (this.state.willOpen) {
            this.beforeOpen();
        } else if (this.state.willClose) {
            this.beforeClose();
        }
        if (this.state.visible) {
            this.doAnimation(true, false);
            this._isMounted = true;
        }
        this.addDocumentEvents();
        manager_1.default.addOverlay(this);
    };
    Overlay.prototype.componentDidUpdate = function (prevProps) {
        if (this.state.willOpen) {
            this.beforeOpen();
        } else if (this.state.willClose) {
            this.beforeClose();
        }
        if (!this._isMounted && this.props.visible) {
            this._isMounted = true;
        }
        if (this.props.align !== prevProps.align) {
            this.lastAlign = prevProps.align;
        }
        var willOpen = !prevProps.visible && this.props.visible;
        var willClose = prevProps.visible && !this.props.visible;
        (willOpen || willClose) && this.doAnimation(willOpen, willClose);
    };
    Overlay.prototype.componentWillUnmount = function () {
        this._isDestroyed = true;
        this._isMounted = false;
        manager_1.default.removeOverlay(this);
        this.removeDocumentEvents();
        if (this.focusTimeout) {
            clearTimeout(this.focusTimeout);
        }
        if (this._animation) {
            this._animation.off();
            this._animation = null;
        }
        this.beforeClose();
    };
    Overlay.prototype.doAnimation = function (open, close) {
        var _this = this;
        if (this.state.animation && util_1.support.animation) {
            if (open) {
                this.onEntering();
            } else if (close) {
                this.onLeaving();
            }
            this.addAnimationEvents();
        } else {
            if (open) {
                // fix https://github.com/alibaba-fusion/next/issues/1901
                setTimeout(function () {
                    _this.props.onOpen();
                    util_1.dom.addClass(_this.getWrapperNode(), 'opened');
                    manager_1.default.addOverlay(_this);
                    _this.props.afterOpen();
                });
            } else if (close) {
                this.props.onClose();
                util_1.dom.removeClass(this.getWrapperNode(), 'opened');
                manager_1.default.removeOverlay(this);
                this.props.afterClose();
            }
            this.setFocusNode();
        }
    };
    Overlay.prototype.getAnimation = function (props) {
        if (props.animation === false) {
            return false;
        }
        if (props.animation) {
            return props.animation;
        }
        return this.getAnimationByAlign(props.align);
    };
    Overlay.prototype.getAnimationByAlign = function (align) {
        switch (align[0]) {
            case 't':
                return {
                    // 为了防止有的用户 js升级了而css没升级，所以把两个动画都保留了。
                    // 动画不会叠加，会替代，顺序根据 src/animate/main.scss 中的样式先后顺序遵循css覆盖原则
                    // fadeInDownSmall fadeOutUpSmall 优先级更高
                    in: 'expandInDown fadeInDownSmall',
                    out: 'expandOutUp fadeOutUpSmall'
                };
            case 'b':
                return {
                    in: 'fadeInUp',
                    out: 'fadeOutDown'
                };
            default:
                return {
                    in: 'expandInDown fadeInDownSmall',
                    out: 'expandOutUp fadeOutUpSmall'
                };
        }
    };
    Overlay.prototype.addAnimationEvents = function () {
        var _this = this;
        setTimeout(function () {
            var node = _this.getContentNode();
            if (node) {
                var id_1 = (0, util_1.guid)();
                _this._animation = util_1.events.on(node, util_1.support.animation.end, _this.handleAnimateEnd.bind(_this, id_1));
                var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;
                var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;
                var time = animationDelay + animationDuration;
                if (time) {
                    _this.timeoutMap[id_1] = setTimeout(function () {
                        _this.handleAnimateEnd(id_1);
                    }, time * 1000 + 200);
                }
            }
        });
    };
    Overlay.prototype.handlePosition = function (config) {
        var align = config.align.join(' ');
        if (!('animation' in this.props) && this.props.needAdjust && this.lastAlign !== align) {
            this.setState({
                animation: this.getAnimationByAlign(align)
            });
        }
        var status = this.state.status;
        if (status === 'mounting') {
            this.setState({
                status: 'entering'
            });
        }
        this.lastAlign = align;
    };
    Overlay.prototype.handleAnimateEnd = function (id) {
        if (this.timeoutMap[id]) {
            clearTimeout(this.timeoutMap[id]);
        }
        delete this.timeoutMap[id];
        if (this._animation) {
            this._animation.off();
            this._animation = null;
        }
        if (!this._isMounted) {
            return;
        }
        if (this.state.status === 'leaving') {
            this.setState({
                visible: false,
                status: 'none'
            });
            this.onLeaved();
            // dom结构首次出现 触发的是entering
            // dom结构已经存在（例如设置了cache），触发的是mounting
        } else if (this.state.status === 'entering' || this.state.status === 'mounting') {
            this.setState({
                status: 'none'
            });
            this.onEntered();
        }
    };
    Overlay.prototype.onEntering = function () {
        var _this = this;
        if (this._isDestroyed) {
            return;
        }
        // make sure overlay.ref has been called (eg: menu/popup-item called overlay.getInstance().getContentNode().)
        setTimeout(function () {
            var wrapperNode = _this.getWrapperNode();
            util_1.dom.addClass(wrapperNode, 'opened');
            _this.props.onOpen();
        });
    };
    Overlay.prototype.onLeaving = function () {
        var wrapperNode = this.getWrapperNode();
        util_1.dom.removeClass(wrapperNode, 'opened');
        this.props.onClose();
    };
    Overlay.prototype.onEntered = function () {
        manager_1.default.addOverlay(this);
        this.setFocusNode();
        this.props.afterOpen();
    };
    Overlay.prototype.onLeaved = function () {
        manager_1.default.removeOverlay(this);
        this.setFocusNode();
        this.props.afterClose();
    };
    Overlay.prototype.beforeOpen = function () {
        if (this.props.disableScroll) {
            var containerNode_1 = getContainerNode(this.props) || document.body;
            var _a = containerNode_1.style,
                overflow = _a.overflow,
                paddingRight = _a.paddingRight;
            var cnInfo = containerNodeList.find(function (m) {
                return m.containerNode === containerNode_1;
            }) || {
                containerNode: containerNode_1,
                count: 0
            };
            /**
             * container 节点初始状态已经是 overflow=hidden 则忽略
             * See {@link https://codesandbox.io/s/next-overlay-overflow-2-fulpq?file=/src/App.js}
             */
            if (cnInfo.count === 0 && overflow !== 'hidden') {
                var style = {
                    overflow: 'hidden'
                };
                cnInfo.overflow = overflow;
                if (util_1.dom.hasScroll(containerNode_1)) {
                    cnInfo.paddingRight = paddingRight;
                    style.paddingRight = "".concat(util_1.dom.getStyle(containerNode_1, 'paddingRight') + util_1.dom.scrollbar().width, "px");
                }
                util_1.dom.setStyle(containerNode_1, style);
                containerNodeList.push(cnInfo);
                cnInfo.count++;
            } else if (cnInfo.count) {
                cnInfo.count++;
            }
            this._containerNode = containerNode_1;
        }
    };
    Overlay.prototype.beforeClose = function () {
        var _this = this;
        if (this.props.disableScroll) {
            var idx = containerNodeList.findIndex(function (cn) {
                return cn.containerNode === _this._containerNode;
            });
            if (idx !== -1) {
                var cnInfo = containerNodeList[idx];
                var overflow = cnInfo.overflow,
                    paddingRight = cnInfo.paddingRight;
                // 最后一个 overlay 的时候再将样式重置回去
                // 此时 overflow 应该值在 beforeOpen 中设置的 hidden
                if (cnInfo.count === 1 && this._containerNode && this._containerNode.style.overflow === 'hidden') {
                    var style = {
                        overflow: overflow
                    };
                    if (paddingRight !== undefined) {
                        style.paddingRight = paddingRight;
                    }
                    util_1.dom.setStyle(this._containerNode, style);
                }
                cnInfo.count--;
                if (cnInfo.count === 0) {
                    containerNodeList.splice(idx, 1);
                }
            }
            this._containerNode = undefined;
        }
    };
    Overlay.prototype.setFocusNode = function () {
        var _this = this;
        if (!this.props.autoFocus) {
            return;
        }
        if (this.state.visible && !this._hasFocused) {
            saveLastFocusNode();
            // 这个时候很可能上一个弹层的关闭事件还未触发，导致焦点已经回到触发的元素
            // 这里延时处理一下，延时的时间为 document.click 捕获触发的延时时间
            this.focusTimeout = setTimeout(function () {
                var node = _this.getContentNode();
                if (node) {
                    var focusNodeList = getFocusNodeList(node);
                    if (focusNodeList.length) {
                        focusNodeList[0].focus();
                    }
                    _this._hasFocused = true;
                }
            }, 100);
        } else if (!this.state.visible && this._hasFocused) {
            backLastFocusNode();
            this._hasFocused = false;
        }
    };
    Overlay.prototype.getContent = function () {
        return this.contentRef;
    };
    Overlay.prototype.getContentNode = function () {
        try {
            return (0, react_dom_1.findDOMNode)(this.contentRef);
        } catch (err) {
            return null;
        }
    };
    Overlay.prototype.getWrapperNode = function () {
        return this.gatewayRef ? this.gatewayRef.getChildNode() : null;
    };
    /**
     * document global event
     */
    Overlay.prototype.addDocumentEvents = function () {
        var useCapture = this.props.useCapture;
        // use capture phase listener to be compatible with react17
        // https://reactjs.org/blog/2020/08/10/react-v17-rc.html#fixing-potential-issues
        if (this.props.canCloseByEsc) {
            this._keydownEvents = util_1.events.on(document, 'keydown', this.handleDocumentKeyDown, useCapture);
        }
        if (this.props.canCloseByOutSideClick) {
            this._clickEvents = util_1.events.on(document, 'click', this.handleDocumentClick, useCapture);
            this._touchEvents = util_1.events.on(document, 'touchend', this.handleDocumentClick, useCapture);
        }
    };
    Overlay.prototype.removeDocumentEvents = function () {
        var _this = this;
        ['_keydownEvents', '_clickEvents', '_touchEvents'].forEach(function (event) {
            if (_this[event]) {
                _this[event].off();
                _this[event] = null;
            }
        });
    };
    Overlay.prototype.handleDocumentKeyDown = function (e) {
        if (this.state.visible && e.keyCode === util_1.KEYCODE.ESC && manager_1.default.isCurrentOverlay(this)) {
            this.props.onRequestClose('keyboard', e);
        }
    };
    Overlay.prototype.isInShadowDOM = function (node) {
        return node.getRootNode ? node.getRootNode().nodeType === 11 : false;
    };
    Overlay.prototype.getEventPath = function (event) {
        // 参考 https://github.com/spring-media/react-shadow-dom-retarget-events/blob/master/index.js#L29
        return event.path || event.composedPath && event.composedPath() || this.composedPath(event.target);
    };
    Overlay.prototype.composedPath = function (el) {
        var path = [];
        while (el) {
            path.push(el);
            if (el.tagName === 'HTML') {
                path.push(document);
                path.push(window);
                return path;
            }
            el = el.parentElement;
        }
    };
    Overlay.prototype.matchInShadowDOM = function (node, e) {
        if (this.isInShadowDOM(node)) {
            // Shadow DOM 环境中，触发点击事件，监听 document click 事件获得的事件源
            // 并非实际触发的 dom 节点，而是 Shadow DOM 的 host 节点
            // 进而会导致如 Select 组件的下拉弹层打开后立即关闭等问题
            // 因此额外增加 node 和 eventPath 的判断
            var eventPath = this.getEventPath(e);
            return node === eventPath[0] || node.contains(eventPath[0]);
        }
        return false;
    };
    Overlay.prototype.handleDocumentClick = function (e) {
        var _this = this;
        if (this.state.visible) {
            var safeNode = this.props.safeNode;
            var safeNodes = Array.isArray(safeNode) ? tslib_1.__spreadArray([], tslib_1.__read(safeNode), false) : [safeNode];
            safeNodes.unshift(function () {
                return _this.getWrapperNode();
            });
            for (var i = 0; i < safeNodes.length; i++) {
                var node = (0, find_node_1.default)(safeNodes[i], this.props);
                // HACK: 如果触发点击的节点是弹层内部的节点，并且在被点击后立即销毁，那么此时无法使用 node.contains(e.target)
                // 来判断此时点击的节点是否是弹层内部的节点，额外判断
                if (node && (node === e.target || node.contains(e.target) || this.matchInShadowDOM(node, e) || e.target !== document && !document.documentElement.contains(e.target))) {
                    return;
                }
            }
            this.props.onRequestClose('docClick', e);
        }
    };
    Overlay.prototype.handleMaskClick = function (e) {
        if (e.currentTarget === e.target && this.props.canCloseByMask) {
            this.props.onRequestClose('maskClick', e);
        }
    };
    // 兼容过去的用法: this.popupRef.getInstance().overlay.getInstance().getContentNode()
    Overlay.prototype.getInstance = function () {
        return this;
    };
    Overlay.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            prefix = _c.prefix,
            className = _c.className,
            style = _c.style,
            propChildren = _c.children,
            target = _c.target,
            align = _c.align,
            offset = _c.offset,
            container = _c.container,
            hasMask = _c.hasMask,
            needAdjust = _c.needAdjust,
            autoFit = _c.autoFit,
            beforePosition = _c.beforePosition,
            onPosition = _c.onPosition,
            wrapperStyle = _c.wrapperStyle,
            rtl = _c.rtl,
            propShouldUpdatePosition = _c.shouldUpdatePosition,
            cache = _c.cache,
            wrapperClassName = _c.wrapperClassName,
            onMaskMouseEnter = _c.onMaskMouseEnter,
            onMaskMouseLeave = _c.onMaskMouseLeave,
            maskClass = _c.maskClass,
            isChildrenInMask = _c.isChildrenInMask,
            pinFollowBaseElementWhenFixed = _c.pinFollowBaseElementWhenFixed;
        var _d = this.state,
            stateVisible = _d.visible,
            status = _d.status,
            animation = _d.animation;
        var children = stateVisible || cache && this._isMounted ? propChildren : null;
        if (children) {
            var child = react_1.Children.only(children);
            // if chlild is a functional component wrap in a component to allow a ref to be set
            if (typeof child.type === 'function' && !(child.type.prototype instanceof react_1.Component)) {
                child = react_1.default.createElement("div", { role: "none" }, child);
            }
            var childClazz = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "overlay-inner")] = true, _a[animation.in] = status === 'entering' || status === 'mounting', _a[animation.out] = status === 'leaving', _a[child.props.className] = !!child.props.className, _a[className] = !!className, _a));
            if (typeof child.ref === 'string') {
                throw new Error('Can not set ref by string in Overlay, use function instead.');
            }
            children = react_1.default.cloneElement(child, {
                className: childClazz,
                style: tslib_1.__assign(tslib_1.__assign({}, child.props.style), style),
                ref: makeChain(this.saveContentRef, child.ref),
                'aria-hidden': !stateVisible && cache && this._isMounted,
                onClick: makeChain(this.props.onClick, child.props.onClick),
                onTouchEnd: makeChain(this.props.onTouchEnd, child.props.onTouchEnd)
            });
            if (align) {
                var shouldUpdatePosition = status === 'leaving' ? false : propShouldUpdatePosition;
                children = react_1.default.createElement(position_1.default, { children: children, target: target, align: align, offset: offset, autoFit: autoFit, container: container, needAdjust: needAdjust, pinFollowBaseElementWhenFixed: pinFollowBaseElementWhenFixed, beforePosition: beforePosition, onPosition: makeChain(this.handlePosition, onPosition), shouldUpdatePosition: shouldUpdatePosition, rtl: rtl });
            }
            var wrapperClazz = (0, classnames_1.default)(["".concat(prefix, "overlay-wrapper"), wrapperClassName]);
            var newWrapperStyle = (0, _extends3.default)({}, {
                display: stateVisible ? '' : 'none'
            }, wrapperStyle);
            var maskClazz = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "overlay-backdrop")] = true, _b[maskClass] = !!maskClass, _b));
            children = react_1.default.createElement("div", { className: wrapperClazz, style: newWrapperStyle, dir: rtl ? 'rtl' : undefined }, hasMask ? react_1.default.createElement("div", { className: maskClazz, onClick: this.handleMaskClick, onMouseEnter: onMaskMouseEnter, onMouseLeave: onMaskMouseLeave, dir: rtl ? 'rtl' : undefined }, isChildrenInMask && children) : null, !isChildrenInMask && children);
        }
        return react_1.default.createElement(gateway_1.default, { container: container, target: target, children: children, ref: this.saveGatewayRef });
    };
    Overlay.propTypes = {
        prefix: prop_types_1.default.string,
        pure: prop_types_1.default.bool,
        rtl: prop_types_1.default.bool,
        className: prop_types_1.default.string,
        style: prop_types_1.default.object,
        /**
         * 弹层内容
         */
        children: prop_types_1.default.any,
        /**
         * 是否显示弹层
         */
        visible: prop_types_1.default.bool,
        /**
         * 弹层请求关闭时触发事件的回调函数
         * @param {String} type 弹层关闭的来源
         * @param {Object} e DOM 事件
         */
        onRequestClose: prop_types_1.default.func,
        /**
         * 弹层定位的参照元素
         */
        target: prop_types_1.default.any,
        /**
         * 弹层相对于参照元素的定位, 详见开发指南的[定位部分](#定位)
         */
        align: prop_types_1.default.string,
        /**
         * 弹层相对于trigger的定位的微调, 接收数组[hoz, ver], 表示弹层在 left / top 上的增量
         * e.g. [100, 100] 表示往右(RTL 模式下是往左) 、下分布偏移100px
         */
        offset: prop_types_1.default.array,
        /**
         * 渲染组件的容器，如果是函数需要返回 ref，如果是字符串则是该 DOM 的 id，也可以直接传入 DOM 节点
         */
        container: prop_types_1.default.any,
        /**
         * 是否显示遮罩
         */
        hasMask: prop_types_1.default.bool,
        /**
         * 是否支持 esc 按键关闭弹层
         */
        canCloseByEsc: prop_types_1.default.bool,
        /**
         * 点击弹层外的区域是否关闭弹层，不显示遮罩时生效
         */
        canCloseByOutSideClick: prop_types_1.default.bool,
        /**
         * 点击遮罩区域是否关闭弹层，显示遮罩时生效
         */
        canCloseByMask: prop_types_1.default.bool,
        /**
         * 弹层打开前触发事件的回调函数
         */
        beforeOpen: prop_types_1.default.func,
        /**
         * 弹层打开时触发事件的回调函数
         */
        onOpen: prop_types_1.default.func,
        /**
         * 弹层打开后触发事件的回调函数, 如果有动画，则在动画结束后触发
         */
        afterOpen: prop_types_1.default.func,
        /**
         * 弹层关闭前触发事件的回调函数
         */
        beforeClose: prop_types_1.default.func,
        /**
         * 弹层关闭时触发事件的回调函数
         */
        onClose: prop_types_1.default.func,
        /**
         * 弹层关闭后触发事件的回调函数, 如果有动画，则在动画结束后触发
         */
        afterClose: prop_types_1.default.func,
        /**
         * 弹层定位完成前触发的事件
         */
        beforePosition: prop_types_1.default.func,
        /**
         * 弹层定位完成时触发的事件
         * @param {Object} config 定位的参数
         * @param {Array} config.align 对齐方式，如 ['cc', 'cc']（如果开启 autoAdjust，可能和预先设置的 align 不同）
         * @param {Number} config.top 距离视口顶部距离
         * @param {Number} config.left 距离视口左侧距离
         * @param {Object} node 定位参照的容器节点
         */
        onPosition: prop_types_1.default.func,
        shouldUpdatePosition: prop_types_1.default.bool,
        /**
         * 弹层打开时是否让其中的元素自动获取焦点
         */
        autoFocus: prop_types_1.default.bool,
        needAdjust: prop_types_1.default.bool,
        /**
         * 是否禁用页面滚动
         */
        disableScroll: prop_types_1.default.bool,
        /**
         * 是否在捕获阶段监听，适配 react 17 事件模型变更
         * @version 1.25
         */
        useCapture: prop_types_1.default.bool,
        /**
         * 隐藏时是否保留子节点
         */
        cache: prop_types_1.default.bool,
        /**
         * 安全节点，当点击 document 的时候，如果包含该节点则不会关闭弹层，如果是函数需要返回 ref，如果是字符串则是该 DOM 的 id，也可以直接传入 DOM 节点，或者以上值组成的数组
         */
        safeNode: prop_types_1.default.any,
        /**
         * 弹层的根节点的样式类
         */
        wrapperClassName: prop_types_1.default.string,
        /**
         * 弹层的根节点的内联样式
         */
        wrapperStyle: prop_types_1.default.object,
        /**
         * 配置动画的播放方式，支持 { in: 'enter-class', out: 'leave-class' } 的对象参数，如果设置为 false，则不播放动画。 请参考 Animate 组件的文档获取可用的动画名
         * @default { in: 'expandInDown', out: 'expandOutUp' }
         */
        animation: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.bool]),
        onMaskMouseEnter: prop_types_1.default.func,
        onMaskMouseLeave: prop_types_1.default.func,
        onClick: prop_types_1.default.func,
        maskClass: prop_types_1.default.string,
        isChildrenInMask: prop_types_1.default.bool,
        // 当 pin 元素（一般是弹层）是 fixed 布局的时候，pin 元素是否要跟随 base 元素（一般是trigger）
        // 举例来说，dialog/drawer 这类组件弹层是不跟随trigger的，而 fixed 布局下的subNav是跟随trigger的
        pinFollowBaseElementWhenFixed: prop_types_1.default.bool,
        /**
         * 开启 v2 版本
         * @version 1.25
         */
        v2: prop_types_1.default.bool,
        /**
         * [v2] align 的数组形式，不能和 align 同时使用
         * @version 1.25
         */
        points: prop_types_1.default.array
    };
    Overlay.defaultProps = {
        prefix: 'next-',
        pure: false,
        visible: false,
        onRequestClose: noop,
        target: position_1.default.VIEWPORT,
        align: 'tl bl',
        offset: [0, 0],
        hasMask: false,
        canCloseByEsc: true,
        canCloseByOutSideClick: true,
        canCloseByMask: true,
        beforeOpen: noop,
        onOpen: noop,
        afterOpen: noop,
        beforeClose: noop,
        onClose: noop,
        afterClose: noop,
        beforePosition: noop,
        onPosition: noop,
        onMaskMouseEnter: noop,
        onMaskMouseLeave: noop,
        shouldUpdatePosition: false,
        autoFocus: false,
        needAdjust: true,
        disableScroll: false,
        cache: false,
        isChildrenInMask: false,
        onTouchEnd: function onTouchEnd(event) {
            event.stopPropagation();
        },
        onClick: function onClick(event) {
            return event.stopPropagation();
        },
        maskClass: '',
        useCapture: true
    };
    return Overlay;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Overlay);

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var util_1 = __webpack_require__(4);
var find_node_1 = __webpack_require__(57);
var makeChain = util_1.func.makeChain;
var getContainerNode = function getContainerNode(props) {
    var targetNode = (0, find_node_1.default)(props.target);
    return (0, find_node_1.default)(props.container, targetNode);
};
var Gateway = /** @class */function (_super) {
    tslib_1.__extends(Gateway, _super);
    function Gateway(props) {
        var _this = _super.call(this, props) || this;
        _this.updateContainer = function () {
            var containerNode = getContainerNode(_this.props);
            if (containerNode !== _this.state.containerNode) {
                // eslint-disable-next-line
                _this.setState({
                    containerNode: containerNode
                });
            }
        };
        _this.saveChildRef = function (ref) {
            _this.child = ref;
        };
        _this.state = {
            containerNode: null
        };
        return _this;
    }
    Gateway.prototype.componentDidMount = function () {
        this.updateContainer();
    };
    Gateway.prototype.componentDidUpdate = function () {
        this.updateContainer();
    };
    Gateway.prototype.getChildNode = function () {
        try {
            return (0, react_dom_1.findDOMNode)(this.child);
        } catch (err) {
            return null;
        }
    };
    Gateway.prototype.render = function () {
        var containerNode = this.state.containerNode;
        if (!containerNode) {
            return null;
        }
        var children = this.props.children;
        var child = children ? react_1.Children.only(children) : null;
        if (!child) {
            return null;
        }
        if (typeof child.ref === 'string') {
            throw new Error('Can not set ref by string in Gateway, use function instead.');
        }
        child = react_1.default.cloneElement(child, {
            ref: makeChain(this.saveChildRef, child.ref)
        });
        return (0, react_dom_1.createPortal)(child, containerNode);
    };
    Gateway.propTypes = {
        children: prop_types_1.default.node,
        container: prop_types_1.default.any,
        target: prop_types_1.default.any
    };
    Gateway.defaultProps = {
        container: function container() {
            return document.body;
        }
    };
    return Gateway;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Gateway);

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var resize_observer_polyfill_1 = __webpack_require__(49);
var util_1 = __webpack_require__(4);
var position_1 = __webpack_require__(272);
var find_node_1 = __webpack_require__(57);
var noop = util_1.func.noop,
    bindCtx = util_1.func.bindCtx;
var getStyle = util_1.dom.getStyle;
var place = position_1.default.place;
var Position = /** @class */function (_super) {
    tslib_1.__extends(Position, _super);
    function Position(props) {
        var _this = _super.call(this, props) || this;
        _this.observe = function () {
            var contentNode = _this.getContentNode();
            contentNode && _this.resizeObserver.observe(contentNode);
        };
        _this.unobserve = function () {
            _this.resizeObserver.disconnect();
        };
        bindCtx(_this, ['handleResize']);
        _this.resizeObserver = new resize_observer_polyfill_1.default(_this.handleResize);
        return _this;
    }
    Position.prototype.componentDidMount = function () {
        this.setPosition();
        if (this.props.needListenResize) {
            util_1.events.on(window, 'resize', this.handleResize);
            this.observe();
        }
    };
    Position.prototype.componentDidUpdate = function (prevProps) {
        var props = this.props;
        if ('align' in props && props.align !== prevProps.align || props.shouldUpdatePosition) {
            this.shouldUpdatePosition = true;
        }
        if (this.shouldUpdatePosition) {
            clearTimeout(this.resizeTimeout);
            this.setPosition();
            this.shouldUpdatePosition = false;
        }
    };
    Position.prototype.componentWillUnmount = function () {
        if (this.props.needListenResize) {
            util_1.events.off(window, 'resize', this.handleResize);
            this.unobserve();
        }
        clearTimeout(this.resizeTimeout);
    };
    Position.prototype.setPosition = function () {
        var _a = this.props,
            align = _a.align,
            offset = _a.offset,
            beforePosition = _a.beforePosition,
            onPosition = _a.onPosition,
            needAdjust = _a.needAdjust,
            container = _a.container,
            rtl = _a.rtl,
            pinFollowBaseElementWhenFixed = _a.pinFollowBaseElementWhenFixed,
            autoFit = _a.autoFit;
        beforePosition();
        var contentNode = this.getContentNode();
        var targetNode = this.getTargetNode();
        if (contentNode && targetNode) {
            var resultAlign = place({
                pinElement: contentNode,
                baseElement: targetNode,
                pinFollowBaseElementWhenFixed: pinFollowBaseElementWhenFixed,
                align: align,
                offset: offset,
                autoFit: autoFit,
                container: container,
                needAdjust: needAdjust,
                isRtl: rtl
            });
            var top_1 = getStyle(contentNode, 'top');
            var left = getStyle(contentNode, 'left');
            onPosition({
                align: resultAlign.split(' '),
                top: top_1,
                left: left
            }, contentNode);
        }
    };
    Position.prototype.getContentNode = function () {
        try {
            return (0, react_dom_1.findDOMNode)(this);
        } catch (err) {
            return null;
        }
    };
    Position.prototype.getTargetNode = function () {
        var target = this.props.target;
        return target === position_1.default.VIEWPORT ? position_1.default.VIEWPORT : (0, find_node_1.default)(target, this.props);
    };
    Position.prototype.handleResize = function () {
        var _this = this;
        clearTimeout(this.resizeTimeout);
        this.resizeTimeout = setTimeout(function () {
            _this.setPosition();
        }, 200);
    };
    Position.prototype.render = function () {
        return react_1.Children.only(this.props.children);
    };
    Position.VIEWPORT = position_1.default.VIEWPORT;
    Position.propTypes = {
        children: prop_types_1.default.node,
        target: prop_types_1.default.any,
        container: prop_types_1.default.any,
        align: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.bool]),
        offset: prop_types_1.default.array,
        beforePosition: prop_types_1.default.func,
        onPosition: prop_types_1.default.func,
        needAdjust: prop_types_1.default.bool,
        autoFit: prop_types_1.default.bool,
        needListenResize: prop_types_1.default.bool,
        shouldUpdatePosition: prop_types_1.default.bool,
        rtl: prop_types_1.default.bool,
        pinFollowBaseElementWhenFixed: prop_types_1.default.bool
    };
    Position.defaultProps = {
        align: 'tl bl',
        offset: [0, 0],
        beforePosition: noop,
        onPosition: noop,
        needAdjust: true,
        autoFit: false,
        needListenResize: true,
        shouldUpdatePosition: false,
        rtl: false
    };
    return Position;
}(react_1.Component);
exports.default = Position;

/***/ }),
/* 136 */
/***/ (function(module, exports) {

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
/**
 * Icon
 */
var Icon = /** @class */function (_super) {
    tslib_1.__extends(Icon, _super);
    function Icon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Icon.prototype.render = function () {
        var _a;
        /* eslint-disable no-unused-vars*/
        var _b = this.props,
            prefix = _b.prefix,
            type = _b.type,
            size = _b.size,
            className = _b.className,
            rtl = _b.rtl,
            style = _b.style,
            children = _b.children;
        var others = util_1.obj.pickOthers((0, _extends3.default)({}, Icon.propTypes), this.props);
        var classes = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "icon")] = true, _a["".concat(prefix, "icon-").concat(type)] = !!type, _a["".concat(prefix).concat(size)] = !!size && typeof size === 'string', _a[className] = !!className, _a));
        if (rtl && ['arrow-left', 'arrow-right', 'arrow-double-left', 'arrow-double-right', 'switch', 'sorting', 'descending', 'ascending'].indexOf(type) !== -1) {
            others.dir = 'rtl';
        }
        var sizeStyle = typeof size === 'number' ? {
            width: size,
            height: size,
            lineHeight: "".concat(size, "px"),
            fontSize: size
        } : {};
        return react_1.default.createElement("i", tslib_1.__assign({}, others, { style: tslib_1.__assign(tslib_1.__assign({}, sizeStyle), style), className: classes }), children);
    };
    Icon.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), {
        /**
         * 指定显示哪种图标
         */
        type: prop_types_1.default.string, children: prop_types_1.default.node,
        /**
         * 指定图标大小
         * <br/>**可选值**<br/> xxs, xs, small, medium, large, xl, xxl, xxxl, inherit
         */
        size: prop_types_1.default.oneOfType([prop_types_1.default.oneOf(['xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl', 'inherit']), prop_types_1.default.number]), className: prop_types_1.default.string, style: prop_types_1.default.object });
    Icon.defaultProps = {
        prefix: 'next-',
        size: 'medium'
    };
    Icon._typeMark = 'icon';
    return Icon;
}(react_1.Component);
exports.default = Icon;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.getDisabledCompatibleTrigger = void 0;
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
function getDisabledCompatibleTrigger(element) {
    if (element.type.displayName === 'Config(Button)' && element.props.disabled) {
        var displayStyle = element.props.style && element.props.style.display ? element.props.style.display : 'inline-block';
        var child = react_1.default.cloneElement(element, {
            style: tslib_1.__assign(tslib_1.__assign({}, element.props.style), { pointerEvents: 'none' })
        });
        return (
            // eslint-disable-next-line
            react_1.default.createElement("span", { style: { display: displayStyle, cursor: 'not-allowed' } }, child)
        );
    }
    return element;
}
exports.getDisabledCompatibleTrigger = getDisabledCompatibleTrigger;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var sub_menu_1 = __webpack_require__(140);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(86);
var bindCtx = util_1.func.bindCtx;
var pickOthers = util_1.obj.pickOthers,
    isNil = util_1.obj.isNil;
var noop = function noop() {};
var MENUITEM_OVERFLOWED_CLASSNAME = 'menuitem-overflowed';
var getIndicatorsItem = function getIndicatorsItem(items, isPlaceholder, prefix, renderMore) {
    var _a;
    if (prefix === void 0) {
        prefix = '';
    }
    var moreCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "menu-more")] = true, _a));
    var style = {};
    // keep placehold to get width
    if (isPlaceholder) {
        style.visibility = 'hidden';
        style.display = 'inline-block';
        // indicators which not in use, just display: none
    } else if (items && items.length === 0) {
        style.display = 'none';
        style.visibility = 'unset';
    }
    if (renderMore && typeof renderMore === 'function') {
        var moreNode = renderMore(items);
        var renderMoreCls = (0, classnames_1.default)(moreCls, moreNode.props && moreNode.props.className);
        return react_1.default.isValidElement(moreNode) ? react_1.default.cloneElement(moreNode, {
            style: style,
            className: renderMoreCls
        }) : moreNode;
    }
    return react_1.default.createElement(sub_menu_1.default, { label: "\xB7\xB7\xB7", noIcon: true, className: moreCls, style: style }, items);
};
var addIndicators = function addIndicators(_a) {
    var children = _a.children,
        lastVisibleIndex = _a.lastVisibleIndex,
        prefix = _a.prefix,
        renderMore = _a.renderMore;
    var arr = [];
    react_1.default.Children.forEach(children, function (child, index) {
        if (!child) {
            return;
        }
        var overflowedItems = [];
        if (index > lastVisibleIndex) {
            child = react_1.default.cloneElement(child, {
                // 别折叠不显示的 item，不占用真实的用户传入的 key
                key: "more-".concat(index),
                style: { display: 'none' },
                className: "".concat(child && child.className || '', " ").concat(MENUITEM_OVERFLOWED_CLASSNAME)
            });
        }
        if (index === lastVisibleIndex + 1) {
            overflowedItems = children.slice(lastVisibleIndex + 1).map(function (c, i) {
                return react_1.default.cloneElement(c, {
                    key: c.key || "more-".concat(index, "-").concat(i)
                });
            });
            arr.push(getIndicatorsItem(overflowedItems, false, prefix, renderMore));
        }
        arr.push(child);
    });
    arr.push(getIndicatorsItem([], true, prefix, renderMore));
    return arr;
};
var getNewChildren = function getNewChildren(_a) {
    var children = _a.children,
        root = _a.root,
        mode = _a.mode,
        lastVisibleIndex = _a.lastVisibleIndex,
        hozInLine = _a.hozInLine,
        prefix = _a.prefix,
        renderMore = _a.renderMore;
    var k2n = {};
    var p2n = {};
    var arr = hozInLine ? addIndicators({
        children: children,
        lastVisibleIndex: lastVisibleIndex,
        prefix: prefix,
        renderMore: renderMore
    }) : children;
    var loop = function loop(children, posPrefix, indexWrapper, inlineLevel) {
        if (indexWrapper === void 0) {
            indexWrapper = { index: 0 };
        }
        if (inlineLevel === void 0) {
            inlineLevel = 1;
        }
        var keyArray = [];
        return react_1.Children.map(children, function (child) {
            if (child && (typeof child.type === 'function' ||
            // `React.forwardRef(render)` returns a forwarding
            // object that includes `render` method, and the specific
            // `child.type` will be an object instead of a class or
            // function.
            (0, _typeof3.default)(child.type) === 'object') && 'menuChildType' in child.type) {
                var newChild = void 0;
                var pos = void 0;
                var props = { root: root };
                if (['item', 'submenu', 'group'].indexOf(child.type.menuChildType) > -1) {
                    pos = "".concat(posPrefix, "-").concat(indexWrapper.index++);
                    var key = typeof child.key === 'string' ? child.key : pos;
                    // filter out duplicate keys
                    if (keyArray.indexOf(key) > -1) {
                        return;
                    }
                    keyArray.push(key);
                    var level = pos.split('-').length - 1;
                    k2n[key] = p2n[pos] = {
                        key: key,
                        pos: pos,
                        mode: child.props.mode,
                        type: child.type.menuChildType,
                        disabled: child.props.disabled,
                        label: child.props.label || child.props.children
                    };
                    props.level = level;
                    props.inlineLevel = inlineLevel;
                    props._key = key;
                    props.groupIndent = child.type.menuChildType === 'group' ? 1 : 0;
                }
                // paddingLeft(or paddingRight in rtl) only make sense in inline mode
                // parent know children's inlineLevel
                // if parent's mode is popup, then children's inlineLevel must be 1;
                // else inlineLevel should add 1
                var childLevel = (child.props.mode || mode) === 'popup' ? 1 : inlineLevel + 1;
                switch (child.type.menuChildType) {
                    case 'submenu':
                        newChild = (0, react_1.cloneElement)(child, props, loop(child.props.children, pos, undefined, childLevel));
                        break;
                    case 'group':
                        newChild = (0, react_1.cloneElement)(child, props, loop(child.props.children, posPrefix, indexWrapper, props.level));
                        break;
                    case 'item':
                    case 'divider':
                        newChild = (0, react_1.cloneElement)(child, props);
                        break;
                    default:
                        newChild = child;
                        break;
                }
                return newChild;
            }
            return child;
        });
    };
    var newChildren = loop(arr, '0');
    return {
        newChildren: newChildren,
        _k2n: k2n,
        _p2n: p2n
    };
};
/**
 * Menu
 */
var Menu = /** @class */function (_super) {
    tslib_1.__extends(Menu, _super);
    function Menu(props) {
        var _this = _super.call(this, props) || this;
        _this.getUpdateChildren = function () {
            var _a = _this.state,
                root = _a.root,
                lastVisibleIndex = _a.lastVisibleIndex;
            return getNewChildren(tslib_1.__assign({ root: root, lastVisibleIndex: lastVisibleIndex }, _this.props));
        };
        _this.menuContentRef = function (ref) {
            _this.menuContent = ref;
        };
        _this.menuHeaderRef = function (ref) {
            _this.menuHeader = ref;
        };
        _this.menuFooterRef = function (ref) {
            _this.menuFooter = ref;
        };
        var _a = _this.props,
            prefix = _a.prefix,
            children = _a.children,
            selectedKeys = _a.selectedKeys,
            defaultSelectedKeys = _a.defaultSelectedKeys,
            focusedKey = _a.focusedKey,
            focusable = _a.focusable,
            autoFocus = _a.autoFocus,
            hozInLine = _a.hozInLine,
            renderMore = _a.renderMore;
        _this.state = {
            lastVisibleIndex: undefined
        };
        var _b = getNewChildren(tslib_1.__assign({ root: _this }, _this.props)),
            newChildren = _b.newChildren,
            _k2n = _b._k2n,
            _p2n = _b._p2n;
        var tabbableKey = focusable ? (0, util_2.getFirstAvaliablelChildKey)('0', _p2n) : undefined;
        _this.state = {
            root: _this,
            lastVisibleIndex: undefined,
            newChildren: newChildren,
            _k2n: _k2n,
            _p2n: _p2n,
            tabbableKey: tabbableKey,
            openKeys: _this.getInitOpenKeys(props, _k2n, _p2n),
            selectedKeys: (0, util_2.normalizeToArray)(selectedKeys || defaultSelectedKeys),
            focusedKey: !isNil(_this.props.focusedKey) ? focusedKey : focusable && autoFocus ? tabbableKey : null
        };
        bindCtx(_this, ['handleOpen', 'handleSelect', 'handleItemClick', 'handleItemKeyDown', 'onBlur', 'adjustChildrenWidth']);
        _this.popupNodes = [];
        return _this;
    }
    Menu.getDerivedStateFromProps = function (nextProps, prevState) {
        var state = {};
        if ('openKeys' in nextProps) {
            state.openKeys = (0, util_2.normalizeToArray)(nextProps.openKeys);
            // 从展开状态变为收起状态，才需要清空openKeys
        } else if ('mode' in nextProps && nextProps.mode === 'popup' && prevState.lastMode === 'inline') {
            state.openKeys = [];
        }
        if ('selectedKeys' in nextProps) {
            state.selectedKeys = (0, util_2.normalizeToArray)(nextProps.selectedKeys);
        }
        if ('focusedKey' in nextProps) {
            state.focusedKey = nextProps.focusedKey;
        }
        state.lastMode = nextProps.mode;
        var _a = getNewChildren(tslib_1.__assign({ root: prevState.root, lastVisibleIndex: prevState.lastVisibleIndex }, nextProps)),
            newChildren = _a.newChildren,
            _k2n = _a._k2n,
            _p2n = _a._p2n;
        state.newChildren = newChildren;
        state._k2n = _k2n;
        state._p2n = _p2n;
        if (nextProps.focusable) {
            if (prevState.tabbableKey in _k2n) {
                if (prevState.focusedKey) {
                    state.tabbableKey = prevState.focusedKey;
                }
            } else {
                state.tabbableKey = (0, util_2.getFirstAvaliablelChildKey)('0', _p2n);
            }
        }
        return state;
    };
    Menu.prototype.componentDidMount = function () {
        this.menuNode = (0, react_dom_1.findDOMNode)(this);
        this.adjustChildrenWidth();
        if (this.props.hozInLine) {
            util_1.events.on(window, 'resize', this.adjustChildrenWidth);
        }
    };
    Menu.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (prevState.lastVisibleIndex !== this.state.lastVisibleIndex) {
            this.adjustChildrenWidth();
        }
    };
    Menu.prototype.componentWillUnmount = function () {
        util_1.events.off(window, 'resize', this.adjustChildrenWidth);
    };
    Menu.prototype.adjustChildrenWidth = function () {
        var _a = this.props,
            direction = _a.direction,
            prefix = _a.prefix,
            header = _a.header,
            footer = _a.footer,
            hozInLine = _a.hozInLine;
        if (direction !== 'hoz' || !hozInLine) {
            return;
        }
        if (!this.menuNode && !this.menuContent) {
            return;
        }
        var children = [],
            spaceWidth;
        if (header || footer) {
            children = this.menuContent.children;
            spaceWidth = (0, util_2.getWidth)(this.menuNode) - (0, util_2.getWidth)(this.menuHeader) - (0, util_2.getWidth)(this.menuFooter);
        } else {
            children = this.menuNode.children;
            spaceWidth = (0, util_2.getWidth)(this.menuNode);
        }
        if (children.length < 2) {
            return;
        }
        var currentSumWidth = 0,
            lastVisibleIndex = -1;
        var moreNode = '';
        var menuItemNodes = [].slice.call(children).filter(function (node) {
            if (node.className.split(' ').indexOf("".concat(prefix, "menu-more")) < 0) {
                return true;
            } else {
                moreNode = node;
            }
            return false;
        });
        var overflowedItems = menuItemNodes.filter(function (c) {
            return c.className.split(' ').indexOf(MENUITEM_OVERFLOWED_CLASSNAME) >= 0;
        });
        overflowedItems.forEach(function (c) {
            util_1.dom.setStyle(c, 'display', 'inline-block');
        });
        util_1.dom.setStyle(moreNode, 'display', 'inline-block');
        var moreWidth = (0, util_2.getWidth)(moreNode);
        this.menuItemSizes = menuItemNodes.map(function (c) {
            return (0, util_2.getWidth)(c);
        });
        var totalLen = this.menuItemSizes.length;
        overflowedItems.forEach(function (c) {
            util_1.dom.setStyle(c, 'display', 'none');
        });
        this.menuItemSizes.forEach(function (liWidth, i) {
            currentSumWidth += liWidth;
            if (i >= totalLen - 1 && currentSumWidth <= spaceWidth || currentSumWidth + moreWidth <= spaceWidth) {
                lastVisibleIndex++;
            }
        });
        if (lastVisibleIndex >= totalLen - 1) {
            util_1.dom.setStyle(moreNode, 'display', 'none');
        }
        this.setState(tslib_1.__assign({ lastVisibleIndex: lastVisibleIndex }, this.getUpdateChildren()));
    };
    Menu.prototype.onBlur = function (e) {
        this.setState({
            focusedKey: undefined
        });
        this.props.onBlur && this.props.onBlur(e);
    };
    Menu.prototype.getInitOpenKeys = function (props, _k2n, _p2n) {
        var initOpenKeys;
        var openKeys = props.openKeys,
            defaultOpenKeys = props.defaultOpenKeys,
            defaultOpenAll = props.defaultOpenAll,
            mode = props.mode,
            openMode = props.openMode;
        if (openKeys) {
            initOpenKeys = openKeys;
        } else if (defaultOpenAll && mode === 'inline' && openMode === 'multiple') {
            initOpenKeys = Object.keys(_k2n).filter(function (key) {
                return _k2n[key].type === 'submenu';
            });
        } else {
            initOpenKeys = defaultOpenKeys;
        }
        return (0, util_2.normalizeToArray)(initOpenKeys);
    };
    Menu.prototype.handleOpen = function (key, open, triggerType, e) {
        var newOpenKeys;
        var _a = this.props,
            mode = _a.mode,
            openMode = _a.openMode;
        var _b = this.state,
            openKeys = _b.openKeys,
            _k2n = _b._k2n;
        var index = openKeys.indexOf(key);
        if (open && index === -1) {
            if (mode === 'inline') {
                if (openMode === 'single') {
                    newOpenKeys = openKeys.filter(function (k) {
                        return _k2n[k] && !(0, util_2.isSibling)(_k2n[key].pos, _k2n[k].pos);
                    });
                    newOpenKeys.push(key);
                } else {
                    newOpenKeys = openKeys.concat(key);
                }
            } else {
                newOpenKeys = openKeys.filter(function (k) {
                    return _k2n[k] && (0, util_2.isAncestor)(_k2n[key].pos, _k2n[k].pos);
                });
                newOpenKeys.push(key);
            }
        } else if (!open && index > -1) {
            if (mode === 'inline') {
                newOpenKeys = tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(openKeys.slice(0, index)), false), tslib_1.__read(openKeys.slice(index + 1)), false);
            } else if (triggerType === 'docClick') {
                if (!this.popupNodes.concat(this.menuNode).some(function (node) {
                    return node.contains(e.target);
                })) {
                    newOpenKeys = [];
                }
            } else {
                newOpenKeys = openKeys.filter(function (k) {
                    return k !== key && _k2n[k] && !(0, util_2.isAncestor)(_k2n[k].pos, _k2n[key].pos);
                });
            }
        }
        if (newOpenKeys) {
            if (isNil(this.props.openKeys)) {
                this.setState(tslib_1.__assign({ openKeys: newOpenKeys }, this.getUpdateChildren()));
            }
            this.props.onOpen(newOpenKeys, {
                key: key,
                open: open
            });
        }
    };
    Menu.prototype.getPath = function (key, _k2n, _p2n) {
        var keyPath = [];
        var labelPath = [];
        var pos = _k2n[key].pos;
        var nums = pos.split('-');
        for (var i = 1; i < nums.length - 1; i++) {
            var parentNums = nums.slice(0, i + 1);
            var parentPos = parentNums.join('-');
            var parent_1 = _p2n[parentPos];
            keyPath.push(parent_1.key);
            labelPath.push(parent_1.label);
        }
        return {
            keyPath: keyPath,
            labelPath: labelPath
        };
    };
    Menu.prototype.handleSelect = function (key, select, menuItem) {
        var _a = this.state,
            _k2n = _a._k2n,
            _p2n = _a._p2n;
        var pos = _k2n[key].pos;
        var level = pos.split('-').length - 1;
        if (this.props.shallowSelect && level > 1) {
            return;
        }
        var newSelectedKeys;
        var selectMode = this.props.selectMode;
        var selectedKeys = this.state.selectedKeys;
        var index = selectedKeys.indexOf(key);
        if (select && index === -1) {
            if (selectMode === 'single') {
                newSelectedKeys = [key];
            } else if (selectMode === 'multiple') {
                newSelectedKeys = selectedKeys.concat(key);
            }
        } else if (!select && index > -1 && selectMode === 'multiple') {
            newSelectedKeys = tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(selectedKeys.slice(0, index)), false), tslib_1.__read(selectedKeys.slice(index + 1)), false);
        }
        if (newSelectedKeys) {
            if (isNil(this.props.selectedKeys)) {
                this.setState({
                    selectedKeys: newSelectedKeys
                });
            }
            this.props.onSelect(newSelectedKeys, menuItem, tslib_1.__assign({ key: key, select: select, label: _k2n[key].label }, this.getPath(key, _k2n, _p2n)));
        }
    };
    Menu.prototype.handleItemClick = function (key, item, e) {
        var _k2n = this.state._k2n;
        if (this.props.focusable) {
            if (isNil(this.props.focusedKey)) {
                this.setState({
                    focusedKey: key
                });
            }
            this.props.onItemFocus(key, item, e);
        }
        if (item.props.type === 'item') {
            if (item.props.parentMode === 'popup' && this.state.openKeys.length) {
                if (isNil(this.props.openKeys)) {
                    this.setState({
                        openKeys: []
                    });
                }
                this.props.onOpen([], {
                    key: this.state.openKeys.sort(function (prevKey, nextKey) {
                        return _k2n[nextKey].pos.split('-').length - _k2n[prevKey].pos.split('-').length;
                    })[0],
                    open: false
                });
            }
            this.props.onItemClick(key, item, e);
        }
    };
    Menu.prototype.getAvailableKey = function (pos, prev) {
        var _p2n = this.state._p2n;
        var ps = Object.keys(_p2n).filter(function (p) {
            return (0, util_2.isAvailablePos)(pos, p, _p2n);
        });
        if (ps.length > 1) {
            var index = ps.indexOf(pos);
            var targetIndex = void 0;
            if (prev) {
                targetIndex = index === 0 ? ps.length - 1 : index - 1;
            } else {
                targetIndex = index === ps.length - 1 ? 0 : index + 1;
            }
            return _p2n[ps[targetIndex]].key;
        }
        return null;
    };
    Menu.prototype.getParentKey = function (pos) {
        return this.state._p2n[pos.slice(0, pos.length - 2)].key;
    };
    Menu.prototype.handleItemKeyDown = function (key, type, item, e) {
        if ([util_1.KEYCODE.UP, util_1.KEYCODE.DOWN, util_1.KEYCODE.RIGHT, util_1.KEYCODE.LEFT, util_1.KEYCODE.ENTER, util_1.KEYCODE.ESC, util_1.KEYCODE.SPACE].indexOf(e.keyCode) > -1) {
            e.preventDefault();
            e.stopPropagation();
        }
        var focusedKey = this.state.focusedKey;
        var _a = this.state,
            _p2n = _a._p2n,
            _k2n = _a._k2n;
        var direction = this.props.direction;
        var pos = _k2n[key].pos;
        var level = pos.split('-').length - 1;
        switch (e.keyCode) {
            case util_1.KEYCODE.UP:
                {
                    var avaliableKey = this.getAvailableKey(pos, true);
                    if (avaliableKey) {
                        focusedKey = avaliableKey;
                    }
                    break;
                }
            case util_1.KEYCODE.DOWN:
                {
                    var avaliableKey = void 0;
                    if (direction === 'hoz' && level === 1 && type === 'submenu') {
                        this.handleOpen(key, true);
                        avaliableKey = (0, util_2.getFirstAvaliablelChildKey)(pos, _p2n);
                    } else {
                        avaliableKey = this.getAvailableKey(pos, false);
                    }
                    if (avaliableKey) {
                        focusedKey = avaliableKey;
                    }
                    break;
                }
            case util_1.KEYCODE.RIGHT:
                {
                    var avaliableKey = void 0;
                    if (direction === 'hoz' && level === 1) {
                        avaliableKey = this.getAvailableKey(pos, false);
                    } else if (type === 'submenu') {
                        this.handleOpen(key, true);
                        avaliableKey = (0, util_2.getFirstAvaliablelChildKey)(pos, _p2n);
                    }
                    if (avaliableKey) {
                        focusedKey = avaliableKey;
                    }
                    break;
                }
            case util_1.KEYCODE.ENTER:
                {
                    if (type === 'submenu') {
                        this.handleOpen(key, true);
                        var avaliableKey = (0, util_2.getFirstAvaliablelChildKey)(pos, _p2n);
                        if (avaliableKey) {
                            focusedKey = avaliableKey;
                        }
                    }
                    break;
                }
            case util_1.KEYCODE.LEFT:
                {
                    if (direction === 'hoz' && level === 1) {
                        var avaliableKey = this.getAvailableKey(pos, true);
                        if (avaliableKey) {
                            focusedKey = avaliableKey;
                        }
                    } else if (level > 1) {
                        var parentKey = this.getParentKey(pos);
                        this.handleOpen(parentKey, false);
                        focusedKey = parentKey;
                    }
                    break;
                }
            case util_1.KEYCODE.ESC:
                if (level > 1) {
                    var parentKey = this.getParentKey(pos);
                    this.handleOpen(parentKey, false);
                    focusedKey = parentKey;
                }
                break;
            case util_1.KEYCODE.TAB:
                focusedKey = null;
                break;
            default:
                break;
        }
        if (focusedKey !== this.state.focusedKey) {
            if (isNil(this.props.focusedKey)) {
                this.setState({
                    focusedKey: focusedKey
                });
            }
            this.props.onItemKeyDown(focusedKey, item, e);
            this.props.onItemFocus(focusedKey, e);
        }
    };
    Menu.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            prefix = _c.prefix,
            className = _c.className,
            direction = _c.direction,
            hozAlign = _c.hozAlign,
            header = _c.header,
            footer = _c.footer,
            footerWrapperClassName = _c.footerWrapperClassName,
            embeddable = _c.embeddable,
            selectMode = _c.selectMode,
            hozInLine = _c.hozInLine,
            rtl = _c.rtl,
            flatenContent = _c.flatenContent;
        var newChildren = this.state.newChildren;
        var others = pickOthers(Object.keys(Menu.propTypes), this.props);
        var newClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "menu")] = true, _a["".concat(prefix, "ver")] = direction === 'ver', _a["".concat(prefix, "hoz")] = direction === 'hoz', _a["".concat(prefix, "menu-embeddable")] = embeddable, _a["".concat(prefix, "menu-nowrap")] = hozInLine, _a["".concat(prefix, "menu-selectable-").concat(selectMode)] = selectMode, _a[className] = !!className, _a));
        var role = direction === 'hoz' ? 'menubar' : 'menu';
        var ariaMultiselectable;
        if ('selectMode' in this.props) {
            role = 'listbox';
            ariaMultiselectable = !!(selectMode === 'multiple');
        }
        var headerElement = header ? react_1.default.createElement("li", { className: "".concat(prefix, "menu-header"), ref: this.menuHeaderRef }, header) : null;
        var itemsElement = !flatenContent && (header || footer) ? react_1.default.createElement("ul", { className: "".concat(prefix, "menu-content"), ref: this.menuContentRef }, newChildren) : newChildren;
        var footerElement = footer ? react_1.default.createElement("li", { className: (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "menu-footer")] = true, _b[footerWrapperClassName] = !!footerWrapperClassName, _b)), ref: this.menuFooterRef }, footer) : null;
        var shouldWrapItemsAndFooter = hozAlign === 'right' && !!header;
        if (rtl) {
            others.dir = 'rtl';
        }
        return react_1.default.createElement("ul", tslib_1.__assign({ role: role, onBlur: this.onBlur, className: newClassName, onKeyDown: this.handleEnter, "aria-multiselectable": ariaMultiselectable }, others), headerElement, shouldWrapItemsAndFooter ? react_1.default.createElement("div", { className: "".concat(prefix, "menu-hoz-right") }, itemsElement, footerElement) : null, !shouldWrapItemsAndFooter ? itemsElement : null, !shouldWrapItemsAndFooter ? footerElement : null);
    };
    Menu.isNextMenu = true;
    Menu.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, pure: prop_types_1.default.bool, rtl: prop_types_1.default.bool, className: prop_types_1.default.string,
        /**
         * 菜单项和子菜单
         */
        children: prop_types_1.default.node,
        /**
         * 点击菜单项触发的回调函数
         * @param {String} key 点击的菜单项的 key 值
         * @param {Object} item 点击的菜单项对象
         * @param {Object} event 点击的事件对象
         */
        onItemClick: prop_types_1.default.func,
        /**
         * 当前打开的子菜单的 key 值
         */
        openKeys: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
        /**
         * 初始打开的子菜单的 key 值
         */
        defaultOpenKeys: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
        /**
         * 初始展开所有的子菜单，只在 mode 设置为 'inline' 以及 openMode 设置为 'multiple' 下生效，优先级高于 defaultOpenKeys
         */
        defaultOpenAll: prop_types_1.default.bool,
        /**
         * 打开或关闭子菜单触发的回调函数
         * @param {Array} key 打开的所有子菜单的 key 值
         * @param {Object} extra 额外参数
         * @param {String} extra.key 当前操作子菜单的 key 值
         * @param {Boolean} extra.open 是否是打开
         */
        onOpen: prop_types_1.default.func,
        /**
         * 子菜单打开的模式
         */
        mode: prop_types_1.default.oneOf(['inline', 'popup']),
        /**
         * 子菜单打开的触发行为
         */
        triggerType: prop_types_1.default.oneOf(['click', 'hover']),
        /**
         * 展开内连子菜单的模式，同时可以展开一个子菜单还是多个子菜单，该属性仅在 mode 为 inline 时生效
         */
        openMode: prop_types_1.default.oneOf(['single', 'multiple']),
        /**
         * 内连子菜单缩进距离
         */
        inlineIndent: prop_types_1.default.number, inlineArrowDirection: prop_types_1.default.oneOf(['down', 'right']),
        /**
         * 是否自动让弹层的宽度和菜单项保持一致，如果弹层的宽度比菜单项小则和菜单项保持一致，如果宽度大于菜单项则不做处理
         */
        popupAutoWidth: prop_types_1.default.bool,
        /**
         * 弹层的对齐方式
         */
        popupAlign: prop_types_1.default.oneOf(['follow', 'outside']),
        /**
         * 弹层自定义 props
         */
        popupProps: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.func]),
        /**
         * 弹出子菜单自定义 className
         */
        popupClassName: prop_types_1.default.string,
        /**
         * 弹出子菜单自定义 style
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 当前选中菜单项的 key 值
         */
        selectedKeys: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
        /**
         * 初始选中菜单项的 key 值
         */
        defaultSelectedKeys: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
        /**
         * 选中或取消选中菜单项触发的回调函数
         * @param {Array} selectedKeys 选中的所有菜单项的值
         * @param {Object} item 选中或取消选中的菜单项
         * @param {Object} extra 额外参数
         * @param {Boolean} extra.select 是否是选中
         * @param {Array} extra.key 菜单项的 key
         * @param {Object} extra.label 菜单项的文本
         * @param {Array} extra.keyPath 菜单项 key 的路径
         */
        onSelect: prop_types_1.default.func,
        /**
         * 选中模式，单选还是多选，默认无值，不可选
         */
        selectMode: prop_types_1.default.oneOf(['single', 'multiple']),
        /**
         * 是否只能选择第一层菜单项（不能选择子菜单中的菜单项）
         */
        shallowSelect: prop_types_1.default.bool,
        /**
         * 是否显示选中图标，如果设置为 false 需配合配置平台设置选中时的背景色以示区分
         */
        hasSelectedIcon: prop_types_1.default.bool, labelToggleChecked: prop_types_1.default.bool,
        /**
         * 是否将选中图标居右，仅当 hasSelectedIcon 为true 时生效。
         * 注意：SubMenu 上的选中图标一直居左，不受此API控制
         */
        isSelectIconRight: prop_types_1.default.bool,
        /**
         * 菜单第一层展示方向
         */
        direction: prop_types_1.default.oneOf(['ver', 'hoz']),
        /**
         * 横向菜单条 item 和 footer 的对齐方向，在 direction 设置为 'hoz' 并且 header 存在时生效
         */
        hozAlign: prop_types_1.default.oneOf(['left', 'right']),
        /**
         * 横向菜单模式下，是否维持在一行，即超出一行折叠成 SubMenu 显示， 仅在 direction='hoz' mode='popup' 时生效
         */
        hozInLine: prop_types_1.default.bool, renderMore: prop_types_1.default.func,
        /**
         * 自定义菜单头部
         */
        header: prop_types_1.default.node,
        /**
         * 自定义菜单尾部
         */
        footer: prop_types_1.default.node,
        /**
         * 自定义菜单尾部容器的 className
         */
        footerWrapperClassName: prop_types_1.default.string,
        /**
         * 是否自动获得焦点
         */
        autoFocus: prop_types_1.default.bool,
        /**
         * 当前获得焦点的子菜单或菜单项 key 值
         */
        focusedKey: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.object]), focusable: prop_types_1.default.bool, onItemFocus: prop_types_1.default.func, onBlur: prop_types_1.default.func,
        /**
         * 是否开启嵌入式模式，一般用于Layout的布局中，开启后没有默认背景、外层border、box-shadow，可以配合`<Menu style={{lineHeight: '100px'}}>` 自定义高度
         * @version 1.18
         */
        embeddable: prop_types_1.default.bool, onItemKeyDown: prop_types_1.default.func, expandAnimation: prop_types_1.default.bool, itemClassName: prop_types_1.default.string,
        /**
         * 可配置的icons，包括 select 等
         */
        icons: prop_types_1.default.object,
        // content 是否为单层模式，目前主要在有 header 或 footer 的时候有意义
        flatenContent: prop_types_1.default.bool });
    Menu.defaultProps = {
        prefix: 'next-',
        pure: false,
        defaultOpenKeys: [],
        defaultOpenAll: false,
        onOpen: noop,
        mode: 'inline',
        triggerType: 'click',
        openMode: 'multiple',
        inlineIndent: 20,
        inlineArrowDirection: 'down',
        popupAutoWidth: false,
        popupAlign: 'follow',
        popupProps: {},
        defaultSelectedKeys: [],
        onSelect: noop,
        shallowSelect: false,
        hasSelectedIcon: true,
        isSelectIconRight: false,
        labelToggleChecked: true,
        direction: 'ver',
        hozAlign: 'left',
        hozInLine: false,
        autoFocus: false,
        focusable: true,
        embeddable: false,
        onItemFocus: noop,
        onItemKeyDown: noop,
        onItemClick: noop,
        expandAnimation: true,
        icons: {}
    };
    return Menu;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Menu);

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var animate_1 = __webpack_require__(17);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
var item_1 = __webpack_require__(31);
var selectable_item_1 = __webpack_require__(85);
var popup_item_1 = __webpack_require__(141);
var util_2 = __webpack_require__(86);
var Expand = animate_1.default.Expand;
var bindCtx = util_1.func.bindCtx;
/**
 * Menu.SubMenu
 * @order 1
 */
var SubMenu = /** @class */function (_super) {
    tslib_1.__extends(SubMenu, _super);
    function SubMenu(props) {
        var _this = _super.call(this, props) || this;
        bindCtx(_this, ['handleMouseEnter', 'handleMouseLeave', 'handleClick', 'handleOpen', 'afterLeave']);
        return _this;
    }
    SubMenu.prototype.componentDidMount = function () {
        this.itemNode = (0, react_dom_1.findDOMNode)(this);
    };
    SubMenu.prototype.afterLeave = function () {
        var _a = this.props,
            focused = _a.focused,
            root = _a.root;
        var focusable = root.props.focusable;
        if (focusable && focused) {
            this.itemNode.focus();
        }
    };
    SubMenu.prototype.getOpen = function () {
        var _a = this.props,
            _key = _a._key,
            root = _a.root;
        var openKeys = root.state.openKeys;
        return openKeys.indexOf(_key) > -1;
    };
    SubMenu.prototype.handleMouseEnter = function (e) {
        this.handleOpen(true);
        this.props.onMouseEnter && this.props.onMouseEnter(e);
    };
    SubMenu.prototype.handleMouseLeave = function (e) {
        this.handleOpen(false);
        this.props.onMouseLeave && this.props.onMouseLeave(e);
    };
    SubMenu.prototype.handleClick = function (e) {
        var _a = this.props,
            root = _a.root,
            selectable = _a.selectable;
        var selectMode = root.props.selectMode;
        if (selectMode && selectable) {
            e.stopPropagation();
        }
        var open = this.getOpen();
        this.handleOpen(!open);
    };
    SubMenu.prototype.handleOpen = function (open, triggerType, e) {
        var _a = this.props,
            _key = _a._key,
            root = _a.root;
        root.handleOpen(_key, open, triggerType, e);
    };
    SubMenu.prototype.passParentToChildren = function (children) {
        var _this = this;
        var _a = this.props,
            mode = _a.mode,
            root = _a.root;
        return react_1.Children.map(children, function (child) {
            // to fix https://github.com/alibaba-fusion/next/issues/952
            if (typeof child !== 'function' && (typeof child === "undefined" ? "undefined" : (0, _typeof3.default)(child)) !== 'object') {
                return child;
            }
            return (0, react_1.cloneElement)(child, {
                parent: _this,
                parentMode: mode || root.props.mode
            });
        });
    };
    SubMenu.prototype.renderInline = function () {
        var _a, _b, _c, _d;
        var _e = this.props,
            _key = _e._key,
            level = _e.level,
            inlineLevel = _e.inlineLevel,
            root = _e.root,
            className = _e.className,
            selectableFromProps = _e.selectable,
            label = _e.label,
            children = _e.children,
            noIcon = _e.noIcon,
            subMenuContentClassName = _e.subMenuContentClassName,
            propsTriggerType = _e.triggerType,
            parentMode = _e.parentMode;
        var _f = root.props,
            prefix = _f.prefix,
            selectMode = _f.selectMode,
            rootTriggerType = _f.triggerType,
            inlineArrowDirection = _f.inlineArrowDirection,
            expandAnimation = _f.expandAnimation,
            rtl = _f.rtl;
        var triggerType = propsTriggerType || rootTriggerType;
        var open = this.getOpen();
        var _g = root.state,
            selectedKeys = _g.selectedKeys,
            _k2n = _g._k2n;
        var isChildSelected = (0, util_2.getChildSelected)({
            _key: _key,
            _k2n: _k2n,
            selectMode: selectMode,
            selectedKeys: selectedKeys
        });
        var others = util_1.obj.pickOthers(Object.keys(SubMenu.propTypes), this.props);
        var liProps = {
            className: (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "menu-sub-menu-wrapper")] = true, _a[className] = !!className, _a))
        };
        var itemProps = {
            'aria-expanded': open,
            _key: _key,
            level: level,
            role: 'listitem',
            inlineLevel: inlineLevel,
            root: root,
            type: 'submenu',
            component: 'div',
            parentMode: parentMode,
            className: (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "opened")] = open, _b["".concat(prefix, "child-selected")] = isChildSelected, _b))
        };
        if (typeof label === 'string') {
            itemProps.title = label;
        }
        var arrorProps = {
            type: inlineArrowDirection === 'right' ? 'arrow-right' : 'arrow-down',
            className: (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "menu-icon-arrow")] = true, _c["".concat(prefix, "menu-icon-arrow-down")] = inlineArrowDirection === 'down', _c["".concat(prefix, "menu-icon-arrow-right")] = inlineArrowDirection === 'right', _c["".concat(prefix, "open")] = open, _c))
        };
        var selectable = !!selectMode && selectableFromProps;
        var NewItem = selectable ? selectable_item_1.default : item_1.default;
        if (triggerType === 'hover') {
            liProps.onMouseEnter = this.handleMouseEnter;
            liProps.onMouseLeave = this.handleMouseLeave;
        } else if (selectable) {
            arrorProps.onClick = this.handleClick;
        } else {
            itemProps.onClick = this.handleClick;
        }
        var newSubMenuContentClassName = (0, classnames_1.default)((_d = {}, _d["".concat(prefix, "menu-sub-menu")] = true, _d[subMenuContentClassName] = !!subMenuContentClassName, _d));
        var roleMenu = 'menu',
            roleItem = 'menuitem';
        if ('selectMode' in root.props) {
            roleMenu = 'listbox';
            roleItem = 'option';
        }
        var subMenu = open ? react_1.default.createElement("ul", { role: roleMenu, dir: rtl ? 'rtl' : undefined, className: newSubMenuContentClassName }, this.passParentToChildren(children)) : null;
        return react_1.default.createElement("li", tslib_1.__assign({ role: roleItem }, others, liProps), react_1.default.createElement(NewItem, tslib_1.__assign({}, itemProps), react_1.default.createElement("span", { className: "".concat(prefix, "menu-item-text") }, label), noIcon ? null : react_1.default.createElement(icon_1.default, tslib_1.__assign({}, arrorProps))), expandAnimation ? react_1.default.createElement(Expand, { animationAppear: false, afterLeave: this.afterLeave }, subMenu) : subMenu);
    };
    SubMenu.prototype.renderPopup = function () {
        var _a;
        var _b = this.props,
            children = _b.children,
            subMenuContentClassName = _b.subMenuContentClassName,
            noIcon = _b.noIcon,
            others = tslib_1.__rest(_b, ["children", "subMenuContentClassName", "noIcon"]);
        var root = this.props.root;
        var _c = root.props,
            prefix = _c.prefix,
            popupClassName = _c.popupClassName,
            popupStyle = _c.popupStyle,
            rtl = _c.rtl;
        var newClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "menu")] = true, _a["".concat(prefix, "ver")] = true, _a[popupClassName] = !!popupClassName, _a[subMenuContentClassName] = !!subMenuContentClassName, _a));
        others.rtl = rtl;
        return react_1.default.createElement(popup_item_1.default, tslib_1.__assign({}, others, { noIcon: noIcon, hasSubMenu: true }), react_1.default.createElement("ul", { role: "menu", dir: rtl ? 'rtl' : undefined, className: newClassName, style: popupStyle }, this.passParentToChildren(children)));
    };
    SubMenu.prototype.render = function () {
        var _a = this.props,
            mode = _a.mode,
            root = _a.root;
        var newMode = mode || root.props.mode;
        return newMode === 'popup' ? this.renderPopup() : this.renderInline();
    };
    SubMenu.menuChildType = 'submenu';
    SubMenu.propTypes = {
        _key: prop_types_1.default.string,
        root: prop_types_1.default.object,
        level: prop_types_1.default.number,
        inlineLevel: prop_types_1.default.number,
        groupIndent: prop_types_1.default.number,
        /**
         * 标签内容
         */
        label: prop_types_1.default.node,
        /**
         * 是否可选，该属性仅在设置 Menu 组件 selectMode 属性后生效
         */
        selectable: prop_types_1.default.bool,
        /**
         * 子菜单打开方式，如果设置会覆盖 Menu 上的同名属性
         * @default Menu 的 mode 属性值
         */
        mode: prop_types_1.default.oneOf(['inline', 'popup']),
        /**
         * 是否需要提示当前项可展开的 icon，默认是有的
         */
        noIcon: prop_types_1.default.bool,
        /**
         * 菜单项或下一级子菜单
         */
        children: prop_types_1.default.node,
        onMouseEnter: prop_types_1.default.func,
        onMouseLeave: prop_types_1.default.func,
        subMenuContentClassName: prop_types_1.default.string,
        triggerType: prop_types_1.default.oneOf(['click', 'hover']),
        align: prop_types_1.default.oneOf(['outside', 'follow']),
        parentMode: prop_types_1.default.oneOf(['inline', 'popup']),
        parent: prop_types_1.default.any
    };
    SubMenu.defaultProps = {
        groupIndent: 0,
        noIcon: false,
        selectable: false
    };
    return SubMenu;
}(react_1.Component);
exports.default = SubMenu;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var icon_1 = __webpack_require__(7);
var overlay_1 = __webpack_require__(12);
var util_1 = __webpack_require__(4);
var item_1 = __webpack_require__(31);
var selectable_item_1 = __webpack_require__(85);
var util_2 = __webpack_require__(86);
var bindCtx = util_1.func.bindCtx;
var setStyle = util_1.dom.setStyle;
var Popup = overlay_1.default.Popup;
/**
 * Menu.PopupItem
 * @order 2
 */
var PopupItem = /** @class */function (_super) {
    tslib_1.__extends(PopupItem, _super);
    function PopupItem(props) {
        var _this = _super.call(this, props) || this;
        bindCtx(_this, ['handleOpen', 'handlePopupOpen', 'handlePopupClose', 'getPopup']);
        return _this;
    }
    PopupItem.prototype.getPopup = function (ref) {
        this.popup = ref;
    };
    PopupItem.prototype.getOpen = function () {
        var _a = this.props,
            _key = _a._key,
            root = _a.root;
        var openKeys = root.state.openKeys;
        return openKeys.indexOf(_key) > -1;
    };
    PopupItem.prototype.getPopupProps = function () {
        var popupProps = this.props.root.props.popupProps;
        if (typeof popupProps === 'function') {
            popupProps = popupProps(this.props);
        }
        return popupProps;
    };
    PopupItem.prototype.handleOpen = function (open, triggerType, e) {
        var _a = this.props,
            _key = _a._key,
            root = _a.root;
        root.handleOpen(_key, open, triggerType, e);
        var popupProps = this.popupProps;
        popupProps.onVisibleChange && popupProps.onVisibleChange(open, triggerType, e);
    };
    PopupItem.prototype.handlePopupOpen = function () {
        var _a = this.props,
            root = _a.root,
            level = _a.level,
            align = _a.align,
            autoWidth = _a.autoWidth;
        var _b = root.props,
            rootPopupAutoWidth = _b.popupAutoWidth,
            rootPopupAlign = _b.popupAlign,
            direction = _b.direction;
        var popupAlign = align || rootPopupAlign;
        var popupAutoWidth = 'autoWidth' in this.props ? autoWidth : rootPopupAutoWidth;
        try {
            // avoid errors while dom removed and js executing
            var itemNode = (0, react_dom_1.findDOMNode)(this);
            var menuNode = itemNode.parentNode;
            this.popupNode = this.popup.getInstance().overlay.getInstance().getContentNode();
            root.popupNodes.push(this.popupNode);
            if (popupAutoWidth) {
                var targetNode = direction === 'hoz' && level === 1 ? itemNode : menuNode;
                if (targetNode.offsetWidth > this.popupNode.offsetWidth) {
                    setStyle(this.popupNode, 'width', "".concat(targetNode.offsetWidth, "px"));
                }
            }
            if (popupAlign === 'outside' && !(direction === 'hoz' && level === 1)) {
                setStyle(this.popupNode, 'height', "".concat(menuNode.offsetHeight, "px"));
                this.popupNode.firstElementChild && setStyle(this.popupNode.firstElementChild, 'overflow-y', 'auto');
            }
            // removeClass(this.popupNode, `${prefix}hide`);
            var popupProps = this.popupProps;
            popupProps.onOpen && popupProps.onOpen();
        } catch (error) {
            return null;
        }
    };
    PopupItem.prototype.handlePopupClose = function () {
        var root = this.props.root;
        var popupNodes = root.popupNodes;
        var index = popupNodes.indexOf(this.popupNode);
        index > -1 && popupNodes.splice(index, 1);
        var popupProps = this.popupProps;
        popupProps.onClose && popupProps.onClose();
    };
    PopupItem.prototype.renderItem = function (selectable, children, others) {
        var _a;
        var _b = this.props,
            _key = _b._key,
            root = _b.root,
            level = _b.level,
            inlineLevel = _b.inlineLevel,
            label = _b.label,
            className = _b.className;
        var _c = root.props,
            prefix = _c.prefix,
            selectMode = _c.selectMode;
        var NewItem = selectable ? selectable_item_1.default : item_1.default;
        var open = this.getOpen();
        var _d = root.state,
            selectedKeys = _d.selectedKeys,
            _k2n = _d._k2n;
        var isChildSelected = (0, util_2.getChildSelected)({
            _key: _key,
            _k2n: _k2n,
            selectMode: selectMode,
            selectedKeys: selectedKeys
        });
        var itemProps = {
            'aria-haspopup': true,
            'aria-expanded': open,
            _key: _key,
            root: root,
            level: level,
            inlineLevel: inlineLevel,
            type: 'submenu'
        };
        itemProps.className = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "opened")] = open, _a["".concat(prefix, "child-selected")] = isChildSelected, _a[className] = !!className, _a));
        return react_1.default.createElement(NewItem, tslib_1.__assign({}, itemProps, others), react_1.default.createElement("span", { className: "".concat(prefix, "menu-item-text") }, label), children);
    };
    PopupItem.prototype.renderPopup = function (trigger, triggerType, positionProps, children) {
        var _this = this;
        var _a = this.props,
            root = _a.root,
            level = _a.level,
            selectable = _a.selectable,
            propCls = _a.className;
        var direction = root.props.direction;
        this.popupProps = this.getPopupProps();
        var open = this.getOpen();
        if (direction === 'hoz' && level === 1 && selectable) {
            positionProps.target = function () {
                return (0, react_dom_1.findDOMNode)(_this);
            };
        }
        var posCls = positionProps.className,
            otherPostion = tslib_1.__rest(positionProps, ["className"]);
        var className = (0, classnames_1.default)(propCls, posCls);
        return react_1.default.createElement(Popup, tslib_1.__assign({ ref: this.getPopup }, otherPostion, this.popupProps, { canCloseByEsc: false, trigger: trigger, triggerType: triggerType, visible: open, pinFollowBaseElementWhenFixed: true, onVisibleChange: this.handleOpen, onOpen: this.handlePopupOpen, onClose: this.handlePopupClose }), react_1.default.createElement("div", { className: className }, children));
    };
    PopupItem.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props,
            root = _b.root,
            level = _b.level,
            hasSubMenu = _b.hasSubMenu,
            selectableFromProps = _b.selectable,
            children = _b.children,
            triggerType = _b.triggerType,
            align = _b.align,
            noIcon = _b.noIcon,
            rtl = _b.rtl;
        var others = util_1.obj.pickOthers(Object.keys(PopupItem.propTypes), this.props);
        var _c = root.props,
            prefix = _c.prefix,
            selectMode = _c.selectMode,
            direction = _c.direction,
            rootPopupAlign = _c.popupAlign,
            rootTriggerType = _c.triggerType;
        var popupAlign = align || rootPopupAlign;
        var newTriggerType = triggerType || (hasSubMenu ? rootTriggerType : 'hover');
        var newChildren = Array.isArray(children) ? children[0] : children;
        // let newChildren = Array.isArray(children) ? children[0] : children;
        // newChildren = cloneElement(newChildren, {
        //     className: cx({
        //         [`${prefix}menu-popup-content`]: true,
        //         [newChildren.props.className]: !!newChildren.props.className,
        //         [`${prefix}hide`]: popupAutoWidth || popupAlign === 'outside'
        //     })
        // });
        var selectable = selectMode && selectableFromProps;
        var triggerIsIcon = selectable && newTriggerType === 'click';
        var open = this.getOpen();
        var positionProps = {};
        var arrowProps;
        if (direction === 'hoz' && level === 1) {
            positionProps.align = 'tl bl';
            positionProps.className = "".concat(prefix, "menu-spacing-tb");
            arrowProps = {
                type: 'arrow-down',
                className: (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "menu-hoz-icon-arrow")] = true, _a["".concat(prefix, "open")] = open, _a))
            };
        } else {
            if (popupAlign === 'outside') {
                positionProps.target = function () {
                    return (0, react_dom_1.findDOMNode)(root);
                };
                positionProps.align = 'tl tr';
                positionProps.className = "".concat(prefix, "menu-spacing-lr ").concat(prefix, "menu-outside");
            } else {
                if (triggerIsIcon) {
                    positionProps.target = function () {
                        return (0, react_dom_1.findDOMNode)(_this);
                    };
                }
                positionProps.align = 'tl tr';
                positionProps.className = "".concat(prefix, "menu-spacing-lr");
            }
            arrowProps = {
                type: 'arrow-right',
                className: "".concat(prefix, "menu-icon-arrow ").concat(prefix, "menu-symbol-popupfold")
            };
        }
        var arrow = react_1.default.createElement(icon_1.default, tslib_1.__assign({}, arrowProps));
        var trigger = triggerIsIcon ? arrow : this.renderItem(selectable, noIcon ? null : arrow, others);
        var popup = this.renderPopup(trigger, newTriggerType, positionProps, newChildren);
        return triggerIsIcon ? this.renderItem(selectable, popup, others) : popup;
    };
    PopupItem.menuChildType = 'submenu';
    PopupItem.propTypes = {
        _key: prop_types_1.default.string,
        root: prop_types_1.default.object,
        level: prop_types_1.default.number,
        hasSubMenu: prop_types_1.default.bool,
        noIcon: prop_types_1.default.bool,
        rtl: prop_types_1.default.bool,
        selectable: prop_types_1.default.bool,
        /**
         * 标签内容
         */
        label: prop_types_1.default.node,
        /**
         * 自定义弹层内容
         */
        children: prop_types_1.default.node,
        className: prop_types_1.default.string,
        /**
         * 子菜单打开的触发行为
         */
        triggerType: prop_types_1.default.oneOf(['click', 'hover']),
        align: prop_types_1.default.oneOf(['outside', 'follow']),
        autoWidth: prop_types_1.default.bool
    };
    PopupItem.defaultProps = {
        selectable: false,
        noIcon: false
    };
    return PopupItem;
}(react_1.Component);
exports.default = PopupItem;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var checkbox_1 = __webpack_require__(44);
var radio_1 = __webpack_require__(45);
var util_1 = __webpack_require__(4);
var item_1 = __webpack_require__(31);
var noop = {};
var bindCtx = util_1.func.bindCtx;
var pickOthers = util_1.obj.pickOthers;
var CheckableItem = /** @class */function (_super) {
    tslib_1.__extends(CheckableItem, _super);
    function CheckableItem(props) {
        var _this = _super.call(this, props) || this;
        bindCtx(_this, ['stopPropagation', 'handleKeyDown', 'handleClick']);
        _this.id = util_1.htmlId.escapeForId("checkable-item-".concat(props.id || props._key));
        return _this;
    }
    CheckableItem.prototype.stopPropagation = function (e) {
        e.stopPropagation();
    };
    CheckableItem.prototype.handleCheck = function (e) {
        var _a = this.props,
            checkType = _a.checkType,
            checked = _a.checked,
            onChange = _a.onChange;
        if (!(checkType === 'radio' && checked)) {
            onChange(!checked, e);
        }
    };
    CheckableItem.prototype.handleKeyDown = function (e) {
        if (e.keyCode === util_1.KEYCODE.SPACE && !this.props.checkDisabled) {
            this.handleCheck(e);
        }
        this.props.onKeyDown && this.props.onKeyDown(e);
    };
    CheckableItem.prototype.handleClick = function (e) {
        this.handleCheck(e);
        this.props.onClick && this.props.onClick(e);
    };
    CheckableItem.prototype.renderCheck = function () {
        var _a = this.props,
            root = _a.root,
            checked = _a.checked,
            indeterminate = _a.indeterminate,
            disabled = _a.disabled,
            checkType = _a.checkType,
            checkDisabled = _a.checkDisabled,
            onChange = _a.onChange;
        var labelToggleChecked = root.props.labelToggleChecked;
        var Check = checkType === 'radio' ? radio_1.default : checkbox_1.default;
        var checkProps = {
            tabIndex: '-1',
            checked: checked,
            disabled: disabled || checkDisabled
        };
        if (checkType === 'checkbox') {
            checkProps.indeterminate = indeterminate;
        }
        if (!labelToggleChecked) {
            checkProps.onChange = onChange;
            checkProps.onClick = this.stopPropagation;
        }
        return react_1.default.createElement(Check, tslib_1.__assign({ "aria-labelledby": this.id }, checkProps));
    };
    CheckableItem.prototype.render = function () {
        var _a = this.props,
            _key = _a._key,
            root = _a.root,
            checked = _a.checked,
            disabled = _a.disabled,
            onClick = _a.onClick,
            helper = _a.helper,
            children = _a.children;
        var _b = root.props,
            prefix = _b.prefix,
            labelToggleChecked = _b.labelToggleChecked;
        var others = pickOthers(Object.keys(CheckableItem.propTypes), this.props);
        var newProps = tslib_1.__assign({ _key: _key, root: root, disabled: disabled, type: 'item', onClick: onClick, onKeyDown: this.handleKeyDown }, others);
        if (labelToggleChecked && !disabled) {
            newProps.onClick = this.handleClick;
        }
        var title;
        if (typeof children === 'string') {
            title = children;
        }
        return react_1.default.createElement(item_1.default, tslib_1.__assign({ "aria-checked": checked, title: title }, newProps), this.renderCheck(), react_1.default.createElement("span", { className: "".concat(prefix, "menu-item-text"), id: this.id }, children), helper ? react_1.default.createElement("div", { className: "".concat(prefix, "menu-item-helper") }, helper) : null);
    };
    CheckableItem.propTypes = {
        _key: prop_types_1.default.string,
        root: prop_types_1.default.object,
        disabled: prop_types_1.default.bool,
        inlineIndent: prop_types_1.default.number,
        checked: prop_types_1.default.bool,
        indeterminate: prop_types_1.default.bool,
        onChange: prop_types_1.default.func,
        checkType: prop_types_1.default.oneOf(['checkbox', 'radio']),
        checkDisabled: prop_types_1.default.bool,
        helper: prop_types_1.default.node,
        children: prop_types_1.default.node,
        onKeyDown: prop_types_1.default.func,
        onClick: prop_types_1.default.func,
        id: prop_types_1.default.string
    };
    CheckableItem.defaultProps = {
        disabled: false,
        checked: false,
        indeterminate: false,
        checkType: 'checkbox',
        checkDisabled: false,
        onChange: noop
    };
    return CheckableItem;
}(react_1.Component);
exports.default = CheckableItem;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var mixin_ui_state_1 = __webpack_require__(144);
var config_provider_1 = __webpack_require__(5);
var icon_1 = __webpack_require__(7);
var with_context_1 = __webpack_require__(283);
var util_1 = __webpack_require__(4);
var noop = util_1.func.noop;
function isChecked(selectedValue, value) {
    return selectedValue.indexOf(value) > -1;
}
/**
 * Checkbox
 * @order 1
 */
var Checkbox = /** @class */function (_super) {
    tslib_1.__extends(Checkbox, _super);
    function Checkbox(props) {
        var _this = _super.call(this, props) || this;
        var context = props.context;
        var checked, indeterminate;
        if ('checked' in props) {
            checked = props.checked;
        } else {
            checked = props.defaultChecked;
        }
        if ('indeterminate' in props) {
            indeterminate = props.indeterminate;
        } else {
            indeterminate = props.defaultIndeterminate;
        }
        if (context.__group__) {
            checked = isChecked(context.selectedValue, props.value);
        }
        _this.state = {
            checked: checked,
            indeterminate: indeterminate
        };
        _this.onChange = _this.onChange.bind(_this);
        return _this;
    }
    Checkbox.getDerivedStateFromProps = function (nextProps) {
        var nextContext = nextProps.context;
        var state = {};
        if (nextContext.__group__) {
            if ('selectedValue' in nextContext) {
                state.checked = isChecked(nextContext.selectedValue, nextProps.value);
            }
        } else if ('checked' in nextProps) {
            state.checked = nextProps.checked;
        }
        if ('indeterminate' in nextProps) {
            state.indeterminate = nextProps.indeterminate;
        }
        return state;
    };
    Object.defineProperty(Checkbox.prototype, "disabled", {
        get: function get() {
            var props = this.props;
            var context = props.context;
            return props.disabled || 'disabled' in context && context.disabled;
        },
        enumerable: false,
        configurable: true
    });
    Checkbox.prototype.shouldComponentUpdate = function (nextProps, nextState, nextContext) {
        var shallowEqual = util_1.obj.shallowEqual;
        return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState) || !shallowEqual(this.context, nextContext);
    };
    Checkbox.prototype.onChange = function (e) {
        var _a = this.props,
            context = _a.context,
            value = _a.value;
        var checked = e.target.checked;
        if (this.disabled) {
            return;
        }
        if (context.__group__) {
            context.onChange(value, e);
        } else {
            if (!('checked' in this.props)) {
                this.setState({
                    checked: checked
                });
            }
            if (!('indeterminate' in this.props)) {
                this.setState({
                    indeterminate: false
                });
            }
            this.props.onChange(checked, e);
        }
    };
    Checkbox.prototype.render = function () {
        var _a, _b;
        /* eslint-disable no-unused-vars */
        var _c = this.props,
            id = _c.id,
            className = _c.className,
            children = _c.children,
            style = _c.style,
            label = _c.label,
            onMouseEnter = _c.onMouseEnter,
            onMouseLeave = _c.onMouseLeave,
            rtl = _c.rtl,
            isPreview = _c.isPreview,
            renderPreview = _c.renderPreview,
            context = _c.context,
            value = _c.value,
            name = _c.name,
            otherProps = tslib_1.__rest(_c, ["id", "className", "children", "style", "label", "onMouseEnter", "onMouseLeave", "rtl", "isPreview", "renderPreview", "context", "value", "name"]);
        var checked = !!this.state.checked;
        var disabled = this.disabled;
        var indeterminate = !!this.state.indeterminate;
        var prefix = context.prefix || this.props.prefix;
        var others = util_1.obj.pickOthers(Checkbox.propTypes, otherProps);
        var othersData = util_1.obj.pickAttrsWith(others, 'data-');
        if (otherProps.title) {
            othersData.title = otherProps.title;
        }
        var childInput = react_1.default.createElement("input", tslib_1.__assign({}, util_1.obj.pickOthers(Checkbox.propTypes, otherProps), { id: id, value: value, name: name, disabled: disabled, checked: checked, type: "checkbox", onChange: this.onChange, "aria-checked": indeterminate ? 'mixed' : checked, className: "".concat(prefix, "checkbox-input") }));
        // disable 无状态操作
        if (!disabled) {
            childInput = this.getStateElement(childInput);
        }
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "checkbox-wrapper")] = true, _a[className] = !!className, _a.checked = checked, _a.disabled = disabled, _a.indeterminate = indeterminate, _a[this.getStateClassName()] = true, _a));
        var labelCls = "".concat(prefix, "checkbox-label");
        var type = indeterminate ? 'semi-select' : 'select';
        if (isPreview) {
            var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
            if ('renderPreview' in this.props) {
                return react_1.default.createElement("div", tslib_1.__assign({ id: id, dir: rtl ? 'rtl' : undefined }, othersData, { className: previewCls }), renderPreview(checked, this.props));
            }
            return react_1.default.createElement("p", tslib_1.__assign({ id: id, dir: rtl ? 'rtl' : undefined }, othersData, { className: previewCls }), checked && (children || label || this.state.value));
        }
        var iconCls = (0, classnames_1.default)((_b = {
            zoomIn: indeterminate
        }, _b["".concat(prefix, "checkbox-semi-select-icon")] = indeterminate, _b["".concat(prefix, "checkbox-select-icon")] = !indeterminate, _b));
        return react_1.default.createElement("label", tslib_1.__assign({}, othersData, { className: cls, style: style, dir: rtl ? 'rtl' : undefined, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave }), react_1.default.createElement("span", { className: "".concat(prefix, "checkbox") }, react_1.default.createElement("span", { className: "".concat(prefix, "checkbox-inner") }, react_1.default.createElement(icon_1.default, { type: type, size: "xs", className: iconCls })), childInput), [label, children].map(function (item, i) {
            return [undefined, null].indexOf(item) === -1 ? react_1.default.createElement("span", { key: i, className: labelCls }, item) : null;
        }));
    };
    Checkbox.displayName = 'Checkbox';
    Checkbox.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, rtl: prop_types_1.default.bool,
        /**
         * 自定义类名
         */
        className: prop_types_1.default.string,
        /**
         * checkbox id, 挂载在input上
         */
        id: prop_types_1.default.string,
        /**
         * 自定义内敛样式
         */
        style: prop_types_1.default.object,
        /**
         * 选中状态
         */
        checked: prop_types_1.default.bool,
        /**
         * 默认选中状态
         */
        defaultChecked: prop_types_1.default.bool,
        /**
         * 禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 通过属性配置label，
         */
        label: prop_types_1.default.node,
        /**
         * Checkbox 的中间状态，只会影响到 Checkbox 的样式，并不影响其 checked 属性
         */
        indeterminate: prop_types_1.default.bool,
        /**
         *  Checkbox 的默认中间态，只会影响到 Checkbox 的样式，并不影响其 checked 属性
         */
        defaultIndeterminate: prop_types_1.default.bool,
        /**
         * 状态变化时触发的事件
         * @param {Boolean} checked 是否选中
         * @param {Event} e Dom 事件对象
         */
        onChange: prop_types_1.default.func,
        /**
         * 鼠标进入enter事件
         * @param {Event} e Dom 事件对象
         */
        onMouseEnter: prop_types_1.default.func,
        /**
         * 鼠标离开Leave事件
         * @param {Event} e Dom 事件对象
         */
        onMouseLeave: prop_types_1.default.func,
        /**
         * checkbox 的value
         */
        value: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.bool]),
        /**
         * name
         */
        name: prop_types_1.default.string,
        /**
         * 是否为预览态
         * @version 1.19
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {Boolean} checked 是否选中
         * @param {Object} props 所有传入的参数
         * @returns {reactNode} Element 渲染内容
         * @version 1.19
         */
        renderPreview: prop_types_1.default.func });
    Checkbox.defaultProps = {
        defaultChecked: false,
        defaultIndeterminate: false,
        onChange: noop,
        onMouseEnter: noop,
        onMouseLeave: noop,
        prefix: 'next-',
        isPreview: false
    };
    return Checkbox;
}(mixin_ui_state_1.default);
exports.default = config_provider_1.default.config((0, with_context_1.default)((0, react_lifecycles_compat_1.polyfill)(Checkbox)));

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var classnames_1 = __webpack_require__(3);
var util_1 = __webpack_require__(4);
var makeChain = util_1.func.makeChain;
// UIState 为一些特殊元素的状态响应提供了标准的方式，
// 尤其适合CSS无法完全定制的控件，比如checkbox，radio等。
// 若组件 disable 则自行判断是否需要绑定状态管理。
// 注意：disable 不会触发事件，请使用resetUIState还原状态
/* eslint-disable react/prop-types */
var UIState = /** @class */function (_super) {
    tslib_1.__extends(UIState, _super);
    function UIState(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {};
        ['_onUIFocus', '_onUIBlur'].forEach(function (item) {
            _this[item] = _this[item].bind(_this);
        });
        return _this;
    }
    // base 事件绑定的元素
    UIState.prototype.getStateElement = function (base) {
        var _a = this.props,
            onFocus = _a.onFocus,
            onBlur = _a.onBlur;
        return react_1.default.cloneElement(base, {
            onFocus: makeChain(this._onUIFocus, onFocus),
            onBlur: makeChain(this._onUIBlur, onBlur)
        });
    };
    // 获取状态classname
    UIState.prototype.getStateClassName = function () {
        var focused = this.state.focused;
        return (0, classnames_1.default)({
            focused: focused
        });
    };
    // 复原状态
    UIState.prototype.resetUIState = function () {
        this.setState({
            focused: false
        });
    };
    UIState.prototype._onUIFocus = function () {
        this.setState({
            focused: true
        });
    };
    UIState.prototype._onUIBlur = function () {
        this.setState({
            focused: false
        });
    };
    return UIState;
}(react_1.Component);
exports.default = UIState;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var mixin_ui_state_1 = __webpack_require__(144);
var config_provider_1 = __webpack_require__(5);
var with_context_1 = __webpack_require__(285);
var util_1 = __webpack_require__(4);
var makeChain = util_1.func.makeChain,
    noop = util_1.func.noop;
/**
 * Radio
 * @order 1
 */
var Radio = /** @class */function (_super) {
    tslib_1.__extends(Radio, _super);
    function Radio(props) {
        var _this = _super.call(this, props) || this;
        var context = props.context;
        var checked;
        if (context.__group__) {
            checked = context.selectedValue === props.value;
        } else if ('checked' in props) {
            checked = props.checked;
        } else {
            checked = props.defaultChecked;
        }
        _this.state = { checked: checked };
        _this.radioRef = null;
        _this.onChange = _this.onChange.bind(_this);
        return _this;
    }
    Radio.getDerivedStateFromProps = function (nextProps) {
        var nextContext = nextProps.context;
        if (nextContext.__group__ && 'selectedValue' in nextContext) {
            return {
                checked: nextContext.selectedValue === nextProps.value
            };
        } else if ('checked' in nextProps) {
            return {
                checked: nextProps.checked
            };
        }
        return null;
    };
    Object.defineProperty(Radio.prototype, "disabled", {
        get: function get() {
            var props = this.props;
            var context = props.context;
            var disabled = props.disabled || context.__group__ && 'disabled' in context && context.disabled;
            return disabled;
        },
        enumerable: false,
        configurable: true
    });
    Radio.prototype.shouldComponentUpdate = function (nextProps, nextState, nextContext) {
        var shallowEqual = util_1.obj.shallowEqual;
        return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState) || !shallowEqual(this.context, nextContext);
    };
    Radio.prototype.componentDidUpdate = function () {
        // when disabled, reset UIState
        if (this.disabled) {
            // only class has an impact, no effect on visual
            this.resetUIState();
        }
    };
    Radio.prototype.onChange = function (e) {
        var checked = e.target.checked;
        var _a = this.props,
            context = _a.context,
            value = _a.value;
        if (context.__group__) {
            context.onChange(value, e);
        } else if (this.state.checked !== checked) {
            if (!('checked' in this.props)) {
                this.setState({
                    checked: checked
                });
            }
            this.props.onChange(checked, e);
        }
    };
    Radio.prototype.focus = function () {
        if (this.radioRef) {
            this.radioRef.focus();
            this._onUIFocus();
        }
    };
    Radio.prototype.render = function () {
        var _a, _b, _c;
        var _this = this;
        /* eslint-disable no-unused-vars */
        var _d = this.props,
            id = _d.id,
            className = _d.className,
            children = _d.children,
            style = _d.style,
            label = _d.label,
            onMouseEnter = _d.onMouseEnter,
            onMouseLeave = _d.onMouseLeave,
            tabIndex = _d.tabIndex,
            rtl = _d.rtl,
            name = _d.name,
            isPreview = _d.isPreview,
            renderPreview = _d.renderPreview,
            value = _d.value,
            context = _d.context,
            otherProps = tslib_1.__rest(_d, ["id", "className", "children", "style", "label", "onMouseEnter", "onMouseLeave", "tabIndex", "rtl", "name", "isPreview", "renderPreview", "value", "context"]);
        var checked = !!this.state.checked;
        var disabled = this.disabled;
        var isButton = context.isButton;
        var prefix = context.prefix || this.props.prefix;
        var others = util_1.obj.pickOthers(Radio.propTypes, otherProps);
        var othersData = util_1.obj.pickAttrsWith(others, 'data-');
        if (isPreview) {
            var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
            if ('renderPreview' in this.props) {
                return react_1.default.createElement("div", tslib_1.__assign({ id: id, dir: rtl ? 'rtl' : 'ltr' }, others, { className: previewCls }), renderPreview(checked, this.props));
            }
            return react_1.default.createElement("p", tslib_1.__assign({ id: id, dir: rtl ? 'rtl' : 'ltr' }, others, { className: previewCls }), checked && (children || label || value));
        }
        var input = react_1.default.createElement("input", tslib_1.__assign({}, util_1.obj.pickOthers(othersData, others), { name: name, id: id, tabIndex: tabIndex, disabled: disabled, checked: checked, type: "radio", onChange: this.onChange, "aria-checked": checked, className: "".concat(prefix, "radio-input"), ref: function ref(e) {
                _this.radioRef = e;
            } }));
        // disabled do not hove focus state
        if (!disabled) {
            input = this.getStateElement(input);
        }
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "radio")] = true, _a.checked = checked, _a.disabled = disabled, _a[this.getStateClassName()] = true, _a));
        var clsInner = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "radio-inner")] = true, _b.press = checked, _b.unpress = !checked, _b));
        var clsWrapper = (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "radio-wrapper")] = true, _c[className] = !!className, _c.checked = checked, _c.disabled = disabled, _c[this.getStateClassName()] = true, _c));
        var childrenCls = "".concat(prefix, "radio-label");
        var radioComp = !isButton ? react_1.default.createElement("span", { className: cls }, react_1.default.createElement("span", { className: clsInner }), input) : react_1.default.createElement("span", { className: "".concat(prefix, "radio-single-input") }, input);
        return react_1.default.createElement("label", tslib_1.__assign({}, othersData, { dir: rtl ? 'rtl' : 'ltr', style: style, "aria-checked": checked, "aria-disabled": disabled, className: clsWrapper, onMouseEnter: disabled ? onMouseEnter : makeChain(this._onUIMouseEnter, onMouseEnter), onMouseLeave: disabled ? onMouseLeave : makeChain(this._onUIMouseLeave, onMouseLeave) }), radioComp, [children, label].map(function (d, i) {
            return d !== undefined ? react_1.default.createElement("span", { key: i, className: childrenCls }, d) : null;
        }));
    };
    Radio.displayName = 'Radio';
    Radio.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), {
        /**
         * 自定义类名
         */
        className: prop_types_1.default.string,
        /**
         * 组件input的id
         */
        id: prop_types_1.default.string,
        /**
         * 自定义内敛样式
         */
        style: prop_types_1.default.object,
        /**
         * 设置radio是否选中
         */
        checked: prop_types_1.default.bool,
        /**
         * 设置radio是否默认选中
         */
        defaultChecked: prop_types_1.default.bool,
        /**
         * 通过属性配置label
         */
        label: prop_types_1.default.node,
        /**
         * 状态变化时触发的事件
         * @param {Boolean} checked 是否选中
         * @param {Event} e Dom 事件对象
         */
        onChange: prop_types_1.default.func,
        /**
         * 鼠标进入enter事件
         * @param {Event} e Dom 事件对象
         */
        onMouseEnter: prop_types_1.default.func,
        /**
         * 鼠标离开事件
         * @param {Event} e Dom 事件对象
         */
        onMouseLeave: prop_types_1.default.func,
        /**
         * radio是否被禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * radio 的value
         */
        value: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.bool]),
        /**
         * name
         */
        name: prop_types_1.default.string,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {Boolean} checked 是否选中
         * @param {Object} props 所有传入的参数
         * @returns {reactNode} Element 渲染内容
         */
        renderPreview: prop_types_1.default.func });
    Radio.defaultProps = {
        onChange: noop,
        onMouseLeave: noop,
        onMouseEnter: noop,
        tabIndex: 0,
        prefix: 'next-',
        isPreview: false
    };
    Radio.contextTypes = {
        onChange: prop_types_1.default.func,
        __group__: prop_types_1.default.bool,
        isButton: prop_types_1.default.bool,
        selectedValue: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.bool]),
        disabled: prop_types_1.default.bool
    };
    return Radio;
}(mixin_ui_state_1.default);
exports.default = config_provider_1.default.config((0, with_context_1.default)((0, react_lifecycles_compat_1.polyfill)(Radio)));

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var tag_1 = __webpack_require__(87);
var tag_group_1 = __webpack_require__(297);
var selectable_1 = __webpack_require__(298);
var closeable_1 = __webpack_require__(299);
var ConfigTag = config_provider_1.default.config(tag_1.default, {
    transfrom: /* istanbul ignore next */function transfrom(props, deprecated) {
        var shape = props.shape,
            type = props.type;
        if (shape === 'selectable') {
            deprecated('shape=selectable', 'Tag.Selectable', 'Tag');
        }
        if (shape === 'deletable') {
            deprecated('shape=deletable', 'Tag.Closeable', 'Tag');
        }
        if (shape === 'link') {
            deprecated('shape=link', '<Tag><a href="x">x</a></Tag>', 'Tag');
        }
        if (shape === 'readonly' || shape === 'interactive') {
            util_1.log.warning("Warning: [ shape=".concat(shape, " ] is deprecated at [ Tag ]"));
        }
        if (type === 'secondary') {
            util_1.log.warning('Warning: [ type=secondary ] is deprecated at [ Tag ]');
        }
        ['count', 'marked', 'value', 'onChange'].forEach(function (key) {
            if (key in props) {
                util_1.log.warning("Warning: [ ".concat(key, " ] is deprecated at [ Tag ]"));
            }
        });
        if ('selected' in props || 'defaultSelected' in props) {
            util_1.log.warning('Warning: [ selected|defaultSelected  ] is deprecated at [ Tag ], use [ checked|defaultChecked ] at [ Tag.Selectable ] instead of it');
        }
        if ('closed' in props) {
            util_1.log.warning('Warning: [ closed  ] is deprecated at [ Tag ], use [ onClose ] at [ Tag.Closeable ] instead of it');
        }
        if ('onSelect' in props) {
            deprecated('onSelect', '<Tag.Selectable onChange/>', 'Tag');
        }
        if ('afterClose' in props) {
            util_1.log.warning('Warning: [ afterClose  ] is deprecated at [ Tag ], use [ afterClose ] at [ Tag.Closeable ] instead of it');
        }
        return props;
    }
});
ConfigTag.Group = config_provider_1.default.config(tag_group_1.default);
ConfigTag.Selectable = config_provider_1.default.config(selectable_1.default);
// 有的地方叫做 Closeable 有的地方用Closeable, 为了保持兼容 文档类出现 Closeable, Closeable可以继续用
ConfigTag.Closable = config_provider_1.default.config(closeable_1.default);
ConfigTag.Closeable = ConfigTag.Closable;
exports.default = ConfigTag;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
var base_1 = __webpack_require__(148);
var group_1 = __webpack_require__(149);
// preventDefault here can stop onBlur to keep focus state
function preventDefault(e) {
    e.preventDefault();
}
/** Input */
var Input = /** @class */function (_super) {
    tslib_1.__extends(Input, _super);
    function Input(props) {
        var _this = _super.call(this, props) || this;
        _this.handleKeyDown = function (e) {
            if (e.keyCode === 13) {
                _this.props.onPressEnter(e);
            }
            _this.onKeyDown(e);
        };
        _this.handleKeyDownFromClear = function (e) {
            if (e.keyCode === 13) {
                _this.onClear(e);
            }
        };
        var value;
        if ('value' in props) {
            value = props.value;
        } else {
            value = props.defaultValue;
        }
        _this.state = {
            value: typeof value === 'undefined' ? '' : value
        };
        return _this;
    }
    // `Enter` was considered to be two chars in chrome , but one char in ie.
    // so we make all `Enter` to be two chars
    Input.prototype.getValueLength = function (value) {
        var nv = "".concat(value);
        var strLen = this.props.getValueLength(nv);
        if (typeof strLen !== 'number') {
            strLen = nv.length;
        }
        return strLen;
    };
    Input.prototype.renderControl = function () {
        var _a;
        var _this = this;
        var _b = this.props,
            hasClear = _b.hasClear,
            readOnly = _b.readOnly,
            state = _b.state,
            prefix = _b.prefix,
            hint = _b.hint,
            extra = _b.extra,
            locale = _b.locale,
            disabled = _b.disabled,
            hoverShowClear = _b.hoverShowClear;
        var lenWrap = this.renderLength();
        var stateWrap = null;
        if (state === 'success') {
            stateWrap = react_1.default.createElement(icon_1.default, { type: "success-filling", className: "".concat(prefix, "input-success-icon") });
        } else if (state === 'loading') {
            stateWrap = react_1.default.createElement(icon_1.default, { type: "loading", className: "".concat(prefix, "input-loading-icon") });
        } else if (state === 'warning') {
            stateWrap = react_1.default.createElement(icon_1.default, { type: "warning", className: "".concat(prefix, "input-warning-icon") });
        }
        var clearWrap = null;
        // showClear属性应该与disable属性为互斥状态
        var showClear = hasClear && !readOnly && !!"".concat(this.state.value) && !disabled;
        if (hint || showClear) {
            var hintIcon = null;
            if (hint) {
                if (typeof hint === 'string') {
                    hintIcon = react_1.default.createElement(icon_1.default, { type: hint, className: "".concat(prefix, "input-hint") });
                } else if ((0, react_1.isValidElement)(hint)) {
                    hintIcon = (0, react_1.cloneElement)(hint, {
                        className: (0, classnames_1.default)(hint.props.className, "".concat(prefix, "input-hint"))
                    });
                } else {
                    hintIcon = hint;
                }
            } else {
                var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "input-hint")] = true, _a["".concat(prefix, "input-clear-icon")] = true, _a["".concat(prefix, "input-hover-show")] = hoverShowClear, _a));
                hintIcon = react_1.default.createElement(icon_1.default, { type: "delete-filling", role: "button", tabIndex: "0", className: cls, "aria-label": locale.clear, onClick: this.onClear.bind(this), onMouseDown: preventDefault, onKeyDown: this.handleKeyDownFromClear });
            }
            clearWrap = react_1.default.createElement("span", { className: "".concat(prefix, "input-hint-wrap") }, hasClear && hint ? react_1.default.createElement(icon_1.default, { type: "delete-filling", role: "button", tabIndex: "0", className: "".concat(prefix, "input-clear ").concat(prefix, "input-clear-icon"), "aria-label": locale.clear, onClick: this.onClear.bind(this), onMouseDown: preventDefault, onKeyDown: this.handleKeyDownFromClear }) : null, hintIcon);
        }
        if (state === 'loading') {
            clearWrap = null;
        }
        return clearWrap || lenWrap || stateWrap || extra ? react_1.default.createElement("span", { onClick: function onClick() {
                return _this.focus();
            }, className: "".concat(prefix, "input-control") }, clearWrap, lenWrap, stateWrap, extra) : null;
    };
    Input.prototype.renderLabel = function () {
        var _a = this.props,
            label = _a.label,
            prefix = _a.prefix,
            id = _a.id;
        return label ? react_1.default.createElement("label", { className: "".concat(prefix, "input-label"), htmlFor: id }, label) : null;
    };
    Input.prototype.renderInner = function (inner, cls) {
        return inner ? react_1.default.createElement("span", { className: cls }, inner) : null;
    };
    Input.prototype.onClear = function (e) {
        if (this.props.disabled) {
            return;
        }
        // 非受控模式清空内部数据
        if (!('value' in this.props)) {
            this.setState({
                value: ''
            });
        }
        this.props.onChange('', e, 'clear');
        this.focus();
    };
    Input.prototype.render = function () {
        var _a, _b, _c, _d, _e, _f, _g;
        var _h = this.props,
            size = _h.size,
            htmlType = _h.htmlType,
            htmlSize = _h.htmlSize,
            autoComplete = _h.autoComplete,
            autoFocus = _h.autoFocus,
            disabled = _h.disabled,
            style = _h.style,
            innerBefore = _h.innerBefore,
            innerAfter = _h.innerAfter,
            innerBeforeClassName = _h.innerBeforeClassName,
            innerAfterClassName = _h.innerAfterClassName,
            className = _h.className,
            hasBorder = _h.hasBorder,
            prefix = _h.prefix,
            isPreview = _h.isPreview,
            renderPreview = _h.renderPreview,
            addonBefore = _h.addonBefore,
            addonAfter = _h.addonAfter,
            addonTextBefore = _h.addonTextBefore,
            addonTextAfter = _h.addonTextAfter,
            inputRender = _h.inputRender,
            rtl = _h.rtl,
            composition = _h.composition;
        var hasAddon = addonBefore || addonAfter || addonTextBefore || addonTextAfter;
        var cls = (0, classnames_1.default)(this.getClass(), (_a = {}, _a["".concat(prefix).concat(size)] = true, _a["".concat(prefix, "hidden")] = this.props.htmlType === 'hidden', _a["".concat(prefix, "noborder")] = !hasBorder || this.props.htmlType === 'file', _a["".concat(prefix, "input-group-auto-width")] = hasAddon, _a["".concat(prefix, "disabled")] = disabled, _a[className] = !!className && !hasAddon, _a));
        var innerCls = "".concat(prefix, "input-inner");
        var innerBeforeCls = (0, classnames_1.default)((_b = {}, _b[innerCls] = true, _b["".concat(prefix, "before")] = true, _b[innerBeforeClassName] = innerBeforeClassName, _b));
        var innerAfterCls = (0, classnames_1.default)((_c = {}, _c[innerCls] = true, _c["".concat(prefix, "after")] = true, _c["".concat(prefix, "input-inner-text")] = typeof innerAfter === 'string', _c[innerAfterClassName] = innerAfterClassName, _c));
        var previewCls = (0, classnames_1.default)((_d = {}, _d["".concat(prefix, "form-preview")] = true, _d[className] = !!className, _d));
        var props = this.getProps();
        // custom data attributes are assigned to the top parent node
        // data-类自定义数据属性分配到顶层node节点
        var dataProps = util_1.obj.pickAttrsWith(this.props, 'data-');
        // Custom props are transparently transmitted to the core input node by default
        // 自定义属性默认透传到核心node节点：input
        var others = util_1.obj.pickOthers((0, _extends3.default)({}, dataProps, Input.propTypes), this.props);
        if (isPreview) {
            var value = props.value;
            var label = this.props.label;
            if (typeof renderPreview === 'function') {
                return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: previewCls }), renderPreview(value, this.props));
            }
            return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: previewCls }), addonBefore || addonTextBefore, label, innerBefore, value, innerAfter, addonAfter || addonTextAfter);
        }
        var compositionProps = {};
        if (composition) {
            compositionProps.onCompositionStart = this.handleCompositionStart;
            compositionProps.onCompositionEnd = this.handleCompositionEnd;
        }
        var inputEl = react_1.default.createElement("input", tslib_1.__assign({}, others, props, compositionProps, { height: "100%", type: htmlType, size: htmlSize, autoFocus: autoFocus, autoComplete: autoComplete, onKeyDown: this.handleKeyDown, ref: this.saveRef }));
        var inputWrap = react_1.default.createElement("span", tslib_1.__assign({}, dataProps, { dir: rtl ? 'rtl' : undefined, className: cls, style: hasAddon ? undefined : style }), this.renderLabel(), this.renderInner(innerBefore, innerBeforeCls), inputRender(inputEl), this.renderInner(innerAfter, innerAfterCls), this.renderControl());
        var groupCls = (0, classnames_1.default)((_e = {}, _e["".concat(prefix, "input-group-text")] = true, _e["".concat(prefix).concat(size)] = !!size, _e["".concat(prefix, "disabled")] = disabled, _e));
        var addonBeforeCls = (0, classnames_1.default)((_f = {}, _f[groupCls] = addonTextBefore, _f));
        var addonAfterCls = (0, classnames_1.default)((_g = {}, _g[groupCls] = addonTextAfter, _g));
        if (hasAddon) {
            return react_1.default.createElement(group_1.default, tslib_1.__assign({}, dataProps, { prefix: prefix, className: className, style: style, disabled: disabled, addonBefore: addonBefore || addonTextBefore, addonBeforeClassName: addonBeforeCls, addonAfter: addonAfter || addonTextAfter, addonAfterClassName: addonAfterCls }), inputWrap);
        }
        return inputWrap;
    };
    Input.displayName = 'Input';
    Input.getDerivedStateFromProps = base_1.default.getDerivedStateFromProps;
    Input.propTypes = tslib_1.__assign(tslib_1.__assign({}, base_1.default.propTypes), {
        /**
         * label
         */
        label: prop_types_1.default.node,
        /**
         * 是否出现clear按钮
         */
        hasClear: prop_types_1.default.bool,
        /**
         * 是否有边框
         */
        hasBorder: prop_types_1.default.bool,
        /**
         * 状态
         * @enumdesc 错误, 校验中, 成功, 警告
         */
        state: prop_types_1.default.oneOf(['error', 'loading', 'success', 'warning']),
        /**
         * 按下回车的回调
         */
        onPressEnter: prop_types_1.default.func,
        /**
         * 原生type
         */
        htmlType: prop_types_1.default.string, htmlSize: prop_types_1.default.string,
        /**
         * 水印 (Icon的type类型，和hasClear占用一个地方)
         */
        hint: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.node]),
        /**
         * 文字前附加内容
         */
        innerBefore: prop_types_1.default.node,
        /**
         * 文字后附加内容
         */
        innerAfter: prop_types_1.default.node,
        /**
         * 输入框前附加内容
         */
        addonBefore: prop_types_1.default.node,
        /**
         * 输入框后附加内容
         */
        addonAfter: prop_types_1.default.node,
        /**
         * 输入框前附加文字
         */
        addonTextBefore: prop_types_1.default.node,
        /**
         * 输入框后附加文字
         */
        addonTextAfter: prop_types_1.default.node,
        /**
         * (原生input支持)
         */
        autoComplete: prop_types_1.default.string,
        /**
         * 自动聚焦(原生input支持)
         */
        autoFocus: prop_types_1.default.bool, inputRender: prop_types_1.default.func, extra: prop_types_1.default.node, innerBeforeClassName: prop_types_1.default.string, innerAfterClassName: prop_types_1.default.string,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {number} value 评分值
         */
        renderPreview: prop_types_1.default.func,
        /**
         * hover展示clear (配合 hasClear=true使用)
         * @version 1.24
         */
        hoverShowClear: prop_types_1.default.bool });
    Input.defaultProps = tslib_1.__assign(tslib_1.__assign({}, base_1.default.defaultProps), { autoComplete: 'off', hasBorder: true, isPreview: false, hoverShowClear: false, onPressEnter: util_1.func.noop, inputRender: function inputRender(el) {
            return el;
        } });
    return Input;
}(base_1.default);
exports.default = Input;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var zh_cn_1 = __webpack_require__(9);
var Base = /** @class */function (_super) {
    tslib_1.__extends(Base, _super);
    function Base() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.handleCompositionStart = function (e) {
            _this.setState({
                composition: true
            });
            _this.props.onCompositionStart(e);
        };
        _this.handleCompositionEnd = function (e) {
            _this.setState({
                composition: false
            });
            _this.props.onCompositionEnd(e);
            var value = e.target.value;
            _this.props.onChange(value, e);
        };
        _this.saveRef = function (input) {
            _this.inputRef = input;
        };
        return _this;
    }
    Base.getDerivedStateFromProps = function (nextProps, prevState) {
        if ('value' in nextProps && nextProps.value !== prevState.value && !prevState.composition) {
            var value = nextProps.value;
            return {
                value: value === undefined || value === null ? '' : value
            };
        }
        return null;
    };
    Base.prototype.ieHack = function (value) {
        return value;
    };
    Base.prototype.onChange = function (e) {
        if ('stopPropagation' in e) {
            e.stopPropagation();
        } else if ('cancelBubble' in e) {
            e.cancelBubble();
        }
        var value = e.target.value;
        if (this.props.trim) {
            value = value.trim();
        }
        value = this.ieHack(value);
        // not controlled
        if (!('value' in this.props) || this.state.composition) {
            this.setState({
                value: value
            });
        }
        if (this.state.composition) {
            return;
        }
        // Number('') = 0
        if (value && this.props.htmlType === 'number') {
            value = Number(value);
        }
        this.props.onChange(value, e);
    };
    Base.prototype.onKeyDown = function (e) {
        var value = e.target.value;
        var maxLength = this.props.maxLength;
        var len = maxLength > 0 && value ? this.getValueLength(value) : 0;
        var opts = {};
        // has enable trim and has input whitespace
        if (this.props.trim && e.keyCode === 32) {
            opts.beTrimed = true;
        }
        // has defined maxLength and has over max length and has not input backspace and delete
        if (maxLength > 0 && (len > maxLength + 1 || (len === maxLength || len === maxLength + 1) && e.keyCode !== 8 && e.keyCode !== 46)) {
            opts.overMaxLength = true;
        }
        this.props.onKeyDown(e, opts);
    };
    Base.prototype.onFocus = function (e) {
        this.setState({
            focus: true
        });
        this.props.onFocus(e);
    };
    Base.prototype.onBlur = function (e) {
        this.setState({
            focus: false
        });
        this.props.onBlur(e);
    };
    Base.prototype.renderLength = function () {
        var _a;
        var _b = this.props,
            maxLength = _b.maxLength,
            showLimitHint = _b.showLimitHint,
            prefix = _b.prefix,
            rtl = _b.rtl;
        var len = maxLength > 0 && this.state.value ? this.getValueLength(this.state.value) : 0;
        var classesLenWrap = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "input-len")] = true, _a["".concat(prefix, "error")] = len > maxLength, _a));
        var content = rtl ? "".concat(maxLength, "/").concat(len) : "".concat(len, "/").concat(maxLength);
        return maxLength && showLimitHint ? react_1.default.createElement("span", { className: classesLenWrap }, content) : null;
    };
    Base.prototype.renderControl = function () {
        var _this = this;
        var lenWrap = this.renderLength();
        return lenWrap ? react_1.default.createElement("span", { onClick: function onClick() {
                return _this.focus();
            }, className: "".concat(this.props.prefix, "input-control") }, lenWrap) : null;
    };
    Base.prototype.getClass = function () {
        var _a;
        var _b = this.props,
            disabled = _b.disabled,
            state = _b.state,
            prefix = _b.prefix;
        return (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "input")] = true, _a["".concat(prefix, "disabled")] = !!disabled, _a["".concat(prefix, "error")] = state === 'error', _a["".concat(prefix, "warning")] = state === 'warning', _a["".concat(prefix, "focus")] = this.state.focus, _a));
    };
    Base.prototype.getProps = function () {
        var _a = this.props,
            placeholder = _a.placeholder,
            inputStyle = _a.inputStyle,
            disabled = _a.disabled,
            readOnly = _a.readOnly,
            cutString = _a.cutString,
            maxLength = _a.maxLength,
            name = _a.name,
            onCompositionStart = _a.onCompositionStart,
            onCompositionEnd = _a.onCompositionEnd;
        var props = {
            style: inputStyle,
            placeholder: placeholder,
            disabled: disabled,
            readOnly: readOnly,
            name: name,
            maxLength: cutString ? maxLength : undefined,
            value: this.state.value,
            onChange: this.onChange.bind(this),
            onBlur: this.onBlur.bind(this),
            onFocus: this.onFocus.bind(this),
            onCompositionStart: onCompositionStart,
            onCompositionEnd: onCompositionEnd
        };
        // fix accessibility：auto process status of aria disabled
        if (disabled) {
            props['aria-disabled'] = disabled;
        }
        return props;
    };
    Base.prototype.getInputNode = function () {
        return this.inputRef;
    };
    Base.prototype.focus = function (start, end, preventScroll) {
        if (preventScroll === void 0) {
            preventScroll = false;
        }
        this.inputRef.focus({ preventScroll: preventScroll });
        if (typeof start === 'number') {
            this.inputRef.selectionStart = start;
        }
        if (typeof end === 'number') {
            this.inputRef.selectionEnd = end;
        }
    };
    Base.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), {
        /**
         * 当前值
         */
        value: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        /**
         * 初始化值
         */
        defaultValue: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        /**
         * 发生改变的时候触发的回调
         * @param {String} value 数据
         * @param {Event} e DOM事件对象
         */
        onChange: prop_types_1.default.func,
        /**
         * 键盘按下的时候触发的回调
         * @param {Event} e DOM事件对象
         * @param {Object} opts 可扩展的附加信息：<br> - opts.overMaxLength: {Boolean} 已超出最大长度<br> - opts.beTrimed: {Boolean} 输入的空格被清理
         */
        onKeyDown: prop_types_1.default.func,
        /**
         * 禁用状态
         */
        disabled: prop_types_1.default.bool,
        /**
         * 最大长度
         */
        maxLength: prop_types_1.default.number,
        /**
         * 是否展现最大长度样式（旧版本为 hasLimitHint，目前仍兼容旧用法，将在2.x直接废弃）
         */
        showLimitHint: prop_types_1.default.bool,
        /**
         * 当设置了maxLength时，是否截断超出字符串
         */
        cutString: prop_types_1.default.bool,
        /**
         * 只读
         */
        readOnly: prop_types_1.default.bool,
        /**
         * onChange返回会自动去除头尾空字符
         */
        trim: prop_types_1.default.bool,
        /**
         * 输入提示
         */
        placeholder: prop_types_1.default.string,
        /**
         * 获取焦点时候触发的回调
         * @param {Event} e DOM事件对象
         */
        onFocus: prop_types_1.default.func,
        /**
         * 失去焦点时候触发的回调
         * @param {Event} e DOM事件对象
         */
        onBlur: prop_types_1.default.func,
        /**
         * 自定义字符串计算长度方式
         * @param {String} value 数据
         * @returns {Number} 自定义长度
         */
        getValueLength: prop_types_1.default.func, inputStyle: prop_types_1.default.object,
        /**
         * 自定义class
         */
        className: prop_types_1.default.string,
        /**
         * 自定义内联样式
         */
        style: prop_types_1.default.object,
        /**
         * 原生type
         */
        htmlType: prop_types_1.default.string,
        /**
         * name
         */
        name: prop_types_1.default.string, rtl: prop_types_1.default.bool, state: prop_types_1.default.oneOf(['error', 'loading', 'success', 'warning']), locale: prop_types_1.default.object,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {number} value 评分值
         */
        renderPreview: prop_types_1.default.func,
        /**
         * 尺寸
         * @enumdesc 小, 中, 大
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        /**
         * 开启后会过滤输入法中间字母状态，文字输入完成后才会触发 onChange
         * @version 1.23
         */
        composition: prop_types_1.default.bool, onCompositionStart: prop_types_1.default.func, onCompositionEnd: prop_types_1.default.func });
    Base.defaultProps = {
        disabled: false,
        prefix: 'next-',
        size: 'medium',
        maxLength: null,
        showLimitHint: false,
        cutString: true,
        readOnly: false,
        isPreview: false,
        trim: false,
        composition: false,
        onFocus: util_1.func.noop,
        onBlur: util_1.func.noop,
        onChange: util_1.func.noop,
        onKeyDown: util_1.func.noop,
        getValueLength: util_1.func.noop,
        onCompositionStart: util_1.func.noop,
        onCompositionEnd: util_1.func.noop,
        locale: zh_cn_1.default.Input
    };
    return Base;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Base);

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
/**
 * Input.Group
 */
var Group = /** @class */function (_super) {
    tslib_1.__extends(Group, _super);
    function Group() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Group.prototype.render = function () {
        var _a, _b, _c;
        var _d = this.props,
            className = _d.className,
            style = _d.style,
            children = _d.children,
            prefix = _d.prefix,
            addonBefore = _d.addonBefore,
            addonAfter = _d.addonAfter,
            addonBeforeClassName = _d.addonBeforeClassName,
            addonAfterClassName = _d.addonAfterClassName,
            rtl = _d.rtl,
            disabled = _d.disabled,
            others = tslib_1.__rest(_d, ["className", "style", "children", "prefix", "addonBefore", "addonAfter", "addonBeforeClassName", "addonAfterClassName", "rtl", "disabled"]);
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "input-group")] = true, _a["".concat(prefix, "disabled")] = disabled, _a[className] = !!className, _a));
        var addonCls = "".concat(prefix, "input-group-addon");
        var beforeCls = (0, classnames_1.default)(addonCls, (_b = {}, _b["".concat(prefix, "before")] = true, _b[addonBeforeClassName] = addonBeforeClassName, _b));
        var afterCls = (0, classnames_1.default)(addonCls, (_c = {}, _c["".concat(prefix, "after")] = true, _c[addonAfterClassName] = addonAfterClassName, _c));
        var before = addonBefore ? react_1.default.createElement("span", { className: beforeCls }, addonBefore) : null;
        var after = addonAfter ? react_1.default.createElement("span", { className: afterCls }, addonAfter) : null;
        return react_1.default.createElement("span", tslib_1.__assign({}, others, { disabled: disabled, dir: rtl ? 'rtl' : undefined, className: cls, style: style }), before, children, after);
    };
    Group.displayName = 'Group';
    Group.propTypes = {
        /**
         * 样式前缀
         */
        prefix: prop_types_1.default.string,
        className: prop_types_1.default.string,
        style: prop_types_1.default.object,
        children: prop_types_1.default.node,
        /**
         * 输入框前附加内容
         */
        addonBefore: prop_types_1.default.node,
        /**
         * 输入框前附加内容css
         */
        addonBeforeClassName: prop_types_1.default.string,
        /**
         * 输入框后附加内容
         */
        addonAfter: prop_types_1.default.node,
        /**
         * 输入框后额外css
         */
        addonAfterClassName: prop_types_1.default.string,
        /**
         * rtl
         */
        rtl: prop_types_1.default.bool
    };
    Group.defaultProps = {
        prefix: 'next-'
    };
    return Group;
}(react_1.default.Component);
exports.default = config_provider_1.default.config(Group);

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var util_1 = __webpack_require__(4);
var menu_1 = __webpack_require__(13);
var overlay_1 = __webpack_require__(12);
var input_1 = __webpack_require__(15);
var zh_cn_1 = __webpack_require__(9);
var data_store_1 = __webpack_require__(302);
var virtual_list_1 = __webpack_require__(46);
var util_2 = __webpack_require__(60);
var Popup = overlay_1.default.Popup;
var MenuItem = menu_1.default.Item,
    MenuGroup = menu_1.default.Group;
var noop = util_1.func.noop,
    bindCtx = util_1.func.bindCtx,
    makeChain = util_1.func.makeChain;
function preventDefault(e) {
    e.preventDefault();
}
var Base = /** @class */function (_super) {
    tslib_1.__extends(Base, _super);
    function Base(props) {
        var _this = _super.call(this, props) || this;
        /**
         * 防止 onBlur/onFocus 抖动
         */
        _this.handleMouseDown = function (e) {
            if (!_this.props.popupAutoFocus) {
                preventDefault(e);
            }
        };
        _this.saveSelectRef = function (ref) {
            _this.selectDOM = (0, react_dom_1.findDOMNode)(ref);
        };
        _this.saveInputRef = function (ref) {
            if (ref && ref.getInstance()) {
                _this.inputRef = ref.getInstance();
            }
        };
        _this.savePopupRef = function (ref) {
            _this.popupRef = ref;
        };
        _this.dataStore = new data_store_1.default({
            filter: props.filter,
            filterLocal: props.filterLocal,
            showDataSourceChildren: props.showDataSourceChildren
        });
        var mode = props.mode;
        var value = 'value' in props ? props.value : props.defaultValue;
        // 多选情况下做 value 数组订正
        if (props.mode !== 'single' && value && !Array.isArray(value)) {
            value = [value];
        }
        _this.state = {
            dataStore: _this.dataStore,
            value: value,
            visible: 'visible' in props ? props.visible : props.defaultVisible,
            dataSource: _this.setDataSource(_this.props),
            width: 100,
            // highlightKey应为String 多选初始化只赋值受控highlightKey/defaultHighlightKey
            highlightKey: 'highlightKey' in props ? props.highlightKey : props.mode === 'single' ? props.value || props.defaultHighlightKey || props.defaultValue : props.defaultHighlightKey,
            srReader: ''
        };
        bindCtx(_this, ['handleMenuBodyClick', 'handleVisibleChange', 'focusInput', 'beforeOpen', 'beforeClose', 'afterClose', 'handleResize']);
        return _this;
    }
    Base.prototype.componentDidMount = function () {
        var _this = this;
        // overlay 还没有完成 mount，所以需要滞后同步宽度
        setTimeout(function () {
            return _this.syncWidth();
        }, 0);
        util_1.events.on(window, 'resize', this.handleResize);
    };
    Base.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (prevProps.label !== this.props.label || prevState.value !== this.state.value) {
            this.syncWidth();
        }
    };
    Base.prototype.componentWillUnmount = function () {
        util_1.events.off(window, 'resize', this.handleResize);
        clearTimeout(this.resizeTimeout);
    };
    /**
     * Calculate and set width of popup menu
     * @protected
     */
    Base.prototype.syncWidth = function () {
        var _this = this;
        var _a = this.props,
            popupStyle = _a.popupStyle,
            popupProps = _a.popupProps;
        if (popupStyle && 'width' in popupStyle || popupProps && popupProps.style && 'width' in popupProps.style) {
            return;
        }
        var width = util_1.dom.getStyle(this.selectDOM, 'width');
        if (width && this.width !== width) {
            this.width = width;
            if (this.shouldAutoWidth()) {
                // overy 的 node 节点可能没有挂载完成，所以这里需要异步
                setTimeout(function () {
                    if (_this.popupRef) {
                        util_1.dom.setStyle(_this.popupRef, 'width', _this.width);
                        return;
                    }
                }, 0);
            }
        }
    };
    Base.prototype.handleResize = function () {
        var _this = this;
        clearTimeout(this.resizeTimeout);
        if (this.state.visible) {
            this.resizeTimeout = setTimeout(function () {
                _this.syncWidth();
            }, 200);
        }
    };
    /**
     * Get structured dataSource, for cache
     * @protected
     * @param  {Object} [props=this.props]
     * @return {Array}
     */
    Base.prototype.setDataSource = function (props) {
        var dataSource = props.dataSource,
            children = props.children;
        // children is higher priority then dataSource
        if (react_1.Children.count(children)) {
            return this.dataStore.updateByDS(children, true);
        } else if (Array.isArray(dataSource)) {
            return this.dataStore.updateByDS(dataSource, false);
        }
        return [];
    };
    /**
     * Set popup visible
     * @protected
     * @param {boolean} visible
     * @param {string} type trigger type
     */
    Base.prototype.setVisible = function (visible, type) {
        // disabled 状态下只允许关闭不允许打开
        if (this.props.disabled && visible || this.state.visible === visible) {
            return;
        }
        if (!('visible' in this.props)) {
            this.setState({
                visible: visible
            });
        }
        this.props.onVisibleChange(visible, type);
    };
    Base.prototype.setFirstHightLightKeyForMenu = function (searchValue) {
        // 判断value/highlightKey解决受控后，默认高亮第一个元素问题。(当搜索值时，搜索后应执行默认选择第一个元素)
        var highlightKey = this.state.highlightKey;
        if (!this.props.autoHighlightFirstItem) {
            return;
        }
        // 设置高亮 item key
        if (this.dataStore.getMenuDS().length && this.dataStore.getEnableDS().length && (!highlightKey || searchValue)) {
            var highlightKey_1 = "".concat(this.dataStore.getEnableDS()[0].value);
            this.setState({
                highlightKey: highlightKey_1
            });
            this.props.onToggleHighlightItem(highlightKey_1, 'autoFirstItem');
        }
        // 当有搜索值且搜索条件与dataSource不匹配时(搜索条件不满足不会出现可选择的列表，所以高亮key应为null)
        if (searchValue && !this.dataStore.getEnableDS().length) {
            this.setState({
                highlightKey: null
            });
            this.props.onToggleHighlightItem(null, 'highlightKeyToNull');
        }
    };
    Base.prototype.handleChange = function (value) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        // 非受控模式清空内部数据
        if (!('value' in this.props)) {
            this.setState({
                value: value
            });
        }
        (_a = this.props).onChange.apply(_a, tslib_1.__spreadArray([value], tslib_1.__read(args), false));
    };
    /**
     * Handle Menu body click
     * @param {Event} e click event
     */
    Base.prototype.handleMenuBodyClick = function (e) {
        if (!this.props.popupAutoFocus) {
            this.focusInput(e);
        }
    };
    /**
     * Toggle highlight MenuItem
     * @private
     * @param {number} dir -1: up, 1: down
     */
    Base.prototype.toggleHighlightItem = function (dir) {
        if (!this.state.visible) {
            this.setVisible(true, 'enter');
            return;
        }
        var maxCount = this.dataStore.getEnableDS().length;
        // When there is no enabled item
        if (!maxCount) {
            return false;
        }
        var highlightKey = this.state.highlightKey;
        var highlightIndex = -1;
        // find previous highlight index
        highlightKey !== null && this.dataStore.getEnableDS().some(function (item, index) {
            if ("".concat(item.value) === highlightKey) {
                highlightIndex = index;
            }
            return highlightIndex > -1;
        });
        // toggle highlight index
        highlightIndex += dir;
        if (highlightIndex < 0) {
            highlightIndex = maxCount - 1;
        }
        if (highlightIndex >= maxCount) {
            highlightIndex = 0;
        }
        // get highlight key
        var highlightItem = this.dataStore.getEnableDS()[highlightIndex];
        highlightKey = highlightItem ? "".concat(highlightItem.value) : null;
        this.setState({ highlightKey: highlightKey, srReader: highlightItem.label });
        this.scrollMenuIntoView();
        return highlightItem;
    };
    // scroll into focus item
    Base.prototype.scrollMenuIntoView = function () {
        var _this = this;
        var prefix = this.props.prefix;
        clearTimeout(this.highlightTimer);
        this.highlightTimer = setTimeout(function () {
            try {
                var menuNode = (0, react_dom_1.findDOMNode)(_this.menuRef);
                var itemNode = menuNode.querySelector(".".concat(prefix, "select-menu-item.").concat(prefix, "focused"));
                itemNode && itemNode.scrollIntoViewIfNeeded && itemNode.scrollIntoViewIfNeeded();
            } catch (ex) {
                // I don't care...
            }
        });
    };
    /**
     * render popup menu header
     * @abstract
     */
    Base.prototype.renderMenuHeader = function () {
        var menuProps = this.props.menuProps;
        if (menuProps && 'header' in menuProps) {
            return menuProps.header;
        }
        return null;
    };
    Base.prototype.handleSelect = function () {};
    /**
     * render popup children
     * @protected
     * @param {object} props
     */
    Base.prototype.renderMenu = function () {
        var _a;
        var _this = this;
        var _b = this.props,
            prefix = _b.prefix,
            mode = _b.mode,
            locale = _b.locale,
            notFoundContent = _b.notFoundContent,
            useVirtual = _b.useVirtual,
            menuProps = _b.menuProps;
        var _c = this.state,
            dataSource = _c.dataSource,
            highlightKey = _c.highlightKey;
        var value = this.state.value;
        var selectedKeys;
        if ((0, util_2.isNull)(value) || value.length === 0 || this.isAutoComplete) {
            selectedKeys = [];
        } else if ((0, util_2.isSingle)(mode)) {
            selectedKeys = [(0, util_2.valueToSelectKey)(value)];
        } else {
            selectedKeys = [].concat(value).map(function (n) {
                return (0, util_2.valueToSelectKey)(n);
            });
        }
        var children = this.renderMenuItem(dataSource);
        var menuClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "select-menu")] = true, _a["".concat(prefix, "select-menu-empty")] = !children || !children.length, _a));
        if (!children || !children.length) {
            children = react_1.default.createElement("span", { className: "".concat(prefix, "select-menu-empty-content") }, notFoundContent || locale.notFoundContent);
        }
        var customProps = tslib_1.__assign(tslib_1.__assign({}, menuProps), { children: children, role: 'listbox', selectedKeys: selectedKeys, focusedKey: highlightKey, focusable: false, selectMode: (0, util_2.isSingle)(mode) ? 'single' : 'multiple', onSelect: this.handleMenuSelect, onItemClick: this.handleItemClick, header: this.renderMenuHeader(), onClick: this.handleMenuBodyClick, onMouseDown: this.handleMouseDown, className: menuClassName });
        var menuStyle = this.shouldAutoWidth() ? { width: '100%' } : { minWidth: this.width };
        return useVirtual && children.length > 10 ? react_1.default.createElement("div", tslib_1.__assign({ className: "".concat(prefix, "select-menu-wrapper"), style: tslib_1.__assign({ position: 'relative' }, menuStyle) }, util_1.obj.pickProps(['onScroll'], customProps)), react_1.default.createElement(virtual_list_1.default, { itemsRenderer: function itemsRenderer(items, _ref) {
                return react_1.default.createElement(menu_1.default, tslib_1.__assign({ ref: function ref(c) {
                        _ref(c);
                        _this.menuRef = c;
                    }, flatenContent: true }, util_1.obj.pickOthers(['onScroll'], customProps)), items);
            } }, children)) : react_1.default.createElement(menu_1.default, tslib_1.__assign({}, customProps, { style: menuStyle }));
    };
    /**
     * render menu item
     * @protected
     * @param {Array} dataSource
     */
    Base.prototype.renderMenuItem = function (dataSource) {
        var _this = this;
        var _a = this.props,
            prefix = _a.prefix,
            itemRender = _a.itemRender,
            showDataSourceChildren = _a.showDataSourceChildren;
        // If it has.
        var searchKey;
        if (this.isAutoComplete) {
            // In AutoComplete, value is the searchKey
            searchKey = this.state.value;
        } else {
            searchKey = this.state.searchValue;
        }
        return dataSource.map(function (item, index) {
            if (!item) {
                return null;
            }
            if (Array.isArray(item.children) && showDataSourceChildren) {
                return react_1.default.createElement(MenuGroup, { key: index, label: item.label }, _this.renderMenuItem(item.children));
            } else {
                var itemProps = {
                    role: 'option',
                    key: item.value,
                    className: "".concat(prefix, "select-menu-item"),
                    disabled: item.disabled
                };
                if ('title' in item) {
                    itemProps.title = item.title;
                }
                return react_1.default.createElement(MenuItem, tslib_1.__assign({}, itemProps), itemRender(item, searchKey));
            }
        });
    };
    /**
     * 点击 arrow 或 label 的时候焦点切到 input 中
     * @override
     */
    Base.prototype.focusInput = function () {
        this.inputRef.focus(undefined, undefined, true);
    };
    Base.prototype.focus = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        (_a = this.inputRef).focus.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(args), false));
    };
    Base.prototype.beforeOpen = function () {
        if (this.props.mode === 'single') {
            this.setFirstHightLightKeyForMenu();
        }
        this.syncWidth();
    };
    Base.prototype.beforeClose = function () {};
    Base.prototype.afterClose = function () {};
    Base.prototype.shouldAutoWidth = function () {
        if (this.props.popupComponent) {
            return false;
        }
        return this.props.autoWidth;
    };
    Base.prototype.render = function (props) {
        var _a, _b;
        var _this = this;
        var prefix = props.prefix,
            mode = props.mode,
            popupProps = props.popupProps,
            popupContainer = props.popupContainer,
            popupClassName = props.popupClassName,
            popupStyle = props.popupStyle,
            popupContent = props.popupContent,
            canCloseByTrigger = props.canCloseByTrigger,
            followTrigger = props.followTrigger,
            cache = props.cache,
            popupComponent = props.popupComponent,
            isPreview = props.isPreview,
            renderPreview = props.renderPreview,
            style = props.style,
            className = props.className,
            valueRender = props.valueRender;
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "select-auto-complete-menu")] = !popupContent && this.isAutoComplete, _a["".concat(prefix, "select-").concat(mode, "-menu")] = !popupContent && !!mode, _a), popupClassName || popupProps.className);
        if (isPreview) {
            if (this.isAutoComplete) {
                return react_1.default.createElement(input_1.default, { style: style, className: className, isPreview: isPreview, renderPreview: renderPreview, value: this.state.value });
            } else {
                var value = this.state.value;
                var valueDS = this.state.value;
                if (!this.useDetailValue()) {
                    if (value === this.valueDataSource.value) {
                        valueDS = this.valueDataSource.valueDS;
                    } else {
                        valueDS = (0, util_2.getValueDataSource)(value, this.valueDataSource.mapValueDS, this.dataStore.getMapDS()).valueDS;
                    }
                }
                if (typeof renderPreview === 'function') {
                    var previewCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "form-preview")] = true, _b[className] = !!className, _b));
                    return react_1.default.createElement("div", { style: style, className: previewCls }, renderPreview(valueDS, this.props));
                } else {
                    var fillProps_1 = this.props.fillProps;
                    if (mode === 'single') {
                        var renderPreview_1 = function renderPreview_1(valueDS) {
                            if (fillProps_1) {
                                return valueDS[fillProps_1];
                            } else if (valueRender) {
                                return valueRender(valueDS, _this.props);
                            } else {
                                return valueDS.label;
                            }
                        };
                        return react_1.default.createElement(input_1.default, { style: style, className: className, isPreview: isPreview, value: valueDS ? renderPreview_1(valueDS) : '' });
                    } else {
                        return react_1.default.createElement(input_1.default, { style: style, className: className, isPreview: isPreview, value: (Array.isArray(valueDS) ? valueDS : []).map(function (i) {
                                return i.label;
                            }).join(', ') });
                    }
                }
            }
        }
        var _props = tslib_1.__assign(tslib_1.__assign({ triggerType: 'click', autoFocus: !!this.props.popupAutoFocus, cache: cache }, popupProps), {
            //beforeOpen node not mount, afterOpen too slow.
            // from display:none to block, we may need to recompute width
            beforeOpen: makeChain(this.beforeOpen, popupProps.beforeOpen), beforeClose: makeChain(this.beforeClose, popupProps.beforeClose), afterClose: makeChain(this.afterClose, popupProps.afterClose), canCloseByTrigger: canCloseByTrigger, followTrigger: followTrigger, visible: this.state.visible, onVisibleChange: this.handleVisibleChange, shouldUpdatePosition: true, container: popupContainer || popupProps.container, className: cls, style: popupStyle || popupProps.style });
        if (popupProps.v2) {
            delete _props.shouldUpdatePosition;
        }
        var Tag = popupComponent ? popupComponent : Popup;
        return react_1.default.createElement(Tag, tslib_1.__assign({}, _props, { trigger: this.renderSelect() }), popupContent ? react_1.default.createElement("div", { className: "".concat(prefix, "select-popup-wrap"), style: this.shouldAutoWidth() ? { width: this.width } : {}, ref: this.savePopupRef }, popupContent) : react_1.default.createElement("div", { className: "".concat(prefix, "select-spacing-tb"), style: this.shouldAutoWidth() ? { width: this.width } : {}, ref: this.savePopupRef }, this.renderMenu()));
    };
    Base.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 选择器尺寸
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        // 当前值，用于受控模式
        value: prop_types_1.default.any, // to be override
        // 初始化的默认值
        defaultValue: prop_types_1.default.any, // to be override
        /**
         * 没有值的时候的占位符
         */
        placeholder: prop_types_1.default.string,
        /**
         * 下拉菜单是否与选择器对齐
         */
        autoWidth: prop_types_1.default.bool,
        /**
         * 自定义内联 label
         */
        label: prop_types_1.default.node,
        /**
         * 是否有清除按钮（单选模式有效）
         */
        hasClear: prop_types_1.default.bool,
        /**
         * 校验状态
         */
        state: prop_types_1.default.oneOf(['error', 'loading', 'success', 'warning']),
        /**
         * 是否只读，只读模式下可以展开弹层但不能选
         */
        readOnly: prop_types_1.default.bool,
        /**
         * 是否禁用选择器
         */
        disabled: prop_types_1.default.bool,
        /**
         * 当前弹层是否显示
         */
        visible: prop_types_1.default.bool,
        /**
         * 弹层初始化是否显示
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 弹层显示或隐藏时触发的回调
         * @param {Boolean} visible 弹层是否显示
         * @param {String} type 触发弹层显示或隐藏的来源 fromContent 表示由Dropdown内容触发； fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
         */
        onVisibleChange: prop_types_1.default.func,
        /**
         * 弹层挂载的容器节点
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 弹层的 className
         */
        popupClassName: prop_types_1.default.any,
        /**
         * 弹层的内联样式
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 添加到弹层上的属性
         */
        popupProps: prop_types_1.default.object,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 自定义弹层的内容
         */
        popupContent: prop_types_1.default.node,
        /**
         * 添加到菜单上的属性
         * @version 1.18
         */
        menuProps: prop_types_1.default.object,
        /**
         * 是否使用本地过滤，在数据源为远程的时候需要关闭此项
         */
        filterLocal: prop_types_1.default.bool,
        /**
         * 本地过滤方法，返回一个 Boolean 值确定是否保留
         * @param {String} key 搜索关键字
         * @param {Object} item 渲染节点的item
         * @return {Boolean} 是否匹配
         */
        filter: prop_types_1.default.func,
        /**
         * 默认高亮的 key，不要和 autoHighlightFirstItem 同时使用
         */
        defaultHighlightKey: prop_types_1.default.string,
        /**
         * 高亮 key，不要和 autoHighlightFirstItem 同时使用，用于受控模式
         */
        highlightKey: prop_types_1.default.string,
        /**
         * 键盘上下键切换菜单高亮选项的回调
         */
        onToggleHighlightItem: prop_types_1.default.func,
        /**
         * 自动高亮第一个元素
         */
        autoHighlightFirstItem: prop_types_1.default.bool,
        /**
         * 是否开启虚拟滚动模式
         */
        useVirtual: prop_types_1.default.bool,
        // 自定义类名
        className: prop_types_1.default.any,
        children: prop_types_1.default.any,
        dataSource: prop_types_1.default.array,
        itemRender: prop_types_1.default.func,
        mode: prop_types_1.default.string,
        notFoundContent: prop_types_1.default.node,
        locale: prop_types_1.default.object,
        rtl: prop_types_1.default.bool,
        popupComponent: prop_types_1.default.any,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {number} value 评分值
         */
        renderPreview: prop_types_1.default.func,
        showDataSourceChildren: prop_types_1.default.bool
    };
    Base.defaultProps = {
        prefix: 'next-',
        size: 'medium',
        autoWidth: true,
        onChange: noop,
        onVisibleChange: noop,
        onToggleHighlightItem: noop,
        popupProps: {},
        filterLocal: true,
        filter: util_2.filter,
        itemRender: function itemRender(item) {
            return item.label || item.value;
        },
        locale: zh_cn_1.default.Select,
        autoHighlightFirstItem: true,
        showDataSourceChildren: true,
        defaultHighlightKey: null
    };
    return Base;
}(react_1.default.Component);
exports.default = Base;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
/* istanbul ignore file */
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_dom_1 = __webpack_require__(8);
var menu_1 = __webpack_require__(13);
var SelectMenu = /** @class */function (_super) {
    tslib_1.__extends(SelectMenu, _super);
    function SelectMenu() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.saveRef = function (ref) {
            _this.menuEl = ref;
        };
        return _this;
    }
    SelectMenu.prototype.componentDidMount = function () {
        this.scrollToSelectedItem();
    };
    SelectMenu.prototype.scrollToSelectedItem = function () {
        var _a = this.props,
            prefix = _a.prefix,
            dataSource = _a.dataSource,
            value = _a.value;
        var selectedIndex = dataSource.findIndex(function (item) {
            return item.value === value;
        });
        if (selectedIndex === -1) {
            return;
        }
        var itemSelector = ".".concat(prefix, "menu-item");
        var menu = (0, react_dom_1.findDOMNode)(this.menuEl);
        var targetItem = menu.querySelectorAll(itemSelector)[selectedIndex];
        if (targetItem) {
            menu.scrollTop = targetItem.offsetTop - Math.floor((menu.clientHeight / targetItem.clientHeight - 1) / 2) * targetItem.clientHeight;
        }
    };
    SelectMenu.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            dataSource = _a.dataSource,
            onChange = _a.onChange,
            value = _a.value,
            className = _a.className,
            others = tslib_1.__rest(_a, ["prefix", "dataSource", "onChange", "value", "className"]);
        return react_1.default.createElement(menu_1.default, tslib_1.__assign({}, others, { ref: this.saveRef, selectMode: "single", selectedKeys: [String(value)], onSelect: function onSelect(selectKeys) {
                return onChange(Number(selectKeys[0]));
            }, role: "listbox", className: "".concat(prefix, "calendar-panel-menu ").concat(className) }), dataSource.map(function (_a) {
            var label = _a.label,
                value = _a.value;
            return react_1.default.createElement(menu_1.default.Item, { key: value }, label);
        }));
    };
    SelectMenu.isNextMenu = true;
    SelectMenu.propTypes = {
        dataSource: prop_types_1.default.arrayOf(prop_types_1.default.object),
        value: prop_types_1.default.number,
        prefix: prop_types_1.default.string,
        onChange: prop_types_1.default.func,
        children: prop_types_1.default.node
    };
    return SelectMenu;
}(react_1.Component);
exports.default = SelectMenu;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var icon_1 = __webpack_require__(7);
var MonthPanelHeader = /** @class */function (_super) {
    tslib_1.__extends(MonthPanelHeader, _super);
    function MonthPanelHeader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MonthPanelHeader.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            visibleMonth = _a.visibleMonth,
            locale = _a.locale,
            changeMode = _a.changeMode,
            goPrevYear = _a.goPrevYear,
            goNextYear = _a.goNextYear;
        var yearLabel = visibleMonth.year();
        var btnCls = "".concat(prefix, "calendar-btn");
        return react_1.default.createElement("div", { className: "".concat(prefix, "calendar-panel-header") }, react_1.default.createElement("button", { role: "button", type: "button", title: locale.prevYear, className: "".concat(btnCls, " ").concat(btnCls, "-prev-year"), onClick: goPrevYear }, react_1.default.createElement(icon_1.default, { type: "arrow-double-left", className: "".concat(prefix, "calendar-symbol-prev-super") })), react_1.default.createElement("div", { className: "".concat(prefix, "calendar-panel-header-full") }, react_1.default.createElement("button", { role: "button", type: "button", title: yearLabel, className: "".concat(btnCls), onClick: function onClick() {
                return changeMode('year');
            } }, yearLabel)), react_1.default.createElement("button", { role: "button", type: "button", title: locale.nextYear, className: "".concat(btnCls, " ").concat(btnCls, "-next-year"), onClick: goNextYear }, react_1.default.createElement(icon_1.default, { type: "arrow-double-right", className: "".concat(prefix, "calendar-symbol-next-super") })));
    };
    return MonthPanelHeader;
}(react_1.default.PureComponent);
exports.default = MonthPanelHeader;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var icon_1 = __webpack_require__(7);
var YearPanelHeader = /** @class */function (_super) {
    tslib_1.__extends(YearPanelHeader, _super);
    function YearPanelHeader() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.getDecadeLabel = function (date) {
            var year = date.year();
            var start = parseInt(year / 10, 10) * 10;
            var end = start + 9;
            return "".concat(start, "-").concat(end);
        };
        return _this;
    }
    YearPanelHeader.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            visibleMonth = _a.visibleMonth,
            locale = _a.locale,
            goPrevDecade = _a.goPrevDecade,
            goNextDecade = _a.goNextDecade;
        var decadeLable = this.getDecadeLabel(visibleMonth);
        var btnCls = "".concat(prefix, "calendar-btn");
        return react_1.default.createElement("div", { className: "".concat(prefix, "calendar-panel-header") }, react_1.default.createElement("button", { role: "button", type: "button", title: locale.prevDecade, className: "".concat(btnCls, " ").concat(btnCls, "-prev-decade"), onClick: goPrevDecade }, react_1.default.createElement(icon_1.default, { type: "arrow-double-left", className: "".concat(prefix, "calendar-symbol-prev-super") })), react_1.default.createElement("div", { className: "".concat(prefix, "calendar-panel-header-full") }, react_1.default.createElement("button", { role: "button", type: "button", title: decadeLable, className: btnCls }, decadeLable)), react_1.default.createElement("button", { role: "button", type: "button", title: locale.nextDecade, className: "".concat(btnCls, " ").concat(btnCls, "-next-decade"), onClick: goNextDecade }, react_1.default.createElement(icon_1.default, { type: "arrow-double-right", className: "".concat(prefix, "calendar-symbol-next-super") })));
    };
    return YearPanelHeader;
}(react_1.default.PureComponent);
exports.default = YearPanelHeader;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var classnames_1 = __webpack_require__(3);
var date_table_head_1 = __webpack_require__(308);
var utils_1 = __webpack_require__(19);
function isSameDay(a, b) {
    return a && b && a.isSame(b, 'day');
}
function isRangeDate(date, startDate, endDate) {
    return date.format('L') !== startDate.format('L') && date.format('L') !== endDate.format('L') && date.valueOf() > startDate.valueOf() && date.valueOf() < endDate.valueOf();
}
function isLastMonthDate(date, target) {
    if (date.year() < target.year()) {
        return 1;
    }
    return date.year() === target.year() && date.month() < target.month();
}
function isNextMonthDate(date, target) {
    if (date.year() > target.year()) {
        return 1;
    }
    return date.year() === target.year() && date.month() > target.month();
}
var DateTable = /** @class */function (_super) {
    tslib_1.__extends(DateTable, _super);
    function DateTable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DateTable.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            visibleMonth = _b.visibleMonth,
            showOtherMonth = _b.showOtherMonth,
            endValue = _b.endValue,
            format = _b.format,
            today = _b.today,
            momentLocale = _b.momentLocale,
            dateCellRender = _b.dateCellRender,
            disabledDate = _b.disabledDate,
            onSelectDate = _b.onSelectDate;
        var startValue = this.props.startValue || this.props.value;
        var firstDayOfMonth = visibleMonth.clone().startOf('month'); // 该月的 1 号
        var firstDayOfMonthInWeek = firstDayOfMonth.day(); // 星期几
        var firstDayOfWeek = momentLocale.firstDayOfWeek();
        var datesOfLastMonthCount = (firstDayOfMonthInWeek + utils_1.DAYS_OF_WEEK - firstDayOfWeek) % utils_1.DAYS_OF_WEEK;
        var lastMonthDate = firstDayOfMonth.clone();
        lastMonthDate.add(0 - datesOfLastMonthCount, 'days');
        var counter = 0;
        var currentDate;
        var dateList = [];
        for (var i = 0; i < utils_1.CALENDAR_TABLE_ROW_COUNT; i++) {
            for (var j = 0; j < utils_1.CALENDAR_TABLE_COL_COUNT; j++) {
                currentDate = lastMonthDate;
                if (counter) {
                    currentDate = currentDate.clone();
                    currentDate.add(counter, 'days');
                }
                dateList.push(currentDate);
                counter++;
            }
        }
        counter = 0; // reset counter
        var monthElements = [];
        for (var i = 0; i < utils_1.CALENDAR_TABLE_ROW_COUNT; i++) {
            var weekElements = [];
            var firstDayOfWeekInCurrentMonth = true;
            var lastDayOfWeekInCurrentMonth = true;
            for (var j = 0; j < utils_1.CALENDAR_TABLE_COL_COUNT; j++) {
                currentDate = dateList[counter];
                if (j === 0) {
                    // currentDate 的month 是否等于当前月 firstDayOfMonth
                    firstDayOfWeekInCurrentMonth = currentDate.format('M') === firstDayOfMonth.format('M');
                }
                if (j === utils_1.CALENDAR_TABLE_COL_COUNT - 1) {
                    // currentDate 的month 是否等于当前月 firstDayOfMonth
                    lastDayOfWeekInCurrentMonth = currentDate.format('M') === firstDayOfMonth.format('M');
                }
                var isLastMonth = isLastMonthDate(currentDate, visibleMonth);
                var isNextMonth = isNextMonthDate(currentDate, visibleMonth);
                var isCurrentMonth = !isLastMonth && !isNextMonth;
                var isDisabled = (0, utils_1.isDisabledDate)(currentDate, disabledDate, 'date');
                var isToday = !isDisabled && isSameDay(currentDate, today) && isCurrentMonth;
                var isSelected = !isDisabled && (isSameDay(currentDate, startValue) || isSameDay(currentDate, endValue)) && isCurrentMonth;
                var isInRange = !isDisabled && startValue && endValue && isRangeDate(currentDate, startValue, endValue) && isCurrentMonth;
                var cellContent = !showOtherMonth && !isCurrentMonth ? null : dateCellRender(currentDate);
                var elementCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "calendar-cell")] = true, _a["".concat(prefix, "calendar-cell-prev-month")] = isLastMonth, _a["".concat(prefix, "calendar-cell-next-month")] = isNextMonth, _a["".concat(prefix, "calendar-cell-current")] = isToday, _a["".concat(prefix, "inrange")] = isInRange, _a["".concat(prefix, "selected")] = isSelected, _a["".concat(prefix, "disabled")] = cellContent && isDisabled, _a));
                weekElements.push(react_1.default.createElement("td", { key: counter, title: currentDate.format(format), onClick: isDisabled ? undefined : onSelectDate.bind(null, currentDate), className: elementCls, role: "cell", "aria-disabled": isDisabled ? 'true' : 'false', "aria-selected": isSelected ? 'true' : 'false' }, react_1.default.createElement("div", { className: "".concat(prefix, "calendar-date") }, cellContent)));
                counter++;
            }
            if (!showOtherMonth && !lastDayOfWeekInCurrentMonth && !firstDayOfWeekInCurrentMonth) {
                break;
            }
            monthElements.push(react_1.default.createElement("tr", { key: i, role: "row" }, weekElements));
        }
        return react_1.default.createElement("table", { className: "".concat(prefix, "calendar-table"), role: "grid" }, react_1.default.createElement(date_table_head_1.default, tslib_1.__assign({}, this.props, { momentLocale: momentLocale })), react_1.default.createElement("tbody", { className: "".concat(prefix, "calendar-tbody"), role: "rowgroup" }, monthElements));
    };
    return DateTable;
}(react_1.PureComponent);
exports.default = DateTable;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var classnames_1 = __webpack_require__(3);
var utils_1 = __webpack_require__(19);
function isSameMonth(currentDate, selectedDate) {
    return selectedDate && currentDate.year() === selectedDate.year() && currentDate.month() === selectedDate.month();
}
var MonthTable = /** @class */function (_super) {
    tslib_1.__extends(MonthTable, _super);
    function MonthTable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MonthTable.prototype.onMonthCellClick = function (date) {
        this.props.onSelectMonth(date, 'date');
    };
    MonthTable.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            value = _b.value,
            visibleMonth = _b.visibleMonth,
            disabledDate = _b.disabledDate,
            today = _b.today,
            momentLocale = _b.momentLocale,
            monthCellRender = _b.monthCellRender;
        var monthLocale = momentLocale.monthsShort();
        var counter = 0;
        var monthList = [];
        for (var i = 0; i < utils_1.MONTH_TABLE_ROW_COUNT; i++) {
            var rowList = [];
            for (var j = 0; j < utils_1.MONTH_TABLE_COL_COUNT; j++) {
                var monthDate = visibleMonth.clone().month(counter);
                var isDisabled = (0, utils_1.isDisabledDate)(monthDate, disabledDate, 'month');
                var isSelected = isSameMonth(monthDate, value);
                var isThisMonth = isSameMonth(monthDate, today);
                var elementCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "calendar-cell")] = true, _a["".concat(prefix, "calendar-cell-current")] = isThisMonth, _a["".concat(prefix, "selected")] = isSelected, _a["".concat(prefix, "disabled")] = isDisabled, _a));
                var localedMonth = monthLocale[counter];
                var monthCellContent = monthCellRender ? monthCellRender(monthDate) : localedMonth;
                rowList.push(react_1.default.createElement("td", { key: counter, title: localedMonth, onClick: isDisabled ? undefined : this.onMonthCellClick.bind(this, monthDate), className: elementCls, role: "cell", "aria-disabled": isDisabled ? 'true' : 'false', "aria-selected": isSelected ? 'true' : 'false' }, react_1.default.createElement("div", { className: "".concat(prefix, "calendar-month") }, monthCellContent)));
                counter++;
            }
            monthList.push(react_1.default.createElement("tr", { key: i, role: "row" }, rowList));
        }
        return react_1.default.createElement("table", { className: "".concat(prefix, "calendar-table"), role: "grid" }, react_1.default.createElement("tbody", { className: "".concat(prefix, "calendar-tbody"), role: "rowgroup" }, monthList));
    };
    return MonthTable;
}(react_1.PureComponent);
exports.default = MonthTable;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var classnames_1 = __webpack_require__(3);
var icon_1 = __webpack_require__(7);
var utils_1 = __webpack_require__(19);
var YearTable = /** @class */function (_super) {
    tslib_1.__extends(YearTable, _super);
    function YearTable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    YearTable.prototype.onYearCellClick = function (date) {
        this.props.onSelectYear(date, 'month');
    };
    YearTable.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            value = _b.value,
            today = _b.today,
            visibleMonth = _b.visibleMonth,
            locale = _b.locale,
            disabledDate = _b.disabledDate,
            goPrevDecade = _b.goPrevDecade,
            goNextDecade = _b.goNextDecade,
            yearCellRender = _b.yearCellRender;
        var currentYear = today.year();
        var selectedYear = value ? value.year() : null;
        var visibleYear = visibleMonth.year();
        var startYear = Math.floor(visibleYear / 10) * 10;
        var yearElements = [];
        var counter = 0;
        var lastRowIndex = utils_1.YEAR_TABLE_ROW_COUNT - 1;
        var lastColIndex = utils_1.YEAR_TABLE_COL_COUNT - 1;
        for (var i = 0; i < utils_1.YEAR_TABLE_ROW_COUNT; i++) {
            var rowElements = [];
            for (var j = 0; j < utils_1.YEAR_TABLE_COL_COUNT; j++) {
                var content = void 0;
                var year = void 0;
                var isDisabled = false;
                var onClick = void 0;
                var title = void 0;
                if (i === 0 && j === 0) {
                    title = locale.prevDecade;
                    onClick = goPrevDecade;
                    content = react_1.default.createElement(icon_1.default, { type: "arrow-left", size: "xs" });
                } else if (i === lastRowIndex && j === lastColIndex) {
                    title = locale.nextDecade;
                    onClick = goNextDecade;
                    content = react_1.default.createElement(icon_1.default, { type: "arrow-right", size: "xs" });
                } else {
                    year = startYear + counter++;
                    title = year;
                    var yearDate = visibleMonth.clone().year(year);
                    isDisabled = (0, utils_1.isDisabledDate)(yearDate, disabledDate, 'year');
                    !isDisabled && (onClick = this.onYearCellClick.bind(this, yearDate));
                    content = yearCellRender ? yearCellRender(yearDate) : year;
                }
                var isSelected = year === selectedYear;
                var classNames = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "calendar-cell")] = true, _a["".concat(prefix, "calendar-cell-current")] = year === currentYear, _a["".concat(prefix, "selected")] = isSelected, _a["".concat(prefix, "disabled")] = isDisabled, _a));
                rowElements.push(react_1.default.createElement("td", { key: "".concat(i, "-").concat(j), className: classNames, role: "cell" }, react_1.default.createElement("div", { className: "".concat(prefix, "calendar-year"), onClick: onClick, title: title, "aria-disabled": isDisabled ? 'true' : 'false', "aria-selected": isSelected ? 'true' : 'false' }, content)));
            }
            yearElements.push(react_1.default.createElement("tr", { key: i, role: "row" }, rowElements));
        }
        return react_1.default.createElement("table", { className: "".concat(prefix, "calendar-table"), role: "grid" }, react_1.default.createElement("tbody", { className: "".concat(prefix, "calendar-tbody"), role: "rowgroup" }, yearElements));
    };
    return YearTable;
}(react_1.default.PureComponent);
exports.default = YearTable;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var moment_1 = __webpack_require__(16);
var config_provider_1 = __webpack_require__(5);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var range_panel_header_1 = __webpack_require__(309);
var month_panel_header_1 = __webpack_require__(152);
var year_panel_header_1 = __webpack_require__(153);
var date_table_1 = __webpack_require__(154);
var month_table_1 = __webpack_require__(155);
var year_table_1 = __webpack_require__(156);
var utils_1 = __webpack_require__(19);
var RangeCalendar = /** @class */function (_super) {
    tslib_1.__extends(RangeCalendar, _super);
    function RangeCalendar(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.onSelectCell = function (date, nextMode) {
            if (_this.state.mode === utils_1.CALENDAR_MODE_DATE) {
                _this.props.onSelect(date);
            } else {
                _this.changeVisibleMonth(date, 'cellClick');
            }
            _this.changeMode(nextMode);
        };
        _this.changeMode = function (mode, activePanel) {
            var _a = _this.state,
                lastMode = _a.lastMode,
                lastPanelType = _a.lastPanelType;
            var state = {
                lastMode: mode,
                // rangePicker的panel下，选 year -> month ，从当前函数的activePanel传来的数据已经拿不到 start end panel的状态了，需要根据 lastMode 来判断
                lastPanelType: lastMode === 'year' ? lastPanelType : activePanel
            };
            if (typeof mode === 'string' && mode !== _this.state.mode) {
                state.mode = mode;
            }
            if (activePanel && activePanel !== _this.state.activePanel) {
                state.activePanel = activePanel;
            }
            _this.setState(state);
        };
        _this.changeVisibleMonth = function (date, reason) {
            var lastPanelType = _this.state.lastPanelType;
            if (!(0, utils_1.isSameYearMonth)(date, _this.state.startVisibleMonth)) {
                var startVisibleMonth = lastPanelType === 'end' ? date.clone().add(-1, 'month') : date;
                _this.setState({ startVisibleMonth: startVisibleMonth });
                _this.props.onVisibleMonthChange(startVisibleMonth, reason);
            }
        };
        /**
         * 根据日期偏移量设置当前展示的月份
         * @param {Number} offset 日期偏移量
         * @param {String} type 日期偏移类型 days, months, years
         */
        _this.changeVisibleMonthByOffset = function (offset, type) {
            var offsetDate = _this.state.startVisibleMonth.clone().add(offset, type);
            _this.changeVisibleMonth(offsetDate, 'buttonClick');
        };
        _this.goPrevDecade = function () {
            _this.changeVisibleMonthByOffset(-10, 'years');
        };
        _this.goNextDecade = function () {
            _this.changeVisibleMonthByOffset(10, 'years');
        };
        _this.goPrevYear = function () {
            _this.changeVisibleMonthByOffset(-1, 'years');
        };
        _this.goNextYear = function () {
            _this.changeVisibleMonthByOffset(1, 'years');
        };
        _this.goPrevMonth = function () {
            _this.changeVisibleMonthByOffset(-1, 'months');
        };
        _this.goNextMonth = function () {
            _this.changeVisibleMonthByOffset(1, 'months');
        };
        var startValue = (0, utils_1.formatDateValue)(props.startValue || props.defaultStartValue);
        var endValue = (0, utils_1.formatDateValue)(props.endValue || props.defaultEndValue);
        var visibleMonth = (0, utils_1.getVisibleMonth)(props.defaultVisibleMonth, startValue);
        _this.state = {
            startValue: startValue,
            endValue: endValue,
            mode: props.mode,
            prevMode: props.mode,
            startVisibleMonth: visibleMonth,
            activePanel: undefined,
            lastMode: undefined,
            lastPanelType: 'start' // enum, 包括 start end
        };
        _this.today = (0, moment_1.default)();
        return _this;
    }
    RangeCalendar.getDerivedStateFromProps = function (props, state) {
        var st = {};
        if ('startValue' in props) {
            var startValue = (0, utils_1.formatDateValue)(props.startValue);
            st.startValue = startValue;
            if (startValue && !startValue.isSame(state.startValue, 'day')) {
                st.startVisibleMonth = startValue;
            }
        }
        if ('endValue' in props) {
            st.endValue = (0, utils_1.formatDateValue)(props.endValue);
        }
        if ('mode' in props && state.prevMode !== props.mode) {
            st.prevMode = props.mode;
            st.mode = props.mode;
        }
        return st;
    };
    RangeCalendar.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            rtl = _b.rtl,
            dateCellRender = _b.dateCellRender,
            monthCellRender = _b.monthCellRender,
            yearCellRender = _b.yearCellRender,
            className = _b.className,
            format = _b.format,
            locale = _b.locale,
            showOtherMonth = _b.showOtherMonth,
            disabledDate = _b.disabledDate,
            disableChangeMode = _b.disableChangeMode,
            yearRange = _b.yearRange,
            others = tslib_1.__rest(_b, ["prefix", "rtl", "dateCellRender", "monthCellRender", "yearCellRender", "className", "format", "locale", "showOtherMonth", "disabledDate", "disableChangeMode", "yearRange"]);
        var _c = this.state,
            startValue = _c.startValue,
            endValue = _c.endValue,
            mode = _c.mode,
            startVisibleMonth = _c.startVisibleMonth,
            activePanel = _c.activePanel;
        // reset moment locale
        if (locale.momentLocale) {
            startValue && startValue.locale(locale.momentLocale);
            endValue && endValue.locale(locale.momentLocale);
            startVisibleMonth.locale(locale.momentLocale);
        }
        if (rtl) {
            others.dir = 'rtl';
        }
        var localeData = (0, utils_1.getLocaleData)(locale.format || {}, startVisibleMonth.localeData());
        var endVisibleMonth = startVisibleMonth.clone().add(1, 'months');
        var headerProps = {
            prefix: prefix,
            rtl: rtl,
            mode: mode,
            locale: locale,
            momentLocale: localeData,
            startVisibleMonth: startVisibleMonth,
            endVisibleMonth: endVisibleMonth,
            changeVisibleMonth: this.changeVisibleMonth,
            changeMode: this.changeMode,
            yearRange: yearRange,
            disableChangeMode: disableChangeMode
        };
        var tableProps = {
            prefix: prefix,
            value: startValue,
            startValue: startValue,
            endValue: endValue,
            mode: mode,
            locale: locale,
            momentLocale: localeData,
            showOtherMonth: showOtherMonth,
            today: this.today,
            disabledDate: disabledDate,
            dateCellRender: dateCellRender,
            monthCellRender: monthCellRender,
            yearCellRender: yearCellRender,
            changeMode: this.changeMode,
            changeVisibleMonth: this.changeVisibleMonth
        };
        var visibleMonths = {
            start: startVisibleMonth,
            end: endVisibleMonth
        };
        var visibleMonth = visibleMonths[activePanel];
        var header;
        var table;
        switch (mode) {
            case utils_1.CALENDAR_MODE_DATE:
                {
                    table = [react_1.default.createElement("div", { className: "".concat(prefix, "calendar-body-left"), key: "left-panel" }, react_1.default.createElement(date_table_1.default, tslib_1.__assign({ format: format }, tableProps, { visibleMonth: startVisibleMonth, onSelectDate: this.onSelectCell }))), react_1.default.createElement("div", { className: "".concat(prefix, "calendar-body-right"), key: "right-panel" }, react_1.default.createElement(date_table_1.default, tslib_1.__assign({ format: format }, tableProps, { visibleMonth: endVisibleMonth, onSelectDate: this.onSelectCell })))];
                    header = react_1.default.createElement(range_panel_header_1.default, tslib_1.__assign({}, headerProps, { goPrevYear: this.goPrevYear, goPrevMonth: this.goPrevMonth, goNextYear: this.goNextYear, goNextMonth: this.goNextMonth }));
                    break;
                }
            case utils_1.CALENDAR_MODE_MONTH:
                {
                    table = react_1.default.createElement(month_table_1.default, tslib_1.__assign({}, tableProps, { visibleMonth: visibleMonth, onSelectMonth: this.onSelectCell }));
                    header = react_1.default.createElement(month_panel_header_1.default, tslib_1.__assign({}, headerProps, { visibleMonth: visibleMonth, goPrevYear: this.goPrevYear, goNextYear: this.goNextYear }));
                    break;
                }
            case utils_1.CALENDAR_MODE_YEAR:
                {
                    table = react_1.default.createElement(year_table_1.default, tslib_1.__assign({}, tableProps, { rtl: rtl, visibleMonth: visibleMonth, onSelectYear: this.onSelectCell, goPrevDecade: this.goPrevDecade, goNextDecade: this.goNextDecade }));
                    header = react_1.default.createElement(year_panel_header_1.default, tslib_1.__assign({}, headerProps, { visibleMonth: visibleMonth, goPrevDecade: this.goPrevDecade, goNextDecade: this.goNextDecade }));
                    break;
                }
        }
        var classNames = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "calendar")] = true, _a["".concat(prefix, "calendar-range")] = true, _a), className);
        return react_1.default.createElement("div", tslib_1.__assign({}, util_1.obj.pickOthers(RangeCalendar.propTypes, others), { className: classNames }), header, react_1.default.createElement("div", { className: "".concat(prefix, "calendar-body") }, table));
    };
    RangeCalendar.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), {
        /**
         * 样式前缀
         */
        prefix: prop_types_1.default.string, rtl: prop_types_1.default.bool,
        /**
         * 默认的开始日期
         */
        defaultStartValue: utils_1.checkMomentObj,
        /**
         * 默认的结束日期
         */
        defaultEndValue: utils_1.checkMomentObj,
        /**
         * 开始日期（moment 对象）
         */
        startValue: utils_1.checkMomentObj,
        /**
         * 结束日期（moment 对象）
         */
        endValue: utils_1.checkMomentObj,
        // 面板模式
        mode: prop_types_1.default.oneOf(utils_1.CALENDAR_MODES),
        // 禁用更改面板模式，采用 dropdown 的方式切换显示日期 (暂不正式对外透出)
        disableChangeMode: prop_types_1.default.bool,
        // 日期值的格式（用于日期title显示的格式）
        format: prop_types_1.default.string, yearRange: prop_types_1.default.arrayOf(prop_types_1.default.number),
        /**
         * 是否显示非本月的日期
         */
        showOtherMonth: prop_types_1.default.bool,
        /**
         * 模板展示的月份（起始月份）
         */
        defaultVisibleMonth: prop_types_1.default.func,
        /**
         * 展现的月份变化时的回调
         * @param {Object} value 显示的月份 (moment 对象)
         * @param {String} reason 触发月份改变原因
         */
        onVisibleMonthChange: prop_types_1.default.func,
        /**
         * 不可选择的日期
         * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象
         * @param {String} view 当前视图类型，year: 年， month: 月, date: 日
         * @returns {Boolean}
         */
        disabledDate: prop_types_1.default.func,
        /**
         * 选择日期单元格时的回调
         * @param {Object} value 对应的日期值 (moment 对象)
         */
        onSelect: prop_types_1.default.func,
        /**
         * 自定义日期单元格渲染
         */
        dateCellRender: prop_types_1.default.func,
        /**
         * 自定义月份渲染函数
         * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象
         * @returns {ReactNode}
         */
        monthCellRender: prop_types_1.default.func, yearCellRender: prop_types_1.default.func, locale: prop_types_1.default.object, className: prop_types_1.default.string });
    RangeCalendar.defaultProps = {
        prefix: 'next-',
        rtl: false,
        mode: utils_1.CALENDAR_MODE_DATE,
        disableChangeMode: false,
        format: 'YYYY-MM-DD',
        dateCellRender: function dateCellRender(value) {
            return value.date();
        },
        onSelect: util_1.func.noop,
        onVisibleMonthChange: util_1.func.noop,
        locale: zh_cn_1.default.Calendar,
        showOtherMonth: false
    };
    return RangeCalendar;
}(react_1.default.Component);
exports.default = config_provider_1.default.config((0, react_lifecycles_compat_1.polyfill)(RangeCalendar), {
    componentName: 'Calendar'
});

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
/**
 * Card.BulletHeader
 * @order 2
 */
var CardBulletHeader = /** @class */function (_super) {
    tslib_1.__extends(CardBulletHeader, _super);
    function CardBulletHeader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardBulletHeader.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            title = _b.title,
            subTitle = _b.subTitle,
            extra = _b.extra,
            showTitleBullet = _b.showTitleBullet;
        if (!title) return null;
        var headCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "card-head")] = true, _a["".concat(prefix, "card-head-show-bullet")] = showTitleBullet, _a));
        var headExtra = extra ? react_1.default.createElement("div", { className: "".concat(prefix, "card-extra") }, extra) : null;
        return react_1.default.createElement("div", { className: headCls }, react_1.default.createElement("div", { className: "".concat(prefix, "card-head-main") }, react_1.default.createElement("div", { className: "".concat(prefix, "card-title") }, title, subTitle ? react_1.default.createElement("span", { className: "".concat(prefix, "card-subtitle") }, subTitle) : null), headExtra));
    };
    CardBulletHeader.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 卡片的标题
         */
        title: prop_types_1.default.node,
        /**
         * 卡片的副标题
         */
        subTitle: prop_types_1.default.node,
        /**
         * 是否显示标题的项目符号
         */
        showTitleBullet: prop_types_1.default.bool,
        /**
         * 标题区域的用户自定义内容
         */
        extra: prop_types_1.default.node
    };
    CardBulletHeader.defaultProps = {
        prefix: 'next-',
        showTitleBullet: true
    };
    return CardBulletHeader;
}(react_1.Component);
exports.default = config_provider_1.default.config(CardBulletHeader, {
    componentName: 'Card'
});

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var icon_1 = __webpack_require__(7);
var button_1 = __webpack_require__(14);
var config_provider_1 = __webpack_require__(5);
var zh_cn_1 = __webpack_require__(9);
/**
 * Card.CollapseContent
 * @order 3
 */
var CardCollapseContent = /** @class */function (_super) {
    tslib_1.__extends(CardCollapseContent, _super);
    function CardCollapseContent(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.handleToggle = function () {
            _this.setState(function (prevState) {
                return {
                    expand: !prevState.expand
                };
            });
        };
        _this._contentRefHandler = function (ref) {
            _this.content = ref;
        };
        _this.saveFooter = function (ref) {
            _this.footer = ref;
        };
        _this.state = {
            needMore: false,
            expand: false,
            contentHeight: 'auto'
        };
        return _this;
    }
    CardCollapseContent.prototype.componentDidMount = function () {
        this._setNeedMore();
        this._setContentHeight();
    };
    CardCollapseContent.prototype.componentDidUpdate = function () {
        this._setContentHeight();
    };
    // 是否展示 More 按钮
    CardCollapseContent.prototype._setNeedMore = function () {
        var contentHeight = this.props.contentHeight;
        var childrenHeight = this._getNodeChildrenHeight(this.content);
        this.setState({
            needMore: contentHeight !== 'auto' && childrenHeight > contentHeight
        });
    };
    // 设置 Body 的高度
    CardCollapseContent.prototype._setContentHeight = function () {
        if (this.props.contentHeight === 'auto') {
            this.content.style.height = 'auto';
            return;
        }
        if (this.state.expand) {
            var childrenHeight = this._getNodeChildrenHeight(this.content);
            this.content.style.height = "".concat(childrenHeight, "px"); // get the real height
        } else {
            var el = react_dom_1.default.findDOMNode(this.footer);
            var height = this.props.contentHeight;
            if (el) {
                height = height - el.getBoundingClientRect().height;
            }
            this.content.style.height = "".concat(height, "px");
        }
    };
    CardCollapseContent.prototype._getNodeChildrenHeight = function (node) {
        if (!node) {
            return 0;
        }
        var contentChildNodes = node.childNodes;
        var length = contentChildNodes.length;
        if (!length) {
            return 0;
        }
        var lastNode = contentChildNodes[length - 1];
        return lastNode.offsetTop + lastNode.offsetHeight;
    };
    CardCollapseContent.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            children = _a.children,
            locale = _a.locale;
        var _b = this.state,
            needMore = _b.needMore,
            expand = _b.expand;
        return react_1.default.createElement("div", { className: "".concat(prefix, "card-body") }, react_1.default.createElement("div", { className: "".concat(prefix, "card-content"), ref: this._contentRefHandler }, children), needMore ? react_1.default.createElement("div", { className: "".concat(prefix, "card-footer"), ref: this.saveFooter, onClick: this.handleToggle }, react_1.default.createElement(button_1.default, { text: true, type: "primary" }, expand ? locale.fold : locale.expand, react_1.default.createElement(icon_1.default, { type: "arrow-down", className: expand ? 'expand' : '' }))) : null);
    };
    CardCollapseContent.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 内容区域的固定高度
         */
        contentHeight: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        locale: prop_types_1.default.object,
        children: prop_types_1.default.node
    };
    CardCollapseContent.defaultProps = {
        prefix: 'next-',
        contentHeight: 120,
        locale: zh_cn_1.default.Card
    };
    return CardCollapseContent;
}(react_1.Component);
exports.default = config_provider_1.default.config(CardCollapseContent, {
    componentName: 'Card'
});

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var warning = util_1.log.warning;
var MEDIA_COMPONENTS = ['video', 'audio', 'picture', 'iframe', 'img'];
/**
 * Card.Media
 * @order 1
 */
var CardMedia = /** @class */function (_super) {
    tslib_1.__extends(CardMedia, _super);
    function CardMedia() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardMedia.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            style = _a.style,
            className = _a.className,
            Component = _a.component,
            image = _a.image,
            src = _a.src,
            others = tslib_1.__rest(_a, ["prefix", "style", "className", "component", "image", "src"]);
        if (!('children' in others || Boolean(image || src))) {
            warning('either `children`, `image` or `src` prop must be specified.');
        }
        var isMediaComponent = MEDIA_COMPONENTS.indexOf(Component) !== -1;
        var composedStyle = !isMediaComponent && image ? tslib_1.__assign({ backgroundImage: "url(\"".concat(image, "\")") }, style) : style;
        return react_1.default.createElement(Component, tslib_1.__assign({}, others, { style: composedStyle, className: (0, classnames_1.default)("".concat(prefix, "card-media"), className), src: isMediaComponent ? image || src : undefined }));
    };
    CardMedia.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 设置标签类型
         */
        component: prop_types_1.default.elementType,
        /**
         * 背景图片地址
         */
        image: prop_types_1.default.string,
        /**
         * 媒体源文件地址
         */
        src: prop_types_1.default.string,
        style: prop_types_1.default.object,
        className: prop_types_1.default.string
    };
    CardMedia.defaultProps = {
        prefix: 'next-',
        component: 'div',
        style: {}
    };
    return CardMedia;
}(react_1.Component);
exports.default = config_provider_1.default.config(CardMedia);

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
/**
 * Card.Actions
 * @order 5
 */
var CardActions = /** @class */function (_super) {
    tslib_1.__extends(CardActions, _super);
    function CardActions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardActions.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            Component = _a.component,
            className = _a.className,
            others = tslib_1.__rest(_a, ["prefix", "component", "className"]);
        return react_1.default.createElement(Component, tslib_1.__assign({}, others, { className: (0, classnames_1.default)("".concat(prefix, "card-actions"), className) }));
    };
    CardActions.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 设置标签类型
         */
        component: prop_types_1.default.elementType,
        className: prop_types_1.default.string
    };
    CardActions.defaultProps = {
        prefix: 'next-',
        component: 'div'
    };
    return CardActions;
}(react_1.Component);
exports.default = config_provider_1.default.config(CardActions);

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var cascader_1 = __webpack_require__(315);
exports.default = config_provider_1.default.config(cascader_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('expandTrigger' in props) {
            deprecated('expandTrigger', 'expandTriggerType', 'Cascader');
            var expandTrigger = props.expandTrigger,
                others = tslib_1.__rest(props, ["expandTrigger"]);
            props = tslib_1.__assign({ expandTriggerType: expandTrigger }, others);
        }
        if ('showItemCount' in props) {
            deprecated('showItemCount', 'listStyle | listClassName', 'Cascader');
        }
        if ('labelWidth' in props) {
            deprecated('labelWidth', 'listStyle | listClassName', 'Cascader');
        }
        return props;
    },
    exportNames: ['setFocusValue']
});

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  // Don't return `map.set` because it's not chainable in IE 11.
  map.set(pair[0], pair[1]);
  return map;
}

/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  // Don't return `set.add` because it's not chainable in IE 11.
  set.add(value);
  return set;
}

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array ? array.length : 0;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    Symbol = root.Symbol,
    Uint8Array = root.Uint8Array,
    getPrototype = overArg(Object.getPrototypeOf, Object),
    objectCreate = Object.create,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    splice = arrayProto.splice;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols,
    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
    nativeKeys = overArg(Object.keys, Object);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView'),
    Map = getNative(root, 'Map'),
    Promise = getNative(root, 'Promise'),
    Set = getNative(root, 'Set'),
    WeakMap = getNative(root, 'WeakMap'),
    nativeCreate = getNative(Object, 'create');

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  this.__data__ = new ListCache(entries);
}

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  return this.__data__['delete'](key);
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var cache = this.__data__;
  if (cache instanceof ListCache) {
    var pairs = cache.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      return this;
    }
    cache = this.__data__ = new MapCache(pairs);
  }
  cache.set(key, value);
  return this;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    object[key] = value;
  }
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @param {boolean} [isFull] Specify a clone including symbols.
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
  var result;
  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      if (isHostObject(value)) {
        return object ? value : {};
      }
      result = initCloneObject(isFunc ? {} : value);
      if (!isDeep) {
        return copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, baseClone, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (!isArr) {
    var props = isFull ? getAllKeys(value) : keys(value);
  }
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
  });
  return result;
}

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

/**
 * The base implementation of `getTag`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  return objectToString.call(value);
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var result = new buffer.constructor(buffer.length);
  buffer.copy(result);
  return result;
}

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
  return arrayReduce(array, addMapEntry, new map.constructor);
}

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
  return arrayReduce(array, addSetEntry, new set.constructor);
}

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    assignValue(object, key, newValue === undefined ? source[key] : newValue);
  }
  return object;
}

/**
 * Copies own symbol properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Creates an array of the own enumerable symbol properties of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = objectToString.call(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : undefined;

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, cloneFunc, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object, isDeep, cloneFunc);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object, isDeep, cloneFunc);

    case symbolTag:
      return cloneSymbol(object);
  }
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, true, true);
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = cloneDeep;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(110), __webpack_require__(316)(module)))

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
/** Collapse.Panel */
var Panel = /** @class */function (_super) {
    tslib_1.__extends(Panel, _super);
    function Panel() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.onKeyDown = function (e) {
            var keyCode = e.keyCode;
            if (keyCode === util_1.KEYCODE.SPACE) {
                var onClick = _this.props.onClick;
                e.preventDefault();
                onClick && onClick(e);
            }
        };
        return _this;
    }
    Panel.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            title = _c.title,
            children = _c.children,
            className = _c.className,
            isExpanded = _c.isExpanded,
            disabled = _c.disabled,
            style = _c.style,
            prefix = _c.prefix,
            onClick = _c.onClick,
            id = _c.id,
            others = tslib_1.__rest(_c, ["title", "children", "className", "isExpanded", "disabled", "style", "prefix", "onClick", "id"]);
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "collapse-panel")] = true, _a["".concat(prefix, "collapse-panel-hidden")] = !isExpanded, _a["".concat(prefix, "collapse-panel-expanded")] = isExpanded, _a["".concat(prefix, "collapse-panel-disabled")] = disabled, _a[className] = className, _a));
        var iconCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "collapse-panel-icon")] = true, _b["".concat(prefix, "collapse-panel-icon-expanded")] = isExpanded, _b));
        // 为了无障碍 需要添加两个id
        var headingId = id ? "".concat(id, "-heading") : undefined;
        var regionId = id ? "".concat(id, "-region") : undefined;
        return react_1.default.createElement("div", tslib_1.__assign({ className: cls, style: style, id: id }, others), react_1.default.createElement("div", { id: headingId, className: "".concat(prefix, "collapse-panel-title"), onClick: onClick, onKeyDown: this.onKeyDown, tabIndex: "0", "aria-disabled": disabled, "aria-expanded": isExpanded, "aria-controls": regionId, role: "button" }, react_1.default.createElement(icon_1.default, { type: "arrow-right", className: iconCls, "aria-hidden": "true" }), title), react_1.default.createElement("div", { className: "".concat(prefix, "collapse-panel-content"), role: "region", id: regionId }, children));
    };
    Panel.propTypes = {
        /**
         * 样式类名的品牌前缀
         */
        prefix: prop_types_1.default.string,
        /**
         * 子组件接受行内样式
         */
        style: prop_types_1.default.object,
        children: prop_types_1.default.any,
        isExpanded: prop_types_1.default.bool,
        /**
         * 是否禁止用户操作
         */
        disabled: prop_types_1.default.bool,
        /**
         * 标题
         */
        title: prop_types_1.default.node,
        /**
         * 扩展class
         */
        className: prop_types_1.default.string,
        onClick: prop_types_1.default.func,
        id: prop_types_1.default.string
    };
    Panel.defaultProps = {
        prefix: 'next-',
        isExpanded: false,
        onClick: util_1.func.noop
    };
    Panel.isNextPanel = true; //
    return Panel;
}(react_1.default.Component);
exports.default = config_provider_1.default.config(Panel);

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var moment_1 = __webpack_require__(16);
var button_1 = __webpack_require__(14);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(25);
var PanelFooter = /** @class */function (_super) {
    tslib_1.__extends(PanelFooter, _super);
    function PanelFooter() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.changePanel = function () {
            var _a;
            var targetPanel = (_a = {}, _a[util_2.PANEL.DATE] = util_2.PANEL.TIME, _a[util_2.PANEL.TIME] = util_2.PANEL.DATE, _a)[_this.props.panel];
            _this.props.onPanelChange(targetPanel);
        };
        _this.createRanges = function (ranges) {
            if (!ranges || ranges.length === 0) return null;
            var _a = _this.props,
                onOk = _a.onOk,
                prefix = _a.prefix;
            return react_1.default.createElement("div", { className: "".concat(prefix, "date-picker-panel-tools") }, ranges.map(function (_a) {
                var label = _a.label,
                    _b = _a.value,
                    value = _b === void 0 ? [] : _b,
                    onChange = _a.onChange;
                var handleClick = function handleClick() {
                    var momentValue = value.map(function (v) {
                        return (0, moment_1.default)(v);
                    });
                    onChange(momentValue);
                    onOk(momentValue);
                };
                return react_1.default.createElement(button_1.default, { key: label, text: true, size: "small", type: "primary", onClick: handleClick }, label);
            }));
        };
        return _this;
    }
    PanelFooter.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            locale = _b.locale,
            panel = _b.panel,
            value = _b.value,
            ranges = _b.ranges,
            // 兼容0.x range 属性
        disabledOk = _b.disabledOk,
            onPanelChange = _b.onPanelChange,
            onOk = _b.onOk;
        var panelBtnLabel = (_a = {}, _a[util_2.PANEL.DATE] = locale.selectTime, _a[util_2.PANEL.TIME] = locale.selectDate, _a)[panel];
        var sharedBtnProps = {
            size: 'small',
            type: 'primary',
            disabled: !value
        };
        var onClick = function onClick() {
            return onOk();
        };
        return react_1.default.createElement("div", { className: "".concat(prefix, "date-picker-panel-footer") }, this.createRanges(ranges), onPanelChange ? react_1.default.createElement(button_1.default, tslib_1.__assign({}, sharedBtnProps, { text: true, onClick: this.changePanel }), panelBtnLabel) : null, react_1.default.createElement(button_1.default, tslib_1.__assign({}, sharedBtnProps, { disabled: disabledOk || !value, onClick: onClick }), locale.ok));
    };
    PanelFooter.defaultProps = {
        // onPanelChange: func.noop,
        onOk: util_1.func.noop
    };
    return PanelFooter;
}(react_1.default.PureComponent);
exports.default = PanelFooter;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var overlay_1 = __webpack_require__(12);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var inner_1 = __webpack_require__(90);
var noop = function noop() {};
var limitTabRange = util_1.focus.limitTabRange;
var bindCtx = util_1.func.bindCtx;
var pickOthers = util_1.obj.pickOthers;
var getStyle = util_1.dom.getStyle,
    setStyle = util_1.dom.setStyle;
// [fix issue #1609](https://github.com/alibaba-fusion/next/issues/1609)
// https://stackoverflow.com/questions/19717907/getcomputedstyle-reporting-different-heights-between-chrome-safari-firefox-and-i
function _getSize(dom, name) {
    var boxSizing = getStyle(dom, 'boxSizing');
    if (util_1.env.ieVersion && ['width', 'height'].indexOf(name) !== -1 && boxSizing === 'border-box') {
        return parseFloat(dom.getBoundingClientRect()[name].toFixed(1));
    } else {
        return getStyle(dom, name);
    }
}
/**
 * Dialog
 */
var Dialog = /** @class */function (_super) {
    tslib_1.__extends(Dialog, _super);
    function Dialog(props, context) {
        var _this = _super.call(this, props, context) || this;
        bindCtx(_this, ['onKeyDown', 'beforePosition', 'adjustPosition', 'getOverlayRef']);
        return _this;
    }
    Dialog.prototype.componentDidMount = function () {
        util_1.events.on(document, 'keydown', this.onKeyDown);
        if (!this.useCSSToPosition()) {
            this.adjustPosition();
        }
    };
    Dialog.prototype.componentWillUnmount = function () {
        util_1.events.off(document, 'keydown', this.onKeyDown);
    };
    Dialog.prototype.useCSSToPosition = function () {
        var _a = this.props,
            align = _a.align,
            isFullScreen = _a.isFullScreen;
        return align === 'cc cc' && isFullScreen;
    };
    Dialog.prototype.onKeyDown = function (e) {
        if (this.overlay) {
            var node = this.getInnerNode();
            if (node) {
                limitTabRange(node, e);
            }
        }
    };
    Dialog.prototype.beforePosition = function () {
        if (this.props.visible && this.overlay) {
            var inner = this.getInner();
            if (inner) {
                var node = this.getInnerNode();
                if (this._lastDialogHeight !== _getSize(node, 'height')) {
                    this.revertSize(inner.bodyNode);
                }
            }
        }
    };
    Dialog.prototype.adjustPosition = function () {
        if (this.props.visible && this.overlay) {
            var inner = this.getInner();
            if (inner) {
                var node = this.getInnerNode();
                var top_1 = getStyle(node, 'top');
                var minMargin = this.props.minMargin;
                if (top_1 < minMargin) {
                    top_1 = minMargin;
                    setStyle(node, 'top', "".concat(minMargin, "px"));
                }
                var height = _getSize(node, 'height');
                var viewportHeight = window.innerHeight || document.documentElement.clientHeight;
                if (viewportHeight < height + top_1 * 2 - 1 || // 分辨率和精确度的原因 高度计算的时候 可能会有1px内的偏差
                this.props.height) {
                    this.adjustSize(inner, node, Math.min(height, viewportHeight - top_1 * 2));
                } else {
                    this.revertSize(inner.bodyNode);
                }
                this._lastDialogHeight = height;
            }
        }
    };
    Dialog.prototype.adjustSize = function (inner, node, expectHeight) {
        var headerNode = inner.headerNode,
            bodyNode = inner.bodyNode,
            footerNode = inner.footerNode;
        var _a = tslib_1.__read([headerNode, footerNode].map(function (node) {
            return node ? _getSize(node, 'height') : 0;
        }), 2),
            headerHeight = _a[0],
            footerHeight = _a[1];
        var padding = ['padding-top', 'padding-bottom'].reduce(function (sum, attr) {
            return sum + getStyle(node, attr);
        }, 0);
        var maxBodyHeight = expectHeight - headerHeight - footerHeight - padding;
        if (maxBodyHeight < 0) {
            maxBodyHeight = 1;
        }
        if (bodyNode) {
            this.dialogBodyStyleMaxHeight = bodyNode.style.maxHeight;
            this.dialogBodyStyleOverflowY = bodyNode.style.overflowY;
            setStyle(bodyNode, {
                'max-height': "".concat(maxBodyHeight, "px"),
                'overflow-y': 'auto'
            });
        }
    };
    Dialog.prototype.revertSize = function (bodyNode) {
        setStyle(bodyNode, {
            'max-height': this.dialogBodyStyleMaxHeight,
            'overflow-y': this.dialogBodyStyleOverflowY
        });
    };
    Dialog.prototype.mapcloseableToConfig = function (closeable) {
        return ['esc', 'close', 'mask'].reduce(function (ret, option) {
            var key = option.charAt(0).toUpperCase() + option.substr(1);
            var value = typeof closeable === 'boolean' ? closeable : closeable.split(',').indexOf(option) > -1;
            if (option === 'esc' || option === 'mask') {
                ret["canCloseBy".concat(key)] = value;
            } else {
                ret["canCloseBy".concat(key, "Click")] = value;
            }
            return ret;
        }, {});
    };
    Dialog.prototype.getOverlayRef = function (ref) {
        this.overlay = ref;
    };
    Dialog.prototype.getInner = function () {
        return this.overlay.getInstance().getContent();
    };
    Dialog.prototype.getInnerNode = function () {
        return this.overlay.getInstance().getContentNode();
    };
    Dialog.prototype.renderInner = function (closeable) {
        var _a = this.props,
            prefix = _a.prefix,
            className = _a.className,
            title = _a.title,
            children = _a.children,
            footer = _a.footer,
            footerAlign = _a.footerAlign,
            footerActions = _a.footerActions,
            onOk = _a.onOk,
            onCancel = _a.onCancel,
            okProps = _a.okProps,
            cancelProps = _a.cancelProps,
            onClose = _a.onClose,
            locale = _a.locale,
            visible = _a.visible,
            rtl = _a.rtl,
            height = _a.height,
            noPadding = _a.noPadding;
        var others = pickOthers(Object.keys(Dialog.propTypes), this.props);
        return react_1.default.createElement(inner_1.default, tslib_1.__assign({ prefix: prefix, className: className, title: title, footer: footer, footerAlign: footerAlign, footerActions: footerActions, onOk: visible ? onOk : noop, onCancel: visible ? onCancel : noop, okProps: okProps, cancelProps: cancelProps, locale: locale, closeable: closeable, rtl: rtl, onClose: onClose.bind(this, 'closeClick'), height: height, noPadding: noPadding }, others), children);
    };
    Dialog.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            visible = _a.visible,
            hasMask = _a.hasMask,
            animation = _a.animation,
            autoFocus = _a.autoFocus,
            closeable = _a.closeable,
            closeMode = _a.closeMode,
            onClose = _a.onClose,
            afterClose = _a.afterClose,
            shouldUpdatePosition = _a.shouldUpdatePosition,
            align = _a.align,
            popupContainer = _a.popupContainer,
            cache = _a.cache,
            overlayProps = _a.overlayProps,
            rtl = _a.rtl;
        var useCSS = this.useCSSToPosition();
        var newCloseable = 'closeMode' in this.props ? Array.isArray(closeMode) ? closeMode.join(',') : closeMode : closeable;
        var _b = this.mapcloseableToConfig(newCloseable),
            canCloseByCloseClick = _b.canCloseByCloseClick,
            closeConfig = tslib_1.__rest(_b, ["canCloseByCloseClick"]);
        var newOverlayProps = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ disableScroll: true, container: popupContainer, cache: cache }, overlayProps), { prefix: prefix, visible: visible, animation: animation, hasMask: hasMask, autoFocus: autoFocus, afterClose: afterClose }), closeConfig), { canCloseByOutSideClick: false, align: useCSS ? false : align, onRequestClose: onClose, needAdjust: false, ref: this.getOverlayRef, rtl: rtl, maskClass: useCSS ? "".concat(prefix, "dialog-container") : '', isChildrenInMask: useCSS && hasMask });
        if (!useCSS) {
            newOverlayProps.beforePosition = this.beforePosition;
            newOverlayProps.onPosition = this.adjustPosition;
            newOverlayProps.shouldUpdatePosition = shouldUpdatePosition;
        }
        var inner = this.renderInner(canCloseByCloseClick);
        // useCSS && hasMask : isFullScreen 并且 有mask的模式下，为了解决 next-overlay-backdrop 覆盖mask，使得点击mask关闭页面的功能不生效的问题，需要开启 Overlay 的 isChildrenInMask 功能，并且把 next-dialog-container 放到 next-overlay-backdrop上
        // useCSS && !hasMask : isFullScreen 并且 没有mask的情况下，需要关闭 isChildrenInMask 功能，以防止children不渲染
        // 其他模式下维持 mask 与 children 同级的关系
        return react_1.default.createElement(overlay_1.default, tslib_1.__assign({}, newOverlayProps), useCSS && !hasMask ? react_1.default.createElement("div", { className: "".concat(prefix, "dialog-container"), dir: rtl ? 'rtl' : undefined }, inner) : inner);
    };
    Dialog.propTypes = {
        prefix: prop_types_1.default.string,
        pure: prop_types_1.default.bool,
        rtl: prop_types_1.default.bool,
        className: prop_types_1.default.string,
        /**
         * 是否显示
         */
        visible: prop_types_1.default.bool,
        /**
         * 标题
         */
        title: prop_types_1.default.node,
        /**
         * 内容
         */
        children: prop_types_1.default.node,
        /**
         * 底部内容，设置为 false，则不进行显示
         * @default [<Button type="primary">确定</Button>, <Button>取消</Button>]
         */
        footer: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.node]),
        /**
         * 底部按钮的对齐方式
         */
        footerAlign: prop_types_1.default.oneOf(['left', 'center', 'right']),
        /**
         * 指定确定按钮和取消按钮是否存在以及如何排列,<br><br>**可选值**：
         * ['ok', 'cancel']（确认取消按钮同时存在，确认按钮在左）
         * ['cancel', 'ok']（确认取消按钮同时存在，确认按钮在右）
         * ['ok']（只存在确认按钮）
         * ['cancel']（只存在取消按钮）
         */
        footerActions: prop_types_1.default.array,
        /**
         * 在点击确定按钮时触发的回调函数
         * @param {Object} event 点击事件对象
         */
        onOk: prop_types_1.default.func,
        /**
         * 在点击取消/关闭按钮时触发的回调函数
         * @param {Object} event 点击事件对象, event.triggerType=esc|closeIcon 可区分点击来源
         */
        onCancel: prop_types_1.default.func,
        /**
         * 应用于确定按钮的属性对象
         */
        okProps: prop_types_1.default.object,
        /**
         * 应用于取消按钮的属性对象
         */
        cancelProps: prop_types_1.default.object,
        /**
         * [推荐]1.21.x 支持控制对话框关闭的方式，值可以为字符串或者数组，其中字符串、数组均为以下值的枚举：
         * **close** 表示点击关闭按钮可以关闭对话框
         * **mask** 表示点击遮罩区域可以关闭对话框
         * **esc** 表示按下 esc 键可以关闭对话框
         * 如 'close' 或 ['close','esc','mask'], []
         * @version 1.21
         */
        closeMode: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.oneOf(['close', 'mask', 'esc'])), prop_types_1.default.oneOf(['close', 'mask', 'esc'])]),
        /**
         * 隐藏时是否保留子节点，不销毁 （低版本通过 overlayProps 实现）
         * @version 1.23
         */
        cache: prop_types_1.default.bool,
        /**
         * 对话框关闭后触发的回调函数, 如果有动画，则在动画结束后触发
         */
        afterClose: prop_types_1.default.func,
        /**
         * 是否显示遮罩
         */
        hasMask: prop_types_1.default.bool,
        /**
         * 显示隐藏时动画的播放方式，支持 { in: 'enter-class', out: 'leave-class' } 的对象参数，如果设置为 false，则不播放动画。 请参考 Animate 组件的文档获取可用的动画名
         * @default { in: 'expandInDown', out: 'expandOutUp' }
         */
        animation: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.bool]),
        /**
         * 对话框弹出时是否自动获得焦点
         */
        autoFocus: prop_types_1.default.bool,
        /**
         * [v2废弃] 透传到弹层组件的属性对象
         */
        overlayProps: prop_types_1.default.object,
        /**
         * 自定义国际化文案对象
         * @property {String} ok 确认按钮文案
         * @property {String} cancel 取消按钮文案
         */
        locale: prop_types_1.default.object,
        // Do not remove this, it's for <ConfigProvider popupContainer={} />
        // see https://github.com/alibaba-fusion/next/issues/1508
        /**
         * 自定义弹窗挂载位置
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 对话框的高度样式属性
         */
        height: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        /**
         * 开启 v2 版本弹窗
         */
        v2: prop_types_1.default.bool,
        /**
         * [v2] 弹窗宽度
         * @version 1.25
         */
        width: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        /**
         * [v2] 弹窗上边距。默认 100，设置 centered=true 后默认 40
         * @version 1.25
         */
        top: prop_types_1.default.number,
        /**
         * [v2] 弹窗下边距
         * @version 1.25
         */
        bottom: prop_types_1.default.number,
        /**
         * [v2] 定制关闭按钮 icon
         * @version 1.25
         */
        closeIcon: prop_types_1.default.node,
        /**
         * [v2] 弹窗居中对齐
         * @version 1.25
         */
        centered: prop_types_1.default.bool,
        /**
         * [v2] 对话框高度超过浏览器视口高度时，对话框是否展示滚动条。关闭此功后对话框会随高度撑开页面。
         * @version 1.25
         */
        overflowScroll: prop_types_1.default.bool,
        /**
         * [v2] 最外包裹层 className
         * @version 1.26
         */
        wrapperClassName: prop_types_1.default.string,
        /**
         * [废弃]同closeMode, 控制对话框关闭的方式，值可以为字符串或者布尔值，其中字符串是由以下值组成：
         * **close** 表示点击关闭按钮可以关闭对话框
         * **mask** 表示点击遮罩区域可以关闭对话框
         * **esc** 表示按下 esc 键可以关闭对话框
         * 如 'close' 或 'close,esc,mask'
         * 如果设置为 true，则以上关闭方式全部生效
         * 如果设置为 false，则以上关闭方式全部失效
         */
        closeable: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.bool]),
        /**
         * 点击对话框关闭按钮时触发的回调函数
         * @param {String} trigger 关闭触发行为的描述字符串
         * @param {Object} event 关闭时事件对象
         */
        onClose: prop_types_1.default.func,
        /**
         * [v2废弃] 对话框对齐方式, 具体见Overlay文档
         */
        align: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.bool]),
        /**
         * [v2废弃] 是否撑开页面。 v2 改用 overflowScroll
         */
        isFullScreen: prop_types_1.default.bool,
        /**
         * [v2废弃] 是否在对话框重新渲染时及时更新对话框位置，一般用于对话框高度变化后依然能保证原来的对齐方式
         */
        shouldUpdatePosition: prop_types_1.default.bool,
        /**
         * [v2废弃] 对话框距离浏览器顶部和底部的最小间距，align 被设置为 'cc cc' 并且 isFullScreen 被设置为 true 时不生效
         */
        minMargin: prop_types_1.default.number,
        /**
         * 去除body内间距
         * @version 1.26
         */
        noPadding: prop_types_1.default.bool
    };
    Dialog.defaultProps = {
        prefix: 'next-',
        pure: false,
        visible: false,
        footerAlign: 'right',
        footerActions: ['ok', 'cancel'],
        onOk: noop,
        onCancel: noop,
        cache: false,
        okProps: {},
        cancelProps: {},
        closeable: 'esc,close',
        onClose: noop,
        afterClose: noop,
        centered: false,
        hasMask: true,
        animation: {
            in: 'fadeInUp',
            out: 'fadeOutUp'
        },
        autoFocus: false,
        align: 'cc cc',
        isFullScreen: false,
        overflowScroll: true,
        shouldUpdatePosition: false,
        minMargin: 40,
        bottom: 40,
        overlayProps: {},
        locale: zh_cn_1.default.Dialog,
        noPadding: false
    };
    return Dialog;
}(react_1.Component);
exports.default = Dialog;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
/* istanbul ignore file */
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var classnames_1 = __webpack_require__(3);
var overlay_1 = __webpack_require__(58);
var inner_1 = __webpack_require__(90);
var animate_1 = __webpack_require__(17);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var scroll_locker_1 = __webpack_require__(168);
var OverlayContext = overlay_1.default.OverlayContext;
var noop = util_1.func.noop;
var Dialog = function Dialog(props) {
    var _a, _b, _c;
    if (!react_1.useState || !react_1.useRef || !react_1.useEffect) {
        util_1.log.warning('need react version > 16.8.0');
        return null;
    }
    var _d = props.prefix,
        prefix = _d === void 0 ? 'next-' : _d,
        _e = props.afterClose,
        afterClose = _e === void 0 ? noop : _e,
        _f = props.hasMask,
        hasMask = _f === void 0 ? true : _f,
        _g = props.autoFocus,
        autoFocus = _g === void 0 ? false : _g,
        className = props.className,
        title = props.title,
        children = props.children,
        footer = props.footer,
        footerAlign = props.footerAlign,
        footerActions = props.footerActions,
        _h = props.onOk,
        onOk = _h === void 0 ? noop : _h,
        onCancel = props.onCancel,
        okProps = props.okProps,
        cancelProps = props.cancelProps,
        _j = props.locale,
        locale = _j === void 0 ? zh_cn_1.default.Dialog : _j,
        rtl = props.rtl,
        pvisible = props.visible,
        _k = props.closeMode,
        closeMode = _k === void 0 ? ['close', 'esc'] : _k,
        closeIcon = props.closeIcon,
        _l = props.animation,
        animation = _l === void 0 ? { in: 'fadeInUp', out: 'fadeOutUp' } : _l,
        cache = props.cache,
        wrapperStyle = props.wrapperStyle,
        _m = props.popupContainer,
        popupContainer = _m === void 0 ? document.body : _m,
        dialogRender = props.dialogRender,
        centered = props.centered,
        _o = props.top,
        top = _o === void 0 ? centered ? 40 : 100 : _o,
        _p = props.bottom,
        bottom = _p === void 0 ? 40 : _p,
        _q = props.width,
        width = _q === void 0 ? 520 : _q,
        height = props.height,
        isFullScreen = props.isFullScreen,
        _r = props.overflowScroll,
        overflowScroll = _r === void 0 ? !isFullScreen : _r,
        minMargin = props.minMargin,
        onClose = props.onClose,
        style = props.style,
        wrapperClassName = props.wrapperClassName,
        others = tslib_1.__rest(props, ["prefix", "afterClose", "hasMask", "autoFocus", "className", "title", "children", "footer", "footerAlign", "footerActions", "onOk", "onCancel", "okProps", "cancelProps", "locale", "rtl", "visible", "closeMode", "closeIcon", "animation", "cache", "wrapperStyle", "popupContainer", "dialogRender", "centered", "top", "bottom", "width", "height", "isFullScreen", "overflowScroll", "minMargin", "onClose", "style", "wrapperClassName"]);
    if ('isFullScreen' in props) {
        util_1.log.deprecated('isFullScreen', 'overflowScroll', 'Dialog v2');
    }
    if ('minMargin' in props) {
        util_1.log.deprecated('minMargin', 'top/bottom', 'Dialog v2');
    }
    var _s = tslib_1.__read((0, react_1.useState)(pvisible || false), 2),
        firstVisible = _s[0],
        setFirst = _s[1];
    var _t = tslib_1.__read((0, react_1.useState)(pvisible), 2),
        visible = _t[0],
        setVisible = _t[1];
    var getContainer = typeof popupContainer === 'string' ? function () {
        return document.getElementById(popupContainer);
    } : typeof popupContainer !== 'function' ? function () {
        return popupContainer;
    } : popupContainer;
    var _u = tslib_1.__read((0, react_1.useState)(getContainer()), 2),
        container = _u[0],
        setContainer = _u[1];
    var dialogRef = (0, react_1.useRef)(null);
    var wrapperRef = (0, react_1.useRef)(null);
    var lastFocus = (0, react_1.useRef)(null);
    var locker = (0, react_1.useRef)(null);
    var _v = tslib_1.__read((0, react_1.useState)((0, util_1.guid)()), 1),
        uuid = _v[0];
    var _w = (0, react_1.useContext)(OverlayContext),
        setVisibleOverlayToParent = _w.setVisibleOverlayToParent,
        otherContext = tslib_1.__rest(_w, ["setVisibleOverlayToParent"]);
    var childIDMap = (0, react_1.useRef)(new Map());
    var isAnimationEnd = (0, react_1.useRef)(false);
    var _x = tslib_1.__read((0, react_1.useState)(), 2),
        forceUpdate = _x[1];
    var markAnimationEnd = function markAnimationEnd(state) {
        isAnimationEnd.current = state;
        forceUpdate({});
    };
    var canCloseByEsc = false;
    var canCloseByMask = false;
    var closeable = false;
    var closeModeArray = Array.isArray(closeMode) ? closeMode : [closeMode];
    closeModeArray.forEach(function (mode) {
        switch (mode) {
            case 'esc':
                canCloseByEsc = true;
                break;
            case 'mask':
                canCloseByMask = true;
                break;
            case 'close':
                closeable = true;
                break;
        }
    });
    // visible 受控
    (0, react_1.useEffect)(function () {
        if ('visible' in props) {
            setVisible(pvisible);
        }
    }, [pvisible]);
    // 打开遮罩后 document.body 滚动处理
    (0, react_1.useEffect)(function () {
        if (visible && hasMask) {
            var style_1 = {
                overflow: 'hidden'
            };
            if (util_1.dom.hasScroll(document.body)) {
                var scrollWidth = util_1.dom.scrollbar().width;
                if (scrollWidth) {
                    style_1.paddingRight = "".concat(util_1.dom.getStyle(document.body, 'paddingRight') + util_1.dom.scrollbar().width, "px");
                }
            }
            locker.current = scroll_locker_1.default.lock(document.body, style_1);
        }
    }, [visible && hasMask]);
    var handleClose = function handleClose(targetType, e) {
        setVisibleOverlayToParent(uuid, null);
        typeof onClose === 'function' && onClose(targetType, e);
    };
    var keydownEvent = function keydownEvent(e) {
        if (e.keyCode === 27 && canCloseByEsc && !childIDMap.current.size) {
            handleClose('esc', e);
        }
    };
    // esc 键盘事件处理
    (0, react_1.useEffect)(function () {
        if (visible && canCloseByEsc) {
            document.body.addEventListener('keydown', keydownEvent, false);
            return function () {
                document.body.removeEventListener('keydown', keydownEvent, false);
            };
        }
    }, [visible && canCloseByEsc]);
    // 优化: 第一次加载并且 visible=false 的情况不挂载弹窗
    (0, react_1.useEffect)(function () {
        !firstVisible && visible && setFirst(true);
    }, [visible]);
    // container 异步加载情况
    (0, react_1.useEffect)(function () {
        if (!container) {
            setTimeout(function () {
                setContainer(getContainer());
            });
        }
    }, [container]);
    var handleExited = function handleExited() {
        if (!isAnimationEnd.current) {
            markAnimationEnd(true);
            util_1.dom.setStyle(wrapperRef.current, 'display', 'none');
            scroll_locker_1.default.unlock(document.body, locker.current);
            if (autoFocus && lastFocus.current) {
                try {
                    lastFocus.current.focus();
                } finally {
                    // ignore ...
                }
                lastFocus.current = null;
            }
            afterClose();
        }
    };
    (0, react_1.useEffect)(function () {
        return function () {
            handleExited();
        };
    }, []);
    if (firstVisible === false || !container) {
        return null;
    }
    if (!visible && !cache && isAnimationEnd.current) {
        return null;
    }
    var handleCancel = function handleCancel(e) {
        if (typeof onCancel === 'function') {
            onCancel(e);
        } else {
            handleClose('cancelBtn', e);
        }
    };
    var handleMaskClick = function handleMaskClick(e) {
        if (!canCloseByMask) {
            return;
        }
        if (e.type === 'click' && dialogRef.current) {
            var dialogNode = react_dom_1.default.findDOMNode(dialogRef.current);
            if (dialogNode && dialogNode.contains(e.target)) {
                return;
            }
        }
        handleClose('maskClick', e);
    };
    var handleEnter = function handleEnter() {
        markAnimationEnd(false);
        util_1.dom.setStyle(wrapperRef.current, 'display', '');
    };
    var handleEntered = function handleEntered() {
        if (autoFocus && dialogRef.current && dialogRef.current.bodyNode) {
            var focusableNodes = util_1.focus.getFocusNodeList(dialogRef.current.bodyNode);
            if (focusableNodes.length > 0 && focusableNodes[0]) {
                lastFocus.current = document.activeElement;
                focusableNodes[0].focus();
            }
        }
        setVisibleOverlayToParent(uuid, wrapperRef.current);
    };
    var wrapperCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "overlay-wrapper")] = true, _a[wrapperClassName] = !!wrapperClassName, _a.opened = visible, _a));
    var dialogCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "dialog-v2")] = true, _b[className] = !!className, _b));
    var topStyle = {};
    if (centered) {
        // 兼容 minMargin
        if (!top && !bottom && minMargin) {
            topStyle.marginTop = minMargin;
            topStyle.marginBottom = minMargin;
        } else {
            top && (topStyle.marginTop = top);
            bottom && (topStyle.marginBottom = bottom);
        }
    } else {
        top && (topStyle.top = top);
        bottom && (topStyle.paddingBottom = bottom);
    }
    var innerStyle = style || {};
    if (overflowScroll && !innerStyle.maxHeight) {
        innerStyle.maxHeight = "calc(100vh - ".concat(top + bottom, "px)");
    }
    var timeout = {
        appear: 300,
        enter: 300,
        exit: 250
    };
    var inner = react_1.default.createElement(animate_1.default.OverlayAnimate, { visible: visible, animation: animation, timeout: timeout, onEnter: handleEnter, onEntered: handleEntered, onExited: handleExited }, react_1.default.createElement(inner_1.default, tslib_1.__assign({}, others, { style: centered ? tslib_1.__assign(tslib_1.__assign({}, topStyle), innerStyle) : innerStyle, v2: true, ref: dialogRef, prefix: prefix, className: dialogCls, title: title, footer: footer, footerAlign: footerAlign, footerActions: footerActions, onOk: visible ? onOk : noop, onCancel: visible ? handleCancel : noop, okProps: okProps, cancelProps: cancelProps, locale: locale, closeable: closeable, rtl: rtl, onClose: function onClose() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return handleClose.apply(void 0, tslib_1.__spreadArray(['closeClick'], tslib_1.__read(args), false));
        }, closeIcon: closeIcon, height: height, width: width }), children));
    if (typeof dialogRender === 'function') {
        inner = dialogRender(inner);
    }
    var innerWrapperCls = (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "overlay-inner")] = true, _c["".concat(prefix, "dialog-wrapper")] = true, _c["".concat(prefix, "dialog-centered")] = centered, _c));
    var getVisibleOverlayFromChild = function getVisibleOverlayFromChild(id, node) {
        if (node) {
            childIDMap.current.set(id, node);
        } else {
            childIDMap.current.delete(id);
        }
        // 让父级也感知
        setVisibleOverlayToParent(id, node);
    };
    return react_1.default.createElement(OverlayContext.Provider, { value: tslib_1.__assign(tslib_1.__assign({}, otherContext), { setVisibleOverlayToParent: getVisibleOverlayFromChild }) }, react_dom_1.default.createPortal(react_1.default.createElement("div", { className: wrapperCls, style: wrapperStyle, ref: wrapperRef }, hasMask ? react_1.default.createElement(animate_1.default.OverlayAnimate, { visible: visible, animation: animation ? { in: 'fadeIn', out: 'fadeOut' } : false, timeout: timeout, unmountOnExit: true }, react_1.default.createElement("div", { className: "".concat(prefix, "overlay-backdrop") })) : null, react_1.default.createElement("div", { className: innerWrapperCls, onClick: handleMaskClick }, centered ? inner : react_1.default.createElement("div", { style: topStyle, className: "".concat(prefix, "dialog-inner-wrapper") }, inner))), container));
};
exports.default = Dialog;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __webpack_require__(4);
/**
 * https://github.com/alibaba-fusion/next/issues/3638
 * 通过栈的形式：解决弹窗关闭的时候对 document.body 上面的 style 恢复顺序问题
 * 问题复现步骤:
 *   1. dialog1 进来，把 body.style=overflow:hidden，如果关闭应该恢复 body.style=""
 *   2. dialog2 进来，把 body.style=overflow:hidden, 因为此时 body.style是verflow:hidden，所以如果关闭应该恢复 body.style="verflow:hidden"
 *   3. dialog1 关闭，恢复 body.style=""。造成问题：dialog2 页面可滚动
 *   4. dialog2 关闭，恢复 body.style="verflow:hidden"。造成问题：页面不可滚动
 * 解决方案：
 *   1. 每个 dialog 修改 body.style 的时候都 push 入栈
 *   2. 如果dialog1 先退出，发现 dialog2 存在则不做任何操作，把自己的恢复值给到 dialog2
 */
var lockcache = [];
function lock(container, style) {
    var originStyle = container.getAttribute('style');
    var uuid = (0, util_1.guid)();
    lockcache.push({
        uuid: uuid,
        container: container,
        originStyle: originStyle
    });
    util_1.dom.setStyle(container, style);
    return uuid;
}
function unlock(container, uuid) {
    var list = lockcache.filter(function (i) {
        return i.container === container;
    });
    var item = list.find(function (i) {
        return i.uuid === uuid;
    });
    if (item) {
        var idx = list.indexOf(item);
        // 解锁的时候，链表有新增。说明 container style 已经被其他 Dialog 修改过了
        if (idx !== -1 && idx < list.length - 1) {
            var originStyle = item.originStyle;
            // 下一个 dialog 解锁的时候直接替换为
            list[idx + 1].originStyle = originStyle;
            lockcache.splice(lockcache.indexOf(item), 1);
            return;
        }
        container.setAttribute('style', item.originStyle || '');
        lockcache.pop();
    }
}
exports.default = {
    lock: lock,
    unlock: unlock
};

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
/* istanbul ignore file */
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var classnames_1 = __webpack_require__(3);
var overlay_1 = __webpack_require__(58);
var inner_1 = __webpack_require__(93);
var animate_1 = __webpack_require__(17);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var scroll_locker_1 = __webpack_require__(168);
var OverlayContext = overlay_1.default.OverlayContext;
var noop = util_1.func.noop;
var getAnimation = function getAnimation(placement) {
    var animation;
    switch (placement) {
        case 'top':
            animation = {
                in: 'slideInDown',
                out: 'slideOutUp'
            };
            break;
        case 'bottom':
            animation = {
                in: 'slideInUp',
                out: 'slideOutDown'
            };
            break;
        case 'left':
            animation = {
                in: 'slideInLeft',
                out: 'slideOutLeft'
            };
            break;
        case 'right':
        default:
            animation = {
                in: 'slideInRight',
                out: 'slideOutRight'
            };
            break;
    }
    return animation;
};
var Drawer = function Drawer(props) {
    var _a, _b, _c;
    if (!react_1.useState || !react_1.useRef || !react_1.useEffect) {
        util_1.log.warning('need react version > 16.8.0');
        return null;
    }
    var _d = props.prefix,
        prefix = _d === void 0 ? 'next-' : _d,
        _e = props.hasMask,
        hasMask = _e === void 0 ? true : _e,
        _f = props.autoFocus,
        autoFocus = _f === void 0 ? false : _f,
        className = props.className,
        title = props.title,
        children = props.children,
        cache = props.cache,
        _g = props.closeMode,
        closeMode = _g === void 0 ? ['close', 'mask', 'esc'] : _g,
        width = props.width,
        height = props.height,
        onClose = props.onClose,
        _h = props.placement,
        placement = _h === void 0 ? 'right' : _h,
        headerStyle = props.headerStyle,
        bodyStyle = props.bodyStyle,
        pvisible = props.visible,
        _j = props.afterClose,
        afterClose = _j === void 0 ? noop : _j,
        _k = props.locale,
        locale = _k === void 0 ? zh_cn_1.default.Drawer : _k,
        rtl = props.rtl,
        animation = props.animation,
        wrapperStyle = props.wrapperStyle,
        _l = props.popupContainer,
        popupContainer = _l === void 0 ? document.body : _l,
        style = props.style,
        others = tslib_1.__rest(props, ["prefix", "hasMask", "autoFocus", "className", "title", "children", "cache", "closeMode", "width", "height", "onClose", "placement", "headerStyle", "bodyStyle", "visible", "afterClose", "locale", "rtl", "animation", "wrapperStyle", "popupContainer", "style"]);
    var _m = tslib_1.__read((0, react_1.useState)(pvisible || false), 2),
        firstVisible = _m[0],
        setFirst = _m[1];
    var _o = tslib_1.__read((0, react_1.useState)(pvisible), 2),
        visible = _o[0],
        setVisible = _o[1];
    var getContainer = typeof popupContainer === 'string' ? function () {
        return document.getElementById(popupContainer);
    } : typeof popupContainer !== 'function' ? function () {
        return popupContainer;
    } : popupContainer;
    var _p = tslib_1.__read((0, react_1.useState)(getContainer()), 2),
        container = _p[0],
        setContainer = _p[1];
    var drawerRef = (0, react_1.useRef)(null);
    var wrapperRef = (0, react_1.useRef)(null);
    var lastFocus = (0, react_1.useRef)(null);
    var locker = (0, react_1.useRef)(null);
    var _q = tslib_1.__read((0, react_1.useState)((0, util_1.guid)()), 1),
        uuid = _q[0];
    var _r = (0, react_1.useContext)(OverlayContext),
        setVisibleOverlayToParent = _r.setVisibleOverlayToParent,
        otherContext = tslib_1.__rest(_r, ["setVisibleOverlayToParent"]);
    var childIDMap = (0, react_1.useRef)(new Map());
    var isAnimationEnd = (0, react_1.useRef)(false); // 动效是否结束, 因为时机非常快用 state 太慢
    var _s = tslib_1.__read((0, react_1.useState)(), 2),
        forceUpdate = _s[1];
    // 动效结束，强制重新渲染
    var markAnimationEnd = function markAnimationEnd(state) {
        isAnimationEnd.current = state;
        forceUpdate({});
    };
    var canCloseByEsc = false;
    var canCloseByMask = false;
    var closeable = false;
    var closeModeArray = Array.isArray(closeMode) ? closeMode : [closeMode];
    closeModeArray.forEach(function (mode) {
        switch (mode) {
            case 'esc':
                canCloseByEsc = true;
                break;
            case 'mask':
                canCloseByMask = true;
                break;
            case 'close':
                closeable = true;
                break;
        }
    });
    // visible 受控
    (0, react_1.useEffect)(function () {
        if ('visible' in props) {
            setVisible(pvisible);
        }
    }, [pvisible]);
    // 打开遮罩后 document.body 滚动处理
    (0, react_1.useEffect)(function () {
        if (visible && hasMask) {
            var style_1 = {
                overflow: 'hidden'
            };
            if (util_1.dom.hasScroll(document.body)) {
                var scrollWidth = util_1.dom.scrollbar().width;
                if (scrollWidth) {
                    style_1.paddingRight = "".concat(util_1.dom.getStyle(document.body, 'paddingRight') + util_1.dom.scrollbar().width, "px");
                }
            }
            locker.current = scroll_locker_1.default.lock(document.body, style_1);
        }
    }, [visible && hasMask]);
    var handleClose = function handleClose(targetType, e) {
        setVisibleOverlayToParent(uuid, null);
        typeof onClose === 'function' && onClose(targetType, e);
    };
    var keydownEvent = function keydownEvent(e) {
        if (e.keyCode === 27 && canCloseByEsc && !childIDMap.current.size) {
            handleClose('esc', e);
        }
    };
    // esc 键盘事件处理
    (0, react_1.useEffect)(function () {
        if (visible && canCloseByEsc) {
            document.body.addEventListener('keydown', keydownEvent, false);
            return function () {
                document.body.removeEventListener('keydown', keydownEvent, false);
            };
        }
    }, [visible && canCloseByEsc]);
    // 优化: 第一次加载并且 visible=false 的情况不挂载弹窗
    (0, react_1.useEffect)(function () {
        !firstVisible && visible && setFirst(true);
    }, [visible]);
    // container 异步加载情况
    (0, react_1.useEffect)(function () {
        if (!container) {
            setTimeout(function () {
                setContainer(getContainer());
            });
        }
    }, [container]);
    // Drawer 关闭时候的处理。1. 结束的时候不管动效是不是已经结束都要隐藏弹窗；2. 需要把focus态还原到触发节点
    var handleExited = function handleExited() {
        if (!isAnimationEnd.current) {
            markAnimationEnd(true);
            util_1.dom.setStyle(wrapperRef.current, 'display', 'none');
            scroll_locker_1.default.unlock(document.body, locker.current);
            if (autoFocus && lastFocus.current) {
                try {
                    lastFocus.current.focus();
                } finally {
                    // ignore ...
                }
                lastFocus.current = null;
            }
            afterClose();
        }
    };
    // visible? <Drawer/>: null; 这种写法会触发卸载
    (0, react_1.useEffect)(function () {
        return function () {
            handleExited();
        };
    }, []);
    if (firstVisible === false || !container) {
        return null;
    }
    if (!visible && !cache && isAnimationEnd.current) {
        return null;
    }
    var handleMaskClick = function handleMaskClick(e) {
        if (!canCloseByMask) {
            return;
        }
        handleClose('maskClick', e);
    };
    var handleEnter = function handleEnter() {
        markAnimationEnd(false);
        util_1.dom.setStyle(wrapperRef.current, 'display', '');
    };
    var handleEntered = function handleEntered() {
        if (autoFocus && drawerRef.current && drawerRef.current.bodyNode) {
            var focusableNodes = util_1.focus.getFocusNodeList(drawerRef.current.bodyNode);
            if (focusableNodes.length > 0 && focusableNodes[0]) {
                lastFocus.current = document.activeElement;
                focusableNodes[0].focus();
            }
        }
        setVisibleOverlayToParent(uuid, drawerRef.current);
    };
    var wrapperCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "overlay-wrapper")] = true, _a.opened = visible, _a));
    var innerWrapperCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "overlay-inner")] = true, _b["".concat(prefix, "drawer-wrapper")] = true, _b["".concat(prefix, "drawer-").concat(placement)] = true, _b[className] = !!className, _b));
    var drawerCls = (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "drawer-v2")] = true, _c[className] = !!className, _c));
    var newAnimation = animation === null || animation === false ? null : animation ? animation : getAnimation(placement);
    var timeout = {
        appear: 300,
        enter: 300,
        exit: 250
    };
    var getVisibleOverlayFromChild = function getVisibleOverlayFromChild(id, node) {
        if (node) {
            childIDMap.current.set(id, node);
        } else {
            childIDMap.current.delete(id);
        }
        // 让父级也感知
        setVisibleOverlayToParent(id, node);
    };
    var nstyle = tslib_1.__assign({ width: width, height: height }, style);
    return react_1.default.createElement(OverlayContext.Provider, { value: tslib_1.__assign(tslib_1.__assign({}, otherContext), { setVisibleOverlayToParent: getVisibleOverlayFromChild }) }, react_dom_1.default.createPortal(react_1.default.createElement("div", { className: wrapperCls, style: wrapperStyle, ref: wrapperRef }, hasMask ? react_1.default.createElement(animate_1.default.OverlayAnimate, { visible: visible, animation: newAnimation ? { in: 'fadeIn', out: 'fadeOut' } : false, timeout: timeout, unmountOnExit: true }, react_1.default.createElement("div", { className: "".concat(prefix, "overlay-backdrop"), onClick: handleMaskClick })) : null, react_1.default.createElement("div", { className: innerWrapperCls, style: nstyle, ref: drawerRef }, react_1.default.createElement(animate_1.default.OverlayAnimate, { visible: visible, animation: newAnimation, timeout: timeout, onEnter: handleEnter, onEntered: handleEntered, onExited: handleExited }, react_1.default.createElement(inner_1.default, tslib_1.__assign({}, others, { v2: true, prefix: prefix, title: title, className: drawerCls, locale: locale, closeable: closeable, rtl: rtl, headerStyle: headerStyle, bodyStyle: bodyStyle, onClose: function onClose() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return handleClose.apply(void 0, tslib_1.__spreadArray(['closeClick'], tslib_1.__read(args), false));
        } }), children)))), container));
};
exports.default = Drawer;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var field_1 = __webpack_require__(338);
var util_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(358);
var NextField = /** @class */function (_super) {
    tslib_1.__extends(NextField, _super);
    function NextField(com, options) {
        if (options === void 0) {
            options = {};
        }
        var _this = this;
        var newOptions = (0, _extends3.default)({}, options, {
            afterValidateRerender: utils_1.scrollToFirstError,
            processErrorMessage: utils_1.cloneAndAddKey
        });
        _this = _super.call(this, com, newOptions) || this;
        _this.validate = _this.validate.bind(_this);
        return _this;
    }
    NextField.useField = function (options) {
        if (options === void 0) {
            options = {};
        }
        if (!react_1.useState || !react_1.useMemo) {
            util_1.log.warning('need react version > 16.8.0');
            return;
        }
        return this.getUseField({ useMemo: react_1.useMemo, useState: react_1.useState })(options);
    };
    NextField.useWatch = function (field, names, callback) {
        var callbackRef = (0, react_1.useRef)(callback);
        callbackRef.current = callback;
        // watch at render stage, field or names change will cause rewatch
        var unwatch = (0, react_1.useMemo)(function () {
            return field.watch(names, function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                if (typeof callbackRef.current === 'function') {
                    callbackRef.current.apply(callbackRef, tslib_1.__spreadArray([], tslib_1.__read(args), false));
                }
            });
        }, [field, names.join(',')]);
        (0, react_1.useEffect)(function () {
            // unwatch at uneffect stage
            return unwatch;
        }, [unwatch]);
    };
    NextField.prototype.validate = function (ns, cb) {
        this.validateCallback(ns, cb);
    };
    NextField.prototype.reset = function (ns, backToDefault) {
        if (backToDefault === void 0) {
            backToDefault = false;
        }
        if (ns === true) {
            util_1.log.deprecated('reset(true)', 'resetToDefault()', 'Field');
            this.resetToDefault();
        } else if (backToDefault === true) {
            util_1.log.deprecated('reset(ns,true)', 'resetToDefault(ns)', 'Field');
            this.resetToDefault(ns);
        } else {
            this._reset(ns, false);
        }
    };
    return NextField;
}(field_1.default);
exports.default = NextField;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(33)["default"];
var toPrimitive = __webpack_require__(346);
function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : String(i);
}
module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 172 */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

var toPropertyKey = __webpack_require__(171);
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var create_style_1 = __webpack_require__(175);
var pickOthers = util_1.obj.pickOthers;
var createChildren = function createChildren(children, _a) {
    var spacing = _a.spacing,
        direction = _a.direction,
        wrap = _a.wrap,
        device = _a.device;
    var array = react_1.default.Children.toArray(children);
    if (!children) {
        return null;
    }
    return array.map(function (child, index) {
        var spacingMargin = {};
        spacingMargin = (0, create_style_1.getChildMargin)(spacing);
        if (!wrap) {
            // 不折行
            var isNone_1 = [index === 0, index === array.length - 1];
            var props_1 = direction === 'row' ? ['marginLeft', 'marginRight'] : ['marginTop', 'marginBottom'];
            ['marginTop', 'marginRight', 'marginBottom', 'marginLeft'].forEach(function (prop) {
                if (prop in spacingMargin && props_1.indexOf(prop) === -1) {
                    spacingMargin[prop] = 0;
                }
                props_1.forEach(function (key, i) {
                    if (key in spacingMargin && isNone_1[i]) {
                        spacingMargin[key] = 0;
                    }
                });
            });
        }
        if (react_1.default.isValidElement(child)) {
            var propsMargin = child.props.margin;
            var childPropsMargin = (0, create_style_1.getMargin)(propsMargin);
            var gridProps = {};
            if (['function', 'object'].indexOf((0, _typeof3.default)(child.type)) > -1 && child.type._typeMark === 'responsive_grid') {
                gridProps = (0, create_style_1.default)(tslib_1.__assign({ display: 'grid' }, child.props));
            }
            return react_1.default.cloneElement(child, {
                style: tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, spacingMargin), childPropsMargin), gridProps), child.props.style || {})
            });
        }
        return child;
    });
};
var getStyle = function getStyle(style, props) {
    if (style === void 0) {
        style = {};
    }
    return tslib_1.__assign(tslib_1.__assign({}, (0, create_style_1.default)(tslib_1.__assign({ display: 'flex' }, props))), style);
};
var getOuterStyle = function getOuterStyle(style, styleProps) {
    var sheet = getStyle(style, styleProps);
    return (0, create_style_1.filterOuterStyle)(sheet);
};
var getHelperStyle = function getHelperStyle(style, styleProps) {
    var sheet = getStyle(style, styleProps);
    return (0, create_style_1.filterHelperStyle)(tslib_1.__assign(tslib_1.__assign({}, sheet), (0, create_style_1.getSpacingHelperMargin)(styleProps.spacing)));
};
var getInnerStyle = function getInnerStyle(style, styleProps) {
    var sheet = getStyle(style, styleProps);
    return (0, create_style_1.filterInnerStyle)(sheet);
};
/**
 * Box
 */
var Box = /** @class */function (_super) {
    tslib_1.__extends(Box, _super);
    function Box() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Box.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            direction = _b.direction,
            justify = _b.justify,
            align = _b.align,
            wrap = _b.wrap,
            flex = _b.flex,
            spacing = _b.spacing,
            padding = _b.padding,
            margin = _b.margin,
            style = _b.style,
            className = _b.className,
            children = _b.children,
            device = _b.device,
            component = _b.component;
        var styleProps = {
            direction: direction,
            justify: justify,
            align: align,
            wrap: wrap,
            flex: flex,
            spacing: spacing,
            padding: padding,
            margin: margin
        };
        var View = component;
        var others = pickOthers(Object.keys(Box.propTypes), this.props);
        var styleSheet = getStyle(style, styleProps);
        var boxs = createChildren(children, {
            spacing: spacing,
            direction: direction,
            wrap: wrap,
            device: device
        });
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "box")] = true, _a), className);
        if (wrap && spacing) {
            var outerStyle = getOuterStyle(style, styleProps);
            var helperStyle = getHelperStyle(style, styleProps);
            var innerStyle = getInnerStyle(style, styleProps);
            return react_1.default.createElement(View, tslib_1.__assign({ style: outerStyle, className: cls }, others), react_1.default.createElement("div", { style: helperStyle }, react_1.default.createElement("div", { style: innerStyle, className: "".concat(prefix, "box") }, boxs)));
        }
        return react_1.default.createElement(View, tslib_1.__assign({ style: styleSheet, className: cls }, others), boxs);
    };
    Box.propTypes = {
        prefix: prop_types_1.default.string,
        style: prop_types_1.default.object,
        className: prop_types_1.default.any,
        /**
         * 布局属性
         */
        flex: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string])), prop_types_1.default.number]),
        /**
         * 布局方向，默认为 column ，一个元素占据一整行
         * @default column
         */
        direction: prop_types_1.default.oneOf(['row', 'column', 'row-reverse']),
        /**
         * 是否折行 支持IE11+
         */
        wrap: prop_types_1.default.bool,
        /**
         * 元素之间的间距 [bottom&top, right&left]
         */
        spacing: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.number), prop_types_1.default.number]),
        /**
         * 设置 margin [bottom&top, right&left]
         */
        margin: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.number), prop_types_1.default.number]),
        /**
         * 设置 padding [bottom&top, right&left]
         */
        padding: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.number), prop_types_1.default.number]),
        /**
         * 沿着主轴方向，子元素们的排布关系 （兼容性同 justify-content ）
         */
        justify: prop_types_1.default.oneOf(['flex-start', 'center', 'flex-end', 'space-between', 'space-around']),
        /**
         * 垂直主轴方向，子元素们的排布关系 （兼容性同 align-items ）
         */
        align: prop_types_1.default.oneOf(['flex-start', 'center', 'flex-end', 'baseline', 'stretch']),
        device: prop_types_1.default.oneOf(['phone', 'tablet', 'desktop']),
        /**
         * 定制标签名， 例如section等
         */
        component: prop_types_1.default.string
    };
    Box.defaultProps = {
        prefix: 'next-',
        direction: 'column',
        wrap: false,
        component: 'div'
    };
    return Box;
}(react_1.Component);
exports.default = config_provider_1.default.config(Box);

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.getGridChildProps = exports.filterHelperStyle = exports.filterOuterStyle = exports.filterInnerStyle = exports.getSpacingHelperMargin = exports.getSpacingMargin = exports.getChildMargin = exports.getMargin = void 0;
var tslib_1 = __webpack_require__(0);
// import { prefix } from 'inline-style-prefixer';
var util_1 = __webpack_require__(361);
var util_2 = __webpack_require__(4);
var ieVersion = util_2.env.ieVersion;
var getPadding = function getPadding(padding) {
    if (!Array.isArray(padding)) {
        return {
            padding: padding
        };
    }
    var attrs = ['paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'];
    var paddings = {};
    var value;
    attrs.forEach(function (attr, index) {
        switch (padding.length) {
            case 1:
                value = padding[0] || 0;
                break;
            case 2:
                value = padding[index] || padding[index - 2] || 0;
                break;
            case 3:
                value = index === 2 ? padding[2] : padding[index] || padding[index - 2] || 0;
                break;
            case 4:
            default:
                value = padding[index] || 0;
                break;
        }
        paddings[attr] = value;
    });
    return paddings;
};
var getMargin = function getMargin(size, _a) {
    var _b = _a === void 0 ? { isNegative: false, half: false } : _a,
        isNegative = _b.isNegative,
        half = _b.half;
    if (!size) {
        return {};
    }
    var attrs = ['marginTop', 'marginRight', 'marginBottom', 'marginLeft'];
    var margins = {};
    var param = 1 * (isNegative ? -1 : 1) * (half ? 0.5 : 1);
    var value;
    attrs.forEach(function (attr, index) {
        if (!Array.isArray(size)) {
            value = param * size;
        } else {
            switch (size.length) {
                case 1:
                    value = param * (size[0] || 0);
                    break;
                case 2:
                    value = param * (size[index] || size[index - 2] || 0);
                    break;
                case 3:
                    value = param * (index === 2 ? size[2] : size[index] || size[index - 2] || 0);
                    break;
                case 4:
                default:
                    value = param * (size[index] || 0);
                    break;
            }
        }
        margins[attr] = value;
    });
    return margins;
};
exports.getMargin = getMargin;
var getChildMargin = function getChildMargin(spacing) {
    return getMargin(spacing, { half: true });
};
exports.getChildMargin = getChildMargin;
var getSpacingMargin = function getSpacingMargin(spacing) {
    return getMargin(spacing, { half: true });
};
exports.getSpacingMargin = getSpacingMargin;
var getSpacingHelperMargin = function getSpacingHelperMargin(spacing) {
    return getMargin(spacing, { isNegative: true, half: true });
};
exports.getSpacingHelperMargin = getSpacingHelperMargin;
var getFlexs = function getFlexs(flex) {
    if (!Array.isArray(flex)) {
        return {
            flex: flex
        };
    }
    var attrs = ['flexGrow', 'flexShrink', 'flexBasis'];
    var flexs = {};
    flex.forEach(function (val, index) {
        flexs[attrs[index]] = val;
    });
    return flexs;
};
var getGridGap = function getGridGap(gap) {
    if (!Array.isArray(gap)) {
        return {
            gap: gap
        };
    }
    var attrs = ['rowGap', 'columnGap'];
    var gaps = {};
    gap.forEach(function (val, index) {
        gaps[attrs[index]] = val;
    });
    return gaps;
};
var getTemplateCount = function getTemplateCount(counts) {
    if (!isNaN(counts) || typeof counts === 'string') {
        return "repeat(".concat(counts, ", minmax(0,1fr))");
    }
    return counts;
};
// const outerProps = ['alignSelf', 'flexGrow', 'flexShrink', 'flexBasis', 'backgroundColor', 'boxShadow', 'borderRadius', 'borderWidth', 'borderStyle', 'borderColor', 'padding', 'paddingTop', 'paddingLeft', 'paddingRight', 'paddingBottom'];
var helperProps = ['margin', 'marginTop', 'marginLeft', 'marginRight', 'marginBottom'];
var innerProps = ['flexDirection', 'flexWrap',
// 'justifyContent',
'alignContent', 'alignItems', 'display'];
var filterOuterStyle = function filterOuterStyle(style) {
    var props = {};
    tslib_1.__spreadArray([], tslib_1.__read(innerProps), false).forEach(function (key) {
        props[key] = style[key];
    });
    return (0, util_1.filterUndefinedValue)((0, util_1.stripObject)(style, props));
};
exports.filterOuterStyle = filterOuterStyle;
var filterHelperStyle = function filterHelperStyle(style) {
    var props = {};
    helperProps.forEach(function (key) {
        props[key] = style[key];
    });
    return (0, util_1.filterUndefinedValue)(tslib_1.__assign(tslib_1.__assign({}, props), { overflow: 'hidden' }));
};
exports.filterHelperStyle = filterHelperStyle;
var filterInnerStyle = function filterInnerStyle(style) {
    var props = {};
    innerProps.forEach(function (key) {
        props[key] = style[key];
    });
    return (0, util_1.filterUndefinedValue)(props);
};
exports.filterInnerStyle = filterInnerStyle;
var getGridChildProps = function getGridChildProps(props, device, gap) {
    var _a = props.row,
        row = _a === void 0 ? 'initial' : _a,
        _b = props.col,
        col = _b === void 0 ? 'initial' : _b,
        _c = props.rowSpan,
        rowSpan = _c === void 0 ? 1 : _c,
        _d = props.colSpan,
        colSpan = _d === void 0 ? 1 : _d;
    var totalSpan = 12;
    var newColSpan = (typeof colSpan === "undefined" ? "undefined" : (0, _typeof3.default)(colSpan)) === 'object' && 'desktop' in colSpan ? colSpan.desktop : colSpan;
    ['tablet', 'phone'].forEach(function (deviceKey) {
        if (deviceKey === device) {
            if ((typeof colSpan === "undefined" ? "undefined" : (0, _typeof3.default)(colSpan)) === 'object' && device in colSpan) {
                newColSpan = colSpan[device];
            } else {
                switch (deviceKey) {
                    case 'tablet':
                        totalSpan = 8;
                        newColSpan = colSpan > 5 ? 8 : colSpan > 2 ? 4 : 2;
                        break;
                    case 'phone':
                        totalSpan = 4;
                        newColSpan = colSpan > 2 ? 4 : 2;
                        break;
                }
            }
        }
    });
    var gapLeft = gap;
    if (Array.isArray(gap)) {
        gapLeft = gap[1];
    }
    var ieChildFix = ieVersion && !(rowSpan === 1 && colSpan === 1) ? {
        display: 'inline-block',
        width: gapLeft ? "calc(".concat(newColSpan / totalSpan * 100, "% - ").concat(gapLeft, "px)") : "".concat(newColSpan / totalSpan * 100, "%")
    } : {};
    return (0, util_1.filterUndefinedValue)(tslib_1.__assign({ gridRowStart: row, gridRowEnd: "span ".concat(rowSpan), gridColumnStart: col, gridColumnEnd: "span ".concat(newColSpan) }, ieChildFix));
};
exports.getGridChildProps = getGridChildProps;
var getBoxChildProps = function getBoxChildProps(props) {
    var alignSelf = props.alignSelf,
        flex = props.flex;
    return (0, util_1.filterUndefinedValue)(tslib_1.__assign({ alignSelf: alignSelf }, getFlexs(flex)));
};
exports.default = function (_a) {
    var device = _a.device,
        display = _a.display,
        gap = _a.gap,
        direction = _a.direction,
        dense = _a.dense,
        rowSpan = _a.rowSpan,
        colSpan = _a.colSpan,
        row = _a.row,
        col = _a.col,
        rows = _a.rows,
        columns = _a.columns,
        justify = _a.justify,

    // justifySelf,
    align = _a.align,
        alignSelf = _a.alignSelf,
        wrap = _a.wrap,
        flex = _a.flex,
        padding = _a.padding,
        margin = _a.margin;
    var style = tslib_1.__assign({}, getPadding(padding));
    var deviceColumns = 'auto';
    switch (device) {
        case 'phone':
            deviceColumns = 4;
            break;
        case 'tablet':
            deviceColumns = 8;
            break;
        case 'desktop':
            deviceColumns = 12;
            break;
        default:
            break;
    }
    var newColumns = !isNaN(columns) || typeof columns === 'string' ? columns : deviceColumns;
    switch (display) {
        case 'grid':
            style = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, getGridGap(gap)), { gridTemplateRows: getTemplateCount(rows), gridTemplateColumns: getTemplateCount(newColumns), gridAutoFlow: "".concat(direction || '').concat(dense && " dense") }), getGridChildProps({
                row: row,
                rowSpan: rowSpan,
                col: col,
                colSpan: colSpan
                // justifySelf,
                // alignSelf,
            }, device)), style);
            break;
        case 'flex':
            style = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({
                // parent
                msFlexDirection: direction, flexDirection: direction, msFlexWrap: wrap ? 'wrap' : 'none', flexWrap: wrap ? 'wrap' : 'nowrap', msFlexPack: justify, justifyContent: justify, msFlexAlign: align, alignItems: align }, getMargin(margin)), getBoxChildProps({
                alignSelf: alignSelf,
                flex: flex
            })), style);
            break;
        default:
            break;
    }
    // return prefix(style);
    return (0, util_1.filterUndefinedValue)(style);
};

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var row_1 = __webpack_require__(364);
var col_1 = __webpack_require__(365);
var Grid = {
    Row: config_provider_1.default.config(row_1.default, {
        transform: /* istanbul ignore next */function transform(props, deprecated) {
            if ('type' in props) {
                deprecated('type', 'fixed | wrap | gutter', 'Row');
                var type = props.type,
                    others = tslib_1.__rest(props, ["type"]);
                var types = Array.isArray(type) ? type : [type];
                var fixed = void 0;
                if (types.indexOf('fixed') > -1) {
                    fixed = true;
                }
                var wrap = void 0;
                if (types.indexOf('wrap') > -1) {
                    wrap = true;
                }
                props = tslib_1.__assign({ fixed: fixed, wrap: wrap }, others);
            }
            return props;
        }
    }),
    Col: config_provider_1.default.config(col_1.default)
};
exports.default = Grid;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
/**
 * Form.Error
 * @description 自定义错误展示
 * @order 4
 */
var Error = /** @class */function (_super) {
    tslib_1.__extends(Error, _super);
    function Error() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.itemRender = function (errors) {
            return errors.length ? errors : null;
        };
        return _this;
    }
    Error.prototype.render = function () {
        var _a;
        var _b = this.props,
            children = _b.children,
            name = _b.name,
            prefix = _b.prefix,
            style = _b.style,
            className = _b.className,
            _field = _b.field,
            preferMarginToDisplayHelp = _b.preferMarginToDisplayHelp,
            others = tslib_1.__rest(_b, ["children", "name", "prefix", "style", "className", "field", "preferMarginToDisplayHelp"]);
        if (children && typeof children !== 'function') {
            return react_1.default.createElement("div", { className: "".concat(prefix, "form-item-help") }, children, !!preferMarginToDisplayHelp && react_1.default.createElement("div", { className: "".concat(prefix, "form-item-help-margin-offset") }));
        }
        var field = this.context._formField || _field;
        if (!field || !name) {
            return null;
        }
        var isSingle = typeof name === 'string';
        var names = isSingle ? [name] : name;
        var errorArr = [];
        if (names.length) {
            var errors_1 = field.getErrors(names);
            Object.keys(errors_1).forEach(function (key) {
                if (errors_1[key]) {
                    errorArr.push(errors_1[key]);
                }
            });
        }
        var result = null;
        if (typeof children === 'function') {
            result = children(errorArr, isSingle ? field.getState(name) : undefined);
        } else {
            result = this.itemRender(errorArr);
        }
        if (!result) {
            return null;
        }
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "form-item-help")] = true, _a[className] = className, _a));
        return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: cls, style: style }), result, !!preferMarginToDisplayHelp && react_1.default.createElement("div", { className: "".concat(prefix, "form-item-help-margin-offset") }));
    };
    Error.propTypes = {
        /**
         * 表单名
         */
        name: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
        /**
         * 自定义 field (在 Form 内不需要设置)
         */
        field: prop_types_1.default.object,
        style: prop_types_1.default.object,
        className: prop_types_1.default.string,
        /**
         * 自定义错误渲染, 可以是 node 或者 function(errors, state)
         */
        children: prop_types_1.default.oneOfType([prop_types_1.default.node, prop_types_1.default.func]),
        prefix: prop_types_1.default.string,
        preferMarginToDisplayHelp: prop_types_1.default.bool
    };
    Error.defaultProps = {
        prefix: 'next-',
        preferMarginToDisplayHelp: false
    };
    Error.contextTypes = {
        _formField: prop_types_1.default.object
    };
    Error._typeMark = 'form_error';
    return Error;
}(react_1.default.Component);
exports.default = config_provider_1.default.config(Error);

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var Search_1 = __webpack_require__(395);
exports.default = config_provider_1.default.config(Search_1.default, {
    transfrom: /* istanbul ignore next */function transfrom(props, deprecated) {
        var onInputFocus = props.onInputFocus,
            overlayVisible = props.overlayVisible,
            combox = props.combox,
            others = tslib_1.__rest(props, ["onInputFocus", "overlayVisible", "combox"]);
        var newprops = others;
        if (onInputFocus) {
            deprecated('onInputFocus', 'onFocus', 'Search');
            newprops.onFocus = onInputFocus;
        }
        if ('overlayVisible' in props) {
            deprecated('overlayVisible', 'visible', 'Search');
            newprops.visible = overlayVisible;
        }
        if (combox) {
            deprecated('combox', 'popupContent', 'Search');
            newprops.popupContent = combox;
        }
        return newprops;
    }
});

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.getTrackLeft = exports.getTrackAnimateCSS = exports.getTrackCSS = void 0;
var tslib_1 = __webpack_require__(0);
var react_dom_1 = __webpack_require__(8);
var checkSpecKeys = function checkSpecKeys(spec, keysArray) {
    return keysArray.reduce(function (value, key) {
        return value && spec.hasOwnProperty(key);
    }, true) ? null : console.error('Keys Missing', spec); /*eslint no-console:0*/
};
var getTrackCSS = function getTrackCSS(spec) {
    checkSpecKeys(spec, ['left', 'variableWidth', 'slideCount', 'slidesToShow', 'slideWidth']);
    var trackWidth;
    var trackHeight;
    var trackChildren = spec.slideCount + 2 * spec.slidesToShow;
    if (!spec.vertical) {
        if (spec.variableWidth) {
            trackWidth = (spec.slideCount + 2 * spec.slidesToShow) * spec.slideWidth;
        } else if (spec.centerMode) {
            trackWidth = (spec.slideCount + 2 * (spec.slidesToShow + 1)) * spec.slideWidth;
        } else {
            trackWidth = (spec.slideCount + 2 * spec.slidesToShow) * spec.slideWidth;
        }
    } else {
        trackHeight = trackChildren * spec.slideHeight;
    }
    var style = {
        opacity: 1
    };
    var transform = {
        WebkitTransform: !spec.vertical ? "translate3d(".concat(spec.left, "px, 0px, 0px)") : "translate3d(0px, ".concat(spec.left, "px, 0px)"),
        transform: !spec.vertical ? "translate3d(".concat(spec.left, "px, 0px, 0px)") : "translate3d(0px, ".concat(spec.left, "px, 0px)"),
        transition: '',
        WebkitTransition: '',
        msTransform: !spec.vertical ? "translateX(".concat(spec.left, "px)") : "translateY(".concat(spec.left, "px)")
    };
    if (trackWidth) {
        style = tslib_1.__assign(tslib_1.__assign({}, style), { width: trackWidth });
    }
    if (trackHeight) {
        style = tslib_1.__assign(tslib_1.__assign({}, style), { height: trackHeight });
    }
    if (spec.animation !== 'fade') {
        style = tslib_1.__assign(tslib_1.__assign({}, style), transform);
    }
    return style;
};
exports.getTrackCSS = getTrackCSS;
var getTrackAnimateCSS = function getTrackAnimateCSS(spec) {
    checkSpecKeys(spec, ['left', 'variableWidth', 'slideCount', 'slidesToShow', 'slideWidth', 'speed', 'cssEase']);
    var style = (0, exports.getTrackCSS)(spec);
    // useCSS is true by default so it can be undefined
    style.WebkitTransition = "-webkit-transform ".concat(spec.speed, "ms ").concat(spec.cssEase);
    style.transition = "transform ".concat(spec.speed, "ms ").concat(spec.cssEase);
    return style;
};
exports.getTrackAnimateCSS = getTrackAnimateCSS;
var getTrackLeft = function getTrackLeft(spec) {
    checkSpecKeys(spec, ['slideIndex', 'trackRef', 'infinite', 'centerMode', 'slideCount', 'slidesToShow', 'slidesToScroll', 'slideWidth', 'listWidth', 'variableWidth', 'slideHeight']);
    var slideOffset = 0;
    var targetLeft;
    var targetSlide;
    var verticalOffset = 0;
    if (spec.animation === 'fade') {
        return 0;
    }
    if (spec.infinite) {
        if (spec.slideCount > spec.slidesToShow) {
            slideOffset = spec.slideWidth * spec.slidesToShow * -1;
            verticalOffset = spec.slideHeight * spec.slidesToShow * -1;
        }
        if (spec.slideCount % spec.slidesToScroll !== 0) {
            var condition = spec.slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow;
            if (spec.rtl) {
                var slideIndex = spec.slideIndex >= spec.slideCount ? spec.slideCount - spec.slideIndex : spec.slideIndex;
                condition = slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow;
            }
            if (condition) {
                if (spec.slideIndex > spec.slideCount) {
                    slideOffset = (spec.slidesToShow - (spec.slideIndex - spec.slideCount)) * spec.slideWidth * -1;
                    verticalOffset = (spec.slidesToShow - (spec.slideIndex - spec.slideCount)) * spec.slideHeight * -1;
                } else {
                    slideOffset = spec.slideCount % spec.slidesToScroll * spec.slideWidth * -1;
                    verticalOffset = spec.slideCount % spec.slidesToScroll * spec.slideHeight * -1;
                }
            }
        }
    } else {
        /* eslint-disable no-lonely-if */
        if (spec.slideCount % spec.slidesToScroll !== 0) {
            if (spec.slideIndex + spec.slidesToScroll > spec.slideCount && spec.slideCount > spec.slidesToShow) {
                var slidesToOffset = spec.slidesToShow - spec.slideCount % spec.slidesToScroll;
                slideOffset = slidesToOffset * spec.slideWidth;
            }
        }
    }
    if (spec.centerMode) {
        if (spec.infinite) {
            slideOffset += spec.slideWidth * Math.floor(spec.slidesToShow / 2);
        } else {
            slideOffset = spec.slideWidth * Math.floor(spec.slidesToShow / 2);
        }
    }
    if (!spec.vertical) {
        targetLeft = spec.slideIndex * spec.slideWidth * -1 + slideOffset;
    } else {
        targetLeft = spec.slideIndex * spec.slideHeight * -1 + verticalOffset;
        if (spec.adaptiveHeight) {
            var index = spec.infinite ? spec.slideIndex + 1 : spec.slideIndex;
            var newHeight = spec.slideHeightList.slice(0, index).reduce(function (accumulator, currentValue) {
                return accumulator + currentValue;
            }, 0);
            targetLeft = newHeight * -1;
        }
    }
    if (spec.variableWidth === true) {
        var targetSlideIndex = void 0;
        if (spec.slideCount <= spec.slidesToShow || spec.infinite === false) {
            targetSlide = react_dom_1.default.findDOMNode(spec.trackRef).childNodes[spec.slideIndex];
        } else {
            targetSlideIndex = spec.slideIndex + spec.slidesToShow;
            targetSlide = react_dom_1.default.findDOMNode(spec.trackRef).childNodes[targetSlideIndex];
        }
        targetLeft = targetSlide ? targetSlide.offsetLeft * -1 : 0;
        if (spec.centerMode === true) {
            if (spec.infinite === false) {
                targetSlide = react_dom_1.default.findDOMNode(spec.trackRef).children[spec.slideIndex];
            } else {
                targetSlide = react_dom_1.default.findDOMNode(spec.trackRef).children[spec.slideIndex + spec.slidesToShow + 1];
            }
            if (targetSlide) {
                targetLeft = targetSlide.offsetLeft * -1 + (spec.listWidth - targetSlide.offsetWidth) / 2;
            }
        }
    }
    return targetLeft;
};
exports.getTrackLeft = getTrackLeft;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.tabsArrayShallowEqual = exports.toArray = exports.isTransformSupported = exports.getOffsetLT = exports.getOffsetWH = exports.triggerEvents = void 0;
var react_1 = __webpack_require__(1);
exports.triggerEvents = {
    CLICK: 'click',
    HOVER: 'hover'
};
function getOffsetWH(node, tabPosition) {
    var prop = 'width';
    if (tabPosition === 'left' || tabPosition === 'right') {
        prop = 'height';
    }
    return node ? node.getBoundingClientRect()[prop] : 0;
}
exports.getOffsetWH = getOffsetWH;
function getOffsetLT(node, tabPosition) {
    var prop = 'left';
    if (tabPosition === 'left' || tabPosition === 'right') {
        prop = 'top';
    }
    return node.getBoundingClientRect()[prop];
}
exports.getOffsetLT = getOffsetLT;
function isTransformSupported(style) {
    return 'transform' in style || 'webkitTransform' in style || 'MozTransform' in style;
}
exports.isTransformSupported = isTransformSupported;
function toArray(children) {
    var ret = [];
    react_1.default.Children.forEach(children, function (child, index) {
        if (react_1.default.isValidElement(child)) {
            ret.push(react_1.default.cloneElement(child, {
                key: child.key || index,
                title: child.props.title || child.props.tab
            }));
        }
    });
    return ret;
}
exports.toArray = toArray;
/**
 * tab数组浅比较
 * @param  {Array} arrA   更新后的数组
 * @param  {Array} arrB   原数组
 * @return {Boolean}      数组浅比较是否相等
 * @example
 * arr.tabsArrayShallowEqual(['2','3','4'], ['2','5','4']); // false
 */
function tabsArrayShallowEqual(arrA, arrB) {
    // 相同地址的返回true，不需要更新数据（更新数据的基础是props数据与当前获取的值不同）
    if (arrA === arrB) {
        return true;
    }
    // 判断：调用的值/是否为数组/数组的长度
    if (!arrA || !arrB || (typeof arrA === "undefined" ? "undefined" : (0, _typeof3.default)(arrA)) + (typeof arrB === "undefined" ? "undefined" : (0, _typeof3.default)(arrB)) !== 'objectobject' || arrA.length !== arrB.length) {
        return false;
    }
    // 判断tabs的key与title是否更改
    for (var i = 0; i < arrA.length; i++) {
        if (arrA[i].key !== arrB[i].key || arrA[i].props.title !== arrB[i].props.title) {
            return false;
        }
    }
    return true;
}
exports.tabsArrayShallowEqual = tabsArrayShallowEqual;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var filter_1 = __webpack_require__(182);
var sort_1 = __webpack_require__(183);
var cell_1 = __webpack_require__(63);
var resize_1 = __webpack_require__(421);
var noop = function noop() {};
var Header = /** @class */function (_super) {
    tslib_1.__extends(Header, _super);
    function Header() {
        var _this = _super.call(this) || this;
        _this.checkHasLock = function () {
            var columns = _this.props.columns;
            var hasLock = false;
            for (var i = 0; i < columns.length; i++) {
                var cols = columns[i];
                for (var j = 0; j < cols.length; j++) {
                    var col = cols[j];
                    if (col.lock) {
                        hasLock = true;
                        break;
                    }
                }
                if (hasLock) {
                    break;
                }
            }
            _this.hasLock = hasLock;
        };
        _this.getCellRef = function (i, j, cell) {
            _this.props.headerCellRef(i, j, cell);
            var columns = _this.props.columns;
            var columnProps = columns[i] && columns[i][j];
            if (columnProps && columnProps.ref && typeof columnProps.ref === 'function') {
                columnProps.ref(cell);
            }
        };
        _this.createCellDomRef = function (i, j) {
            var cellRefKey = _this.getCellDomRefKey(i, j);
            if (!_this[cellRefKey]) {
                _this[cellRefKey] = {};
            }
            return _this[cellRefKey];
        };
        _this.getCellDomRef = function (cellRef, cellDom) {
            if (!cellRef) {
                return;
            }
            cellRef.current = cellDom;
        };
        _this.getCellDomRefKey = function (i, j) {
            return "header_cell_".concat(i, "_").concat(j);
        };
        _this.onSort = function (dataIndex, order, sort) {
            _this.props.onSort(dataIndex, order, sort);
        };
        _this.hasLock = false;
        return _this;
    }
    Header.prototype.render = function () {
        var _this = this;
        /*eslint-disable no-unused-vars */
        var _a = this.props,
            prefix = _a.prefix,
            className = _a.className,
            children = _a.children,
            Tag = _a.component,
            colGroup = _a.colGroup,
            columns = _a.columns,
            locale = _a.locale,
            filterParams = _a.filterParams,
            onFilter = _a.onFilter,
            components = _a.components,
            affixRef = _a.affixRef,
            headerCellRef = _a.headerCellRef,
            onSort = _a.onSort,
            sort = _a.sort,
            sortIcons = _a.sortIcons,
            onResizeChange = _a.onResizeChange,
            pure = _a.pure,
            rtl = _a.rtl,
            tableWidth = _a.tableWidth,
            tableEl = _a.tableEl,
            resizeProxyDomRef = _a.resizeProxyDomRef,
            others = tslib_1.__rest(_a, ["prefix", "className", "children", "component", "colGroup", "columns", "locale", "filterParams", "onFilter", "components", "affixRef", "headerCellRef", "onSort", "sort", "sortIcons", "onResizeChange", "pure", "rtl", "tableWidth", "tableEl", "resizeProxyDomRef"]);
        this.checkHasLock();
        var _b = components.Cell,
            Cell = _b === void 0 ? cell_1.default : _b,
            _c = components.Filter,
            Filter = _c === void 0 ? filter_1.default : _c,
            _d = components.Sort,
            Sort = _d === void 0 ? sort_1.default : _d,
            _e = components.Resize,
            Resize = _e === void 0 ? resize_1.default : _e;
        var rowSpan = columns.length;
        var header = columns.map(function (cols, index) {
            var col = cols.map(function (col, j) {
                var _a;
                var cellRef = _this.createCellDomRef(index, j);
                /* eslint-disable no-unused-vars, prefer-const */
                var title = col.title,
                    colSpan = col.colSpan,
                    sortable = col.sortable,
                    sortDirections = col.sortDirections,
                    resizable = col.resizable,
                    asyncResizable = col.asyncResizable,
                    dataIndex = col.dataIndex,
                    filters = col.filters,
                    filterMode = col.filterMode,
                    filterMenuProps = col.filterMenuProps,
                    filterProps = col.filterProps,
                    width = col.width,
                    align = col.align,
                    alignHeader = col.alignHeader,
                    className = col.className,
                    __normalized = col.__normalized,
                    lock = col.lock,
                    cellStyle = col.cellStyle,
                    wordBreak = col.wordBreak,
                    others = tslib_1.__rest(col, ["title", "colSpan", "sortable", "sortDirections", "resizable", "asyncResizable", "dataIndex", "filters", "filterMode", "filterMenuProps", "filterProps", "width", "align", "alignHeader", "className", "__normalized", "lock", "cellStyle", "wordBreak"]);
                var order = sort ? sort[dataIndex] : '';
                className = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "table-header-node")] = true, _a["".concat(prefix, "table-header-resizable")] = resizable || asyncResizable, _a["".concat(prefix, "table-word-break-").concat(wordBreak)] = !!wordBreak, _a["".concat(prefix, "table-header-sort-").concat(order)] = sortable && order, _a[className] = className, _a));
                var attrs = {},
                    sortElement,
                    filterElement,
                    resizeElement;
                attrs.colSpan = colSpan;
                // column.group doesn't have sort resize filter
                if (!(col.children && col.children.length)) {
                    if (sortable) {
                        sortElement = react_1.default.createElement(Sort, { prefix: prefix, className: "".concat(prefix, "table-header-icon"), dataIndex: dataIndex, onSort: _this.onSort, sortDirections: sortDirections, sortIcons: sortIcons, sort: sort, rtl: rtl, locale: locale });
                    }
                    if (asyncResizable || resizable) {
                        resizeElement = react_1.default.createElement(Resize, { asyncResizable: asyncResizable, hasLock: _this.hasLock, col: col, tableEl: tableEl, prefix: prefix, rtl: rtl, dataIndex: dataIndex, resizeProxyDomRef: resizeProxyDomRef, cellDomRef: cellRef, onChange: onResizeChange });
                    }
                    if (filters) {
                        filterElement = filters.length ? react_1.default.createElement(Filter, { dataIndex: dataIndex, className: "".concat(prefix, "table-header-icon"), filters: filters, prefix: prefix, locale: locale, rtl: rtl, filterParams: filterParams, filterMode: filterMode, filterMenuProps: filterMenuProps, filterProps: filterProps, onFilter: onFilter }) : null;
                    }
                    attrs.rowSpan = rowSpan - index;
                }
                if (+attrs.colSpan === 0) {
                    return null;
                }
                return react_1.default.createElement(Cell, tslib_1.__assign({}, others, attrs, { key: j, prefix: prefix, pure: pure, rtl: rtl, cell: title, component: "th", align: alignHeader ? alignHeader : align, className: className, ref: _this.getCellRef.bind(_this, index, j), getCellDomRef: _this.getCellDomRef.bind(_this, cellRef), type: "header" }), sortElement, filterElement, resizeElement);
            });
            return react_1.default.createElement("tr", { key: index }, col);
        });
        return react_1.default.createElement(Tag, tslib_1.__assign({ className: className }, others), header, children);
    };
    Header.propTypes = {
        children: prop_types_1.default.any,
        prefix: prop_types_1.default.string,
        pure: prop_types_1.default.bool,
        className: prop_types_1.default.string,
        component: prop_types_1.default.string,
        columns: prop_types_1.default.array,
        colGroup: prop_types_1.default.object,
        headerCellRef: prop_types_1.default.func,
        locale: prop_types_1.default.object,
        filterParams: prop_types_1.default.object,
        onFilter: prop_types_1.default.func,
        components: prop_types_1.default.object,
        sort: prop_types_1.default.object,
        sortIcons: prop_types_1.default.object,
        onSort: prop_types_1.default.func,
        onResizeChange: prop_types_1.default.func,
        tableWidth: prop_types_1.default.number,
        tableEl: prop_types_1.default.any
    };
    Header.defaultProps = {
        component: 'thead',
        columns: [],
        headerCellRef: noop,
        onFilter: noop,
        components: {},
        onSort: noop,
        onResizeChange: noop
    };
    return Header;
}(react_1.default.Component);
exports.default = Header;

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var dropdown_1 = __webpack_require__(43);
var menu_1 = __webpack_require__(13);
var button_1 = __webpack_require__(14);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
// 共享状态的组件需要变成非受控组件
var Filter = /** @class */function (_super) {
    tslib_1.__extends(Filter, _super);
    function Filter(props) {
        var _this = _super.call(this, props) || this;
        _this.filterKeydown = function (e) {
            e.preventDefault();
            e.stopPropagation();
            if (e.keyCode === util_1.KEYCODE.ENTER) {
                _this.setState({
                    visible: !_this.state.visible
                });
            }
        };
        _this.onFilterVisible = function (visible) {
            _this.setState({
                visible: visible
            });
            if (!visible) {
                var selectedKeys = tslib_1.__spreadArray([], tslib_1.__read(_this._selectedKeys), false);
                _this.setState({
                    selectedKeysChangedByInner: true,
                    selectedKeys: selectedKeys
                });
            }
        };
        _this.onFilterSelect = function (selectedKeys) {
            _this.setState({
                visible: true,
                selectedKeysChangedByInner: true,
                selectedKeys: selectedKeys
            });
        };
        _this.onFilterConfirm = function () {
            var selectedKeys = _this.state.selectedKeys;
            var filterParams = {},
                dataIndex = _this.props.dataIndex;
            filterParams[dataIndex] = {
                visible: false,
                selectedKeys: selectedKeys
            };
            _this._selectedKeys = tslib_1.__spreadArray([], tslib_1.__read(selectedKeys), false);
            _this.setState({
                visible: false,
                selectedKeysChangedByInner: true
            });
            // 兼容之前的格式
            _this.props.onFilter(filterParams);
        };
        _this.onFilterClear = function () {
            var filterParams = {},
                dataIndex = _this.props.dataIndex;
            filterParams[dataIndex] = {
                visible: false,
                selectedKeys: []
            };
            _this._selectedKeys = [];
            _this.setState({
                selectedKeys: [],
                visible: false,
                selectedKeysChangedByInner: true
            });
            // 兼容之前的格式
            _this.props.onFilter(filterParams);
        };
        var filterParams = props.filterParams || {};
        var filterConfig = filterParams[props.dataIndex] || {};
        _this.state = {
            visible: filterConfig.visible || false,
            selectedKeys: filterConfig.selectedKeys || [],
            selectedKeysChangedByInner: true
        };
        _this._selectedKeys = tslib_1.__spreadArray([], tslib_1.__read(_this.state.selectedKeys), false);
        return _this;
    }
    Filter.getDerivedStateFromProps = function (nextProps, prevState) {
        var state = {};
        if (nextProps.hasOwnProperty('filterParams') && typeof nextProps.filterParams !== 'undefined') {
            var dataIndex = nextProps.dataIndex || this.props.dataIndex;
            var filterParams = nextProps.filterParams || {};
            var filterConfig = filterParams[dataIndex] || {};
            var selectedKeys = void 0;
            if (prevState.selectedKeysChangedByInner) {
                selectedKeys = prevState.selectedKeys || [];
                state.selectedKeysChangedByInner = false;
            } else {
                selectedKeys = filterConfig.selectedKeys || [];
            }
            state.selectedKeys = selectedKeys;
        }
        return state;
    };
    Filter.prototype.componentDidUpdate = function (prevProps, prevState) {
        var selectedKeys = prevState.selectedKeys;
        this._selectedKeys = tslib_1.__spreadArray([], tslib_1.__read(selectedKeys), false);
    };
    Filter.prototype.render = function () {
        var _a, _b, _c;
        var _d = this.props,
            filters = _d.filters,
            prefix = _d.prefix,
            locale = _d.locale,
            className = _d.className,
            filterMode = _d.filterMode,
            filterMenuProps = _d.filterMenuProps,
            filterProps = _d.filterProps,
            rtl = _d.rtl;
        var dropdownClassname = (0, classnames_1.default)(filterProps && filterProps.className, (_a = {}, _a["".concat(prefix, "table-filter-menu")] = true, _a));
        var _e = this.state,
            visible = _e.visible,
            selectedKeys = _e.selectedKeys;
        var _f = filterMenuProps || {},
            subMenuSelectable = _f.subMenuSelectable,
            others = tslib_1.__rest(_f, ["subMenuSelectable"]);
        function renderMenuItem(item) {
            return react_1.default.createElement(menu_1.default.Item, { key: item.value }, item.label);
        }
        function renderSubMenu(parent, children) {
            return react_1.default.createElement(menu_1.default.SubMenu, { label: parent.label, key: parent.value, selectable: subMenuSelectable }, renderMenuContent(children));
        }
        function renderMenuContent(list) {
            return list.map(function (item) {
                if (item.children) {
                    return renderSubMenu(item, item.children);
                } else {
                    return renderMenuItem(item);
                }
            });
        }
        var content = renderMenuContent(filters),
            footer = react_1.default.createElement("div", { className: "".concat(prefix, "table-filter-footer") }, react_1.default.createElement(button_1.default, { type: "primary", onClick: this.onFilterConfirm }, locale.ok), react_1.default.createElement(button_1.default, { onClick: this.onFilterClear }, locale.reset));
        var cls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "table-filter")] = true, _b[className] = className, _b));
        var filterIconCls = (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "table-filter-active")] = selectedKeys && selectedKeys.length > 0, _c));
        return react_1.default.createElement(dropdown_1.default, tslib_1.__assign({ trigger: react_1.default.createElement("span", { role: "button", "aria-label": locale.filter, onKeyDown: this.filterKeydown, tabIndex: "0", className: cls }, react_1.default.createElement(icon_1.default, { type: "filter", size: "small", className: filterIconCls })), triggerType: "click", visible: visible, autoFocus: true, rtl: rtl, needAdjust: false, onVisibleChange: this.onFilterVisible, className: dropdownClassname }, filterProps), react_1.default.createElement(menu_1.default, tslib_1.__assign({ footer: footer, rtl: rtl, selectedKeys: selectedKeys, selectMode: filterMode, onSelect: this.onFilterSelect }, others), content));
    };
    Filter.propTypes = {
        dataIndex: prop_types_1.default.string,
        filters: prop_types_1.default.array,
        filterMode: prop_types_1.default.string,
        filterParams: prop_types_1.default.object,
        filterMenuProps: prop_types_1.default.object,
        filterProps: prop_types_1.default.object,
        locale: prop_types_1.default.object,
        onFilter: prop_types_1.default.func,
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool
    };
    Filter.defaultProps = {
        onFilter: function onFilter() {}
    };
    return Filter;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Filter);

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
/* eslint-disable react/prefer-stateless-function */
var Sort = /** @class */function (_super) {
    tslib_1.__extends(Sort, _super);
    function Sort() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.handleClick = function () {
            var _a = _this.props,
                sort = _a.sort,
                dataIndex = _a.dataIndex,
                sortDirections = _a.sortDirections;
            var nextSortType = '';
            sortDirections.forEach(function (dir, i) {
                if (sort[dataIndex] === dir) {
                    nextSortType = sortDirections.length - 1 > i ? sortDirections[i + 1] : sortDirections[0];
                }
            });
            if (!sort[dataIndex]) {
                nextSortType = sortDirections[0];
            }
            _this.onSort(dataIndex, nextSortType);
        };
        _this.keydownHandler = function (e) {
            e.preventDefault();
            e.stopPropagation();
            if (e.keyCode === util_1.KEYCODE.ENTER) {
                _this.handleClick();
            }
        };
        _this.onSort = function (dataIndex, order) {
            var sort = {};
            sort[dataIndex] = order;
            _this.props.onSort(dataIndex, order, sort);
        };
        return _this;
    }
    // 渲染排序
    Sort.prototype.renderSort = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            sort = _b.sort,
            sortIcons = _b.sortIcons,
            className = _b.className,
            dataIndex = _b.dataIndex,
            locale = _b.locale,
            sortDirections = _b.sortDirections,
            rtl = _b.rtl,
            sortStatus = sort[dataIndex],
            map = {
            desc: 'descending',
            asc: 'ascending'
        };
        var icons = sortDirections.map(function (sortOrder) {
            return sortOrder === 'default' ? null : react_1.default.createElement("a", { key: sortOrder, className: sortStatus === sortOrder ? 'current' : '' }, sortIcons ? sortIcons[sortOrder] : react_1.default.createElement(icon_1.default, { rtl: rtl, type: map[sortOrder], size: "xs" }));
        });
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "table-sort")] = true, _a[className] = className, _a));
        return react_1.default.createElement("span", { role: "button", tabIndex: "0", "aria-label": locale[sortStatus], className: cls, onClick: this.handleClick.bind(this), onKeyDown: this.keydownHandler }, icons);
    };
    Sort.prototype.render = function () {
        return this.renderSort();
    };
    Sort.propTypes = {
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        className: prop_types_1.default.string,
        sort: prop_types_1.default.object,
        sortIcons: prop_types_1.default.object,
        onSort: prop_types_1.default.func,
        sortDirections: prop_types_1.default.arrayOf(prop_types_1.default.oneOf(['desc', 'asc', 'default'])),
        dataIndex: prop_types_1.default.string,
        locale: prop_types_1.default.object
    };
    Sort.defaultProps = {
        sort: {},
        sortDirections: ['desc', 'asc']
    };
    return Sort;
}(react_1.default.Component);
exports.default = Sort;

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var row_1 = __webpack_require__(185);
/* eslint-disable react/prefer-stateless-function */
var SelectionRow = /** @class */function (_super) {
    tslib_1.__extends(SelectionRow, _super);
    function SelectionRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectionRow.prototype.render = function () {
        var _a;
        /* eslint-disable no-unused-vars*/
        var _b = this.props,
            className = _b.className,
            record = _b.record,
            primaryKey = _b.primaryKey;
        var selectedRowKeys = this.context.selectedRowKeys;
        var cls = (0, classnames_1.default)((_a = {
            selected: selectedRowKeys.indexOf(record[primaryKey]) > -1
        }, _a[className] = className, _a));
        return react_1.default.createElement(row_1.default, tslib_1.__assign({}, this.props, { className: cls }));
    };
    SelectionRow.propTypes = tslib_1.__assign({}, row_1.default.propTypes);
    SelectionRow.defaultProps = tslib_1.__assign({}, row_1.default.defaultProps);
    SelectionRow.contextTypes = {
        selectedRowKeys: prop_types_1.default.array
    };
    return SelectionRow;
}(react_1.default.Component);
exports.default = SelectionRow;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var util_1 = __webpack_require__(4);
var row_1 = __webpack_require__(102);
var ExpandedRow = /** @class */function (_super) {
    tslib_1.__extends(ExpandedRow, _super);
    function ExpandedRow() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.getExpandedRow = function (parentKey, ref) {
            var getExpandedRowRef = _this.context.getExpandedRowRef;
            getExpandedRowRef && getExpandedRowRef(parentKey, ref);
        };
        return _this;
    }
    ExpandedRow.prototype.renderExpandedRow = function (record, rowIndex) {
        var _a = this.context,
            expandedRowRender = _a.expandedRowRender,
            expandedRowIndent = _a.expandedRowIndent,
            openRowKeys = _a.openRowKeys,
            lockType = _a.lockType,
            expandedIndexSimulate = _a.expandedIndexSimulate,
            expandedRowWidthEquals2Table = _a.expandedRowWidthEquals2Table;
        var expandedIndex = expandedIndexSimulate ? (rowIndex - 1) / 2 : rowIndex;
        var _b = this.props,
            columns = _b.columns,
            cellRef = _b.cellRef;
        var colSpan = columns.length;
        var expandedCols = columns[0] && columns[0].__colIndex || 0;
        if (expandedRowRender) {
            var _c = this.props,
                primaryKey = _c.primaryKey,
                prefix = _c.prefix,
                leftIndent = expandedRowIndent[0],
                rightIndent = expandedRowIndent[1],
                totalIndent = leftIndent + rightIndent,
                renderCols = function renderCols(number, start) {
                if (start === void 0) {
                    start = 0;
                }
                var ret = [];
                var _loop_1 = function _loop_1(i) {
                    ret.push(react_1.default.createElement("td", { key: i, ref: function ref(cell) {
                            return cellRef(rowIndex, i + start, cell);
                        } }, "\xA0"));
                };
                for (var i = 0; i < number; i++) {
                    _loop_1(i);
                }
                return ret;
            };
            var content = void 0;
            if (totalIndent > colSpan && !lockType) {
                util_1.log.warning("It's not allowed expandedRowIndent is more than the number of columns.");
            }
            if (leftIndent < columns.length && lockType === 'left') {
                util_1.log.warning('expandedRowIndent left is less than the number of left lock columns.');
            }
            if (rightIndent < columns.length && lockType === 'right') {
                util_1.log.warning('expandedRowIndent right is less than the number of right lock columns.');
            }
            if (lockType) {
                return openRowKeys.indexOf(record[primaryKey]) > -1 ? react_1.default.createElement("tr", { className: "".concat(prefix, "table-expanded-row"), key: "expanded-".concat(expandedIndex) }, react_1.default.createElement("td", { colSpan: colSpan, ref: function ref(cell) {
                        return cellRef(rowIndex, expandedCols, cell);
                    } }, "\xA0")) : null;
            }
            var expandedRowStyle = {
                position: 'sticky',
                left: 0
            };
            // 暴露给用户的index
            content = expandedRowRender(record, expandedIndex);
            if (!react_1.default.isValidElement(content)) {
                content = react_1.default.createElement("div", { className: "".concat(prefix, "table-cell-wrapper"), ref: this.getExpandedRow.bind(this, record[primaryKey]), style: expandedRowWidthEquals2Table && expandedRowStyle }, content);
            } else {
                content = expandedRowWidthEquals2Table ? react_1.default.createElement("div", { className: "".concat(prefix, "table-expanded-area"), ref: this.getExpandedRow.bind(this, record[primaryKey]), style: expandedRowStyle }, content) : content;
            }
            var rightStart_1 = columns.length;
            columns.forEach(function (col) {
                col.lock === 'right' && rightStart_1--;
            });
            return openRowKeys.indexOf(record[primaryKey]) > -1 ? react_1.default.createElement("tr", { className: "".concat(prefix, "table-expanded-row"), key: "expanded-".concat(record[primaryKey] || expandedIndex) }, renderCols(leftIndent), react_1.default.createElement("td", { colSpan: colSpan - totalIndent }, content), renderCols(rightIndent, rightStart_1)) : null;
        } else {
            return null;
        }
    };
    ExpandedRow.prototype.render = function () {
        /* eslint-disable no-unused-vars*/
        var _a = this.props,
            record = _a.record,
            rowIndex = _a.rowIndex,
            columns = _a.columns,
            others = tslib_1.__rest(_a, ["record", "rowIndex", "columns"]);
        var expandedIndexSimulate = this.context.expandedIndexSimulate;
        if (record.__expanded) {
            return this.renderExpandedRow(record, rowIndex, columns);
        }
        var newRowIndex = expandedIndexSimulate ? rowIndex / 2 : rowIndex;
        return react_1.default.createElement(row_1.default, tslib_1.__assign({}, others, { record: record, columns: columns, __rowIndex: rowIndex, rowIndex: newRowIndex }));
    };
    ExpandedRow.propTypes = tslib_1.__assign({}, row_1.default.propTypes);
    ExpandedRow.defaultProps = tslib_1.__assign({}, row_1.default.defaultProps);
    ExpandedRow.contextTypes = {
        openRowKeys: prop_types_1.default.array,
        expandedRowRender: prop_types_1.default.func,
        expandedRowIndent: prop_types_1.default.array,
        expandedIndexSimulate: prop_types_1.default.bool,
        expandedRowWidthEquals2Table: prop_types_1.default.bool,
        lockType: prop_types_1.default.oneOf(['left', 'right']),
        getExpandedRowRef: prop_types_1.default.func
    };
    return ExpandedRow;
}(react_1.default.Component);
exports.default = ExpandedRow;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var body_1 = __webpack_require__(61);
/* eslint-disable react/prefer-stateless-function */
var FixedBody = /** @class */function (_super) {
    tslib_1.__extends(FixedBody, _super);
    function FixedBody() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.onBodyScroll = function (event) {
            var onFixedScrollSync = _this.context.onFixedScrollSync;
            // sync scroll left to header
            onFixedScrollSync && onFixedScrollSync(event);
            // sync scroll top/left to lock columns
            if ('onLockScroll' in _this.props && typeof _this.props.onLockScroll === 'function') {
                _this.props.onLockScroll(event);
            }
        };
        return _this;
    }
    FixedBody.prototype.componentDidMount = function () {
        var getNode = this.context.getNode;
        getNode && getNode('body', (0, react_dom_1.findDOMNode)(this));
    };
    FixedBody.prototype.render = function () {
        /*eslint-disable no-unused-vars */
        var _a = this.props,
            className = _a.className,
            colGroup = _a.colGroup,
            onLockScroll = _a.onLockScroll,
            tableWidth = _a.tableWidth,
            others = tslib_1.__rest(_a, ["className", "colGroup", "onLockScroll", "tableWidth"]);
        var _b = this.context,
            maxBodyHeight = _b.maxBodyHeight,
            fixedHeader = _b.fixedHeader;
        var style = {};
        if (fixedHeader) {
            style.maxHeight = maxBodyHeight;
            style.position = 'relative';
        }
        return react_1.default.createElement("div", { style: style, className: className, onScroll: this.onBodyScroll }, react_1.default.createElement("table", { style: { width: tableWidth } }, colGroup, react_1.default.createElement(body_1.default, tslib_1.__assign({}, others, { colGroup: colGroup }))));
    };
    FixedBody.propTypes = {
        children: prop_types_1.default.any,
        prefix: prop_types_1.default.string,
        className: prop_types_1.default.string,
        colGroup: prop_types_1.default.any,
        onLockScroll: prop_types_1.default.func,
        tableWidth: prop_types_1.default.number
    };
    FixedBody.contextTypes = {
        fixedHeader: prop_types_1.default.bool,
        maxBodyHeight: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        onFixedScrollSync: prop_types_1.default.func,
        getNode: prop_types_1.default.func
    };
    return FixedBody;
}(react_1.default.Component);
exports.default = FixedBody;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var body_1 = __webpack_require__(186);
/* eslint-disable react/prefer-stateless-function */
var LockBody = /** @class */function (_super) {
    tslib_1.__extends(LockBody, _super);
    function LockBody() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.onBodyScroll = function (event) {
            _this.context.onLockBodyScroll(event);
        };
        return _this;
    }
    LockBody.prototype.componentDidMount = function () {
        this.context.getLockNode('body', (0, react_dom_1.findDOMNode)(this), this.context.lockType);
    };
    LockBody.prototype.render = function () {
        var event = {
            onLockScroll: this.onBodyScroll
        };
        return react_1.default.createElement(body_1.default, tslib_1.__assign({}, this.props, event));
    };
    LockBody.propTypes = tslib_1.__assign({}, body_1.default.propTypes);
    LockBody.contextTypes = tslib_1.__assign(tslib_1.__assign({}, body_1.default.contextTypes), { getLockNode: prop_types_1.default.func, onLockBodyScroll: prop_types_1.default.func, lockType: prop_types_1.default.oneOf(['left', 'right']) });
    return LockBody;
}(react_1.default.Component);
exports.default = LockBody;

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var header_1 = __webpack_require__(64);
var LockHeader = /** @class */function (_super) {
    tslib_1.__extends(LockHeader, _super);
    function LockHeader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LockHeader.prototype.componentDidMount = function () {
        var _a = this.context,
            getNode = _a.getNode,
            getLockNode = _a.getLockNode;
        getNode && getNode('header', (0, react_dom_1.findDOMNode)(this), this.context.lockType);
        getLockNode && getLockNode('header', (0, react_dom_1.findDOMNode)(this), this.context.lockType);
    };
    LockHeader.propTypes = tslib_1.__assign({}, header_1.default.propTypes);
    LockHeader.contextTypes = tslib_1.__assign(tslib_1.__assign({}, header_1.default.contextTypes), { getLockNode: prop_types_1.default.func, lockType: prop_types_1.default.oneOf(['left', 'right']) });
    return LockHeader;
}(header_1.default);
exports.default = LockHeader;

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
/**
 * Table.GroupHeader
 * @order 2
 **/
var ListHeader = /** @class */function (_super) {
  tslib_1.__extends(ListHeader, _super);
  function ListHeader() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ListHeader.prototype.render = function () {
    return null;
  };
  ListHeader.propTypes = {
    /**
     * 行渲染的逻辑
     */
    cell: prop_types_1.default.oneOfType([prop_types_1.default.element, prop_types_1.default.node, prop_types_1.default.func]),
    /**
     * 是否在Children上面渲染selection
     */
    hasChildrenSelection: prop_types_1.default.bool,
    /**
     * 是否在GroupHeader上面渲染selection
     */
    hasSelection: prop_types_1.default.bool,
    /**
     * 当 dataSouce 里没有 children 时，是否使用内容作为数据
     */
    useFirstLevelDataWhenNoChildren: prop_types_1.default.bool
  };
  ListHeader.defaultProps = {
    cell: function cell() {
      return '';
    },
    hasSelection: true,
    hasChildrenSelection: false,
    useFirstLevelDataWhenNoChildren: false
  };
  ListHeader._typeMark = 'listHeader';
  return ListHeader;
}(react_1.default.Component);
exports.default = ListHeader;

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
/* istanbul ignore file */
/**
 * Table.GroupFooter
 * @order 3
 **/
var ListFooter = /** @class */function (_super) {
    tslib_1.__extends(ListFooter, _super);
    function ListFooter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ListFooter.prototype.render = function () {
        return null;
    };
    ListFooter.propTypes = {
        /**
         * 行渲染的逻辑
         */
        cell: prop_types_1.default.oneOfType([prop_types_1.default.element, prop_types_1.default.node, prop_types_1.default.func])
    };
    ListFooter.defaultProps = {
        cell: function cell() {
            return '';
        }
    };
    ListFooter._typeMark = 'listFooter';
    return ListFooter;
}(react_1.default.Component);
exports.default = ListFooter;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var config_provider_1 = __webpack_require__(5);
var tree_1 = __webpack_require__(448);
var tree_node_1 = __webpack_require__(103);
tree_1.default.Node = tree_node_1.default;
exports.default = config_provider_1.default.config(tree_1.default, {
    exportNames: ['setFocusKey']
});

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllDescendantKeys = exports.convertChildren2Data = exports.getAllCheckedKeys = exports.isSiblingOrSelf = exports.isDescendantOrSelf = exports.filterParentKey = exports.filterChildKey = exports.getCheckableParentNode = exports.isNodeDisabledChecked = exports.forEachEnableNode = exports.isNodeChecked = exports.normalizeToArray = void 0;
var tslib_1 = __webpack_require__(0);
var tree_node_1 = __webpack_require__(103);
/* eslint-disable valid-jsdoc */
function normalizeToArray(keys) {
    if (keys !== undefined && keys !== null) {
        if (Array.isArray(keys)) {
            return tslib_1.__spreadArray([], tslib_1.__read(keys), false);
        }
        return [keys];
    }
    return [];
}
exports.normalizeToArray = normalizeToArray;
/**
 * 判断子节点是否是选中状态，如果 checkable={false} 则向下递归，
 * @param {Node} child
 * @param {Array} checkedKeys
 */
function isNodeChecked(node, checkedKeys) {
    if (node.disabled || node.checkboxDisabled) return true;
    /* istanbul ignore next */
    if (node.checkable === false) {
        return !node.children || node.children.length === 0 || node.children.every(function (c) {
            return isNodeChecked(c, checkedKeys);
        });
    }
    return checkedKeys.indexOf(node.key) > -1;
}
exports.isNodeChecked = isNodeChecked;
/**
 * 遍历所有可用的子节点
 * @param {Node}
 * @param {Function} callback
 */
function forEachEnableNode(node, callback) {
    if (callback === void 0) {
        callback = function callback() {};
    }
    if (node.disabled || node.checkboxDisabled) return;
    // eslint-disable-next-line callback-return
    callback(node);
    if (node.children && node.children.length > 0) {
        node.children.forEach(function (child) {
            return forEachEnableNode(child, callback);
        });
    }
}
exports.forEachEnableNode = forEachEnableNode;
/**
 * 判断节点是否禁用checked
 * @param {Node} node
 * @returns {Boolean}
 */
function isNodeDisabledChecked(node) {
    if (node.disabled || node.checkboxDisabled) return true;
    /* istanbul ignore next */
    if (node.checkable === false) {
        return !node.children || node.children.length === 0 || node.children.every(isNodeDisabledChecked);
    }
    return false;
}
exports.isNodeDisabledChecked = isNodeDisabledChecked;
/**
 * 递归获取一个 checkable = {true} 的父节点，当 checkable={false} 时继续往上查找
 * @param {Node} node
 * @param {Map} _p2n
 * @return {Node}
 */
function getCheckableParentNode(node, _p2n) {
    var parentPos = node.pos.split(['-']);
    if (parentPos.length === 2) return node;
    parentPos.splice(parentPos.length - 1, 1);
    parentPos = parentPos.join('-');
    var parentNode = _p2n[parentPos];
    if (parentNode.disabled || parentNode.checkboxDisabled) return false;
    /* istanbul ignore next */
    if (parentNode.checkable === false) {
        return getCheckableParentNode(parentNode, _p2n);
    }
    return parentNode;
}
exports.getCheckableParentNode = getCheckableParentNode;
/**
 * 过滤子节点
 * @param {Array} keys
 * @param {Object} _k2n
 */
function filterChildKey(keys, _k2n, _p2n) {
    var newKeys = [];
    keys.forEach(function (key) {
        var node = getCheckableParentNode(_k2n[key], _p2n);
        if (!node || node.checkable === false || node === _k2n[key] || keys.indexOf(node.key) === -1) {
            newKeys.push(key);
        }
    });
    return newKeys;
}
exports.filterChildKey = filterChildKey;
function filterParentKey(keys, _k2n) {
    var newKeys = [];
    for (var i = 0; i < keys.length; i++) {
        var node = _k2n[keys[i]];
        if (!node.children || node.children.length === 0 || node.children.every(isNodeDisabledChecked)) {
            newKeys.push(keys[i]);
        }
    }
    return newKeys;
}
exports.filterParentKey = filterParentKey;
function isDescendantOrSelf(currentPos, targetPos) {
    if (!currentPos || !targetPos) {
        return false;
    }
    var currentNums = currentPos.split('-');
    var targetNums = targetPos.split('-');
    return currentNums.length <= targetNums.length && currentNums.every(function (num, index) {
        return num === targetNums[index];
    });
}
exports.isDescendantOrSelf = isDescendantOrSelf;
function isSiblingOrSelf(currentPos, targetPos) {
    var currentNums = currentPos.split('-').slice(0, -1);
    var targetNums = targetPos.split('-').slice(0, -1);
    return currentNums.length === targetNums.length && currentNums.every(function (num, index) {
        return num === targetNums[index];
    });
}
exports.isSiblingOrSelf = isSiblingOrSelf;
// eslint-disable-next-line max-statements
function getAllCheckedKeys(checkedKeys, _k2n, _p2n) {
    checkedKeys = normalizeToArray(checkedKeys);
    var filteredKeys = checkedKeys.filter(function (key) {
        return !!_k2n[key];
    });
    var flatKeys = tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(filterChildKey(filteredKeys, _k2n, _p2n).filter(function (key) {
        return !(_k2n[key].disabled || _k2n[key].checkboxDisabled);
    })), false), tslib_1.__read(filteredKeys.filter(function (key) {
        return _k2n[key].disabled || _k2n[key].checkboxDisabled;
    })), false);
    var removeKey = function removeKey(child) {
        if (child.disabled || child.checkboxDisabled) return;
        if (child.checkable === false && child.children && child.children.length > 0) {
            return child.children.forEach(removeKey);
        }
        flatKeys.splice(flatKeys.indexOf(child.key), 1);
    };
    var addParentKey = function addParentKey(i, parent) {
        return flatKeys.splice(i, 0, parent.key);
    };
    // 所有 child nodes 选中时，取 parent node，删除所有 child nodes
    var keys = tslib_1.__spreadArray([], tslib_1.__read(flatKeys), false);
    for (var i = 0; i < keys.length; i++) {
        var pos = _k2n[keys[i]].pos;
        var nums = pos.split('-');
        if (nums.length === 2) {
            continue;
        }
        for (var j = nums.length - 2; j > 0; j--) {
            var parentPos = nums.slice(0, j + 1).join('-');
            var parent_1 = _p2n[parentPos];
            if (parent_1.checkable === false || parent_1.disabled || parent_1.checkboxDisabled) continue;
            var parentChecked = parent_1.children.every(function (child) {
                return isNodeChecked(child, flatKeys);
            });
            var isAllChildrenDisabled = parent_1.children.every(function (child) {
                return child.disabled;
            });
            // don't auto select parent when all children are disabled,
            // fix https://github.com/alibaba-fusion/next/issues/3936
            if (parentChecked && !isAllChildrenDisabled) {
                parent_1.children.forEach(removeKey);
                addParentKey(i, parent_1);
            } else {
                break;
            }
        }
    }
    // 重新选中所有 child nodes
    var newKeys = new Set();
    flatKeys.forEach(function (key) {
        if (_k2n[key].disabled || _k2n[key].checkboxDisabled) {
            newKeys.add(key);
            return;
        }
        forEachEnableNode(_k2n[key], function (node) {
            if (node.checkable === false) return;
            newKeys.add(node.key);
        });
    });
    return Array.from(newKeys);
}
exports.getAllCheckedKeys = getAllCheckedKeys;
/**
 * Convert children of Tree into DataSource
 * @param  {React.ReactNode} children
 * @return {Array}
 */
function convertChildren2Data(children) {
    function convert(treeNodes) {
        treeNodes = normalizeToArray(treeNodes);
        return treeNodes.map(function (node) {
            if (node.type && node.type !== tree_node_1.default && node.type.target !== tree_node_1.default) {
                // 为了兼容之前的实现 保留非法节点
                return {
                    illegalFlag: true,
                    node: node
                };
            }
            var key = node.key,
                _a = node.props,
                children = _a.children,
                rest = tslib_1.__rest(_a, ["children"]);
            var nodeData = tslib_1.__assign({ key: key }, rest);
            if (children && !(Array.isArray(children) && !children.length)) {
                nodeData.children = convert(children);
            }
            return nodeData;
        }).filter(function (treeNodeData) {
            return treeNodeData;
        });
    }
    return convert(children);
}
exports.convertChildren2Data = convertChildren2Data;
/**
 * get all descendant`s keys of current node
 * @param  {Object} nodeData
 * @param  {Object} p2n
 * @return {Array}
 */
function getAllDescendantKeys(nodeData, p2n) {
    var posList = nodeData.pos.split('-');
    var keys = [];
    var pos = posList[0];
    for (var i = 1; i < posList.length - 1; i++) {
        pos = [pos, posList[i]].join('-');
        keys.push(p2n[pos].key);
    }
    return keys;
}
exports.getAllDescendantKeys = getAllDescendantKeys;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
// compatible with 0.x version
/* istanbul ignore next */
var transform = function transform(props, deprecated) {
    var listType = props.listType,
        defaultFileList = props.defaultFileList,
        fileList = props.fileList,
        others = tslib_1.__rest(props, ["listType", "defaultFileList", "fileList"]);
    var newprops = others;
    if (listType === 'text-image') {
        deprecated('listType=text-image', 'listType=image', 'Upload');
        newprops.listType = 'image';
    } else if (listType === 'picture-card') {
        deprecated('listType=picture-card', 'listType=card', 'Upload');
        newprops.listType = 'card';
    } else {
        newprops.listType = listType;
    }
    if ('defaultFileList' in props) {
        deprecated('defaultFileList', 'defaultValue', 'Upload');
        newprops.defaultValue = defaultFileList;
    }
    if ('fileList' in props) {
        deprecated('fileList', 'value', 'Upload');
        newprops.value = fileList;
    }
    return newprops;
};
exports.default = transform;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var Base = /** @class */function (_super) {
    tslib_1.__extends(Base, _super);
    function Base() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.saveUploaderRef = function (ref) {
            /* istanbul ignore if */
            if (ref && typeof ref.getInstance === 'function') {
                _this.uploaderRef = ref.getInstance();
            } else {
                _this.uploaderRef = ref;
            }
        };
        return _this;
    }
    /* istanbul ignore next */
    Base.prototype.abort = function (file) {
        /* istanbul ignore next */
        this.uploaderRef.abort(file);
    };
    /* istanbul ignore next */
    Base.prototype.startUpload = function () {
        /* istanbul ignore next */
        this.uploaderRef.startUpload();
    };
    /* istanbul ignore next */
    Base.prototype.isUploading = function () {
        /* istanbul ignore next */
        return this.uploaderRef.isUploading();
    };
    return Base;
}(react_1.Component);
exports.default = Base;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var util_1 = __webpack_require__(4);
var uploader_1 = __webpack_require__(196);
var selecter_1 = __webpack_require__(105);
var Html5Uploader = /** @class */function (_super) {
    tslib_1.__extends(Html5Uploader, _super);
    function Html5Uploader() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.getUploadOptions = function (props) {
            return {
                action: props.action,
                name: props.name,
                timeout: props.timeout,
                method: props.method,
                beforeUpload: props.beforeUpload,
                onProgress: props.onProgress,
                onSuccess: props.onSuccess,
                onError: props.onError,
                withCredentials: props.withCredentials,
                headers: props.headers,
                data: props.data,
                request: props.request
            };
        };
        return _this;
    }
    Html5Uploader.prototype.componentDidMount = function () {
        var props = this.props;
        var options = this.getUploadOptions(props);
        this.uploader = new uploader_1.default(options);
    };
    Html5Uploader.prototype.componentDidUpdate = function (prevProps) {
        var preOptions = this.getUploadOptions(prevProps);
        var options = this.getUploadOptions(this.props);
        var keys = Object.keys(options);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (options[key] !== preOptions[key]) {
                this.uploader.setOptions(options);
                return;
            }
        }
    };
    Html5Uploader.prototype.componentWillUnmount = function () {
        this.abort();
    };
    Html5Uploader.prototype.abort = function (file) {
        this.uploader.abort(file);
    };
    Html5Uploader.prototype.startUpload = function (fileList) {
        this.uploader.startUpload(fileList);
    };
    Html5Uploader.prototype.render = function () {
        var _a = this.props,
            accept = _a.accept,
            multiple = _a.multiple,
            webkitdirectory = _a.webkitdirectory,
            children = _a.children,
            id = _a.id,
            disabled = _a.disabled,
            dragable = _a.dragable,
            style = _a.style,
            className = _a.className,
            onSelect = _a.onSelect,
            onDragOver = _a.onDragOver,
            onDragLeave = _a.onDragLeave,
            onDrop = _a.onDrop,
            name = _a.name,
            others = tslib_1.__rest(_a, ["accept", "multiple", "webkitdirectory", "children", "id", "disabled", "dragable", "style", "className", "onSelect", "onDragOver", "onDragLeave", "onDrop", "name"]);
        return react_1.default.createElement(selecter_1.default, tslib_1.__assign({}, others, { id: id, accept: accept, multiple: multiple, webkitdirectory: webkitdirectory, dragable: dragable, disabled: disabled, className: className, style: style, onSelect: onSelect, onDragOver: onDragOver, onDragLeave: onDragLeave, onDrop: onDrop, name: name }), children);
    };
    Html5Uploader.propTypes = tslib_1.__assign(tslib_1.__assign({}, selecter_1.default.propTypes), {
        /**
         * 上传的地址
         */
        action: prop_types_1.default.string,
        /**
         * 接受上传的文件类型 (image/png, image/jpg, .doc, .ppt) 详见 [input accept attribute](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-accept)
         */
        accept: prop_types_1.default.string,
        /**
         * 上传额外传参
         */
        data: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.func]),
        /**
         * 设置上传的请求头部
         */
        headers: prop_types_1.default.object,
        /**
         * 是否允许请求携带 cookie
         */
        withCredentials: prop_types_1.default.bool,
        /**
         * 上传文件之前
         * @param {Object} file 文件对象
         * @return {Boolean} `false` 停止上传
         */
        beforeUpload: prop_types_1.default.func,
        /**
         * 正在上传文件的钩子，参数为上传的事件以及文件
         */
        onProgress: prop_types_1.default.func,
        /**
         * 上传成功回调函数，参数为请求下响应信息以及文件
         */
        onSuccess: prop_types_1.default.func,
        /**
         * 上传失败回调函数，参数为上传失败的信息、响应信息以及文件
         */
        onError: prop_types_1.default.func, children: prop_types_1.default.node,
        /**
         * 上传超时,单位ms
         */
        timeout: prop_types_1.default.number,
        /**
         * 上传方法
         */
        method: prop_types_1.default.oneOf(['post', 'put']), request: prop_types_1.default.func });
    Html5Uploader.defaultProps = tslib_1.__assign(tslib_1.__assign({}, selecter_1.default.defaultProps), { name: 'file', multiple: false, withCredentials: true, beforeUpload: util_1.func.noop, onSelect: util_1.func.noop, onDragOver: util_1.func.noop, onDragLeave: util_1.func.noop, onDrop: util_1.func.noop, onProgress: util_1.func.noop, onSuccess: util_1.func.noop, onError: util_1.func.noop, onAbort: util_1.func.noop, method: 'post' });
    return Html5Uploader;
}(react_1.Component);
exports.default = Html5Uploader;

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(36);
var request_1 = __webpack_require__(459);
var noop = util_1.func.noop;
var Uploader = /** @class */function () {
    function Uploader(options) {
        this.options = tslib_1.__assign({ beforeUpload: noop, onProgress: noop, onSuccess: noop, onError: noop, data: {}, name: 'file', method: 'post' }, options);
        this.reqs = {};
    }
    Uploader.prototype.setOptions = function (options) {
        (0, _extends3.default)(this.options, options);
    };
    Uploader.prototype.startUpload = function (files) {
        var _this = this;
        var filesArr = files.length ? Array.prototype.slice.call(files) : [files];
        filesArr.forEach(function (file) {
            file.uid = file.uid || (0, util_2.uid)();
            _this.upload(file);
        });
    };
    Uploader.prototype.abort = function (file) {
        var reqs = this.reqs;
        if (file) {
            var uid_1 = file;
            if (file && file.uid) {
                uid_1 = file.uid;
            }
            if (reqs[uid_1] && reqs[uid_1].abort) {
                reqs[uid_1].abort();
            }
            delete reqs[uid_1];
        } else {
            Object.keys(reqs).forEach(function (uid) {
                if (reqs[uid] && reqs[uid].abort) {
                    reqs[uid].abort();
                }
                delete reqs[uid];
            });
        }
    };
    Uploader.prototype.upload = function (file) {
        var _this = this;
        var _a = this.options,
            beforeUpload = _a.beforeUpload,
            action = _a.action,
            name = _a.name,
            headers = _a.headers,
            timeout = _a.timeout,
            withCredentials = _a.withCredentials,
            method = _a.method,
            data = _a.data;
        var before = beforeUpload(file, {
            action: action,
            name: name,
            headers: headers,
            timeout: timeout,
            withCredentials: withCredentials,
            method: method,
            data: data
        });
        util_1.func.promiseCall(before, function (options) {
            if (options === false) {
                var err = new Error(util_2.errorCode.BEFOREUPLOAD_REJECT);
                err.code = util_2.errorCode.BEFOREUPLOAD_REJECT;
                return _this.options.onError(err, null, file);
            }
            _this.post(file, util_1.obj.isPlainObject(options) ? options : undefined);
        }, function (error) {
            var err;
            if (error) {
                err = error;
            } else {
                err = new Error(util_2.errorCode.BEFOREUPLOAD_REJECT);
                err.code = util_2.errorCode.BEFOREUPLOAD_REJECT;
            }
            _this.options.onError(err, null, file);
        });
    };
    Uploader.prototype.post = function (file, options) {
        var _this = this;
        if (options === void 0) {
            options = {};
        }
        var requestOptions = tslib_1.__assign(tslib_1.__assign({}, this.options), options);
        var action = requestOptions.action,
            name = requestOptions.name,
            headers = requestOptions.headers,
            timeout = requestOptions.timeout,
            withCredentials = requestOptions.withCredentials,
            _onProgress = requestOptions.onProgress,
            _onSuccess = requestOptions.onSuccess,
            _onError = requestOptions.onError,
            method = requestOptions.method;
        var data = requestOptions.data;
        if (typeof data === 'function') {
            data = data(file);
        }
        var uid = file.uid;
        var request = typeof requestOptions.request === 'function' ? requestOptions.request : request_1.default;
        this.reqs[uid] = request({
            action: action,
            filename: name,
            file: file,
            data: data,
            timeout: timeout,
            headers: headers,
            withCredentials: withCredentials,
            method: method,
            onProgress: function onProgress(e) {
                _onProgress(e, file);
            },
            onSuccess: function onSuccess(ret) {
                delete _this.reqs[uid];
                _onSuccess(ret, file);
            },
            onError: function onError(err, ret) {
                delete _this.reqs[uid];
                _onError(err, ret, file);
            }
        });
    };
    return Uploader;
}();
exports.default = Uploader;

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var time_menu_1 = __webpack_require__(472);
var prop_types_2 = __webpack_require__(107);
var noop = util_1.func.noop;
var TimePickerPanel = /** @class */function (_super) {
    tslib_1.__extends(TimePickerPanel, _super);
    function TimePickerPanel() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.prefixCls = "".concat(_this.props.prefix, "time-picker2");
        /**
         *
         * @param {enum} panelType 'start' | 'end' | 'panel'
         * @param {*} index
         * @param {*} type 'hour' | 'minute' | 'second'
         */
        _this.onSelectMenuItem = function (panelType, index, type) {
            var _a = _this.props,
                value = _a.value,
                isRange = _a.isRange;
            var valueArr = Array.isArray(value) ? value : [value];
            var val = panelType === 'end' ? valueArr[1] : valueArr[0];
            var clonedValue = val ? val.clone() : (0, util_1.datejs)('00:00:00', 'HH:mm:ss', true);
            var newValue;
            switch (type) {
                case 'hour':
                    newValue = clonedValue.hour(index);
                    break;
                case 'minute':
                    newValue = clonedValue.minute(index);
                    break;
                case 'second':
                    newValue = clonedValue.second(index);
                    break;
            }
            if (isRange) {
                var nextValueArray = [];
                if (panelType === 'start') {
                    nextValueArray[0] = newValue;
                    nextValueArray[1] = value[1];
                } else if (panelType === 'end') {
                    nextValueArray[0] = value[0];
                    nextValueArray[1] = newValue;
                }
                _this.props.onSelect(nextValueArray, panelType);
            } else {
                _this.props.onSelect(newValue, 'panel');
            }
        };
        _this.getDisabledItems = function () {
            var _a = _this.props,
                disabledHours = _a.disabledHours,
                disabledMinutes = _a.disabledMinutes,
                disabledSeconds = _a.disabledSeconds,
                value = _a.value,
                isRange = _a.isRange;
            var disableds = {
                newDisabledHours: [disabledHours],
                newDisabledMinutes: [disabledMinutes],
                newDisabledSeconds: [disabledSeconds]
            };
            if (!isRange) {
                return disableds;
            }
            var dHours = disabledHours() || [];
            var dMinutes = disabledMinutes() || [];
            var dSeconds = disabledSeconds() || [];
            var v0 = value[0];
            var v1 = value[1];
            var hoursEqual = function hoursEqual() {
                return v0 && v1 && v0.hour() === v1.hour();
            };
            var minutesEqual = function minutesEqual() {
                return v0 && v1 && v0.hour() === v1.hour() && v0.minute() === v1.minute();
            };
            disableds.newDisabledHours[0] = function (h) {
                return v1 && h > v1.hour() || dHours.indexOf(h) > -1;
            };
            disableds.newDisabledMinutes[0] = function (m) {
                return v1 && hoursEqual() && m > v1.minute() || dMinutes.indexOf(m) > -1;
            };
            disableds.newDisabledSeconds[0] = function (s) {
                return v1 && minutesEqual() && s > v1.second() || dSeconds.indexOf(s) > -1;
            };
            disableds.newDisabledHours[1] = function (h) {
                return v0 && h < v0.hour() || dHours.indexOf(h) > -1;
            };
            disableds.newDisabledMinutes[1] = function (m) {
                return v0 && m < (hoursEqual() && v0.minute()) || dMinutes.indexOf(m) > -1;
            };
            disableds.newDisabledSeconds[1] = function (s) {
                return v0 && minutesEqual() && s < v0.second() || dSeconds.indexOf(s) > -1;
            };
            return disableds;
        };
        return _this;
    }
    TimePickerPanel.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props,
            prefix = _b.prefix,
            value = _b.value,
            isRange = _b.isRange,
            locale = _b.locale,
            className = _b.className,
            disabled = _b.disabled,
            showHour = _b.showHour,
            showMinute = _b.showMinute,
            showSecond = _b.showSecond,
            hourStep = _b.hourStep,
            minuteStep = _b.minuteStep,
            secondStep = _b.secondStep,
            renderTimeMenuItems = _b.renderTimeMenuItems,
            others = tslib_1.__rest(_b, ["prefix", "value", "isRange", "locale", "className", "disabled", "showHour", "showMinute", "showSecond", "hourStep", "minuteStep", "secondStep", "renderTimeMenuItems"]);
        var colLen = [showHour, showMinute, showSecond].filter(function (v) {
            return v;
        }).length;
        var classNames = (0, classnames_1.default)("".concat(this.prefixCls, "-panel"), (_a = {}, _a["".concat(this.prefixCls, "-panel-col-").concat(colLen)] = !isRange, _a["".concat(this.prefixCls, "-panel-range")] = isRange, _a), className);
        var activeHour = [];
        var activeMinute = [];
        var activeSecond = [];
        var valueArr = Array.isArray(value) ? value : [value];
        valueArr.forEach(function (val, i) {
            if (val && util_1.datejs.isSelf(val)) {
                activeHour[i] = val.hour();
                activeMinute[i] = val.minute();
                activeSecond[i] = val.second();
            }
        });
        var commonProps = {
            prefix: prefix,
            disabled: disabled,
            renderTimeMenuItems: renderTimeMenuItems
        };
        var _c = this.getDisabledItems(),
            newDisabledHours = _c.newDisabledHours,
            newDisabledMinutes = _c.newDisabledMinutes,
            newDisabledSeconds = _c.newDisabledSeconds;
        var generatePanel = function generatePanel(index) {
            return react_1.default.createElement(react_1.default.Fragment, null, showHour ? react_1.default.createElement(time_menu_1.default, tslib_1.__assign({}, commonProps, { value: valueArr[index], activeIndex: activeHour[index], title: locale.hour, mode: "hour", step: hourStep, onSelect: _this.onSelectMenuItem.bind(_this, "".concat(index === 0 ? 'start' : 'end')), disabledItems: newDisabledHours[index] })) : null, showMinute ? react_1.default.createElement(time_menu_1.default, tslib_1.__assign({}, commonProps, { value: valueArr[index], activeIndex: activeMinute[index], title: locale.minute, mode: "minute", step: minuteStep, onSelect: _this.onSelectMenuItem.bind(_this, "".concat(index === 0 ? 'start' : 'end')), disabledItems: newDisabledMinutes[index] })) : null, showSecond ? react_1.default.createElement(time_menu_1.default, tslib_1.__assign({}, commonProps, { value: valueArr[index], activeIndex: activeSecond[index], title: locale.second, step: secondStep, mode: "second", onSelect: _this.onSelectMenuItem.bind(_this, "".concat(index === 0 ? 'start' : 'end')), disabledItems: newDisabledSeconds[index] })) : null);
        };
        var singlePanel = generatePanel(0);
        var panelClassNames = (0, classnames_1.default)("".concat(this.prefixCls, "-panel-col-").concat(colLen), "".concat(this.prefixCls, "-panel-list"));
        var doublePanel = react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement("div", { className: panelClassNames }, generatePanel(0)), react_1.default.createElement("div", { className: panelClassNames }, generatePanel(1)));
        return react_1.default.createElement("div", tslib_1.__assign({}, (0, util_1.pickAttrs)(others), { className: classNames }), isRange ? doublePanel : singlePanel);
    };
    TimePickerPanel.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 时间值（dayjs 对象）
         */
        value: prop_types_2.default.value,
        /**
         * 是否显示小时
         */
        showHour: prop_types_1.default.bool,
        /**
         * 是否显示分钟
         */
        showMinute: prop_types_1.default.bool,
        /**
         * 是否显示秒
         */
        showSecond: prop_types_1.default.bool,
        /**
         * 小时选项步长
         */
        hourStep: prop_types_1.default.number,
        /**
         * 分钟选项步长
         */
        minuteStep: prop_types_1.default.number,
        /**
         * 秒钟选项步长
         */
        secondStep: prop_types_1.default.number,
        /**
         * 禁用小时函数
         * @param {Number} index 时 0 - 23
         * @return {Boolean} 是否禁用
         */
        disabledHours: prop_types_1.default.func,
        /**
         * 禁用分钟函数
         * @param {Number} index 分 0 - 59
         * @return {Boolean} 是否禁用
         */
        disabledMinutes: prop_types_1.default.func,
        /**
         * 禁用秒函数
         * @param {Number} index 秒 0 - 59
         * @return {Boolean} 是否禁用
         */
        disabledSeconds: prop_types_1.default.func,
        /**
         * 渲染的可选择时间列表
         * [{
         *  label: '01',
         *  value: 1
         * }]
         * @param {Array} list 默认渲染的列表
         * @param {String} mode 渲染的菜单 hour, minute, second
         * @param {dayjs} value 当前时间，可能为 null
         * @return {Array} 返回需要渲染的数据
         */
        renderTimeMenuItems: prop_types_1.default.func,
        /**
         * 选择某个日期值时的回调
         * @param {Object} 选中后的日期值
         */
        onSelect: prop_types_1.default.func,
        isRange: prop_types_1.default.bool,
        locale: prop_types_1.default.object,
        disabled: prop_types_1.default.bool,
        className: prop_types_1.default.string
    };
    TimePickerPanel.defaultProps = {
        prefix: 'next-',
        showHour: true,
        showSecond: true,
        showMinute: true,
        disabledHours: noop,
        disabledMinutes: noop,
        disabledSeconds: noop,
        onSelect: noop,
        disabled: false,
        isRange: false,
        locale: zh_cn_1.default.TimePicker
    };
    return TimePickerPanel;
}(react_1.Component);
exports.default = TimePickerPanel;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.onTimeKeydown = exports.checkDateValue = exports.checkDayjsObj = void 0;
var util_1 = __webpack_require__(4);
// 检查传入值是否为 dayjs 对象
function checkDayjsObj(props, propName, componentName) {
    if (props[propName] && !util_1.datejs.isSelf(props[propName])) {
        return new Error("Invalid prop ".concat(propName, " supplied to ").concat(componentName, ". Required a dayjs object."));
    }
}
exports.checkDayjsObj = checkDayjsObj;
// 检查传入值是否为 dayjs 对象
function checkDateValue(props, propName, componentName) {
    if (props[propName] && !util_1.datejs.isSelf(props[propName]) && typeof props[propName] !== 'string') {
        return new Error("Invalid prop ".concat(propName, " supplied to ").concat(componentName, ". Required a dayjs object or format date string."));
    }
}
exports.checkDateValue = checkDateValue;
/**
 * 监听键盘事件，操作时间
 * @param {KeyboardEvent} e
 * @param {Object} param1
 * @param {String} type second hour minute
 */
function onTimeKeydown(e, _a, type) {
    var format = _a.format,
        timeInputStr = _a.timeInputStr,
        steps = _a.steps,
        value = _a.value;
    if ([util_1.KEYCODE.UP, util_1.KEYCODE.DOWN, util_1.KEYCODE.PAGE_UP, util_1.KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1) return;
    if (e.altKey && [util_1.KEYCODE.PAGE_UP, util_1.KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1 || e.controlKey || e.shiftKey) return;
    var time = (0, util_1.datejs)(timeInputStr, format, true);
    if (time.isValid()) {
        var stepUnit = e.altKey ? 'hour' : 'minute';
        switch (e.keyCode) {
            case util_1.KEYCODE.UP:
                time = time.subtract(steps[type], type);
                break;
            case util_1.KEYCODE.DOWN:
                time = time.add(steps[type], type);
                break;
            case util_1.KEYCODE.PAGE_UP:
                time = time.subtract(steps[stepUnit], stepUnit);
                break;
            case util_1.KEYCODE.PAGE_DOWN:
                time = time.add(steps[stepUnit], stepUnit);
                break;
        }
    } else if (value) {
        time = value.clone();
    } else {
        time = (0, util_1.datejs)();
        time = time.hour(0).minute(0).second(0);
    }
    e.preventDefault();
    return time.format(format);
}
exports.onTimeKeydown = onTimeKeydown;

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_lifecycles_compat_1 = __webpack_require__(6);
var PT = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var prop_types_1 = __webpack_require__(39);
var util_1 = __webpack_require__(4);
var zh_cn_1 = __webpack_require__(9);
var button_1 = __webpack_require__(14);
var renderNode = util_1.func.renderNode;
function normalizePreset(preset) {
    if (Array.isArray(preset)) {
        return preset;
    } else {
        return Object.keys(preset).map(function (key) {
            return {
                label: key,
                value: preset[key]
            };
        });
    }
}
var FooterPanel = /** @class */function (_super) {
    tslib_1.__extends(FooterPanel, _super);
    function FooterPanel(props) {
        var _this = _super.call(this, props) || this;
        _this.renderRanges = function () {
            if (!_this.props.preset) {
                return null;
            }
            var preset = normalizePreset(_this.props.preset);
            return preset.map(function (_a, index) {
                var label = _a.label,
                    value = _a.value,
                    restProps = tslib_1.__rest(_a, ["label", "value"]);
                var buttonProps = util_1.obj.pickProps(button_1.default.propTypes, restProps);
                var handleClick = function handleClick() {
                    var date = typeof value === 'function' ? value() : value;
                    _this.props.onChange(date, 'CLICK_PRESET');
                };
                return react_1.default.createElement(button_1.default, tslib_1.__assign({ text: preset.length === 1, size: "small", type: preset.length === 1 ? 'primary' : 'secondary', key: "".concat(label, "-").concat(index),
                    // onClick={() =>
                    //     func.invoke(this.props, 'onChange', [
                    //         typeof value === 'function' ? value() : value,
                    //         'CLICK_PRESET',
                    //     ])
                    // }
                    onClick: handleClick }, buttonProps), label);
            });
        };
        _this.prefixCls = "".concat(props.prefix, "date-picker2-footer");
        return _this;
    }
    FooterPanel.prototype.render = function () {
        var _a, _b;
        var prefixCls = this.prefixCls;
        var _c = this.props,
            showOk = _c.showOk,
            locale = _c.locale,
            onOk = _c.onOk,
            oKable = _c.oKable,
            extraRender = _c.extraRender,
            className = _c.className;
        var classNames = (0, classnames_1.default)(prefixCls, className, (_a = {}, _a["".concat(prefixCls, "-with-actions")] = showOk, _a));
        var extraNode = renderNode(extraRender);
        var rangeNode = this.renderRanges();
        var actionsNode = react_1.default.createElement(button_1.default, { size: "small", disabled: !oKable, onClick: onOk, className: "".concat(prefixCls, "-ok"), type: "primary" }, locale.ok);
        var showFooter = showOk || extraNode || rangeNode;
        var rangesCls = (0, classnames_1.default)("".concat(prefixCls, "-preset"), (_b = {}, _b["".concat(prefixCls, "-preset-only")] = !showOk && !extraNode, _b));
        return showFooter ? react_1.default.createElement("div", { className: classNames }, extraNode ? react_1.default.createElement("div", { className: "".concat(prefixCls, "-extra") }, extraNode) : null, rangeNode ? react_1.default.createElement("div", { className: rangesCls }, rangeNode) : null, showOk ? react_1.default.createElement("div", { className: "".concat(prefixCls, "-actions") }, actionsNode) : null) : null;
    };
    FooterPanel.propTypes = {
        rtl: PT.bool,
        className: PT.string,
        prefix: PT.string,
        locale: PT.object,
        showOk: PT.bool,
        preset: PT.oneOfType([PT.array, PT.object]),
        onOk: PT.func,
        oKable: PT.bool,
        extraRender: prop_types_1.default.render
    };
    FooterPanel.defaultProps = {
        locale: zh_cn_1.default.DatePicker
    };
    return FooterPanel;
}(react_1.default.PureComponent);
exports.default = (0, react_lifecycles_compat_1.polyfill)(FooterPanel);

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var PT = __webpack_require__(2);
var constant_1 = __webpack_require__(48);
var util_1 = __webpack_require__(4);
var error = function error(propName, ComponentName) {
    return new Error("Invalid prop ".concat(propName, " supplied to ").concat(ComponentName, ". Validation failed."));
};
var SharedPT = {
    shape: PT.oneOf(Object.values(constant_1.CALENDAR_SHAPE)),
    mode: PT.oneOf(Object.values(constant_1.CALENDAR_MODE)),
    panelMode: PT.oneOf(Object.values(constant_1.DATE_PANEL_MODE)),
    // 日期类型：
    //  @string: 2020-11-11
    //  @date: 日期对象
    //  @moment: moment对象
    //  @dayjs: dayjs对象
    date: function date(props, propName, componentName) {
        if (propName in props && !(0, util_1.datejs)(props.propName).isValid()) {
            throw error(propName, componentName);
        }
    }
};
exports.default = SharedPT;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_lifecycles_compat_1 = __webpack_require__(6);
var PT = __webpack_require__(2);
var panel_1 = __webpack_require__(197);
var prop_types_1 = __webpack_require__(39);
var util_1 = __webpack_require__(4);
var DECADE_TIME_FORMAT = 'HH:mm:ss';
var TimePanel = /** @class */function (_super) {
    tslib_1.__extends(TimePanel, _super);
    function TimePanel() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.formater = function (v) {
            var _a = _this.props.timePanelProps,
                timePanelProps = _a === void 0 ? {} : _a;
            var _b = _this.getShow(),
                showHour = _b.showHour,
                showMinute = _b.showMinute,
                showSecond = _b.showSecond;
            var fmt;
            if ('format' in timePanelProps) {
                fmt = timePanelProps.format;
            } else {
                var fmtArr = [];
                showHour && fmtArr.push('HH');
                showMinute && fmtArr.push('mm');
                showSecond && fmtArr.push('ss');
                fmt = fmtArr.join(':');
            }
            return typeof fmt === 'function' ? fmt(v) : v.format(fmt);
        };
        _this.getShow = function () {
            var _a = _this.props.timePanelProps,
                props = _a === void 0 ? {} : _a;
            var fmt = props.format || DECADE_TIME_FORMAT;
            var showHour;
            var showMinute;
            var showSecond;
            if (typeof fmt === 'string') {
                showHour = fmt.indexOf('H') > -1;
                showSecond = fmt.indexOf('s') > -1;
                showMinute = fmt.indexOf('m') > -1;
            }
            return {
                showHour: 'showHour' in props ? props.showHour : showHour,
                showMinute: 'showMinute' in props ? props.showMinute : showMinute,
                showSecond: 'showSecond' in props ? props.showSecond : showSecond
            };
        };
        _this.onSelect = function (v) {
            util_1.func.invoke(_this.props, 'onSelect', [v]);
        };
        return _this;
    }
    TimePanel.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            rtl = _a.rtl,
            locale = _a.locale,
            _b = _a.timePanelProps,
            timePanelProps = _b === void 0 ? {} : _b,
            value = _a.value;
        var _c = this.getShow(),
            showHour = _c.showHour,
            showMinute = _c.showMinute,
            showSecond = _c.showSecond;
        return react_1.default.createElement("div", { dir: rtl ? 'rtl' : undefined, className: "".concat(prefix, "date-time-picker-wrapper ").concat(prefix, "calendar2-panel") }, react_1.default.createElement("div", { className: "".concat(prefix, "calendar2-header") }, react_1.default.createElement("div", { className: "".concat(prefix, "calendar2-header-text-field") }, value ? this.formater(value) : null)), react_1.default.createElement(panel_1.default, tslib_1.__assign({ prefix: prefix, locale: locale, onSelect: this.onSelect, showHour: showHour, showSecond: showSecond, showMinute: showMinute }, timePanelProps, { value: value })));
    };
    TimePanel.propTypes = {
        rtl: PT.bool,
        prefix: PT.string,
        locale: PT.object,
        value: prop_types_1.default.date,
        timePanelProps: PT.object,
        onSelect: PT.func
    };
    return TimePanel;
}(react_1.default.PureComponent);
exports.default = (0, react_lifecycles_compat_1.polyfill)(TimePanel);

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var next = __webpack_require__(203);

next.version = '1.26.37';

module.exports = next;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeSelect = exports.Tree = exports.Transfer = exports.Timeline = exports.TimePicker = exports.Tag = exports.Table = exports.Tab = exports.Switch = exports.Step = exports.SplitButton = exports.Slider = exports.Shell = exports.Select = exports.Search = exports.Rating = exports.Range = exports.Radio = exports.Progress = exports.Paragraph = exports.Pagination = exports.Overlay = exports.NumberPicker = exports.Nav = exports.Message = exports.MenuButton = exports.Menu = exports.Loading = exports.Input = exports.Icon = exports.Grid = exports.Form = exports.Field = exports.Drawer = exports.Dropdown = exports.Dialog = exports.DatePicker = exports.ConfigProvider = exports.Collapse = exports.Checkbox = exports.CascaderSelect = exports.Cascader = exports.Card = exports.Calendar = exports.Button = exports.Breadcrumb = exports.Balloon = exports.Badge = exports.Animate = exports.Affix = void 0;
exports.Calendar2 = exports.DatePicker2 = exports.TimePicker2 = exports.List = exports.Box = exports.ResponsiveGrid = exports.Avatar = exports.Divider = exports.Notification = exports.VirtualList = exports.Upload = exports.Typography = void 0;
var affix_1 = __webpack_require__(67);
Object.defineProperty(exports, "Affix", { enumerable: true, get: function get() {
    return affix_1.default;
  } });
var animate_1 = __webpack_require__(17);
Object.defineProperty(exports, "Animate", { enumerable: true, get: function get() {
    return animate_1.default;
  } });
var badge_1 = __webpack_require__(268);
Object.defineProperty(exports, "Badge", { enumerable: true, get: function get() {
    return badge_1.default;
  } });
var balloon_1 = __webpack_require__(56);
Object.defineProperty(exports, "Balloon", { enumerable: true, get: function get() {
    return balloon_1.default;
  } });
var breadcrumb_1 = __webpack_require__(280);
Object.defineProperty(exports, "Breadcrumb", { enumerable: true, get: function get() {
    return breadcrumb_1.default;
  } });
var button_1 = __webpack_require__(14);
Object.defineProperty(exports, "Button", { enumerable: true, get: function get() {
    return button_1.default;
  } });
var calendar_1 = __webpack_require__(32);
Object.defineProperty(exports, "Calendar", { enumerable: true, get: function get() {
    return calendar_1.default;
  } });
var card_1 = __webpack_require__(310);
Object.defineProperty(exports, "Card", { enumerable: true, get: function get() {
    return card_1.default;
  } });
var cascader_1 = __webpack_require__(162);
Object.defineProperty(exports, "Cascader", { enumerable: true, get: function get() {
    return cascader_1.default;
  } });
var cascader_select_1 = __webpack_require__(320);
Object.defineProperty(exports, "CascaderSelect", { enumerable: true, get: function get() {
    return cascader_select_1.default;
  } });
var checkbox_1 = __webpack_require__(44);
Object.defineProperty(exports, "Checkbox", { enumerable: true, get: function get() {
    return checkbox_1.default;
  } });
var collapse_1 = __webpack_require__(322);
Object.defineProperty(exports, "Collapse", { enumerable: true, get: function get() {
    return collapse_1.default;
  } });
var config_provider_1 = __webpack_require__(5);
Object.defineProperty(exports, "ConfigProvider", { enumerable: true, get: function get() {
    return config_provider_1.default;
  } });
var date_picker_1 = __webpack_require__(324);
Object.defineProperty(exports, "DatePicker", { enumerable: true, get: function get() {
    return date_picker_1.default;
  } });
var dialog_1 = __webpack_require__(331);
Object.defineProperty(exports, "Dialog", { enumerable: true, get: function get() {
    return dialog_1.default;
  } });
var dropdown_1 = __webpack_require__(43);
Object.defineProperty(exports, "Dropdown", { enumerable: true, get: function get() {
    return dropdown_1.default;
  } });
var drawer_1 = __webpack_require__(335);
Object.defineProperty(exports, "Drawer", { enumerable: true, get: function get() {
    return drawer_1.default;
  } });
var field_1 = __webpack_require__(170);
Object.defineProperty(exports, "Field", { enumerable: true, get: function get() {
    return field_1.default;
  } });
var form_1 = __webpack_require__(359);
Object.defineProperty(exports, "Form", { enumerable: true, get: function get() {
    return form_1.default;
  } });
var grid_1 = __webpack_require__(176);
Object.defineProperty(exports, "Grid", { enumerable: true, get: function get() {
    return grid_1.default;
  } });
var icon_1 = __webpack_require__(7);
Object.defineProperty(exports, "Icon", { enumerable: true, get: function get() {
    return icon_1.default;
  } });
var input_1 = __webpack_require__(15);
Object.defineProperty(exports, "Input", { enumerable: true, get: function get() {
    return input_1.default;
  } });
var loading_1 = __webpack_require__(98);
Object.defineProperty(exports, "Loading", { enumerable: true, get: function get() {
    return loading_1.default;
  } });
var menu_1 = __webpack_require__(13);
Object.defineProperty(exports, "Menu", { enumerable: true, get: function get() {
    return menu_1.default;
  } });
var menu_button_1 = __webpack_require__(369);
Object.defineProperty(exports, "MenuButton", { enumerable: true, get: function get() {
    return menu_button_1.default;
  } });
var message_1 = __webpack_require__(91);
Object.defineProperty(exports, "Message", { enumerable: true, get: function get() {
    return message_1.default;
  } });
var nav_1 = __webpack_require__(370);
Object.defineProperty(exports, "Nav", { enumerable: true, get: function get() {
    return nav_1.default;
  } });
var number_picker_1 = __webpack_require__(376);
Object.defineProperty(exports, "NumberPicker", { enumerable: true, get: function get() {
    return number_picker_1.default;
  } });
var overlay_1 = __webpack_require__(12);
Object.defineProperty(exports, "Overlay", { enumerable: true, get: function get() {
    return overlay_1.default;
  } });
var pagination_1 = __webpack_require__(379);
Object.defineProperty(exports, "Pagination", { enumerable: true, get: function get() {
    return pagination_1.default;
  } });
var paragraph_1 = __webpack_require__(381);
Object.defineProperty(exports, "Paragraph", { enumerable: true, get: function get() {
    return paragraph_1.default;
  } });
var progress_1 = __webpack_require__(99);
Object.defineProperty(exports, "Progress", { enumerable: true, get: function get() {
    return progress_1.default;
  } });
var radio_1 = __webpack_require__(45);
Object.defineProperty(exports, "Radio", { enumerable: true, get: function get() {
    return radio_1.default;
  } });
var range_1 = __webpack_require__(385);
Object.defineProperty(exports, "Range", { enumerable: true, get: function get() {
    return range_1.default;
  } });
var rating_1 = __webpack_require__(393);
Object.defineProperty(exports, "Rating", { enumerable: true, get: function get() {
    return rating_1.default;
  } });
var search_1 = __webpack_require__(178);
Object.defineProperty(exports, "Search", { enumerable: true, get: function get() {
    return search_1.default;
  } });
var select_1 = __webpack_require__(24);
Object.defineProperty(exports, "Select", { enumerable: true, get: function get() {
    return select_1.default;
  } });
var shell_1 = __webpack_require__(396);
Object.defineProperty(exports, "Shell", { enumerable: true, get: function get() {
    return shell_1.default;
  } });
var slider_1 = __webpack_require__(400);
Object.defineProperty(exports, "Slider", { enumerable: true, get: function get() {
    return slider_1.default;
  } });
var split_button_1 = __webpack_require__(408);
Object.defineProperty(exports, "SplitButton", { enumerable: true, get: function get() {
    return split_button_1.default;
  } });
var step_1 = __webpack_require__(409);
Object.defineProperty(exports, "Step", { enumerable: true, get: function get() {
    return step_1.default;
  } });
var switch_1 = __webpack_require__(412);
Object.defineProperty(exports, "Switch", { enumerable: true, get: function get() {
    return switch_1.default;
  } });
var tab_1 = __webpack_require__(413);
Object.defineProperty(exports, "Tab", { enumerable: true, get: function get() {
    return tab_1.default;
  } });
var table_1 = __webpack_require__(418);
Object.defineProperty(exports, "Table", { enumerable: true, get: function get() {
    return table_1.default;
  } });
var tag_1 = __webpack_require__(146);
Object.defineProperty(exports, "Tag", { enumerable: true, get: function get() {
    return tag_1.default;
  } });
var time_picker_1 = __webpack_require__(439);
Object.defineProperty(exports, "TimePicker", { enumerable: true, get: function get() {
    return time_picker_1.default;
  } });
var timeline_1 = __webpack_require__(441);
Object.defineProperty(exports, "Timeline", { enumerable: true, get: function get() {
    return timeline_1.default;
  } });
var transfer_1 = __webpack_require__(444);
Object.defineProperty(exports, "Transfer", { enumerable: true, get: function get() {
    return transfer_1.default;
  } });
var tree_1 = __webpack_require__(191);
Object.defineProperty(exports, "Tree", { enumerable: true, get: function get() {
    return tree_1.default;
  } });
var tree_select_1 = __webpack_require__(451);
Object.defineProperty(exports, "TreeSelect", { enumerable: true, get: function get() {
    return tree_select_1.default;
  } });
var typography_1 = __webpack_require__(453);
Object.defineProperty(exports, "Typography", { enumerable: true, get: function get() {
    return typography_1.default;
  } });
var upload_1 = __webpack_require__(457);
Object.defineProperty(exports, "Upload", { enumerable: true, get: function get() {
    return upload_1.default;
  } });
var virtual_list_1 = __webpack_require__(46);
Object.defineProperty(exports, "VirtualList", { enumerable: true, get: function get() {
    return virtual_list_1.default;
  } });
var notification_1 = __webpack_require__(463);
Object.defineProperty(exports, "Notification", { enumerable: true, get: function get() {
    return notification_1.default;
  } });
var divider_1 = __webpack_require__(465);
Object.defineProperty(exports, "Divider", { enumerable: true, get: function get() {
    return divider_1.default;
  } });
var avatar_1 = __webpack_require__(466);
Object.defineProperty(exports, "Avatar", { enumerable: true, get: function get() {
    return avatar_1.default;
  } });
var responsive_grid_1 = __webpack_require__(97);
Object.defineProperty(exports, "ResponsiveGrid", { enumerable: true, get: function get() {
    return responsive_grid_1.default;
  } });
var box_1 = __webpack_require__(174);
Object.defineProperty(exports, "Box", { enumerable: true, get: function get() {
    return box_1.default;
  } });
var list_1 = __webpack_require__(467);
Object.defineProperty(exports, "List", { enumerable: true, get: function get() {
    return list_1.default;
  } });
var time_picker2_1 = __webpack_require__(470);
Object.defineProperty(exports, "TimePicker2", { enumerable: true, get: function get() {
    return time_picker2_1.default;
  } });
var date_picker2_1 = __webpack_require__(474);
Object.defineProperty(exports, "DatePicker2", { enumerable: true, get: function get() {
    return date_picker2_1.default;
  } });
var calendar2_1 = __webpack_require__(109);
Object.defineProperty(exports, "Calendar2", { enumerable: true, get: function get() {
    return calendar2_1.default;
  } });

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = __webpack_require__(205);

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bigint: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(207), __esModule: true };

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(208);
__webpack_require__(219);
module.exports = __webpack_require__(78).f('iterator');


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(209)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(112)(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(68);
var defined = __webpack_require__(69);
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(211);
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 211 */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(116);
var descriptor = __webpack_require__(52);
var setToStringTag = __webpack_require__(76);
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(26)(IteratorPrototype, __webpack_require__(29)('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(27);
var anObject = __webpack_require__(51);
var getKeys = __webpack_require__(53);

module.exports = __webpack_require__(21) ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(28);
var toLength = __webpack_require__(215);
var toAbsoluteIndex = __webpack_require__(216);
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(68);
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(68);
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(20).document;
module.exports = document && document.documentElement;


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(22);
var toObject = __webpack_require__(77);
var IE_PROTO = __webpack_require__(73)('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(220);
var global = __webpack_require__(20);
var hide = __webpack_require__(26);
var Iterators = __webpack_require__(72);
var TO_STRING_TAG = __webpack_require__(29)('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(221);
var step = __webpack_require__(222);
var Iterators = __webpack_require__(72);
var toIObject = __webpack_require__(28);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(112)(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),
/* 221 */
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),
/* 222 */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(224), __esModule: true };

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(225);
__webpack_require__(231);
__webpack_require__(232);
__webpack_require__(233);
module.exports = __webpack_require__(40).Symbol;


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(20);
var has = __webpack_require__(22);
var DESCRIPTORS = __webpack_require__(21);
var $export = __webpack_require__(70);
var redefine = __webpack_require__(115);
var META = __webpack_require__(226).KEY;
var $fails = __webpack_require__(42);
var shared = __webpack_require__(74);
var setToStringTag = __webpack_require__(76);
var uid = __webpack_require__(54);
var wks = __webpack_require__(29);
var wksExt = __webpack_require__(78);
var wksDefine = __webpack_require__(79);
var enumKeys = __webpack_require__(227);
var isArray = __webpack_require__(228);
var anObject = __webpack_require__(51);
var isObject = __webpack_require__(41);
var toObject = __webpack_require__(77);
var toIObject = __webpack_require__(28);
var toPrimitive = __webpack_require__(71);
var createDesc = __webpack_require__(52);
var _create = __webpack_require__(116);
var gOPNExt = __webpack_require__(229);
var $GOPD = __webpack_require__(230);
var $GOPS = __webpack_require__(80);
var $DP = __webpack_require__(27);
var $keys = __webpack_require__(53);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(120).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(55).f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(50)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(26)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(54)('meta');
var isObject = __webpack_require__(41);
var has = __webpack_require__(22);
var setDesc = __webpack_require__(27).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(42)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(53);
var gOPS = __webpack_require__(80);
var pIE = __webpack_require__(55);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(119);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(28);
var gOPN = __webpack_require__(120).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(55);
var createDesc = __webpack_require__(52);
var toIObject = __webpack_require__(28);
var toPrimitive = __webpack_require__(71);
var has = __webpack_require__(22);
var IE8_DOM_DEFINE = __webpack_require__(113);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(21) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 231 */
/***/ (function(module, exports) {



/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(79)('asyncIterator');


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(79)('observable');


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(235), __esModule: true };

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(236);
module.exports = __webpack_require__(40).Object.assign;


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(70);

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(237) });


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = __webpack_require__(21);
var getKeys = __webpack_require__(53);
var gOPS = __webpack_require__(80);
var pIE = __webpack_require__(55);
var toObject = __webpack_require__(77);
var IObject = __webpack_require__(118);
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(42)(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.once = exports.on = exports.off = void 0;
/**
 * 取消事件绑定
 * @param node - DOM 节点或任何可以绑定事件的对象
 * @param eventName - 事件名
 * @param callback - 回调方法
 * @param useCapture - [useCapture=false] 是否开启事件捕获优先
 */
function _off(node, eventName, callback, useCapture) {
    /* istanbul ignore else */
    if (node.removeEventListener) {
        node.removeEventListener(eventName, callback, useCapture || false);
    }
}
exports.off = _off;
/**
 * 绑定事件
 * @param node - DOM 节点或任何可以绑定事件的对象
 * @param eventName - 事件名
 * @param callback - 回调方法
 * @param useCapture - 是否开启事件捕获优先
 * @returns 返回的 object 中包含一个 off 方法，用于取消事件监听
 *
 * @example
 * const handler = events.on(document.body, 'click', e =\> \{
 *     // handle click ...
 * \});
 * // 取消事件绑定
 * handler.off();
 */
function on(node, eventName, callback, useCapture) {
    /* istanbul ignore else */
    if (node.addEventListener) {
        node.addEventListener(eventName, callback, useCapture || false);
    }
    return {
        off: function off() {
            return _off(node, eventName, callback, useCapture);
        }
    };
}
exports.on = on;
/**
 * 绑定事件，只执行一次后销毁
 * @param node - DOM 节点或任何可以绑定事件的对象
 * @param eventName - 事件名
 * @param callback - 回调方法
 * @param useCapture - 是否开启事件捕获优先
 * @returns 返回的 object 中包含一个 off 方法，用于取消事件监听
 */
function once(node, eventName, callback, useCapture) {
    return on(node, eventName, function __fn() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        callback.apply(this, args);
        // 由于 addEventListener 中的参数 options 只在 Chrome 55、Firefox(Gecko) 以上版本支持，故还是用传统的方法实现 once
        _off(node, eventName, __fn, useCapture);
    }, useCapture);
}
exports.once = once;

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.checkRangeDate = exports.checkDate = exports.renderNode = exports.invoke = exports.promiseCall = exports.bindCtx = exports.makeChain = exports.prevent = exports.noop = void 0;
var tslib_1 = __webpack_require__(0);
var object_1 = __webpack_require__(30);
var date_1 = __webpack_require__(81);
/**
 * 一个空方法，返回入参本身或空对象
 */
var noop = function noop() {};
exports.noop = noop;
/**
 * 一个空方法，返回 false
 */
var prevent = function prevent() {
    return false;
};
exports.prevent = prevent;
/**
 * 将 N 个方法合并为一个链式调用的方法
 * @returns 合并后的方法
 * @see https://github.com/react-component/util/
 *
 * @example
 * func.makeChain(this.handleChange, this.props.onChange);
 */
function makeChain() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function chainedFunction() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        for (var i = 0, j = fns.length; i < j; i++) {
            var fn = fns[i];
            if (fn && fn.apply) {
                fn.apply(this, args);
            }
        }
    };
}
exports.makeChain = makeChain;
/**
 * 批量改变方法的上下文
 * 此方法在 react 组件中很有用，在 constructor 中批量将组件上的方法执行上下文绑定到组件本身
 * 注意：用 bind 改变函数运行的上下文只会生效一次
 * @param ctx - 方法挂载的对象以及执行的上下文
 * @param fns - 方法名列表
 *
 * @example
 * func.bindCtx(this, ['handleClick', 'handleChange']);
 */
function bindCtx(ctx, fns, ns) {
    if (typeof fns === 'string') {
        fns = [fns];
    }
    // 方法的挂载空间，如果不传，默认与ctx相同
    ns = ns || ctx;
    fns.forEach(function (fnName) {
        // @ts-expect-error 这里不要添加空方法判断，由调用者保证正确性，否则出了问题无法排查
        ns[fnName] = ns[fnName].bind(ctx);
    });
}
exports.bindCtx = bindCtx;
/**
 * 用于执行回调方法后的逻辑
 * @param ret - 回调方法执行结果
 * @param success - 执行结果返回非 false 的回调
 * @param failure - [failure=noop] 执行结果返回 false 的回调
 */
function promiseCall(ret, success, failure) {
    if (failure === void 0) {
        failure = exports.noop;
    }
    if ((0, object_1.isPromise)(ret)) {
        return ret.then(function (result) {
            success(result);
            return result;
        }).catch(function (e) {
            failure(e);
            // throw e;
        });
    }
    return ret !== false ? success(ret) : failure(ret);
}
exports.promiseCall = promiseCall;
/**
 * 方法调用，如果 obj 对象中存在名为 method 的方法则调用该方法
 * @param target - 目标对象
 * @param method - 方法名
 * @param args - 函数参数列表
 * @returns 函数返回值 如果不存在返回 undefined
 */
function invoke(target, method, args) {
    var func = target && method in target ? target[method] : undefined;
    return func && func.apply(void 0, tslib_1.__spreadArray([], tslib_1.__read(args || []), false));
}
exports.invoke = invoke;
function renderNode(render, defaultRender, renderProps) {
    if (renderProps === void 0) {
        renderProps = [];
    }
    var r = render !== undefined ? render : defaultRender;
    if (renderProps && !Array.isArray(renderProps)) {
        renderProps = [renderProps];
    }
    return typeof r === 'function' ? r.apply(void 0, tslib_1.__spreadArray([], tslib_1.__read(renderProps), false)) : r;
}
exports.renderNode = renderNode;
/**
 * 日期检验：无效值返回 null
 */
function checkDate(value, format) {
    /**
     * 因为 datejs(undefined) 表示当前时间
     * 但是这里期望的是一个空值，即用户不输入值的时候显示为空
     */
    if (value === undefined) {
        value = null;
    }
    var date = format ? (0, date_1.default)(value, format) : (0, date_1.default)(value);
    return date.isValid() ? date : null;
}
exports.checkDate = checkDate;
/**
 * Range 日期检验
 * @param value - 日期值
 * @param inputType - 输入框类型：开始时间输入框/结束时间输入框
 * @param disabled - 是否禁用
 * @param strictly - 是否严格校验：严格模式下不允许开始时间大于结束时间，在显示确认按键的，用户输入过程可不严格校验
 */
function checkRangeDate(value, inputType, disabled, strictly, format) {
    if (strictly === void 0) {
        strictly = true;
    }
    var _a = tslib_1.__read(Array.isArray(value) ? [0, 1].map(function (i) {
        return checkDate(value[i], format);
    }) : [null, null], 2),
        begin = _a[0],
        end = _a[1];
    var _b = tslib_1.__read(Array.isArray(disabled) ? disabled : [disabled, disabled], 2),
        disabledBegin = _b[0],
        disabledEnd = _b[1];
    /**
     * 需要清除其中一个时间，优先清除结束时间，下面情况清除开始时间：
     * 1. 结束时间被 disabled 而开始时间没有被 disabled
     * 2. 开始时间和结束时间都没被 disabled 且当前正在输入是结束时间
     */
    if (strictly && begin && end && begin.isAfter(end)) {
        if (!disabledBegin && disabledEnd ||
        // 本来是 (!disabledBegin && !disabledBegin && inputType === DATE_INPUT_TYPE.END)
        !disabledBegin && !disabledBegin && inputType === 1) {
            return [null, end];
        }
        return [begin, null];
    }
    return [begin, end];
}
exports.checkRangeDate = checkRangeDate;

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

!function(e,t){ true?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).dayjs_plugin_customParseFormat=t()}(this,(function(){"use strict";var e={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},t=/(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,n=/\d\d/,r=/\d\d?/,i=/\d*[^-_:/,()\s\d]+/,o={},s=function(e){return(e=+e)+(e>68?1900:2e3)};var a=function(e){return function(t){this[e]=+t}},f=[/[+-]\d\d:?(\d\d)?|Z/,function(e){(this.zone||(this.zone={})).offset=function(e){if(!e)return 0;if("Z"===e)return 0;var t=e.match(/([+-]|\d\d)/g),n=60*t[1]+(+t[2]||0);return 0===n?0:"+"===t[0]?-n:n}(e)}],h=function(e){var t=o[e];return t&&(t.indexOf?t:t.s.concat(t.f))},u=function(e,t){var n,r=o.meridiem;if(r){for(var i=1;i<=24;i+=1)if(e.indexOf(r(i,0,t))>-1){n=i>12;break}}else n=e===(t?"pm":"PM");return n},d={A:[i,function(e){this.afternoon=u(e,!1)}],a:[i,function(e){this.afternoon=u(e,!0)}],S:[/\d/,function(e){this.milliseconds=100*+e}],SS:[n,function(e){this.milliseconds=10*+e}],SSS:[/\d{3}/,function(e){this.milliseconds=+e}],s:[r,a("seconds")],ss:[r,a("seconds")],m:[r,a("minutes")],mm:[r,a("minutes")],H:[r,a("hours")],h:[r,a("hours")],HH:[r,a("hours")],hh:[r,a("hours")],D:[r,a("day")],DD:[n,a("day")],Do:[i,function(e){var t=o.ordinal,n=e.match(/\d+/);if(this.day=n[0],t)for(var r=1;r<=31;r+=1)t(r).replace(/\[|\]/g,"")===e&&(this.day=r)}],M:[r,a("month")],MM:[n,a("month")],MMM:[i,function(e){var t=h("months"),n=(h("monthsShort")||t.map((function(e){return e.slice(0,3)}))).indexOf(e)+1;if(n<1)throw new Error;this.month=n%12||n}],MMMM:[i,function(e){var t=h("months").indexOf(e)+1;if(t<1)throw new Error;this.month=t%12||t}],Y:[/[+-]?\d+/,a("year")],YY:[n,function(e){this.year=s(e)}],YYYY:[/\d{4}/,a("year")],Z:f,ZZ:f};function c(n){var r,i;r=n,i=o&&o.formats;for(var s=(n=r.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,(function(t,n,r){var o=r&&r.toUpperCase();return n||i[r]||e[r]||i[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(e,t,n){return t||n.slice(1)}))}))).match(t),a=s.length,f=0;f<a;f+=1){var h=s[f],u=d[h],c=u&&u[0],l=u&&u[1];s[f]=l?{regex:c,parser:l}:h.replace(/^\[|\]$/g,"")}return function(e){for(var t={},n=0,r=0;n<a;n+=1){var i=s[n];if("string"==typeof i)r+=i.length;else{var o=i.regex,f=i.parser,h=e.slice(r),u=o.exec(h)[0];f.call(t,u),e=e.replace(u,"")}}return function(e){var t=e.afternoon;if(void 0!==t){var n=e.hours;t?n<12&&(e.hours+=12):12===n&&(e.hours=0),delete e.afternoon}}(t),t}}return function(e,t,n){n.p.customParseFormat=!0,e&&e.parseTwoDigitYear&&(s=e.parseTwoDigitYear);var r=t.prototype,i=r.parse;r.parse=function(e){var t=e.date,r=e.utc,s=e.args;this.$u=r;var a=s[1];if("string"==typeof a){var f=!0===s[2],h=!0===s[3],u=f||h,d=s[2];h&&(d=s[2]),o=this.$locale(),!f&&d&&(o=n.Ls[d]),this.$d=function(e,t,n){try{if(["x","X"].indexOf(t)>-1)return new Date(("X"===t?1e3:1)*e);var r=c(t)(e),i=r.year,o=r.month,s=r.day,a=r.hours,f=r.minutes,h=r.seconds,u=r.milliseconds,d=r.zone,l=new Date,m=s||(i||o?1:l.getDate()),M=i||l.getFullYear(),Y=0;i&&!o||(Y=o>0?o-1:l.getMonth());var p=a||0,v=f||0,D=h||0,g=u||0;return d?new Date(Date.UTC(M,Y,m,p,v,D,g+60*d.offset*1e3)):n?new Date(Date.UTC(M,Y,m,p,v,D,g)):new Date(M,Y,m,p,v,D,g)}catch(e){return new Date("")}}(t,a,r),this.init(),d&&!0!==d&&(this.$L=this.locale(d).$L),u&&t!=this.format(a)&&(this.$d=new Date("")),o={}}else if(a instanceof Array)for(var l=a.length,m=1;m<=l;m+=1){s[1]=a[m-1];var M=n.apply(this,s);if(M.isValid()){this.$d=M.$d,this.$L=M.$L,this.init();break}m===l&&(this.$d=new Date(""))}else i.call(this,e)}}}));

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

!function(e,n){ true?module.exports=n():"function"==typeof define&&define.amd?define(n):(e="undefined"!=typeof globalThis?globalThis:e||self).dayjs_plugin_updateLocale=n()}(this,(function(){"use strict";return function(e,n,t){t.updateLocale=function(e,n){var o=t.Ls[e];if(o)return(n?Object.keys(n):[]).forEach((function(e){o[e]=n[e]})),o}}}));

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

!function(n,e){ true?module.exports=e():"function"==typeof define&&define.amd?define(e):(n="undefined"!=typeof globalThis?globalThis:n||self).dayjs_plugin_localeData=e()}(this,(function(){"use strict";return function(n,e,t){var r=e.prototype,o=function(n){return n&&(n.indexOf?n:n.s)},u=function(n,e,t,r,u){var i=n.name?n:n.$locale(),a=o(i[e]),s=o(i[t]),f=a||s.map((function(n){return n.slice(0,r)}));if(!u)return f;var d=i.weekStart;return f.map((function(n,e){return f[(e+(d||0))%7]}))},i=function(){return t.Ls[t.locale()]},a=function(n,e){return n.formats[e]||function(n){return n.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,(function(n,e,t){return e||t.slice(1)}))}(n.formats[e.toUpperCase()])},s=function(){var n=this;return{months:function(e){return e?e.format("MMMM"):u(n,"months")},monthsShort:function(e){return e?e.format("MMM"):u(n,"monthsShort","months",3)},firstDayOfWeek:function(){return n.$locale().weekStart||0},weekdays:function(e){return e?e.format("dddd"):u(n,"weekdays")},weekdaysMin:function(e){return e?e.format("dd"):u(n,"weekdaysMin","weekdays",2)},weekdaysShort:function(e){return e?e.format("ddd"):u(n,"weekdaysShort","weekdays",3)},longDateFormat:function(e){return a(n.$locale(),e)},meridiem:this.$locale().meridiem,ordinal:this.$locale().ordinal}};r.localeData=function(){return s.bind(this)()},t.localeData=function(){var n=i();return{firstDayOfWeek:function(){return n.weekStart||0},weekdays:function(){return t.weekdays()},weekdaysShort:function(){return t.weekdaysShort()},weekdaysMin:function(){return t.weekdaysMin()},months:function(){return t.months()},monthsShort:function(){return t.monthsShort()},longDateFormat:function(e){return a(n,e)},meridiem:n.meridiem,ordinal:n.ordinal}},t.months=function(){return u(i(),"months")},t.monthsShort=function(){return u(i(),"monthsShort","months",3)},t.weekdays=function(n){return u(i(),"weekdays",null,null,n)},t.weekdaysShort=function(n){return u(i(),"weekdaysShort","weekdays",3,n)},t.weekdaysMin=function(n){return u(i(),"weekdaysMin","weekdays",2,n)}}}));

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

!function(t,n){ true?module.exports=n():"function"==typeof define&&define.amd?define(n):(t="undefined"!=typeof globalThis?globalThis:t||self).dayjs_plugin_quarterOfYear=n()}(this,(function(){"use strict";var t="month",n="quarter";return function(e,i){var r=i.prototype;r.quarter=function(t){return this.$utils().u(t)?Math.ceil((this.month()+1)/3):this.month(this.month()%3+3*(t-1))};var s=r.add;r.add=function(e,i){return e=Number(e),this.$utils().p(i)===n?this.add(3*e,t):s.bind(this)(e,i)};var u=r.startOf;r.startOf=function(e,i){var r=this.$utils(),s=!!r.u(i)||i;if(r.p(e)===n){var o=this.quarter()-1;return s?this.month(3*o).startOf(t).startOf("day"):this.month(3*o+2).endOf(t).endOf("day")}return u.bind(this)(e,i)}}}));

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

!function(e,t){ true?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).dayjs_plugin_advancedFormat=t()}(this,(function(){"use strict";return function(e,t){var r=t.prototype,n=r.format;r.format=function(e){var t=this,r=this.$locale();if(!this.isValid())return n.bind(this)(e);var s=this.$utils(),a=(e||"YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g,(function(e){switch(e){case"Q":return Math.ceil((t.$M+1)/3);case"Do":return r.ordinal(t.$D);case"gggg":return t.weekYear();case"GGGG":return t.isoWeekYear();case"wo":return r.ordinal(t.week(),"W");case"w":case"ww":return s.s(t.week(),"w"===e?1:2,"0");case"W":case"WW":return s.s(t.isoWeek(),"W"===e?1:2,"0");case"k":case"kk":return s.s(String(0===t.$H?24:t.$H),"k"===e?1:2,"0");case"X":return Math.floor(t.$d.getTime()/1e3);case"x":return t.$d.getTime();case"z":return"["+t.offsetName()+"]";case"zzz":return"["+t.offsetName("long")+"]";default:return e}}));return n.bind(this)(a)}}}));

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

!function(e,t){ true?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).dayjs_plugin_weekOfYear=t()}(this,(function(){"use strict";var e="week",t="year";return function(i,n,r){var f=n.prototype;f.week=function(i){if(void 0===i&&(i=null),null!==i)return this.add(7*(i-this.week()),"day");var n=this.$locale().yearStart||1;if(11===this.month()&&this.date()>25){var f=r(this).startOf(t).add(1,t).date(n),s=r(this).endOf(e);if(f.isBefore(s))return 1}var a=r(this).startOf(t).date(n).startOf(e).subtract(1,"millisecond"),o=this.diff(a,e,!0);return o<0?r(this).startOf("week").week():Math.ceil(o)},f.weeks=function(e){return void 0===e&&(e=null),this.week(e)}}}));

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

!function(e,_){ true?module.exports=_(__webpack_require__(124)):"function"==typeof define&&define.amd?define(["dayjs"],_):(e="undefined"!=typeof globalThis?globalThis:e||self).dayjs_locale_zh_cn=_(e.dayjs)}(this,(function(e){"use strict";function _(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var t=_(e),d={name:"zh-cn",weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),ordinal:function(e,_){return"W"===_?e+"周":e+"日"},weekStart:1,yearStart:4,formats:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},meridiem:function(e,_){var t=100*e+_;return t<600?"凌晨":t<900?"早上":t<1100?"上午":t<1300?"中午":t<1800?"下午":"晚上"}};return t.default.locale(d,null,!0),d}));

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.flex = exports.transition = exports.animation = void 0;
var dom_1 = __webpack_require__(111);
var object_1 = __webpack_require__(30);
var animationEndEventNames = {
    WebkitAnimation: 'webkitAnimationEnd',
    OAnimation: 'oAnimationEnd',
    animation: 'animationend'
};
var transitionEventNames = {
    WebkitTransition: 'webkitTransitionEnd',
    OTransition: 'oTransitionEnd',
    transition: 'transitionend'
};
/**
 * 是否支持某些动效事件，如果支持，返回相应的 end 事件名
 */
function _supportEnd(names) {
    /* istanbul ignore if */
    if (!dom_1.hasDOM) {
        return false;
    }
    var el = document.createElement('div');
    var ret = false;
    (0, object_1.each)(names, function (val, key) {
        /* istanbul ignore else */
        if (el.style[key] !== undefined) {
            ret = { end: val };
            return false;
        }
    });
    return ret;
}
/**
 * 是否支持某些 CSS 属性
 */
function _supportCSS(names) {
    /* istanbul ignore if */
    if (!dom_1.hasDOM) {
        return false;
    }
    var el = document.createElement('div');
    var ret = false;
    (0, object_1.each)(names, function (val, key) {
        (0, object_1.each)(val, function (item) {
            try {
                el.style[key] = item;
                ret = ret || el.style[key] === item;
            } catch (e) {
                // It will be throw error when set unknown property under IE8
            }
            return !ret; // 如果有一个支持就返回 false，后面不需要再判断
        });
        return !ret;
    });
    return ret;
}
/**
 * 是否支持 animation 以及动画结束事件名
 */
exports.animation = _supportEnd(animationEndEventNames);
/**
 * 是否支持 transition 以及过滤效果结束事件名
 */
exports.transition = _supportEnd(transitionEventNames);
/**
 * 是否支持 flex 属性
 */
exports.flex = _supportCSS({
    display: ['flex', '-webkit-flex', '-moz-flex', '-ms-flexbox']
});

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.focusRef = exports.limitTabRange = exports.backLastFocusNode = exports.clearLastFocusNode = exports.saveLastFocusNode = exports.getFocusNodeList = void 0;
var tslib_1 = __webpack_require__(0);
var keycode_1 = __webpack_require__(125);
var object_1 = __webpack_require__(30);
/**
 * 用于切换页面元素的焦点
 */
/**
 * 元素是否可见
 */
function _isVisible(node) {
    while (node) {
        var nodeName = node.nodeName;
        if (nodeName === 'BODY' || nodeName === 'HTML') {
            break;
        }
        var style = node.style;
        if (style.display === 'none' || style.visibility === 'hidden') {
            return false;
        }
        node = node.parentNode;
    }
    return true;
}
/**
 * 元素是否可以获取焦点
 */
function _isFocusable(node) {
    var nodeName = node.nodeName.toLowerCase();
    var tabIndex = parseInt(node.getAttribute('tabindex'), 10);
    var hasTabIndex = !isNaN(tabIndex) && tabIndex > -1;
    if (_isVisible(node)) {
        if (nodeName === 'input') {
            return !node.disabled && node.type !== 'hidden';
        } else if (['select', 'textarea', 'button'].indexOf(nodeName) > -1) {
            return !node.disabled;
        } else if (nodeName === 'a') {
            return !!node.getAttribute('href') || hasTabIndex;
        } else {
            return hasTabIndex;
        }
    }
    return false;
}
/**
 * 列出能获取焦点的子节点
 * @param node - 容器节点
 */
function getFocusNodeList(node) {
    var res = [];
    var nodeList = node.querySelectorAll('*');
    (0, object_1.each)(nodeList, function (item) {
        if (_isFocusable(item)) {
            var method = item.getAttribute('data-auto-focus') ? 'unshift' : 'push';
            res[method](item);
        }
    });
    if (_isFocusable(node)) {
        res.unshift(node);
    }
    return res;
}
exports.getFocusNodeList = getFocusNodeList;
// 用于记录上一次获得焦点的无素
var lastFocusElement = null;
/**
 * 保存最近一次获得焦点的无素
 */
function saveLastFocusNode() {
    lastFocusElement = document.activeElement;
}
exports.saveLastFocusNode = saveLastFocusNode;
/**
 * 清除焦点记录
 */
function clearLastFocusNode() {
    lastFocusElement = null;
}
exports.clearLastFocusNode = clearLastFocusNode;
/**
 * 尝试将焦点切换到上一个元素
 */
function backLastFocusNode() {
    if (lastFocusElement) {
        try {
            // 元素可能已经被移动了
            lastFocusElement.focus();
        } catch (e) {
            // ignore ...
        }
    }
}
exports.backLastFocusNode = backLastFocusNode;
/**
 * 在限制的范围内切换焦点
 * @param node - 容器节点
 * @param e - 键盘事件
 */
function limitTabRange(node, e) {
    if (e.keyCode === keycode_1.default.TAB) {
        var tabNodeList = getFocusNodeList(node);
        var maxIndex = tabNodeList.length - 1;
        var index = tabNodeList.indexOf(document.activeElement);
        if (index > -1) {
            var targetIndex = index + (e.shiftKey ? -1 : 1);
            targetIndex < 0 && (targetIndex = maxIndex);
            targetIndex > maxIndex && (targetIndex = 0);
            tabNodeList[targetIndex].focus();
            e.preventDefault();
        }
    }
}
exports.limitTabRange = limitTabRange;
/**
 * 检查一个 ref 是否有 focus 方法，如果有方法，则调用 focus 函数
 */
function focusRef(ref) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (ref && ref.focus && typeof ref.focus === 'function') {
        ref.focus.apply(ref, tslib_1.__spreadArray([], tslib_1.__read(args), false));
    }
}
exports.focusRef = focusRef;

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
exports.randomId = exports.escapeForId = void 0;
/**
 * Replace characters not allowed for HTML id attributes
 */
function escapeForId(text) {
    if (!text) {
        return '';
    }
    if ((typeof text === "undefined" ? "undefined" : (0, _typeof3.default)(text)) === 'object') {
        text = JSON.stringify(text);
    } else if (typeof text !== 'string') {
        text = String(text);
    }
    return text.replace(/['"]/gm, '').replace(/[\s'"]/gm, '-');
}
exports.escapeForId = escapeForId;
/**
 * Generate a string to be used for HTML id attributes
 *
 * @param prefix - prefix text for the id. Important because without one, eventually there will be 2 elements with the same id on the same page
 * @param max - range for the random number generator. Defaults to 1,000,000, but can be set higher if necessary.
 */
function randomId(prefix, max) {
    if (max === void 0) {
        max = 1000000;
    }
    var rand = Math.ceil(Math.random() * max);
    return prefix ? "".concat(escapeForId(prefix), "-").concat(rand) : rand.toString(10);
}
exports.randomId = randomId;

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var attributes = "accept acceptCharset accessKey action allowFullScreen allowTransparency\nalt async autoComplete autoFocus autoPlay capture cellPadding cellSpacing challenge\ncharSet checked classID className colSpan cols content contentEditable contextMenu\ncontrols coords crossOrigin data dateTime default defer dir disabled download draggable\nencType form formAction formEncType formMethod formNoValidate formTarget frameBorder\nheaders height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity\nis keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media\nmediaGroup method min minLength multiple muted name noValidate nonce open\noptimum pattern placeholder poster preload radioGroup readOnly rel required\nreversed role rowSpan rows sandbox scope scoped scrolling seamless selected\nshape size sizes span spellCheck src srcDoc srcLang srcSet start step style\nsummary tabIndex target title type useMap value width wmode wrap".replace(/\s+/g, ' ').replace(/\t|\n|\r/g, '').split(' ');
var eventsName = "onCopy onCut onPaste onCompositionEnd onCompositionStart onCompositionUpdate onKeyDown\n    onKeyPress onKeyUp onFocus onBlur onChange onInput onSubmit onClick onContextMenu onDoubleClick\n    onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown\n    onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp onSelect onTouchCancel\n    onTouchEnd onTouchMove onTouchStart onScroll onWheel onAbort onCanPlay onCanPlayThrough\n    onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata\n    onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting onLoad onError".replace(/\s+/g, ' ').replace(/\t|\n|\r/g, '').split(' ');
var attrsPrefix = ['data-', 'aria-'];
/**
 * 过滤掉无效的透传到 DOM 属性
 */
exports.default = function (props) {
    var attrs = {};
    var _loop_1 = function _loop_1(key) {
        if (attributes.indexOf(key) > -1 || eventsName.indexOf(key) > -1) {
            attrs[key] = props[key];
        } else if (attrsPrefix.map(function (prefix) {
            return new RegExp("^".concat(prefix));
        }).some(function (reg) {
            return key.replace(reg, '') !== key;
        })) {
            attrs[key] = props[key];
        }
    };
    for (var key in props) {
        _loop_1(key);
    }
    return attrs;
};

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.config = exports.getDirection = exports.getLanguage = exports.getLocale = exports.setDirection = exports.setLocale = exports.setLanguage = exports.initLocales = void 0;
var tslib_1 = __webpack_require__(0);
var React = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
var hoistNonReactStatic = __webpack_require__(253);
var util_1 = __webpack_require__(4);
var get_context_props_1 = __webpack_require__(127);
var error_boundary_1 = __webpack_require__(128);
var shallowEqual = util_1.obj.shallowEqual;
function getDisplayName(Component) {
    return Component.displayName || Component.name || 'Component';
}
var globalLocales;
var currentGlobalLanguage = 'zh-cn';
var currentGlobalLocale = {};
var currentGlobalRtl;
function initLocales(locales) {
    globalLocales = locales;
    if (locales) {
        currentGlobalLocale = locales[currentGlobalLanguage];
        if (typeof currentGlobalRtl !== 'boolean') {
            currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;
        }
    }
}
exports.initLocales = initLocales;
function setLanguage(language) {
    if (globalLocales) {
        currentGlobalLanguage = language;
        currentGlobalLocale = globalLocales[language];
        if (typeof currentGlobalRtl !== 'boolean') {
            currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;
        }
    }
}
exports.setLanguage = setLanguage;
function setLocale(locale) {
    currentGlobalLocale = tslib_1.__assign(tslib_1.__assign({}, globalLocales ? globalLocales[currentGlobalLanguage] : {}), locale);
    if (typeof currentGlobalRtl !== 'boolean') {
        currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;
    }
}
exports.setLocale = setLocale;
function setDirection(dir) {
    currentGlobalRtl = dir === 'rtl';
}
exports.setDirection = setDirection;
function getLocale() {
    return currentGlobalLocale;
}
exports.getLocale = getLocale;
function getLanguage() {
    return currentGlobalLanguage;
}
exports.getLanguage = getLanguage;
function getDirection() {
    return currentGlobalRtl;
}
exports.getDirection = getDirection;
function config(Component, options) {
    if (options === void 0) {
        options = {};
    }
    // 非 forwardRef 创建的 class component
    if (util_1.obj.isClassComponent(Component) && Component.prototype.shouldComponentUpdate === undefined) {
        // class component: 通过定义 shouldComponentUpdate 改写成 pure component, 有 refs
        Component.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
            if (this.props.pure) {
                return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);
            }
            return true;
        };
    }
    var ConfigedComponent = /** @class */function (_super) {
        tslib_1.__extends(ConfigedComponent, _super);
        function ConfigedComponent(props, context) {
            var _this = _super.call(this, props, context) || this;
            _this._getInstance = _this._getInstance.bind(_this);
            _this._deprecated = _this._deprecated.bind(_this);
            return _this;
        }
        ConfigedComponent.prototype._getInstance = function (ref) {
            var _this = this;
            this._instance = ref;
            if (this._instance && options.exportNames) {
                options.exportNames.forEach(function (name) {
                    // @ts-expect-error this._instance expect object
                    var field = _this._instance[name];
                    if (typeof field === 'function') {
                        _this[name] = field.bind(_this._instance);
                    } else {
                        _this[name] = field;
                    }
                });
            }
        };
        ConfigedComponent.prototype._deprecated = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (this.context.nextWarning !== false) {
                util_1.log.deprecated.apply(util_1.log, tslib_1.__spreadArray([], tslib_1.__read(args), false));
            }
        };
        ConfigedComponent.prototype.getInstance = function () {
            return this._instance;
        };
        ConfigedComponent.prototype.render = function () {
            var _a = this.props,
                prefix = _a.prefix,
                locale = _a.locale,

            // fixme: defaultPropsConfig is unused
            defaultPropsConfig = _a.defaultPropsConfig,
                pure = _a.pure,
                rtl = _a.rtl,
                device = _a.device,
                popupContainer = _a.popupContainer,
                errorBoundary = _a.errorBoundary,
                others = tslib_1.__rest(_a, ["prefix", "locale", "defaultPropsConfig", "pure", "rtl", "device", "popupContainer", "errorBoundary"]);
            var _b = this.context,
                nextPrefix = _b.nextPrefix,
                _c = _b.nextLocale,
                nextLocale = _c === void 0 ? {} : _c,
                _d = _b.nextDefaultPropsConfig,
                nextDefaultPropsConfig = _d === void 0 ? {} : _d,
                nextPure = _b.nextPure,
                nextRtl = _b.nextRtl,
                nextDevice = _b.nextDevice,
                nextPopupContainer = _b.nextPopupContainer,
                nextErrorBoundary = _b.nextErrorBoundary;
            var displayName = options.componentName || getDisplayName(Component);
            var contextProps = (0, get_context_props_1.default)({
                prefix: prefix,
                locale: locale,
                defaultPropsConfig: defaultPropsConfig,
                pure: pure,
                device: device,
                popupContainer: popupContainer,
                rtl: rtl,
                errorBoundary: errorBoundary
            }, {
                nextPrefix: nextPrefix,
                nextLocale: tslib_1.__assign(tslib_1.__assign({}, currentGlobalLocale), nextLocale),
                nextDefaultPropsConfig: nextDefaultPropsConfig,
                nextPure: nextPure,
                nextDevice: nextDevice,
                nextPopupContainer: nextPopupContainer,
                nextRtl: typeof nextRtl === 'boolean' ? nextRtl : currentGlobalRtl === true ? true : undefined,
                nextErrorBoundary: nextErrorBoundary
            }, displayName);
            // errorBoundary is only for <ErrorBoundary>
            var newContextProps = ['prefix', 'locale', 'pure', 'rtl', 'device', 'popupContainer'].reduce(function (ret, name) {
                if (typeof contextProps[name] !== 'undefined') {
                    // @ts-expect-error ignore assign type error
                    ret[name] = contextProps[name];
                }
                return ret;
            }, {});
            if ('pure' in newContextProps && newContextProps.pure) {
                util_1.log.warning('pure of ConfigProvider is deprecated, use Function Component or React.PureComponent');
            }
            // 对于两个真正消费 popupContainer 的组件来说，正确的名字是 container,
            if ('popupContainer' in newContextProps && this.props.container === undefined && ['Overlay', 'Popup'].indexOf(displayName) > -1) {
                newContextProps.container = newContextProps.popupContainer;
                delete newContextProps.popupContainer;
            }
            var newOthers = options.transform ? // eslint-disable-next-line @typescript-eslint/no-explicit-any
            options.transform(others, this._deprecated) : others;
            var newProps = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, contextProps.defaultPropsConfig[displayName]), newOthers), newContextProps), { ref: this._getInstance });
            var content = React.createElement(Component, tslib_1.__assign({}, newProps));
            var _e = contextProps.errorBoundary,
                open = _e.open,
                othersBoundary = tslib_1.__rest(_e, ["open"]);
            return open ? React.createElement(error_boundary_1.default, tslib_1.__assign({}, othersBoundary), content) : content;
        };
        ConfigedComponent.displayName = "Config(".concat(getDisplayName(Component), ")");
        ConfigedComponent.propTypes = tslib_1.__assign(tslib_1.__assign({}, Component.propTypes || {}), { prefix: PropTypes.string, locale: PropTypes.object, defaultPropsConfig: PropTypes.object, pure: PropTypes.bool, rtl: PropTypes.bool, device: PropTypes.oneOf(['tablet', 'desktop', 'phone']), popupContainer: PropTypes.any, errorBoundary: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]) });
        ConfigedComponent.contextTypes = tslib_1.__assign(tslib_1.__assign({}, Component.contextTypes || {}), { nextPrefix: PropTypes.string, nextLocale: PropTypes.object, nextDefaultPropsConfig: PropTypes.object, nextPure: PropTypes.bool, nextRtl: PropTypes.bool, nextWarning: PropTypes.bool, nextDevice: PropTypes.oneOf(['tablet', 'desktop', 'phone']), nextPopupContainer: PropTypes.any, nextErrorBoundary: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]) });
        return ConfigedComponent;
    }(React.Component);
    ConfigedComponent.displayName = "Config(".concat(getDisplayName(Component), ")");
    hoistNonReactStatic(ConfigedComponent, Component);
    return ConfigedComponent;
}
exports.config = config;

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var reactIs = __webpack_require__(254);

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

function getStatics(component) {
  // React v16.11 and below
  if (reactIs.isMemo(component)) {
    return MEMO_STATICS;
  } // React v16.12 and above


  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }
  }

  return targetComponent;
}

module.exports = hoistNonReactStatics;


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (true) {
  module.exports = __webpack_require__(255);
} else {
  module.exports = require('./cjs/react-is.development.js');
}


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;
exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};
exports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};
exports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var PropTypes = __webpack_require__(2);
/**
 * Creates an object with the same values as object and keys
 * generated by running each own enumerable string keyed property
 * of object thru iteratee.
 */
var mapKeys = function mapKeys(obj, fn) {
    var result = {};
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var value = obj[key];
            var newKey = fn(key, value);
            result[newKey] = value;
        }
    }
    return result;
};
/**
 * Replace specific key with prefix `next`
 * and lowercase first character of the result.
 */
var replaceKey = function replaceKey(key) {
    return key.replace(/^(next)([A-Z])/, function (match, p1, p2) {
        return p2.toLowerCase();
    });
};
var transformContext = function transformContext(source) {
    return mapKeys(source, replaceKey);
};
/**
 * Consumer
 */
var Consumer = function Consumer(_a, context) {
    var children = _a.children;
    return typeof children === 'function' ? children(transformContext(context)) : null;
};
/**
 * PropTypes
 */
Consumer.propTypes = {
    // Render context as function
    // Function(context: object): ReactElement
    children: PropTypes.func
};
/**
 * ContextTypes (legacy context)
 */
Consumer.contextTypes = {
    nextPrefix: PropTypes.string,
    nextLocale: PropTypes.object,
    nextPure: PropTypes.bool,
    newRtl: PropTypes.bool,
    nextWarning: PropTypes.bool,
    nextDevice: PropTypes.oneOf(['tablet', 'desktop', 'phone']),
    nextPopupContainer: PropTypes.any
};
exports.default = Consumer;

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var Cache = /** @class */function () {
    function Cache() {
        this._root = null;
        this._store = new Map();
    }
    Cache.prototype.empty = function () {
        return this._store.size === 0;
    };
    Cache.prototype.has = function (key) {
        return this._store.has(key);
    };
    Cache.prototype.get = function (key, defaultValue) {
        var res = this.has(key) ? this._store.get(key) : this.root();
        return typeof res === 'undefined' || res === null ? defaultValue : res;
    };
    Cache.prototype.add = function (key, value) {
        if (this.empty()) {
            this._root = key;
        }
        this._store.set(key, value);
    };
    Cache.prototype.update = function (key, value) {
        if (this.has(key)) {
            this._store.set(key, value);
        }
    };
    Cache.prototype.remove = function (key) {
        this._store.delete(key);
        if (key === this._root) {
            var maps = this._store.keys();
            // 如果当前销毁的实例刚好是 root，那么从 map 中取下一个加入的节点当作 root
            var nextkey = maps.next().value;
            this._root = nextkey;
        }
    };
    Cache.prototype.clear = function () {
        this._store.clear();
    };
    Cache.prototype.root = function () {
        return this._store.get(this._root);
    };
    return Cache;
}();
exports.default = Cache;

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.getNodeHeight = exports.getRect = exports.getScroll = void 0;
function getScroll(node, isVertical) {
    if (typeof window === 'undefined') {
        return 0;
    }
    var windowProp = isVertical ? 'pageYOffset' : 'pageXOffset';
    var elementProp = isVertical ? 'scrollTop' : 'scrollLeft';
    return node === window ? node[windowProp] : node[elementProp];
}
exports.getScroll = getScroll;
function getRect(node) {
    return node !== window ? node.getBoundingClientRect() : { top: 0, left: 0, bottom: 0 };
}
exports.getRect = getRect;
function getNodeHeight(node) {
    if (!node) {
        return 0;
    }
    if (node === window) {
        return window.innerHeight;
    }
    return node.clientHeight;
}
exports.getNodeHeight = getNodeHeight;

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var PropTypes = _interopRequireWildcard(__webpack_require__(2));

var _addClass = _interopRequireDefault(__webpack_require__(260));

var _removeClass = _interopRequireDefault(__webpack_require__(262));

var _react = _interopRequireDefault(__webpack_require__(1));

var _Transition = _interopRequireDefault(__webpack_require__(130));

var _PropTypes = __webpack_require__(131);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var addClass = function addClass(node, classes) {
  return node && classes && classes.split(' ').forEach(function (c) {
    return (0, _addClass.default)(node, c);
  });
};

var removeClass = function removeClass(node, classes) {
  return node && classes && classes.split(' ').forEach(function (c) {
    return (0, _removeClass.default)(node, c);
  });
};
/**
 * A transition component inspired by the excellent
 * [ng-animate](http://www.nganimate.org/) library, you should use it if you're
 * using CSS transitions or animations. It's built upon the
 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
 * component, so it inherits all of its props.
 *
 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
 * and `exit` states of the transition. The first class is applied and then a
 * second `*-active` class in order to activate the CSSS transition. After the
 * transition, matching `*-done` class names are applied to persist the
 * transition state.
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
 *         <div>
 *           {"I'll receive my-node-* classes"}
 *         </div>
 *       </CSSTransition>
 *       <button type="button" onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the `in` prop is set to `true`, the child component will first receive
 * the class `example-enter`, then the `example-enter-active` will be added in
 * the next tick. `CSSTransition` [forces a
 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
 * between before adding the `example-enter-active`. This is an important trick
 * because it allows us to transition between `example-enter` and
 * `example-enter-active` even though they were added immediately one after
 * another. Most notably, this is what makes it possible for us to animate
 * _appearance_.
 *
 * ```css
 * .my-node-enter {
 *   opacity: 0;
 * }
 * .my-node-enter-active {
 *   opacity: 1;
 *   transition: opacity 200ms;
 * }
 * .my-node-exit {
 *   opacity: 1;
 * }
 * .my-node-exit-active {
 *   opacity: 0;
 *   transition: opacity: 200ms;
 * }
 * ```
 *
 * `*-active` classes represent which styles you want to animate **to**.
 */


var CSSTransition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(CSSTransition, _React$Component);

  function CSSTransition() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.onEnter = function (node, appearing) {
      var _this$getClassNames = _this.getClassNames(appearing ? 'appear' : 'enter'),
          className = _this$getClassNames.className;

      _this.removeClasses(node, 'exit');

      addClass(node, className);

      if (_this.props.onEnter) {
        _this.props.onEnter(node, appearing);
      }
    };

    _this.onEntering = function (node, appearing) {
      var _this$getClassNames2 = _this.getClassNames(appearing ? 'appear' : 'enter'),
          activeClassName = _this$getClassNames2.activeClassName;

      _this.reflowAndAddClass(node, activeClassName);

      if (_this.props.onEntering) {
        _this.props.onEntering(node, appearing);
      }
    };

    _this.onEntered = function (node, appearing) {
      var appearClassName = _this.getClassNames('appear').doneClassName;

      var enterClassName = _this.getClassNames('enter').doneClassName;

      var doneClassName = appearing ? appearClassName + " " + enterClassName : enterClassName;

      _this.removeClasses(node, appearing ? 'appear' : 'enter');

      addClass(node, doneClassName);

      if (_this.props.onEntered) {
        _this.props.onEntered(node, appearing);
      }
    };

    _this.onExit = function (node) {
      var _this$getClassNames3 = _this.getClassNames('exit'),
          className = _this$getClassNames3.className;

      _this.removeClasses(node, 'appear');

      _this.removeClasses(node, 'enter');

      addClass(node, className);

      if (_this.props.onExit) {
        _this.props.onExit(node);
      }
    };

    _this.onExiting = function (node) {
      var _this$getClassNames4 = _this.getClassNames('exit'),
          activeClassName = _this$getClassNames4.activeClassName;

      _this.reflowAndAddClass(node, activeClassName);

      if (_this.props.onExiting) {
        _this.props.onExiting(node);
      }
    };

    _this.onExited = function (node) {
      var _this$getClassNames5 = _this.getClassNames('exit'),
          doneClassName = _this$getClassNames5.doneClassName;

      _this.removeClasses(node, 'exit');

      addClass(node, doneClassName);

      if (_this.props.onExited) {
        _this.props.onExited(node);
      }
    };

    _this.getClassNames = function (type) {
      var classNames = _this.props.classNames;
      var isStringClassNames = typeof classNames === 'string';
      var prefix = isStringClassNames && classNames ? classNames + '-' : '';
      var className = isStringClassNames ? prefix + type : classNames[type];
      var activeClassName = isStringClassNames ? className + '-active' : classNames[type + 'Active'];
      var doneClassName = isStringClassNames ? className + '-done' : classNames[type + 'Done'];
      return {
        className: className,
        activeClassName: activeClassName,
        doneClassName: doneClassName
      };
    };

    return _this;
  }

  var _proto = CSSTransition.prototype;

  _proto.removeClasses = function removeClasses(node, type) {
    var _this$getClassNames6 = this.getClassNames(type),
        className = _this$getClassNames6.className,
        activeClassName = _this$getClassNames6.activeClassName,
        doneClassName = _this$getClassNames6.doneClassName;

    className && removeClass(node, className);
    activeClassName && removeClass(node, activeClassName);
    doneClassName && removeClass(node, doneClassName);
  };

  _proto.reflowAndAddClass = function reflowAndAddClass(node, className) {
    // This is for to force a repaint,
    // which is necessary in order to transition styles when adding a class name.
    if (className) {
      /* eslint-disable no-unused-expressions */
      node && node.scrollTop;
      /* eslint-enable no-unused-expressions */

      addClass(node, className);
    }
  };

  _proto.render = function render() {
    var props = _extends({}, this.props);

    delete props.classNames;
    return _react.default.createElement(_Transition.default, _extends({}, props, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };

  return CSSTransition;
}(_react.default.Component);

CSSTransition.defaultProps = {
  classNames: ''
};
CSSTransition.propTypes =  false ? _extends({}, _Transition.default.propTypes, {
  /**
   * The animation classNames applied to the component as it enters, exits or
   * has finished the transition. A single name can be provided and it will be
   * suffixed for each stage: e.g.
   *
   * `classNames="fade"` applies `fade-enter`, `fade-enter-active`,
   * `fade-enter-done`, `fade-exit`, `fade-exit-active`, `fade-exit-done`,
   * `fade-appear`, `fade-appear-active`, and `fade-appear-done`.
   *
   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.
   * This allows you to define different behavior for when appearing is done and
   * when regular entering is done, using selectors like
   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an
   * epic entrance animation when element first appears in the DOM using
   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
   * simply use `fade-enter-done` for defining both cases.
   *
   * Each individual classNames can also be specified independently like:
   *
   * ```js
   * classNames={{
   *  appear: 'my-appear',
   *  appearActive: 'my-active-appear',
   *  appearDone: 'my-done-appear',
   *  enter: 'my-enter',
   *  enterActive: 'my-active-enter',
   *  enterDone: 'my-done-enter',
   *  exit: 'my-exit',
   *  exitActive: 'my-active-exit',
   *  exitDone: 'my-done-exit',
   * }}
   * ```
   *
   * If you want to set these classes using CSS Modules:
   *
   * ```js
   * import styles from './styles.css';
   * ```
   *
   * you might want to use camelCase in your CSS file, that way could simply
   * spread them instead of listing them one by one:
   *
   * ```js
   * classNames={{ ...styles }}
   * ```
   *
   * @type {string | {
   *  appear?: string,
   *  appearActive?: string,
   *  appearDone?: string,
   *  enter?: string,
   *  enterActive?: string,
   *  enterDone?: string,
   *  exit?: string,
   *  exitActive?: string,
   *  exitDone?: string,
   * }}
   */
  classNames: _PropTypes.classNamesShape,

  /**
   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
   * applied.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEnter: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'enter-active' or
   * 'appear-active' class is applied.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'enter' or
   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntered: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit' class is
   * applied.
   *
   * @type Function(node: HtmlElement)
   */
  onExit: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
   *
   * @type Function(node: HtmlElement)
   */
  onExiting: PropTypes.func,

  /**
   * A `<Transition>` callback fired immediately after the 'exit' classes
   * are **removed** and the `exit-done` class is added to the DOM node.
   *
   * @type Function(node: HtmlElement)
   */
  onExited: PropTypes.func
}) : {};
var _default = CSSTransition;
exports.default = _default;
module.exports = exports["default"];

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(23);

exports.__esModule = true;
exports.default = addClass;

var _hasClass = _interopRequireDefault(__webpack_require__(261));

function addClass(element, className) {
  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + ' ' + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + ' ' + className);
}

module.exports = exports["default"];

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = hasClass;

function hasClass(element, className) {
  if (element.classList) return !!className && element.classList.contains(className);else return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}

module.exports = exports["default"];

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
}

module.exports = function removeClass(element, className) {
  if (element.classList) element.classList.remove(className);else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
};

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(__webpack_require__(2));

var _react = _interopRequireDefault(__webpack_require__(1));

var _reactDom = __webpack_require__(8);

var _TransitionGroup = _interopRequireDefault(__webpack_require__(132));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/**
 * The `<ReplaceTransition>` component is a specialized `Transition` component
 * that animates between two children.
 *
 * ```jsx
 * <ReplaceTransition in>
 *   <Fade><div>I appear first</div></Fade>
 *   <Fade><div>I replace the above</div></Fade>
 * </ReplaceTransition>
 * ```
 */
var ReplaceTransition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(ReplaceTransition, _React$Component);

  function ReplaceTransition() {
    var _this;

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;

    _this.handleEnter = function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _this.handleLifecycle('onEnter', 0, args);
    };

    _this.handleEntering = function () {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      return _this.handleLifecycle('onEntering', 0, args);
    };

    _this.handleEntered = function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      return _this.handleLifecycle('onEntered', 0, args);
    };

    _this.handleExit = function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      return _this.handleLifecycle('onExit', 1, args);
    };

    _this.handleExiting = function () {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      return _this.handleLifecycle('onExiting', 1, args);
    };

    _this.handleExited = function () {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      return _this.handleLifecycle('onExited', 1, args);
    };

    return _this;
  }

  var _proto = ReplaceTransition.prototype;

  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
    var _child$props;

    var children = this.props.children;

    var child = _react.default.Children.toArray(children)[idx];

    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
    if (this.props[handler]) this.props[handler]((0, _reactDom.findDOMNode)(this));
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        inProp = _this$props.in,
        props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);

    var _React$Children$toArr = _react.default.Children.toArray(children),
        first = _React$Children$toArr[0],
        second = _React$Children$toArr[1];

    delete props.onEnter;
    delete props.onEntering;
    delete props.onEntered;
    delete props.onExit;
    delete props.onExiting;
    delete props.onExited;
    return _react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
      key: 'first',
      onEnter: this.handleEnter,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered
    }) : _react.default.cloneElement(second, {
      key: 'second',
      onEnter: this.handleExit,
      onEntering: this.handleExiting,
      onEntered: this.handleExited
    }));
  };

  return ReplaceTransition;
}(_react.default.Component);

ReplaceTransition.propTypes =  false ? {
  in: _propTypes.default.bool.isRequired,
  children: function children(props, propName) {
    if (_react.default.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
    return null;
  }
} : {};
var _default = ReplaceTransition;
exports.default = _default;
module.exports = exports["default"];

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.getChildMapping = getChildMapping;
exports.mergeChildMappings = mergeChildMappings;
exports.getInitialChildMapping = getInitialChildMapping;
exports.getNextChildMapping = getNextChildMapping;

var _react = __webpack_require__(1);

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */
function getChildMapping(children, mapFn) {
  var mapper = function mapper(child) {
    return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
  };

  var result = Object.create(null);
  if (children) _react.Children.map(children, function (c) {
    return c;
  }).forEach(function (child) {
    // run the map function here instead so that the key is the computed one
    result[child.key] = mapper(child);
  });
  return result;
}
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */


function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};

  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  } // For each key of `next`, the list of keys to insert before that key in
  // the combined list


  var nextKeysPending = Object.create(null);
  var pendingKeys = [];

  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }

  var i;
  var childMapping = {};

  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }

    childMapping[nextKey] = getValueForKey(nextKey);
  } // Finally, add the keys which didn't appear before any key in `next`


  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }

  return childMapping;
}

function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}

function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function (child) {
    return (0, _react.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, 'appear', props),
      enter: getProp(child, 'enter', props),
      exit: getProp(child, 'exit', props)
    });
  });
}

function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children).forEach(function (key) {
    var child = children[key];
    if (!(0, _react.isValidElement)(child)) return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)

    if (hasNext && (!hasPrev || isLeaving)) {
      // console.log('entering', key)
      children[key] = (0, _react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      // item is old (exiting)
      // console.log('leaving', key)
      children[key] = (0, _react.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {
      // item hasn't changed transition states
      // copy over the last transition props;
      // console.log('unchanged', key)
      children[key] = (0, _react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    }
  });
  return children;
}

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_transition_group_1 = __webpack_require__(82);
var util_1 = __webpack_require__(4);
var noop = function noop() {};
var on = util_1.events.on,
    off = util_1.events.off;
var addClass = util_1.dom.addClass,
    removeClass = util_1.dom.removeClass;
var prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];
function getStyleProperty(node, name) {
    var style = window.getComputedStyle(node);
    var ret = '';
    for (var i = 0; i < prefixes.length; i++) {
        ret = style.getPropertyValue(prefixes[i] + name);
        if (ret) {
            break;
        }
    }
    return ret;
}
var AnimateChild = /** @class */function (_super) {
    tslib_1.__extends(AnimateChild, _super);
    function AnimateChild(props) {
        var _this_1 = _super.call(this, props) || this;
        util_1.func.bindCtx(_this_1, ['handleEnter', 'handleEntering', 'handleEntered', 'handleExit', 'handleExiting', 'handleExited', 'addEndListener']);
        _this_1.endListeners = {
            transitionend: [],
            animationend: []
        };
        _this_1.timeoutMap = {};
        return _this_1;
    }
    AnimateChild.prototype.componentWillUnmount = function () {
        var _this_1 = this;
        Object.keys(this.endListeners).forEach(function (eventName) {
            _this_1.endListeners[eventName].forEach(function (listener) {
                off(_this_1.node, eventName, listener);
            });
        });
        this.endListeners = {
            transitionend: [],
            animationend: []
        };
    };
    AnimateChild.prototype.generateEndListener = function (node, done, eventName, id) {
        var _this = this;
        return function endListener(e) {
            if (e && e.target === node) {
                if (_this.timeoutMap[id]) {
                    clearTimeout(_this.timeoutMap[id]);
                    delete _this.timeoutMap[id];
                }
                done();
                off(node, eventName, endListener);
                var listeners = _this.endListeners[eventName];
                var index = listeners.indexOf(endListener);
                index > -1 && listeners.splice(index, 1);
            }
        };
    };
    AnimateChild.prototype.addEndListener = function (node, done) {
        var _this_1 = this;
        if (util_1.support.transition || util_1.support.animation) {
            var id_1 = (0, util_1.guid)();
            this.node = node;
            if (util_1.support.transition) {
                var transitionEndListener = this.generateEndListener(node, done, 'transitionend', id_1);
                on(node, 'transitionend', transitionEndListener);
                this.endListeners.transitionend.push(transitionEndListener);
            }
            if (util_1.support.animation) {
                var animationEndListener = this.generateEndListener(node, done, 'animationend', id_1);
                on(node, 'animationend', animationEndListener);
                this.endListeners.animationend.push(animationEndListener);
            }
            setTimeout(function () {
                var transitionDelay = parseFloat(getStyleProperty(node, 'transition-delay')) || 0;
                var transitionDuration = parseFloat(getStyleProperty(node, 'transition-duration')) || 0;
                var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;
                var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;
                var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);
                if (time) {
                    _this_1.timeoutMap[id_1] = setTimeout(function () {
                        done();
                    }, time * 1000 + 200);
                }
            }, 15);
        } else {
            done();
        }
    };
    AnimateChild.prototype.removeEndtListener = function () {
        this.transitionOff && this.transitionOff();
        this.animationOff && this.animationOff();
    };
    AnimateChild.prototype.removeClassNames = function (node, names) {
        Object.keys(names).forEach(function (key) {
            removeClass(node, names[key]);
        });
    };
    AnimateChild.prototype.handleEnter = function (node, isAppearing) {
        var names = this.props.names;
        if (names) {
            this.removeClassNames(node, names);
            var className = isAppearing ? 'appear' : 'enter';
            addClass(node, names[className]);
        }
        var hook = isAppearing ? this.props.onAppear : this.props.onEnter;
        hook(node);
    };
    AnimateChild.prototype.handleEntering = function (node, isAppearing) {
        var _this_1 = this;
        setTimeout(function () {
            var names = _this_1.props.names;
            if (names) {
                var className = isAppearing ? 'appearActive' : 'enterActive';
                addClass(node, names[className]);
            }
            var hook = isAppearing ? _this_1.props.onAppearing : _this_1.props.onEntering;
            hook(node);
        }, 10);
    };
    AnimateChild.prototype.handleEntered = function (node, isAppearing) {
        var names = this.props.names;
        if (names) {
            var classNames = isAppearing ? [names.appear, names.appearActive] : [names.enter, names.enterActive];
            classNames.forEach(function (className) {
                removeClass(node, className);
            });
        }
        var hook = isAppearing ? this.props.onAppeared : this.props.onEntered;
        hook(node);
    };
    AnimateChild.prototype.handleExit = function (node) {
        var names = this.props.names;
        if (names) {
            this.removeClassNames(node, names);
            addClass(node, names.leave);
        }
        this.props.onExit(node);
    };
    AnimateChild.prototype.handleExiting = function (node) {
        var _this_1 = this;
        setTimeout(function () {
            var names = _this_1.props.names;
            if (names) {
                addClass(node, names.leaveActive);
            }
            _this_1.props.onExiting(node);
        }, 10);
    };
    AnimateChild.prototype.handleExited = function (node) {
        var names = this.props.names;
        if (names) {
            [names.leave, names.leaveActive].forEach(function (className) {
                removeClass(node, className);
            });
        }
        this.props.onExited(node);
    };
    AnimateChild.prototype.render = function () {
        /* eslint-disable no-unused-vars */
        var _a = this.props,
            names = _a.names,
            onAppear = _a.onAppear,
            onAppeared = _a.onAppeared,
            onAppearing = _a.onAppearing,
            onEnter = _a.onEnter,
            onEntering = _a.onEntering,
            onEntered = _a.onEntered,
            onExit = _a.onExit,
            onExiting = _a.onExiting,
            onExited = _a.onExited,
            others = tslib_1.__rest(_a, ["names", "onAppear", "onAppeared", "onAppearing", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited"]);
        /* eslint-enable no-unused-vars */
        return react_1.default.createElement(react_transition_group_1.Transition, tslib_1.__assign({}, others, { onEnter: this.handleEnter, onEntering: this.handleEntering, onEntered: this.handleEntered, onExit: this.handleExit, onExiting: this.handleExiting, onExited: this.handleExited, addEndListener: this.addEndListener }));
    };
    AnimateChild.propTypes = {
        names: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.object]),
        onAppear: prop_types_1.default.func,
        onAppearing: prop_types_1.default.func,
        onAppeared: prop_types_1.default.func,
        onEnter: prop_types_1.default.func,
        onEntering: prop_types_1.default.func,
        onEntered: prop_types_1.default.func,
        onExit: prop_types_1.default.func,
        onExiting: prop_types_1.default.func,
        onExited: prop_types_1.default.func
    };
    AnimateChild.defaultProps = {
        onAppear: noop,
        onAppearing: noop,
        onAppeared: noop,
        onEnter: noop,
        onEntering: noop,
        onEntered: noop,
        onExit: noop,
        onExiting: noop,
        onExited: noop
    };
    return AnimateChild;
}(react_1.Component);
exports.default = AnimateChild;

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var util_1 = __webpack_require__(4);
var animate_1 = __webpack_require__(129);
var noop = function noop() {};
var getStyle = util_1.dom.getStyle;
var Expand = /** @class */function (_super) {
    tslib_1.__extends(Expand, _super);
    function Expand(props) {
        var _this = _super.call(this, props) || this;
        util_1.func.bindCtx(_this, ['beforeEnter', 'onEnter', 'afterEnter', 'beforeLeave', 'onLeave', 'afterLeave']);
        return _this;
    }
    Expand.prototype.beforeEnter = function (node) {
        if (this.leaving) {
            this.afterLeave(node);
        }
        this.cacheCurrentStyle(node);
        this.cacheComputedStyle(node);
        this.setCurrentStyleToZero(node);
        this.props.beforeEnter(node);
    };
    Expand.prototype.onEnter = function (node) {
        this.setCurrentStyleToComputedStyle(node);
        this.props.onEnter(node);
    };
    Expand.prototype.afterEnter = function (node) {
        this.restoreCurrentStyle(node);
        this.props.afterEnter(node);
    };
    Expand.prototype.beforeLeave = function (node) {
        this.leaving = true;
        this.cacheCurrentStyle(node);
        this.cacheComputedStyle(node);
        this.setCurrentStyleToComputedStyle(node);
        this.props.beforeLeave(node);
    };
    Expand.prototype.onLeave = function (node) {
        this.setCurrentStyleToZero(node);
        this.props.onLeave(node);
    };
    Expand.prototype.afterLeave = function (node) {
        this.leaving = false;
        this.restoreCurrentStyle(node);
        this.props.afterLeave(node);
    };
    Expand.prototype.cacheCurrentStyle = function (node) {
        this.styleBorderTopWidth = node.style.borderTopWidth;
        this.stylePaddingTop = node.style.paddingTop;
        this.styleHeight = node.style.height;
        this.stylePaddingBottom = node.style.paddingBottom;
        this.styleBorderBottomWidth = node.style.borderBottomWidth;
    };
    Expand.prototype.cacheComputedStyle = function (node) {
        this.borderTopWidth = getStyle(node, 'borderTopWidth');
        this.paddingTop = getStyle(node, 'paddingTop');
        this.height = node.offsetHeight;
        this.paddingBottom = getStyle(node, 'paddingBottom');
        this.borderBottomWidth = getStyle(node, 'borderBottomWidth');
    };
    Expand.prototype.setCurrentStyleToZero = function (node) {
        node.style.borderTopWidth = '0px';
        node.style.paddingTop = '0px';
        node.style.height = '0px';
        node.style.paddingBottom = '0px';
        node.style.borderBottomWidth = '0px';
    };
    Expand.prototype.setCurrentStyleToComputedStyle = function (node) {
        node.style.borderTopWidth = "".concat(this.borderTopWidth, "px");
        node.style.paddingTop = "".concat(this.paddingTop, "px");
        node.style.height = "".concat(this.height, "px");
        node.style.paddingBottom = "".concat(this.paddingBottom, "px");
        node.style.borderBottomWidth = "".concat(this.borderBottomWidth, "px");
    };
    Expand.prototype.restoreCurrentStyle = function (node) {
        node.style.borderTopWidth = this.styleBorderTopWidth;
        node.style.paddingTop = this.stylePaddingTop;
        node.style.height = this.styleHeight;
        node.style.paddingBottom = this.stylePaddingBottom;
        node.style.borderBottomWidth = this.styleBorderBottomWidth;
    };
    Expand.prototype.render = function () {
        var _a = this.props,
            animation = _a.animation,
            others = tslib_1.__rest(_a, ["animation"]);
        var newAnimation = animation || 'expand';
        return react_1.default.createElement(animate_1.default, tslib_1.__assign({}, others, { animation: newAnimation, beforeEnter: this.beforeEnter, onEnter: this.onEnter, afterEnter: this.afterEnter, beforeLeave: this.beforeLeave, onLeave: this.onLeave, afterLeave: this.afterLeave }));
    };
    Expand.propTypes = {
        animation: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.object]),
        beforeEnter: prop_types_1.default.func,
        onEnter: prop_types_1.default.func,
        afterEnter: prop_types_1.default.func,
        beforeLeave: prop_types_1.default.func,
        onLeave: prop_types_1.default.func,
        afterLeave: prop_types_1.default.func
    };
    Expand.defaultProps = {
        beforeEnter: noop,
        onEnter: noop,
        afterEnter: noop,
        beforeLeave: noop,
        onLeave: noop,
        afterLeave: noop
    };
    return Expand;
}(react_1.Component);
exports.default = Expand;

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
/* istanbul ignore file */
var react_1 = __webpack_require__(1);
var react_transition_group_1 = __webpack_require__(82);
var classnames_1 = __webpack_require__(3);
var OverlayAnimate = function OverlayAnimate(props) {
    var animation = props.animation,
        visible = props.visible,
        children = props.children,
        _a = props.timeout,
        timeout = _a === void 0 ? 300 : _a,
        style = props.style,
        mountOnEnter = props.mountOnEnter,
        unmountOnExit = props.unmountOnExit,
        appear = props.appear,
        enter = props.enter,
        exit = props.exit,
        onEnter = props.onEnter,
        onEntering = props.onEntering,
        onEntered = props.onEntered,
        onExit = props.onExit,
        onExiting = props.onExiting,
        onExited = props.onExited,
        others = tslib_1.__rest(props, ["animation", "visible", "children", "timeout", "style", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited"]);
    var animateProps = {
        mountOnEnter: mountOnEnter,
        unmountOnExit: unmountOnExit,
        appear: appear,
        enter: enter,
        exit: exit,
        onEnter: onEnter,
        onEntering: onEntering,
        onEntered: onEntered,
        onExit: onExit,
        onExiting: onExiting,
        onExited: onExited
    };
    Object.keys(animateProps).forEach(function (k) {
        if (!(k in props) || typeof props[k] === 'undefined') {
            delete animateProps[k];
        }
    });
    var animationMap = typeof animation === 'string' ? { in: animation, out: animation } : animation;
    var animateClsMap = animation ? {
        entering: animationMap.in,
        exiting: animationMap.out
    } : {};
    if (animation === false) {
        animateClsMap.entering = '';
        animateClsMap.exiting = '';
    }
    return react_1.default.createElement(react_transition_group_1.Transition, tslib_1.__assign({}, animateProps, { in: visible, timeout: animation ? timeout : 0, appear: true }), function (state) {
        var _a;
        var cls = (0, classnames_1.default)((_a = {}, _a[children.props.className] = !!children.props.className, _a[animateClsMap[state]] = state in animateClsMap && animateClsMap[state], _a));
        var childProps = tslib_1.__assign(tslib_1.__assign({}, others), { className: cls });
        if (style && children.props && children.props.style) {
            childProps.style = (0, _extends3.default)({}, children.props.style, style);
        }
        return react_1.default.cloneElement(children, childProps);
    });
};
exports.default = OverlayAnimate;

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var React = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
var classNames = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var sup_1 = __webpack_require__(269);
/**
 * Badge
 */
var Badge = /** @class */function (_super) {
    tslib_1.__extends(Badge, _super);
    function Badge() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Badge.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            dot = _b.dot,
            className = _b.className,
            children = _b.children,
            content = _b.content,
            style = _b.style,
            rtl = _b.rtl,
            originCount = _b.count,
            showZero = _b.showZero,
            originOverflowCount = _b.overflowCount;
        var count = parseInt(originCount, 10);
        var overflowCount = parseInt(originOverflowCount, 10);
        var others = util_1.obj.pickOthers(Badge.propTypes, this.props);
        // 如果是数字，则添加默认的 title
        if (count || count === 0 && showZero) {
            others.title = others.title || "".concat(count);
        }
        var classes = classNames("".concat(prefix, "badge"), (_a = {}, _a["".concat(prefix, "badge-not-a-wrapper")] = !children, _a), className);
        return React.createElement("span", tslib_1.__assign({ dir: rtl ? 'rtl' : undefined, className: classes }, others), children, React.createElement(sup_1.default, { prefix: prefix, content: content, count: count, showZero: showZero, overflowCount: overflowCount, dot: dot, style: style }));
    };
    Badge.propTypes = {
        // 样式类名的品牌前缀
        prefix: PropTypes.string,
        rtl: PropTypes.bool,
        // 自定义类名
        className: PropTypes.string,
        // 自定义内联样式
        style: PropTypes.object,
        /**
         * 徽标依托的内容，一般显示在其右上方
         */
        children: PropTypes.node,
        /**
         * 展示的数字，大于 `overflowCount` 时显示为 `${overflowCount}+`，为 `0` 时默认隐藏
         */
        count: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        /**
         * 当`count`为`0`时，是否显示 count
         * @version 1.16
         */
        showZero: PropTypes.bool,
        /**
         * 自定义徽标中的内容
         */
        content: PropTypes.node,
        /**
         * 展示的封顶的数字
         */
        overflowCount: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        /**
         * 不展示数字，只展示一个小红点
         */
        dot: PropTypes.bool
    };
    Badge.defaultProps = {
        prefix: 'next-',
        count: 0,
        showZero: false,
        overflowCount: 99,
        dot: false
    };
    return Badge;
}(react_1.Component);
exports.default = config_provider_1.default.config(Badge);

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var React = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classNames = __webpack_require__(3);
var animate_1 = __webpack_require__(17);
var util_1 = __webpack_require__(4);
/**
 * badge sup component
 */
// util::getDigitArray
var getDigitArray = function getDigitArray(num) {
    return num.toString().split('').reverse().map(function (i) {
        return parseInt(i, 10);
    });
};
var Sup = /** @class */function (_super) {
    tslib_1.__extends(Sup, _super);
    function Sup(props) {
        var _this = _super.call(this, props) || this;
        _this.saveRef = function (ref) {
            _this.supEl = ref;
        };
        // render 时，上一次的渲染数字 和 当前渲染的数字
        _this.state = {
            lastCount: 0,
            currentCount: props.count
        };
        return _this;
    }
    // 单排可滚动的数字列表
    Sup.renderDigit = function (prefix, digit, key) {
        var children = [];
        for (var i = 0; i < 30; i++) {
            children.push(React.createElement("span", { key: i }, i % 10));
        }
        return React.createElement("span", { className: "".concat(prefix, "badge-scroll-number-only"), key: key }, children);
    };
    // 可滚动数字组
    Sup.renderNumber = function (prefix, count) {
        return getDigitArray(count).map(function (digit, i) {
            return Sup.renderDigit(prefix, digit, i);
        }).reverse();
    };
    Sup.getDerivedStateFromProps = function (nextProps, prevState) {
        if ('count' in nextProps) {
            return {
                lastCount: prevState.currentCount,
                currentCount: nextProps.count
            };
        }
        return null;
    };
    Sup.prototype.componentDidMount = function () {
        this.computeStyle(true);
    };
    Sup.prototype.componentDidUpdate = function (prevProps) {
        var _this = this;
        if (prevProps.count !== this.props.count) {
            this.computeStyle(false);
            // NOTE why called `computeStyle` again after 300ms ?
            setTimeout(function () {
                _this.computeStyle(true, true);
            }, 300);
        }
    };
    Sup.prototype.computeStyle = function (removeTransition, revert) {
        var _this = this;
        var _a = this.props,
            prefix = _a.prefix,
            count = _a.count,
            overflowCount = _a.overflowCount;
        var lastCount = this.state.lastCount;
        if (lastCount === undefined || count === undefined || overflowCount === undefined || Number(count) < 0) {
            return;
        }
        var supNode = this.supEl;
        if (supNode && util_1.dom.hasClass(supNode, "".concat(prefix, "badge-count"))) {
            var scrollNums_1 = supNode.querySelectorAll(".".concat(prefix, "badge-scroll-number-only"));
            if (scrollNums_1.length) {
                var height_1 = window.getComputedStyle(supNode).height;
                scrollNums_1 = [].slice.call(scrollNums_1, 0).reverse();
                getDigitArray(count).forEach(function (digit, i) {
                    var position = _this.getPositionByDigit(digit, i, revert);
                    var transformTo = -position * parseFloat(height_1);
                    removeTransition = removeTransition || typeof getDigitArray(lastCount)[i] === 'undefined' || lastCount > overflowCount || Number(lastCount) <= 0;
                    var scrollStyle = util_1.support.animation ? {
                        transition: removeTransition ? 'none' : 'transform .3s cubic-bezier(.645, .045, .355, 1), -webkit-transform .3s cubic-bezier(.645, .045, .355, 1)',
                        WebkitTransform: "translateY(".concat(transformTo, "px)"),
                        transform: "translateY(".concat(transformTo, "px)"),
                        height: height_1,
                        lineHeight: height_1
                    } : {
                        top: "".concat(transformTo, "px"),
                        height: height_1,
                        lineHeight: height_1
                    };
                    Object.keys(scrollStyle).forEach(function (key) {
                        scrollNums_1[i].style.setProperty(key, scrollStyle[key]);
                    });
                });
            }
        }
    };
    Sup.prototype.getPositionByDigit = function (digit, i, revert) {
        var lastCount = this.state.lastCount;
        if (revert) {
            return 10 + digit;
        }
        var lastDigit = getDigitArray(lastCount)[i] || 0;
        if (this.props.count > lastCount) {
            return (digit >= lastDigit ? 10 : 20) + digit;
        }
        if (digit <= lastDigit) {
            return 10 + digit;
        }
        return digit;
    };
    Sup.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            count = _b.count,
            showZero = _b.showZero,
            _c = _b.overflowCount,
            overflowCount = _c === void 0 ? 99 : _c,
            dot = _b.dot,
            style = _b.style,
            content = _b.content;
        var supClasses = classNames("".concat(prefix, "badge-scroll-number"), (_a = {}, _a["".concat(prefix, "badge-count")] = !!count || count === 0 && showZero, _a["".concat(prefix, "badge-dot")] = dot, _a["".concat(prefix, "badge-custom")] = !!content, _a));
        var children = null;
        var show = dot || count > 0 || count === 0 && showZero || content;
        if (count > 0 || count === 0 && showZero) {
            var realCount = overflowCount > 0 && count > overflowCount ? "".concat(overflowCount, "+") : count;
            children = isNaN(realCount) ? realCount : Sup.renderNumber(prefix, count);
        } else if (content) {
            children = content;
        }
        var animation = {
            appear: 'zoomIn',
            enter: 'zoomIn',
            leave: 'zoomOut'
        };
        var wrapper = util_1.support.animation ? React.createElement(animate_1.default, { animation: animation }) : React.createElement("span", null);
        var element = show ? React.createElement("sup", { ref: this.saveRef, className: supClasses, style: style }, children) : null;
        return React.cloneElement(wrapper, {}, element);
    };
    Sup.propTypes = {
        prefix: PropTypes.string,
        count: PropTypes.number,
        showZero: PropTypes.bool,
        overflowCount: PropTypes.number,
        content: PropTypes.node,
        dot: PropTypes.bool,
        style: PropTypes.object
    };
    Sup.defaultProps = {
        prefix: 'next-',
        count: 0,
        showZero: false,
        overflowCount: 99,
        dot: false
    };
    return Sup;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Sup);

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var overlay_1 = __webpack_require__(12);
var util_1 = __webpack_require__(4);
var inner_1 = __webpack_require__(83);
var alignMap_1 = __webpack_require__(84);
var util_2 = __webpack_require__(138);
var noop = util_1.func.noop;
var Popup = overlay_1.default.Popup;
var alignList = ['t', 'r', 'b', 'l', 'tl', 'tr', 'bl', 'br', 'lt', 'lb', 'rt', 'rb'];
var alignMap = alignMap_1.normalMap;
/** Balloon */
var Balloon = /** @class */function (_super) {
    tslib_1.__extends(Balloon, _super);
    function Balloon(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.beforePosition = function (result, obj) {
            var placement = result.config.placement;
            if (placement !== _this.state.align) {
                _this.setState({
                    align: placement,
                    innerAlign: true
                });
            }
            if (_this.props.arrowPointToCenter) {
                var _a = obj.target,
                    width = _a.width,
                    height = _a.height;
                if (placement.length === 2) {
                    var offset = alignMap_1.normalMap[placement].offset;
                    switch (placement[0]) {
                        case 'b':
                        case 't':
                            {
                                var plus = offset[0] > 0 ? 1 : -1;
                                result.style.left = result.style.left + plus * width / 2 - offset[0];
                            }
                            break;
                        case 'l':
                        case 'r':
                            {
                                var plus = offset[0] > 0 ? 1 : -1;
                                result.style.top = result.style.top + plus * height / 2 - offset[1];
                            }
                            break;
                    }
                }
            }
            return result;
        };
        _this.state = {
            align: alignList.includes(props.align) ? props.align : 'b',
            visible: 'visible' in props ? props.visible : props.defaultVisible
        };
        _this._onClose = _this._onClose.bind(_this);
        _this._onPosition = _this._onPosition.bind(_this);
        _this._onVisibleChange = _this._onVisibleChange.bind(_this);
        return _this;
    }
    Balloon.getDerivedStateFromProps = function (nextProps, prevState) {
        var nextState = {};
        if ('visible' in nextProps) {
            nextState.visible = nextProps.visible;
        }
        if (!prevState.innerAlign && 'align' in nextProps && alignList.includes(nextProps.align) && nextProps.align !== prevState.align) {
            nextState.align = nextProps.align;
            nextState.innerAlign = false;
        }
        return nextState;
    };
    Balloon.prototype._onVisibleChange = function (visible, trigger) {
        // Not Controlled
        if (!('visible' in this.props)) {
            this.setState({
                visible: visible
            });
        }
        this.props.onVisibleChange(visible, trigger);
        if (!visible) {
            this.props.onClose();
        }
    };
    Balloon.prototype._onClose = function (e) {
        this._onVisibleChange(false, 'closeClick');
        //必须加上preventDefault,否则单测IE下报错,出现full page reload 异常
        e.preventDefault();
    };
    Balloon.prototype._onPosition = function (res) {
        var rtl = this.props.rtl;
        alignMap = this.props.alignEdge ? alignMap_1.edgeMap : alignMap_1.normalMap;
        var newAlign = res.align.join(' ');
        var resAlign;
        var alignKey = 'align';
        if (rtl) {
            alignKey = 'rtlAlign';
        }
        for (var key in alignMap) {
            if (alignMap[key][alignKey] === newAlign) {
                resAlign = key;
                break;
            }
        }
        resAlign = resAlign || this.state.align;
        if (resAlign !== this.state.align) {
            this.setState({
                align: resAlign,
                innerAlign: true
            });
        }
    };
    Balloon.prototype.render = function () {
        var _a = this.props,
            id = _a.id,
            type = _a.type,
            prefix = _a.prefix,
            className = _a.className,
            title = _a.title,
            alignEdge = _a.alignEdge,
            trigger = _a.trigger,
            triggerType = _a.triggerType,
            children = _a.children,
            closable = _a.closable,
            shouldUpdatePosition = _a.shouldUpdatePosition,
            delay = _a.delay,
            needAdjust = _a.needAdjust,
            autoAdjust = _a.autoAdjust,
            safeId = _a.safeId,
            autoFocus = _a.autoFocus,
            safeNode = _a.safeNode,
            onClick = _a.onClick,
            onHover = _a.onHover,
            animation = _a.animation,
            offset = _a.offset,
            style = _a.style,
            container = _a.container,
            popupContainer = _a.popupContainer,
            cache = _a.cache,
            popupStyle = _a.popupStyle,
            popupClassName = _a.popupClassName,
            popupProps = _a.popupProps,
            followTrigger = _a.followTrigger,
            rtl = _a.rtl,
            v2 = _a.v2,
            arrowPointToCenter = _a.arrowPointToCenter,
            _b = _a.placementOffset,
            placementOffset = _b === void 0 ? 0 : _b,
            others = tslib_1.__rest(_a, ["id", "type", "prefix", "className", "title", "alignEdge", "trigger", "triggerType", "children", "closable", "shouldUpdatePosition", "delay", "needAdjust", "autoAdjust", "safeId", "autoFocus", "safeNode", "onClick", "onHover", "animation", "offset", "style", "container", "popupContainer", "cache", "popupStyle", "popupClassName", "popupProps", "followTrigger", "rtl", "v2", "arrowPointToCenter", "placementOffset"]);
        if (container) {
            util_1.log.deprecated('container', 'popupContainer', 'Balloon');
        }
        var align = this.state.align;
        alignMap = alignEdge || v2 ? alignMap_1.edgeMap : alignMap_1.normalMap;
        var _prefix = this.context.prefix || prefix;
        var trOrigin = 'trOrigin';
        if (rtl) {
            trOrigin = 'rtlTrOrigin';
        }
        var _offset = [alignMap[align].offset[0] + offset[0], alignMap[align].offset[1] + offset[1]];
        var transformOrigin = alignMap[align][trOrigin];
        var _style = tslib_1.__assign({ transformOrigin: transformOrigin }, style);
        var content = react_1.default.createElement(inner_1.default, tslib_1.__assign({}, util_1.obj.pickOthers(Object.keys(Balloon.propTypes), others), { id: id, title: title, prefix: _prefix, closable: closable, onClose: this._onClose, className: className, style: _style, align: align, type: type, rtl: rtl, alignEdge: alignEdge, v2: v2 }), children);
        var triggerProps = {};
        triggerProps['aria-describedby'] = id;
        triggerProps.tabIndex = '0';
        var ariaTrigger = id ? react_1.default.cloneElement(trigger, triggerProps) : trigger;
        var newTrigger = (0, util_2.getDisabledCompatibleTrigger)(react_1.default.isValidElement(ariaTrigger) ? ariaTrigger : react_1.default.createElement("span", null, ariaTrigger));
        var otherProps = {
            delay: delay,
            shouldUpdatePosition: shouldUpdatePosition,
            needAdjust: needAdjust,
            align: alignMap[align].align,
            offset: _offset,
            safeId: safeId,
            onHover: onHover,
            onPosition: this._onPosition
        };
        if (v2) {
            delete otherProps.align;
            delete otherProps.shouldUpdatePosition;
            delete otherProps.needAdjust;
            delete otherProps.safeId;
            delete otherProps.onHover;
            delete otherProps.onPosition;
            (0, _extends3.default)(otherProps, {
                placement: align,
                placementOffset: placementOffset + 12,
                v2: true,
                beforePosition: this.beforePosition,
                autoAdjust: autoAdjust
            });
        }
        return react_1.default.createElement(Popup, tslib_1.__assign({}, popupProps, { followTrigger: followTrigger, trigger: newTrigger, cache: cache, triggerType: triggerType, visible: this.state.visible, onClick: onClick, afterClose: this.props.afterClose, onVisibleChange: this._onVisibleChange, animation: animation, autoFocus: triggerType === 'focus' ? false : autoFocus, safeNode: safeNode, container: popupContainer || container, className: popupClassName, style: popupStyle, rtl: rtl }, otherProps), content);
    };
    Balloon.contextTypes = {
        prefix: prop_types_1.default.string
    };
    Balloon.propTypes = {
        prefix: prop_types_1.default.string,
        pure: prop_types_1.default.bool,
        rtl: prop_types_1.default.bool,
        /**
         * 自定义类名
         */
        className: prop_types_1.default.string,
        /**
         * 自定义内敛样式
         */
        style: prop_types_1.default.object,
        /**
         * 浮层的内容
         */
        children: prop_types_1.default.any,
        size: prop_types_1.default.string,
        /**
         * 样式类型
         */
        type: prop_types_1.default.oneOf(['normal', 'primary']),
        /**
         * 标题
         * @version 1.23
         */
        title: prop_types_1.default.node,
        /**
         * 弹层当前显示的状态
         */
        visible: prop_types_1.default.bool,
        /**
         * 弹层默认显示的状态
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 弹层在显示和隐藏触发的事件
         * @param {Boolean} visible 弹层是否隐藏和显示
         * @param {String} type 触发弹层显示或隐藏的来源， closeClick 表示由自带的关闭按钮触发； fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
         */
        onVisibleChange: prop_types_1.default.func,
        alignEdge: prop_types_1.default.bool,
        /**
         * 开启 v2 版本
         * @version 1.25
         */
        v2: prop_types_1.default.bool,
        /**
         * [v2] 箭头是否指向目标元素的中心
         * @version 1.25
         */
        arrowPointToCenter: prop_types_1.default.bool,
        /**
         * [v2] 弹层偏离触发元素的像素值
         */
        placementOffset: prop_types_1.default.number,
        /**
         * 是否显示关闭按钮
         */
        closable: prop_types_1.default.bool,
        /**
         * 弹出层位置
         * @enumdesc 上, 右, 下, 左, 上左, 上右, 下左, 下右, 左上, 左下, 右上, 右下
         */
        align: prop_types_1.default.oneOf(alignList),
        /**
         * 弹层相对于trigger的定位的微调, 接收数组[hoz, ver], 表示弹层在 left / top 上的增量
         * e.g. [100, 100] 表示往右(RTL 模式下是往左) 、下分布偏移100px
         */
        offset: prop_types_1.default.array,
        /**
         * 触发元素
         */
        trigger: prop_types_1.default.any,
        /**
         * 触发行为
         * 鼠标悬浮, 鼠标点击('hover','click')或者它们组成的数组，如 ['hover', 'click'], 强烈不建议使用'focus'，若弹窗内容有复杂交互请使用click
         */
        triggerType: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
        onClick: prop_types_1.default.func,
        /**
         * 任何visible为false时会触发的事件
         */
        onClose: prop_types_1.default.func,
        onHover: prop_types_1.default.func,
        /**
         * [v2] 是否进行自动位置调整，默认自动开启。
         * @version 1.25
         */
        autoAdjust: prop_types_1.default.bool,
        needAdjust: prop_types_1.default.bool,
        /**
         * 弹层在触发以后的延时显示, 单位毫秒 ms
         */
        delay: prop_types_1.default.number,
        /**
         * 浮层关闭后触发的事件, 如果有动画，则在动画结束后触发
         */
        afterClose: prop_types_1.default.func,
        shouldUpdatePosition: prop_types_1.default.bool,
        /**
         * 弹层出现后是否自动focus到内部第一个元素
         */
        autoFocus: prop_types_1.default.bool,
        /**
         * 安全节点:对于triggetType为click的浮层,会在点击除了浮层外的其它区域时关闭浮层.safeNode用于添加不触发关闭的节点, 值可以是dom节点的id或者是节点的dom对象
         */
        safeNode: prop_types_1.default.string,
        /**
         * 用来指定safeNode节点的id，和safeNode配合使用
         */
        safeId: prop_types_1.default.string,
        /**
         * 配置动画的播放方式，格式是{in: '', out: ''}， 常用的动画class请查看Animate组件文档
         * @param {String} in 进场动画
         * @param {String} out 出场动画
         */
        animation: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.bool]),
        /**
         * 弹层的dom节点关闭时是否删除
         */
        cache: prop_types_1.default.bool,
        /**
         * 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。
         */
        popupContainer: prop_types_1.default.any,
        container: prop_types_1.default.any,
        /**
         * 弹层组件style，透传给Popup
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 弹层组件className，透传给Popup
         */
        popupClassName: prop_types_1.default.string,
        /**
         * 弹层组件属性，透传给Popup
         */
        popupProps: prop_types_1.default.object,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 弹层id, 传入值才会支持无障碍
         */
        id: prop_types_1.default.string
    };
    Balloon.defaultProps = {
        prefix: 'next-',
        pure: false,
        type: 'normal',
        closable: true,
        defaultVisible: false,
        size: 'medium',
        alignEdge: false,
        arrowPointToCenter: false,
        align: 'b',
        offset: [0, 0],
        trigger: react_1.default.createElement("span", null),
        onClose: noop,
        afterClose: noop,
        onVisibleChange: noop,
        needAdjust: false,
        triggerType: 'hover',
        safeNode: undefined,
        safeId: null,
        autoFocus: true,
        animation: {
            in: 'zoomIn zoomInBig',
            out: 'zoomOut zoomOutBig'
        },
        cache: false,
        popupStyle: {},
        popupClassName: '',
        popupProps: {}
    };
    return Balloon;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Balloon);

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var overlayManager = {
    allOverlays: [],
    addOverlay: function addOverlay(overlay) {
        this.removeOverlay(overlay);
        this.allOverlays.unshift(overlay);
    },
    isCurrentOverlay: function isCurrentOverlay(overlay) {
        return overlay && this.allOverlays[0] === overlay;
    },
    removeOverlay: function removeOverlay(overlay) {
        var i = this.allOverlays.indexOf(overlay);
        if (i > -1) {
            this.allOverlays.splice(i, 1);
        }
    }
};
exports.default = overlayManager;

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var util_1 = __webpack_require__(4);
var find_node_1 = __webpack_require__(57);
var VIEWPORT = 'viewport';
// IE8 not support pageXOffset
var getPageX = function getPageX() {
    return window.pageXOffset || document.documentElement.scrollLeft;
};
var getPageY = function getPageY() {
    return window.pageYOffset || document.documentElement.scrollTop;
};
/**
 * @private get element size
 * @param       {Element} element
 * @return      {Object}
 */
function _getSize(element) {
    // element like `svg` do not have offsetWidth and offsetHeight prop
    // then getBoundingClientRect
    if ('offsetWidth' in element && 'offsetHeight' in element) {
        return {
            width: element.offsetWidth,
            height: element.offsetHeight
        };
    } else {
        var _a = element.getBoundingClientRect(),
            width = _a.width,
            height = _a.height;
        return {
            width: width,
            height: height
        };
    }
}
/**
 * @private get element rect
 * @param       {Element} elem
 * @return      {Object}
 */
function _getElementRect(elem, container) {
    var offsetTop = 0,
        offsetLeft = 0,
        scrollTop = 0,
        scrollLeft = 0;
    var _a = _getSize(elem),
        width = _a.width,
        height = _a.height;
    do {
        if (!isNaN(elem.offsetTop)) {
            offsetTop += elem.offsetTop;
        }
        if (!isNaN(elem.offsetLeft)) {
            offsetLeft += elem.offsetLeft;
        }
        if (elem && elem.offsetParent) {
            if (!isNaN(elem.offsetParent.scrollLeft) && elem.offsetParent !== document.body) {
                scrollLeft += elem.offsetParent.scrollLeft;
            }
            if (!isNaN(elem.offsetParent.scrollTop) && elem.offsetParent !== document.body) {
                scrollTop += elem.offsetParent.scrollTop;
            }
        }
        elem = elem.offsetParent;
    } while (elem !== null && elem !== container);
    // if container is body or invalid, treat as window, use client width & height
    var treatAsWindow = !container || container === document.body;
    return {
        top: offsetTop - scrollTop - (treatAsWindow ? document.documentElement.scrollTop || document.body.scrollTop : 0),
        left: offsetLeft - scrollLeft - (treatAsWindow ? document.documentElement.scrollLeft || document.body.scrollLeft : 0),
        width: width,
        height: height
    };
}
/**
 * @private get viewport size
 * @return {Object}
 */
function _getViewportSize(container) {
    if (!container || container === document.body) {
        return {
            width: document.documentElement.clientWidth,
            height: document.documentElement.clientHeight
        };
    }
    var _a = container.getBoundingClientRect(),
        width = _a.width,
        height = _a.height;
    return {
        width: width,
        height: height
    };
}
var getContainer = function getContainer(_a) {
    var container = _a.container,
        baseElement = _a.baseElement;
    // SSR下会有副作用
    if (typeof document === 'undefined') {
        return container;
    }
    var calcContainer = (0, find_node_1.default)(container, baseElement);
    if (!calcContainer) {
        calcContainer = document.body;
    }
    while (util_1.dom.getStyle(calcContainer, 'position') === 'static') {
        if (!calcContainer || calcContainer === document.body) {
            return document.body;
        }
        calcContainer = calcContainer.parentNode;
    }
    return calcContainer;
};
var Position = /** @class */function () {
    function Position(props) {
        var _this = this;
        this._calPinOffset = function (align) {
            var offset = tslib_1.__spreadArray([], tslib_1.__read(_this.offset), false);
            if (_this.autoFit && align && _this.container && _this.container !== document.body) {
                var baseElementRect = _getElementRect(_this.baseElement, _this.container);
                var pinElementRect = _getElementRect(_this.pinElement, _this.container);
                var viewportSize = _getViewportSize(_this.container);
                var pinAlign = align.split(' ')[0];
                var x = pinAlign.charAt(1);
                var y = pinAlign.charAt(0);
                if (pinElementRect.top < 0 || pinElementRect.top + pinElementRect.height > viewportSize.height) {
                    offset[1] = -baseElementRect.top - (y === 't' ? baseElementRect.height : 0);
                }
            }
            return offset;
        };
        this._getParentScrollOffset = function (elem) {
            var top = 0;
            var left = 0;
            if (elem && elem.offsetParent && elem.offsetParent !== document.body) {
                if (!isNaN(elem.offsetParent.scrollTop)) {
                    top += elem.offsetParent.scrollTop;
                }
                if (!isNaN(elem.offsetParent.scrollLeft)) {
                    left += elem.offsetParent.scrollLeft;
                }
            }
            return {
                top: top,
                left: left
            };
        };
        this.pinElement = props.pinElement;
        this.baseElement = props.baseElement;
        this.pinFollowBaseElementWhenFixed = props.pinFollowBaseElementWhenFixed;
        this.container = getContainer(props);
        this.autoFit = props.autoFit || false;
        this.align = props.align || 'tl tl';
        this.offset = props.offset || [0, 0];
        this.needAdjust = props.needAdjust || false;
        this.isRtl = props.isRtl || false;
    }
    Position.prototype.setPosition = function () {
        var pinElement = this.pinElement;
        var baseElement = this.baseElement;
        var pinFollowBaseElementWhenFixed = this.pinFollowBaseElementWhenFixed;
        var expectedAlign = this._getExpectedAlign();
        var isPinFixed, isBaseFixed, firstPositionResult;
        if (pinElement === VIEWPORT) {
            return;
        }
        if (util_1.dom.getStyle(pinElement, 'position') !== 'fixed') {
            util_1.dom.setStyle(pinElement, 'position', 'absolute');
            isPinFixed = false;
        } else {
            isPinFixed = true;
        }
        if (baseElement === VIEWPORT || util_1.dom.getStyle(baseElement, 'position') !== 'fixed') {
            isBaseFixed = false;
        } else {
            isBaseFixed = true;
        }
        // 根据期望的定位
        for (var i = 0; i < expectedAlign.length; i++) {
            var align = expectedAlign[i];
            var pinElementPoints = this._normalizePosition(pinElement, align.split(' ')[0], isPinFixed);
            var baseElementPoints = this._normalizePosition(baseElement, align.split(' ')[1],
            // 忽略元素位置，发生在类似dialog的场景下
            isPinFixed && !pinFollowBaseElementWhenFixed);
            var pinElementParentOffset = this._getParentOffset(pinElement);
            var pinElementParentScrollOffset = this._getParentScrollOffset(pinElement);
            var baseElementOffset = isPinFixed && isBaseFixed ? this._getLeftTop(baseElement) : // 在 pin 是 fixed 布局，并且又需要根据 base 计算位置时，计算 base 的 offset 需要忽略页面滚动
            baseElementPoints.offset(isPinFixed && pinFollowBaseElementWhenFixed);
            var top_1 = baseElementOffset.top + baseElementPoints.y - pinElementParentOffset.top - pinElementPoints.y + pinElementParentScrollOffset.top;
            var left = baseElementOffset.left + baseElementPoints.x - pinElementParentOffset.left - pinElementPoints.x + pinElementParentScrollOffset.left;
            this._setPinElementPostion(pinElement, { left: left, top: top_1 }, this.offset);
            if (this._isInViewport(pinElement, align)) {
                return align;
            } else if (!firstPositionResult) {
                if (this.needAdjust && !this.autoFit) {
                    var right = this._getViewportOffset(pinElement, align).right;
                    firstPositionResult = {
                        left: right < 0 ? left + right : left,
                        top: top_1
                    };
                } else {
                    firstPositionResult = { left: left, top: top_1 };
                }
            }
        }
        // This will only execute if `pinElement` could not be placed entirely in the Viewport
        var inViewportLeft = this._makeElementInViewport(pinElement, firstPositionResult.left, 'Left', isPinFixed);
        var inViewportTop = this._makeElementInViewport(pinElement, firstPositionResult.top, 'Top', isPinFixed);
        this._setPinElementPostion(pinElement, { left: inViewportLeft, top: inViewportTop }, this._calPinOffset(expectedAlign[0]));
        return expectedAlign[0];
    };
    Position.prototype._getParentOffset = function (element) {
        var parent = element.offsetParent || document.documentElement;
        var offset;
        if (parent === document.body && util_1.dom.getStyle(parent, 'position') === 'static') {
            offset = {
                top: 0,
                left: 0
            };
        } else {
            offset = this._getElementOffset(parent);
        }
        offset.top += parseFloat(util_1.dom.getStyle(parent, 'border-top-width'), 10);
        offset.left += parseFloat(util_1.dom.getStyle(parent, 'border-left-width'), 10);
        offset.offsetParent = parent;
        return offset;
    };
    Position.prototype._makeElementInViewport = function (pinElement, number, type, isPinFixed) {
        // pinElement.offsetParent is never body because wrapper has position: absolute
        // refactored to make code clearer. Revert if wrapper style changes.
        var result = number;
        var docElement = document.documentElement;
        var offsetParent = pinElement.offsetParent || document.documentElement;
        if (result < 0) {
            if (isPinFixed) {
                result = 0;
            } else if (offsetParent === document.body && util_1.dom.getStyle(offsetParent, 'position') === 'static') {
                // Only when div's offsetParent is document.body, we set new position result.
                result = Math.max(docElement["scroll".concat(type)], document.body["scroll".concat(type)]);
            }
        }
        return result;
    };
    // 这里的第三个参数真实含义为：是否为fixed布局，并且像dialog一样，不跟随trigger元素
    Position.prototype._normalizePosition = function (element, align, ignoreElementOffset) {
        var points = this._normalizeElement(element, ignoreElementOffset);
        this._normalizeXY(points, align);
        return points;
    };
    Position.prototype._normalizeXY = function (points, align) {
        var x = align.split('')[1];
        var y = align.split('')[0];
        points.x = this._xyConverter(x, points, 'width');
        points.y = this._xyConverter(y, points, 'height');
        return points;
    };
    Position.prototype._xyConverter = function (align, points, type) {
        var res = align.replace(/t|l/gi, '0%').replace(/c/gi, '50%').replace(/b|r/gi, '100%').replace(/(\d+)%/gi, function (m, d) {
            return points.size()[type] * (d / 100);
        });
        return parseFloat(res, 10) || 0;
    };
    Position.prototype._getLeftTop = function (element) {
        return {
            left: parseFloat(util_1.dom.getStyle(element, 'left')) || 0,
            top: parseFloat(util_1.dom.getStyle(element, 'top')) || 0
        };
    };
    Position.prototype._normalizeElement = function (element, ignoreElementOffset) {
        var _this = this;
        var result = {
            element: element,
            x: 0,
            y: 0
        },
            isViewport = element === VIEWPORT,
            docElement = document.documentElement;
        result.offset = function (ignoreScroll) {
            // 这里是关键，第二个参数的含义以ing该是：是否为 fixed 布局，并且像 dialog 一样，不跟随 trigger 元素
            if (ignoreElementOffset) {
                return {
                    left: 0,
                    top: 0
                };
            } else if (isViewport) {
                return {
                    left: getPageX(),
                    top: getPageY()
                };
            } else {
                return _this._getElementOffset(element, ignoreScroll);
            }
        };
        result.size = function () {
            if (isViewport) {
                return {
                    width: docElement.clientWidth,
                    height: docElement.clientHeight
                };
            } else {
                return _getSize(element);
            }
        };
        return result;
    };
    // ignoreScroll 在 pin 元素为 fixed 的时候生效，此时需要忽略页面滚动
    // 对 fixed 模式下 subNav 弹层的计算很重要，只有在这种情况下，才同时需要元素的相对位置，又不关心页面滚动
    Position.prototype._getElementOffset = function (element, ignoreScroll) {
        var rect = element.getBoundingClientRect();
        var docElement = document.documentElement;
        var body = document.body;
        var docClientLeft = docElement.clientLeft || body.clientLeft || 0;
        var docClientTop = docElement.clientTop || body.clientTop || 0;
        return {
            left: rect.left + (ignoreScroll ? 0 : getPageX()) - docClientLeft,
            top: rect.top + (ignoreScroll ? 0 : getPageY()) - docClientTop
        };
    };
    // According to the location of the overflow to calculate the desired positioning
    Position.prototype._getExpectedAlign = function () {
        var align = this.isRtl ? this._replaceAlignDir(this.align, /l|r/g, { l: 'r', r: 'l' }) : this.align;
        var expectedAlign = [align];
        if (this.needAdjust) {
            if (/t|b/g.test(align)) {
                expectedAlign.push(this._replaceAlignDir(align, /t|b/g, { t: 'b', b: 't' }));
            }
            if (/l|r/g.test(align)) {
                expectedAlign.push(this._replaceAlignDir(align, /l|r/g, { l: 'r', r: 'l' }));
            }
            if (/c/g.test(align)) {
                expectedAlign.push(this._replaceAlignDir(align, /c(?= |$)/g, { c: 'l' }));
                expectedAlign.push(this._replaceAlignDir(align, /c(?= |$)/g, { c: 'r' }));
            }
            expectedAlign.push(this._replaceAlignDir(align, /l|r|t|b/g, {
                l: 'r',
                r: 'l',
                t: 'b',
                b: 't'
            }));
        }
        return expectedAlign;
    };
    // Transform align order.
    Position.prototype._replaceAlignDir = function (align, regExp, map) {
        return align.replace(regExp, function (res) {
            return map[res];
        });
    };
    // Are the right sides of the pin and base aligned?
    Position.prototype._isRightAligned = function (align) {
        var _a = tslib_1.__read(align.split(' '), 2),
            pinAlign = _a[0],
            baseAlign = _a[1];
        return pinAlign[1] === 'r' && pinAlign[1] === baseAlign[1];
    };
    // Are the bottoms of the pin and base aligned?
    Position.prototype._isBottomAligned = function (align) {
        var _a = tslib_1.__read(align.split(' '), 2),
            pinAlign = _a[0],
            baseAlign = _a[1];
        return pinAlign[0] === 'b' && pinAlign[0] === baseAlign[0];
    };
    // Detecting element is in the window， we want to adjust position later.
    Position.prototype._isInViewport = function (element, align) {
        var viewportSize = _getViewportSize(this.container);
        var elementRect = _getElementRect(element, this.container);
        var elementSize = _getSize(element);
        // https://github.com/alibaba-fusion/next/issues/853
        // Equality causes issues in Chrome when pin element is off screen to right or bottom.
        // If it is not supposed to align with the bottom or right, then subtract 1 to use strict less than.
        var viewportWidth = this._isRightAligned(align) ? viewportSize.width : viewportSize.width - 1;
        var viewportHeight = this._isBottomAligned(align) ? viewportSize.height : viewportSize.height - 1;
        // 临时方案，在 select + table 的场景下，不需要关注横向上是否在可视区域内
        // 在 balloon 场景下需要关注
        if (this.autoFit) {
            return elementRect.top >= 0 && elementRect.top + element.offsetHeight <= viewportHeight;
        }
        // Avoid animate problem that use offsetWidth instead of getBoundingClientRect.
        return elementRect.left >= 0 && elementRect.left + elementSize.width <= viewportWidth && elementRect.top >= 0 && elementRect.top + elementSize.height <= viewportHeight;
    };
    Position.prototype._getViewportOffset = function (element, align) {
        var viewportSize = _getViewportSize(this.container);
        var elementRect = _getElementRect(element, this.container);
        var elementSize = _getSize(element);
        var viewportWidth = this._isRightAligned(align) ? viewportSize.width : viewportSize.width - 1;
        var viewportHeight = this._isBottomAligned(align) ? viewportSize.height : viewportSize.height - 1;
        return {
            top: elementRect.top,
            right: viewportWidth - (elementRect.left + elementSize.width),
            bottom: viewportHeight - (elementRect.top + elementSize.height),
            left: elementRect.left
        };
    };
    // 在这里做RTL判断 top-left 定位转化为等效的 top-right定位
    Position.prototype._setPinElementPostion = function (pinElement, postion, offset) {
        if (offset === void 0) {
            offset = [0, 0];
        }
        var top = postion.top,
            left = postion.left;
        if (!this.isRtl) {
            util_1.dom.setStyle(pinElement, {
                left: "".concat(left + offset[0], "px"),
                top: "".concat(top + offset[1], "px")
            });
            return;
        }
        // transfer {left,top} equaly to {right,top}
        var pinElementParentOffset = this._getParentOffset(pinElement);
        var offsetParentWidth = _getElementRect(pinElementParentOffset.offsetParent).width;
        var width = _getElementRect(pinElement).width;
        var right = offsetParentWidth - (left + width);
        util_1.dom.setStyle(pinElement, {
            left: 'auto',
            right: "".concat(right + offset[0], "px"),
            top: "".concat(top + offset[1], "px")
        });
    };
    Position.VIEWPORT = VIEWPORT;
    /**
     * @public static place method
     * @param  {Object}       props
     *     @param  {DOM}      props.pinElement
     *     @param  {DOM}      props.baseElement
     *     @param  {String}   props.align
     *     @param  {Number}   props.offset
     *     @param  {Boolean}  props.needAdjust
     *     @param  {Boolean}  props.isRtl
     * @return {Position}
     */
    Position.place = function (props) {
        return new Position(props).setPosition();
    };
    return Position;
}();
exports.default = Position;

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
/* istanbul ignore file */
var react_1 = __webpack_require__(1);
var classnames_1 = __webpack_require__(3);
var overlay_1 = __webpack_require__(58);
var animate_1 = __webpack_require__(17);
var util_1 = __webpack_require__(4);
var Overlay2 = function Overlay2(props) {
    var _a;
    if (!react_1.useState || !react_1.useRef || !react_1.useEffect) {
        util_1.log.warning('need react version > 16.8.0');
        return null;
    }
    var _b = props.prefix,
        prefix = _b === void 0 ? 'next-' : _b,
        _c = props.animation,
        animation = _c === void 0 ? { in: 'expandInDown', out: 'expandOutUp' } : _c,
        visible = props.visible,
        hasMask = props.hasMask,
        // 仅兼容，Dialog/Drawer 后续会自己提供mask
    align = props.align,
        _d = props.points,
        points = _d === void 0 ? align ? align.split(' ') : undefined : _d,
        onPosition = props.onPosition,
        children = props.children,
        className = props.className,
        style = props.style,
        wrapperClassName = props.wrapperClassName,
        beforeOpen = props.beforeOpen,
        onOpen = props.onOpen,
        afterOpen = props.afterOpen,
        beforeClose = props.beforeClose,
        onClose = props.onClose,
        afterClose = props.afterClose,
        others = tslib_1.__rest(props, ["prefix", "animation", "visible", "hasMask", "align", "points", "onPosition", "children", "className", "style", "wrapperClassName", "beforeOpen", "onOpen", "afterOpen", "beforeClose", "onClose", "afterClose"]);
    var _e = tslib_1.__read((0, react_1.useState)(true), 2),
        isAnimationEnd = _e[0],
        markAnimationEnd = _e[1];
    var overlayRef = (0, react_1.useRef)(null);
    var handleEnter = function handleEnter() {
        markAnimationEnd(false);
        typeof beforeOpen === 'function' && beforeOpen(overlayRef.current);
    };
    var handleEntering = function handleEntering() {
        typeof onOpen === 'function' && onOpen(overlayRef.current);
    };
    var handleEntered = function handleEntered() {
        typeof afterOpen === 'function' && afterOpen(overlayRef.current);
    };
    var handleExit = function handleExit() {
        typeof beforeClose === 'function' && beforeClose(overlayRef.current);
    };
    var handleExiting = function handleExiting() {
        typeof onClose === 'function' && onClose(overlayRef.current);
    };
    var handleExited = function handleExited() {
        markAnimationEnd(true);
        typeof afterClose === 'function' && afterClose(overlayRef.current);
    };
    var childrenNode = react_1.default.createElement(animate_1.default.OverlayAnimate, { visible: visible, animation: animation, onEnter: handleEnter, onEntering: handleEntering, onEntered: handleEntered, onExit: handleExit, onExiting: handleExiting, onExited: handleExited, timeout: 300, style: style }, children ? (0, react_1.cloneElement)(children, {
        className: (0, classnames_1.default)(["".concat(prefix, "overlay-inner"), className, children && children.props && children.props.className])
    }) : react_1.default.createElement("span", null));
    var wraperCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "overlay-wrapper v2")] = true, _a[wrapperClassName] = wrapperClassName, _a.opened = visible, _a));
    var handlePosition = function handlePosition(result) {
        // 兼容 1.x, 2.x 可去除这段逻辑
        (0, _extends3.default)(result, { align: result.config.points });
        typeof onPosition === 'function' && onPosition(result);
    };
    var maskRender = function maskRender(node) {
        return react_1.default.createElement(animate_1.default.OverlayAnimate, { visible: visible, animation: animation ? { in: 'fadeIn', out: 'fadeOut' } : false, timeout: 300, unmountOnExit: true }, node);
    };
    return react_1.default.createElement(overlay_1.default, tslib_1.__assign({}, others, { visible: visible, isAnimationEnd: isAnimationEnd, hasMask: hasMask, wrapperClassName: wraperCls, maskClassName: "".concat(prefix, "overlay-backdrop"), maskRender: maskRender, points: points, onPosition: handlePosition, ref: overlayRef }), childrenNode);
};
exports.default = Overlay2;

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(275);
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  setPrototypeOf(subClass, superClass);
}
module.exports = _inheritsLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 275 */
/***/ (function(module, exports) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _setPrototypeOf(o, p);
}
module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var react_lifecycles_compat_1 = __webpack_require__(6);
var prop_types_1 = __webpack_require__(2);
var util_1 = __webpack_require__(4);
var overlay_1 = __webpack_require__(133);
var noop = util_1.func.noop,
    makeChain = util_1.func.makeChain,
    bindCtx = util_1.func.bindCtx;
/**
 * Overlay.Popup
 * @description 继承 Overlay 的 API，除非特别说明
 * */
var Popup = /** @class */function (_super) {
    tslib_1.__extends(Popup, _super);
    function Popup(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            visible: typeof props.visible === 'undefined' ? props.defaultVisible : props.visible
        };
        bindCtx(_this, ['handleTriggerClick', 'handleTriggerKeyDown', 'handleTriggerMouseEnter', 'handleTriggerMouseLeave', 'handleTriggerFocus', 'handleTriggerBlur', 'handleContentMouseEnter', 'handleContentMouseLeave', 'handleContentMouseDown', 'handleRequestClose', 'handleMaskMouseEnter', 'handleMaskMouseLeave']);
        return _this;
    }
    Popup.getDerivedStateFromProps = function (nextProps, prevState) {
        if ('visible' in nextProps) {
            return tslib_1.__assign(tslib_1.__assign({}, prevState), { visible: nextProps.visible });
        }
        return null;
    };
    Popup.prototype.componentWillUnmount = function () {
        var _this = this;
        ['_timer', '_hideTimer', '_showTimer'].forEach(function (time) {
            _this[time] && clearTimeout(_this[time]);
        });
    };
    Popup.prototype.handleVisibleChange = function (visible, type, e) {
        if (!('visible' in this.props)) {
            this.setState({
                visible: visible
            });
        }
        this.props.onVisibleChange(visible, type, e);
    };
    Popup.prototype.handleTriggerClick = function (e) {
        if (this.state.visible && !this.props.canCloseByTrigger) {
            return;
        }
        this.handleVisibleChange(!this.state.visible, 'fromTrigger', e);
    };
    Popup.prototype.handleTriggerKeyDown = function (e) {
        var triggerClickKeycode = this.props.triggerClickKeycode;
        var keycodes = Array.isArray(triggerClickKeycode) ? triggerClickKeycode : [triggerClickKeycode];
        if (keycodes.includes(e.keyCode)) {
            e.preventDefault();
            this.handleTriggerClick(e);
        }
    };
    Popup.prototype.handleTriggerMouseEnter = function (e) {
        var _this = this;
        this._mouseNotFirstOnMask = false;
        if (this._hideTimer) {
            clearTimeout(this._hideTimer);
            this._hideTimer = null;
        }
        if (this._showTimer) {
            clearTimeout(this._showTimer);
            this._showTimer = null;
        }
        if (!this.state.visible) {
            this._showTimer = setTimeout(function () {
                _this.handleVisibleChange(true, 'fromTrigger', e);
            }, this.props.delay);
        }
    };
    Popup.prototype.handleTriggerMouseLeave = function (e, type) {
        var _this = this;
        if (this._showTimer) {
            clearTimeout(this._showTimer);
            this._showTimer = null;
        }
        if (this.state.visible) {
            this._hideTimer = setTimeout(function () {
                _this.handleVisibleChange(false, type || 'fromTrigger', e);
            }, this.props.delay);
        }
    };
    Popup.prototype.handleTriggerFocus = function (e) {
        this.handleVisibleChange(true, 'fromTrigger', e);
    };
    Popup.prototype.handleTriggerBlur = function (e) {
        if (!this._isForwardContent) {
            this.handleVisibleChange(false, 'fromTrigger', e);
        }
        this._isForwardContent = false;
    };
    Popup.prototype.handleContentMouseDown = function () {
        this._isForwardContent = true;
    };
    Popup.prototype.handleContentMouseEnter = function () {
        clearTimeout(this._hideTimer);
    };
    Popup.prototype.handleContentMouseLeave = function (e) {
        this.handleTriggerMouseLeave(e, 'fromContent');
    };
    Popup.prototype.handleMaskMouseEnter = function () {
        if (!this._mouseNotFirstOnMask) {
            clearTimeout(this._hideTimer);
            this._hideTimer = null;
            this._mouseNotFirstOnMask = false;
        }
    };
    Popup.prototype.handleMaskMouseLeave = function () {
        this._mouseNotFirstOnMask = true;
    };
    Popup.prototype.handleRequestClose = function (type, e) {
        this.handleVisibleChange(false, type, e);
    };
    Popup.prototype.renderTrigger = function () {
        var _this = this;
        var _a = this.props,
            trigger = _a.trigger,
            disabled = _a.disabled;
        var props = {
            key: 'trigger',
            'aria-haspopup': true,
            'aria-expanded': this.state.visible
        };
        if (!this.state.visible) {
            props['aria-describedby'] = undefined;
        }
        if (!disabled) {
            var triggerType = this.props.triggerType;
            var triggerTypes = Array.isArray(triggerType) ? triggerType : [triggerType];
            var _b = trigger && trigger.props || {},
                onClick_1 = _b.onClick,
                onKeyDown_1 = _b.onKeyDown,
                onMouseEnter_1 = _b.onMouseEnter,
                onMouseLeave_1 = _b.onMouseLeave,
                onFocus_1 = _b.onFocus,
                onBlur_1 = _b.onBlur;
            triggerTypes.forEach(function (triggerType) {
                switch (triggerType) {
                    case 'click':
                        props.onClick = makeChain(_this.handleTriggerClick, onClick_1);
                        props.onKeyDown = makeChain(_this.handleTriggerKeyDown, onKeyDown_1);
                        break;
                    case 'hover':
                        props.onMouseEnter = makeChain(_this.handleTriggerMouseEnter, onMouseEnter_1);
                        props.onMouseLeave = makeChain(_this.handleTriggerMouseLeave, onMouseLeave_1);
                        break;
                    case 'focus':
                        props.onFocus = makeChain(_this.handleTriggerFocus, onFocus_1);
                        props.onBlur = makeChain(_this.handleTriggerBlur, onBlur_1);
                        break;
                    default:
                        break;
                }
            });
        }
        return trigger && react_1.default.cloneElement(trigger, props);
    };
    Popup.prototype.renderContent = function () {
        var _this = this;
        var _a = this.props,
            children = _a.children,
            triggerType = _a.triggerType;
        var triggerTypes = Array.isArray(triggerType) ? triggerType : [triggerType];
        var content = react_1.Children.only(children);
        var _b = content.props,
            onMouseDown = _b.onMouseDown,
            onMouseEnter = _b.onMouseEnter,
            onMouseLeave = _b.onMouseLeave;
        var props = {
            key: 'portal'
        };
        triggerTypes.forEach(function (triggerType) {
            switch (triggerType) {
                case 'focus':
                    props.onMouseDown = makeChain(_this.handleContentMouseDown, onMouseDown);
                    break;
                case 'hover':
                    props.onMouseEnter = makeChain(_this.handleContentMouseEnter, onMouseEnter);
                    props.onMouseLeave = makeChain(_this.handleContentMouseLeave, onMouseLeave);
                    break;
                default:
                    break;
            }
        });
        return react_1.default.cloneElement(content, props);
    };
    Popup.prototype.renderPortal = function () {
        var _this = this;
        var _a = this.props,
            target = _a.target,
            safeNode = _a.safeNode,
            followTrigger = _a.followTrigger,
            triggerType = _a.triggerType,
            hasMask = _a.hasMask,
            wrapperStyle = _a.wrapperStyle,
            others = tslib_1.__rest(_a, ["target", "safeNode", "followTrigger", "triggerType", "hasMask", "wrapperStyle"]);
        var container = this.props.container;
        var findTriggerNode = function findTriggerNode() {
            return (0, react_dom_1.findDOMNode)(_this);
        };
        var safeNodes = Array.isArray(safeNode) ? tslib_1.__spreadArray([], tslib_1.__read(safeNode), false) : [safeNode];
        safeNodes.unshift(findTriggerNode);
        var newWrapperStyle = wrapperStyle || {};
        if (followTrigger) {
            container = function container(trigger) {
                return trigger && trigger.parentNode || trigger;
            };
            newWrapperStyle.position = 'relative';
        }
        if (triggerType === 'hover' && hasMask) {
            others.onMaskMouseEnter = this.handleMaskMouseEnter;
            others.onMaskMouseLeave = this.handleMaskMouseLeave;
        }
        return react_1.default.createElement(overlay_1.default, tslib_1.__assign({}, others, { key: "overlay", ref: function ref(overlay) {
                return _this.overlay = overlay;
            }, visible: this.state.visible, target: target || findTriggerNode, container: container, safeNode: safeNodes, wrapperStyle: newWrapperStyle, triggerType: triggerType, hasMask: hasMask, onRequestClose: this.handleRequestClose }), this.props.children && this.renderContent());
    };
    Popup.prototype.render = function () {
        return [this.renderTrigger(), this.renderPortal()];
    };
    Popup.propTypes = {
        /**
         * 弹层内容
         */
        children: prop_types_1.default.node,
        /**
         * 触发弹层显示或隐藏的元素
         */
        trigger: prop_types_1.default.element,
        /**
         * 触发弹层显示或隐藏的操作类型，可以是 'click'，'hover'，'focus'，或者它们组成的数组，如 ['hover', 'focus']
         */
        triggerType: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
        /**
         * 当 triggerType 为 click 时才生效，可自定义触发弹层显示的键盘码
         */
        triggerClickKeycode: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.array]),
        /**
         * 弹层当前是否显示
         */
        visible: prop_types_1.default.bool,
        /**
         * 弹层默认是否显示
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 弹层显示或隐藏时触发的回调函数
         * @param {Boolean} visible 弹层是否显示
         * @param {String} type 触发弹层显示或隐藏的来源 fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
         * @param {Object} e DOM事件
         */
        onVisibleChange: prop_types_1.default.func,
        /**
         * 设置此属性，弹层无法显示或隐藏
         */
        disabled: prop_types_1.default.bool,
        autoFit: prop_types_1.default.bool,
        /**
         * 弹层显示或隐藏的延时时间（以毫秒为单位），在 triggerType 被设置为 hover 时生效
         */
        delay: prop_types_1.default.number,
        /**
         * trigger 是否可以关闭弹层
         */
        canCloseByTrigger: prop_types_1.default.bool,
        /**
         * 弹层定位的参照元素
         * @default target 属性，即触发元素
         */
        target: prop_types_1.default.any,
        safeNode: prop_types_1.default.any,
        /**
         * 是否跟随trigger滚动
         */
        followTrigger: prop_types_1.default.bool,
        container: prop_types_1.default.any,
        hasMask: prop_types_1.default.bool,
        wrapperStyle: prop_types_1.default.object,
        rtl: prop_types_1.default.bool,
        /**
         * 开启 v2 版本
         */
        v2: prop_types_1.default.bool,
        /**
         * [v2] 快捷位置，包含 'tl' | 't' | 'tr' | 'rt' | 'r' | 'rb' | 'bl' | 'b' | 'br' | 'lt' | 'l' | 'lb'
         */
        placement: prop_types_1.default.string,
        /**
         * [v2] 弹层偏离触发元素的像素值
         */
        placementOffset: prop_types_1.default.number,
        /**
         * [v2] 浮窗被遮挡时是否自动调整位置
         */
        autoAdjust: prop_types_1.default.bool
    };
    Popup.defaultProps = {
        triggerType: 'hover',
        triggerClickKeycode: [util_1.KEYCODE.SPACE, util_1.KEYCODE.ENTER],
        defaultVisible: false,
        onVisibleChange: noop,
        disabled: false,
        autoFit: false,
        delay: 200,
        canCloseByTrigger: true,
        followTrigger: false,
        container: function container() {
            return document.body;
        },
        rtl: false
    };
    return Popup;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Popup);

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
/* istanbul ignore file */
var react_1 = __webpack_require__(1);
var classnames_1 = __webpack_require__(3);
var overlay_1 = __webpack_require__(58);
var animate_1 = __webpack_require__(17);
var util_1 = __webpack_require__(4);
var Popup = function Popup(props) {
    var _a;
    if (!react_1.useState || !react_1.useRef || !react_1.useEffect) {
        util_1.log.warning('need react version > 16.8.0');
        return null;
    }
    var _b = props.prefix,
        prefix = _b === void 0 ? 'next-' : _b,
        _c = props.animation,
        panimation = _c === void 0 ? { in: 'expandInDown', out: 'expandOutUp' } : _c,
        defaultVisible = props.defaultVisible,
        _d = props.onVisibleChange,
        onVisibleChange = _d === void 0 ? function () {} : _d,
        trigger = props.trigger,
        _e = props.triggerType,
        triggerType = _e === void 0 ? 'hover' : _e,
        overlay = props.overlay,
        onPosition = props.onPosition,
        children = props.children,
        className = props.className,
        style = props.style,
        wrapperClassName = props.wrapperClassName,
        triggerClickKeycode = props.triggerClickKeycode,
        align = props.align,
        beforeOpen = props.beforeOpen,
        onOpen = props.onOpen,
        afterOpen = props.afterOpen,
        beforeClose = props.beforeClose,
        onClose = props.onClose,
        afterClose = props.afterClose,
        others = tslib_1.__rest(props, ["prefix", "animation", "defaultVisible", "onVisibleChange", "trigger", "triggerType", "overlay", "onPosition", "children", "className", "style", "wrapperClassName", "triggerClickKeycode", "align", "beforeOpen", "onOpen", "afterOpen", "beforeClose", "onClose", "afterClose"]);
    var _f = tslib_1.__read((0, react_1.useState)(defaultVisible), 2),
        visible = _f[0],
        setVisible = _f[1];
    var _g = tslib_1.__read((0, react_1.useState)(panimation), 2),
        animation = _g[0],
        setAnimation = _g[1];
    var _h = tslib_1.__read((0, react_1.useState)(true), 2),
        isAnimationEnd = _h[0],
        markAnimationEnd = _h[1];
    var overlayRef = (0, react_1.useRef)(null);
    (0, react_1.useEffect)(function () {
        if ('visible' in props) {
            setVisible(props.visible);
        }
    }, [props.visible]);
    (0, react_1.useEffect)(function () {
        if ('animation' in props && animation !== panimation) {
            setAnimation(panimation);
        }
    }, [panimation]);
    var handleVisibleChange = function handleVisibleChange(visible) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!('visible' in props)) {
            setVisible(visible);
        }
        onVisibleChange.apply(void 0, tslib_1.__spreadArray([visible], tslib_1.__read(args), false));
    };
    var triggerNode = overlay ? children : trigger;
    var overlayNode = overlay ? overlay : children;
    var handleEnter = function handleEnter() {
        markAnimationEnd(false);
        typeof beforeOpen === 'function' && beforeOpen(overlayRef.current);
    };
    var handleEntering = function handleEntering() {
        typeof onOpen === 'function' && onOpen(overlayRef.current);
    };
    var handleEntered = function handleEntered() {
        typeof afterOpen === 'function' && afterOpen(overlayRef.current);
    };
    var handleExit = function handleExit() {
        typeof beforeClose === 'function' && beforeClose(overlayRef.current);
    };
    var handleExiting = function handleExiting() {
        typeof onClose === 'function' && onClose(overlayRef.current);
    };
    var handleExited = function handleExited() {
        markAnimationEnd(true);
        typeof afterClose === 'function' && afterClose(overlayRef.current);
    };
    overlayNode = react_1.default.createElement(animate_1.default.OverlayAnimate, { visible: visible, animation: animation, timeout: 200, onEnter: handleEnter, onEntering: handleEntering, onEntered: handleEntered, onExit: handleExit, onExiting: handleExiting, onExited: handleExited, style: style }, overlayNode ? (0, react_1.cloneElement)(overlayNode, {
        className: (0, classnames_1.default)(["".concat(prefix, "overlay-inner"), className, overlayNode && overlayNode.props && overlayNode.props.className])
    }) : react_1.default.createElement("span", null));
    var handlePosition = function handlePosition(result) {
        // 兼容 1.x, 2.x 可去除这段逻辑
        (0, _extends3.default)(result, { align: result.config.points });
        var placement = result.config.placement;
        if (placement && typeof placement === 'string') {
            if (animation.in === 'expandInDown' && animation.out === 'expandOutUp' && placement.match(/t/)) {
                setAnimation({
                    in: 'expandInUp',
                    out: 'expandOutDown'
                });
            } else if (animation.in === 'expandInUp' && animation.out === 'expandOutDown' && placement.match(/b/)) {
                setAnimation({
                    in: 'expandInDown',
                    out: 'expandOutUp'
                });
            }
        }
        typeof onPosition === 'function' && onPosition(result);
    };
    var wraperCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "overlay-wrapper v2")] = true, _a[wrapperClassName] = wrapperClassName, _a.opened = visible, _a));
    // 兼容
    var v1Props = {};
    if (align) {
        v1Props.points = align.split(' ');
    }
    var maskRender = function maskRender(node) {
        return react_1.default.createElement(animate_1.default.OverlayAnimate, { visible: visible, animation: animation ? { in: 'fadeIn', out: 'fadeOut' } : false, timeout: 200, unmountOnExit: true }, node);
    };
    return react_1.default.createElement(overlay_1.default.Popup, tslib_1.__assign({}, others, v1Props, { wrapperClassName: wraperCls, overlay: overlayNode, visible: visible, isAnimationEnd: isAnimationEnd, triggerType: triggerType, onVisibleChange: handleVisibleChange, onPosition: handlePosition, triggerClickKeyCode: triggerClickKeycode, maskRender: maskRender, ref: overlayRef }), triggerNode);
};
exports.default = Popup;

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var icon_1 = __webpack_require__(137);
var customCache = new Set();
var ConfigIcon = config_provider_1.default.config(icon_1.default);
/** Icon.createFromIconfontCN
 *  @description 通过自定义 iconfont源来使用使用svg格式的图片
 *  @order 1
 */
function createFromIconfontCN(options) {
    if (options === void 0) {
        options = {};
    }
    var scriptUrl = options.scriptUrl,
        _a = options.extraCommonProps,
        extraCommonProps = _a === void 0 ? {} : _a;
    var hasExist = customCache.has(scriptUrl);
    if (document.querySelector("script[data-namespace=\"".concat(scriptUrl, "\"]"))) {
        hasExist = true;
    }
    /**
     * DOM API required.
     * Make sure in browser environment.
     * The Custom Icon will create a <script/>
     * that loads SVG symbols and insert the SVG Element into the document body.
     */
    if (typeof document !== 'undefined' && typeof window !== 'undefined' && typeof document.createElement === 'function' && typeof scriptUrl === 'string' && scriptUrl.length && !hasExist) {
        var script = document.createElement('script');
        script.setAttribute('src', scriptUrl);
        script.setAttribute('data-namespace', scriptUrl);
        customCache.add(scriptUrl);
        document.body.appendChild(script);
    }
    var Iconfont = function Iconfont(props) {
        var _a;
        var type = props.type,
            size = props.size,
            children = props.children,
            className = props.className,
            _b = props.prefix,
            prefix = _b === void 0 ? 'next-' : _b,
            others = tslib_1.__rest(props, ["type", "size", "children", "className", "prefix"]);
        // component > children > type
        var content = null;
        if (props.type) {
            content = react_1.default.createElement("use", { xlinkHref: "#".concat(type) });
        }
        if (children) {
            content = children;
        }
        var classes = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "icon-remote")] = true, _a), className);
        return (
            // FIXME: 这里理论上优先级是 props 中的 prefix 优先级更高，不过之前的行为一直是取上层 ConfigProvider 中的 prefix，
            // 先兼容之前的表现，will be fixed in 2.x
            // https://github.com/alibaba-fusion/next/issues/3906
            react_1.default.createElement(ConfigIcon, { size: size }, react_1.default.createElement("svg", tslib_1.__assign({ className: classes, focusable: false }, others, extraCommonProps), content))
        );
    };
    Iconfont.displayName = 'Iconfont';
    return config_provider_1.default.config(Iconfont);
}
exports.default = createFromIconfontCN;

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var overlay_1 = __webpack_require__(12);
var inner_1 = __webpack_require__(83);
var alignMap_1 = __webpack_require__(84);
var util_1 = __webpack_require__(138);
var Popup = overlay_1.default.Popup;
var alignMap = alignMap_1.normalMap;
/** Balloon.Tooltip */
var Tooltip = /** @class */function (_super) {
    tslib_1.__extends(Tooltip, _super);
    function Tooltip(props) {
        var _this = _super.call(this, props) || this;
        _this.beforePosition = function (result, obj) {
            var placement = result.config.placement;
            if (placement !== _this.state.align) {
                _this.setState({
                    align: placement,
                    innerAlign: true
                });
            }
            if (_this.props.arrowPointToCenter) {
                var _a = obj.target,
                    width = _a.width,
                    height = _a.height;
                if (placement.length === 2) {
                    var offset = alignMap_1.normalMap[placement].offset;
                    switch (placement[0]) {
                        case 'b':
                        case 't':
                            {
                                var plus = offset[0] > 0 ? 1 : -1;
                                result.style.left = result.style.left + plus * width / 2 - offset[0];
                            }
                            break;
                        case 'l':
                        case 'r':
                            {
                                var plus = offset[0] > 0 ? 1 : -1;
                                result.style.top = result.style.top + plus * height / 2 - offset[1];
                            }
                            break;
                    }
                }
            }
            return result;
        };
        _this.state = {
            align: props.placement || props.align,
            innerAlign: false
        };
        return _this;
    }
    Tooltip.getDerivedStateFromProps = function (nextProps, prevState) {
        if (nextProps.v2 && !prevState.innerAlign && 'align' in nextProps && nextProps.align !== prevState.align) {
            return {
                align: nextProps.align,
                innerAlign: false
            };
        }
        return null;
    };
    Tooltip.prototype.render = function () {
        var _a = this.props,
            id = _a.id,
            className = _a.className,
            palign = _a.align,
            style = _a.style,
            prefix = _a.prefix,
            trigger = _a.trigger,
            children = _a.children,
            popupContainer = _a.popupContainer,
            popupProps = _a.popupProps,
            popupClassName = _a.popupClassName,
            popupStyle = _a.popupStyle,
            followTrigger = _a.followTrigger,
            triggerType = _a.triggerType,
            autoFocus = _a.autoFocus,
            alignEdge = _a.alignEdge,
            autoAdjust = _a.autoAdjust,
            rtl = _a.rtl,
            delay = _a.delay,
            v2 = _a.v2,
            arrowPointToCenter = _a.arrowPointToCenter,
            others = tslib_1.__rest(_a, ["id", "className", "align", "style", "prefix", "trigger", "children", "popupContainer", "popupProps", "popupClassName", "popupStyle", "followTrigger", "triggerType", "autoFocus", "alignEdge", "autoAdjust", "rtl", "delay", "v2", "arrowPointToCenter"]);
        var trOrigin = 'trOrigin';
        if (rtl) {
            others.rtl = true;
            trOrigin = 'rtlTrOrigin';
        }
        alignMap = alignEdge || v2 ? alignMap_1.edgeMap : alignMap_1.normalMap;
        var align = v2 ? this.state.align : palign;
        var transformOrigin = alignMap[align][trOrigin];
        var _offset = alignMap[align].offset;
        var _style = tslib_1.__assign({ transformOrigin: transformOrigin }, style);
        var content = react_1.default.createElement(inner_1.default, tslib_1.__assign({}, others, { id: id, prefix: prefix, closable: false, isTooltip: true, className: className, style: _style, align: align, rtl: rtl, alignEdge: alignEdge, v2: v2 }), children);
        var triggerProps = {};
        triggerProps['aria-describedby'] = id;
        triggerProps.tabIndex = '0';
        var newTriggerType = triggerType;
        if (triggerType === 'hover' && id) {
            newTriggerType = ['focus', 'hover'];
        }
        var ariaTrigger = id ? react_1.default.cloneElement(trigger, triggerProps) : trigger;
        var newTrigger = (0, util_1.getDisabledCompatibleTrigger)(react_1.default.isValidElement(ariaTrigger) ? ariaTrigger : react_1.default.createElement("span", null, ariaTrigger));
        var otherProps = {
            delay: delay,
            shouldUpdatePosition: true,
            needAdjust: false,
            align: alignMap[align].align,
            offset: _offset
        };
        if (v2) {
            delete otherProps.align;
            delete otherProps.shouldUpdatePosition;
            delete otherProps.needAdjust;
            delete otherProps.offset;
            (0, _extends3.default)(otherProps, {
                placement: align,
                placementOffset: 12,
                v2: true,
                beforePosition: this.beforePosition,
                autoAdjust: autoAdjust
            });
        }
        return react_1.default.createElement(Popup, tslib_1.__assign({ role: "tooltip", animation: {
                in: 'zoomIn',
                out: 'zoomOut'
            }, className: popupClassName, container: popupContainer, followTrigger: followTrigger, trigger: newTrigger, triggerType: newTriggerType, style: popupStyle, rtl: rtl, autoFocus: triggerType === 'focus' ? false : autoFocus }, otherProps, popupProps), content);
    };
    Tooltip.propTypes = {
        /**
         * 样式类名的品牌前缀
         */
        prefix: prop_types_1.default.string,
        /**
         * 自定义类名
         */
        className: prop_types_1.default.string,
        /**
         * 自定义内联样式
         */
        style: prop_types_1.default.object,
        /**
         * tooltip的内容
         */
        children: prop_types_1.default.any,
        /**
         * 弹出层位置
         * @enumdesc 上, 右, 下, 左, 上左, 上右, 下左, 下右, 左上, 左下, 右上, 右下
         */
        align: prop_types_1.default.oneOf(['t', 'r', 'b', 'l', 'tl', 'tr', 'bl', 'br', 'lt', 'lb', 'rt', 'rb']),
        /**
         * 触发元素
         */
        trigger: prop_types_1.default.any,
        /**
         * 触发行为
         * 鼠标悬浮,  鼠标点击('hover', 'click')或者它们组成的数组，如 ['hover', 'click'], 强烈不建议使用'focus'，若有复杂交互，推荐使用triggerType为click的Balloon组件
         */
        triggerType: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
        /**
         * 弹层组件style，透传给Popup
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 弹层组件className，透传给Popup
         */
        popupClassName: prop_types_1.default.string,
        /**
         * 弹层组件属性，透传给Popup
         */
        popupProps: prop_types_1.default.object,
        /**
         * 是否pure render
         */
        pure: prop_types_1.default.bool,
        /**
         * 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 弹层id, 传入值才会支持无障碍
         */
        id: prop_types_1.default.string,
        /**
         * 如果需要让 Tooltip 内容可被点击，可以设置这个参数，例如 100
         */
        delay: prop_types_1.default.number,
        /**
         * 开启 v2 版本
         */
        v2: prop_types_1.default.bool,
        /**
         * [v2] 箭头是否指向目标元素的中心
         */
        arrowPointToCenter: prop_types_1.default.bool
    };
    Tooltip.defaultProps = {
        triggerType: 'hover',
        prefix: 'next-',
        align: 'b',
        delay: 50,
        trigger: react_1.default.createElement("span", null),
        arrowPointToCenter: false
    };
    return Tooltip;
}(react_1.default.Component);
exports.default = Tooltip;

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var icon_1 = __webpack_require__(7);
var config_provider_1 = __webpack_require__(5);
var dropdown_1 = __webpack_require__(43);
var menu_1 = __webpack_require__(13);
var item_1 = __webpack_require__(291);
var util_1 = __webpack_require__(4);
/**
 * Breadcrumb
 */
var Breadcrumb = /** @class */function (_super) {
    tslib_1.__extends(Breadcrumb, _super);
    function Breadcrumb(props) {
        var _this = _super.call(this, props) || this;
        _this.computeMaxNode = function () {
            // 计算最大node节点，无法获取到 ... 节点的宽度，目前会有 nodeWidth - ellipsisNodeWidth 的误差
            if (_this.props.maxNode !== 'auto' || !_this.breadcrumbEl) return;
            var scrollWidth = _this.breadcrumbEl.scrollWidth;
            var rect = _this.breadcrumbEl.getBoundingClientRect();
            if (scrollWidth <= rect.width) return;
            var maxNode = _this.breadcrumbEl.children.length;
            var index = 1;
            var fullWidth = scrollWidth;
            while (index < _this.breadcrumbEl.children.length - 1) {
                var el = _this.breadcrumbEl.children[index];
                maxNode--;
                fullWidth -= el.getBoundingClientRect().width;
                if (fullWidth <= rect.width) {
                    break;
                }
                index++;
            }
            maxNode = Math.max(3, maxNode);
            if (maxNode !== _this.state.maxNode) {
                _this.setState({
                    maxNode: maxNode
                });
            }
        };
        _this.saveBreadcrumbRef = function (ref) {
            _this.breadcrumbEl = ref;
        };
        _this.state = {
            maxNode: props.maxNode === 'auto' ? 100 : props.maxNode
        };
        return _this;
    }
    Breadcrumb.getDerivedStateFromProps = function (props, state) {
        if (state.prevMaxNode === props.maxNode) {
            return {};
        }
        return {
            prevMaxNode: props.maxNode,
            maxNode: props.maxNode === 'auto' ? 100 : props.maxNode
        };
    };
    Breadcrumb.prototype.componentDidMount = function () {
        this.computeMaxNode();
        util_1.events.on(window, 'resize', this.computeMaxNode);
    };
    Breadcrumb.prototype.componentDidUpdate = function () {
        this.computeMaxNode();
    };
    Breadcrumb.prototype.componentWillUnmount = function () {
        util_1.events.off(window, 'resize', this.computeMaxNode);
    };
    Breadcrumb.prototype.renderEllipsisNodeWithMenu = function (children, breakpointer) {
        // 拿到被隐藏的项
        var hiddenItems = [];
        react_1.Children.forEach(children, function (item, i) {
            var _a = item.props,
                link = _a.link,
                itemChildren = _a.children,
                onClick = _a.onClick;
            if (i > 0 && i <= breakpointer) {
                hiddenItems.push(react_1.default.createElement(menu_1.default.Item, { key: i, onClick: onClick }, link ? react_1.default.createElement("a", { href: link }, itemChildren) : itemChildren));
            }
        });
        var _a = this.props,
            prefix = _a.prefix,
            followTrigger = _a.followTrigger,
            popupContainer = _a.popupContainer,
            popupProps = _a.popupProps;
        return react_1.default.createElement(dropdown_1.default, tslib_1.__assign({ trigger: react_1.default.createElement("span", null, "...") }, popupProps, { container: popupContainer, followTrigger: followTrigger }), react_1.default.createElement("div", { className: "".concat(prefix, "breadcrumb-dropdown-wrapper") }, react_1.default.createElement(menu_1.default, null, hiddenItems)));
    };
    Breadcrumb.prototype.render = function () {
        var _this = this;
        var _a = this.props,
            prefix = _a.prefix,
            rtl = _a.rtl,
            className = _a.className,
            children = _a.children,
            component = _a.component,
            showHiddenItems = _a.showHiddenItems,
            maxNodeProp = _a.maxNode,
            others = tslib_1.__rest(_a, ["prefix", "rtl", "className", "children", "component", "showHiddenItems", "maxNode"]);
        var separator = this.props.separator || react_1.default.createElement(icon_1.default, { type: "arrow-right", className: "".concat(prefix, "breadcrumb-icon-sep") });
        var maxNode = this.state.maxNode;
        var items;
        var length = react_1.Children.count(children);
        if (maxNode > 1 && length > maxNode) {
            var breakpointer_1 = length - maxNode + 1;
            items = [];
            react_1.Children.forEach(children, function (item, i) {
                var ariaProps = {};
                // 增加空值判断
                if (!item) {
                    return;
                }
                if (i === length - 1) {
                    ariaProps['aria-current'] = 'page';
                }
                if (i && i === breakpointer_1) {
                    items.push(react_1.default.cloneElement(item, tslib_1.__assign(tslib_1.__assign({ separator: separator, prefix: prefix, key: i, activated: i === length - 1 }, ariaProps), { className: showHiddenItems ? "".concat(prefix, "breadcrumb-text-ellipsis-clickable") : "".concat(prefix, "breadcrumb-text-ellipsis") }), showHiddenItems ? _this.renderEllipsisNodeWithMenu(children, breakpointer_1) : '...'));
                } else if (!i || i > breakpointer_1) {
                    items.push(react_1.default.cloneElement(item, tslib_1.__assign(tslib_1.__assign({ separator: separator, prefix: prefix, key: i }, ariaProps), { activated: i === length - 1 })));
                }
            });
        } else {
            items = react_1.Children.map(children, function (item, i) {
                var ariaProps = {};
                // 增加空值判断
                if (!item) {
                    return;
                }
                if (i === length - 1) {
                    ariaProps['aria-current'] = 'page';
                }
                return react_1.default.cloneElement(item, tslib_1.__assign(tslib_1.__assign({ separator: separator, prefix: prefix, activated: i === length - 1 }, ariaProps), { key: i }));
            });
        }
        if (rtl) {
            others.dir = 'rtl';
        }
        var BreadcrumbComponent = component;
        delete others.maxNode;
        return react_1.default.createElement(BreadcrumbComponent, tslib_1.__assign({ "aria-label": "Breadcrumb", className: className }, others, { style: tslib_1.__assign({ position: 'relative' }, others.style || {}) }), react_1.default.createElement("ul", { className: "".concat(prefix, "breadcrumb") }, items), maxNodeProp === 'auto' ? react_1.default.createElement("ul", { style: {
                position: 'absolute',
                left: 0,
                right: 0,
                top: 0,
                visibility: 'hidden'
            }, ref: this.saveBreadcrumbRef, className: "".concat(prefix, "breadcrumb") }, react_1.Children.map(children, function (item, i) {
            return react_1.default.cloneElement(item, {
                separator: separator,
                prefix: prefix,
                activated: i === length - 1,
                key: i
            });
        })) : null);
    };
    Breadcrumb.Item = item_1.default;
    Breadcrumb.propTypes = {
        /**
         * 样式类名的品牌前缀
         */
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        /*eslint-disable*/
        /**
         * 面包屑子节点，需传入 Breadcrumb.Item
         */
        children: function children(props, propName) {
            react_1.Children.forEach(props[propName], function (child) {
                if (!(child && ['function', 'object'].indexOf((0, _typeof3.default)(child.type)) > -1 && child.type._typeMark === 'breadcrumb_item')) {
                    throw new Error("Breadcrumb's children must be Breadcrumb.Item!");
                }
            });
        },
        /*eslint-enable*/
        /**
         * 面包屑最多显示个数，超出部分会被隐藏, 设置为 auto 会自动根据父元素的宽度适配。
         */
        maxNode: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.oneOf(['auto'])]),
        /**
         * 当超过的项被隐藏时，是否可通过点击省略号展示菜单（包含被隐藏的项）
         * @version 1.23
         */
        showHiddenItems: prop_types_1.default.bool,
        /**
         * 弹层挂载的容器节点（在showHiddenItems为true时才有意义）
         * @version 1.23
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 是否跟随trigger滚动（在showHiddenItems为true时才有意义）
         * @version 1.23
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 添加到弹层上的属性（在showHiddenItems为true时才有意义）
         * @version 1.23
         */
        popupProps: prop_types_1.default.object,
        /**
         * 分隔符，可以是文本或 Icon
         */
        separator: prop_types_1.default.oneOfType([prop_types_1.default.node, prop_types_1.default.string]),
        /**
         * 设置标签类型
         */
        component: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.func]),
        className: prop_types_1.default.any,
        onClick: prop_types_1.default.func
    };
    Breadcrumb.defaultProps = {
        prefix: 'next-',
        maxNode: 100,
        showHiddenItems: false,
        component: 'nav'
    };
    return Breadcrumb;
}(react_1.Component);
exports.default = config_provider_1.default.config((0, react_lifecycles_compat_1.polyfill)(Breadcrumb));

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var overlay_1 = __webpack_require__(12);
var util_1 = __webpack_require__(4);
var noop = util_1.func.noop,
    makeChain = util_1.func.makeChain,
    bindCtx = util_1.func.bindCtx;
var Popup = overlay_1.default.Popup;
/**
 * Dropdown
 * @description 继承 Popup 的 API，除非特别说明
 */
var Dropdown = /** @class */function (_super) {
    tslib_1.__extends(Dropdown, _super);
    function Dropdown(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            visible: 'visible' in props ? props.visible : props.defaultVisible || false,
            autoFocus: 'autoFocus' in props ? props.autoFocus : false
        };
        bindCtx(_this, ['onTriggerKeyDown', 'onMenuClick', 'onVisibleChange']);
        return _this;
    }
    Dropdown.getDerivedStateFromProps = function (nextProps) {
        var state = {};
        if ('visible' in nextProps) {
            state.visible = nextProps.visible;
        }
        return state;
    };
    Dropdown.prototype.getVisible = function (props) {
        if (props === void 0) {
            props = this.props;
        }
        return 'visible' in props ? props.visible : this.state.visible;
    };
    Dropdown.prototype.onMenuClick = function () {
        var autoClose = this.props.autoClose;
        if (!('visible' in this.props) && autoClose) {
            this.setState({
                visible: false
            });
        }
        this.onVisibleChange(false, 'fromContent');
    };
    Dropdown.prototype.onVisibleChange = function (visible, from) {
        this.setState({ visible: visible });
        this.props.onVisibleChange(visible, from);
    };
    Dropdown.prototype.onTriggerKeyDown = function () {
        var autoFocus = true;
        if ('autoFocus' in this.props) {
            autoFocus = this.props.autoFocus;
        }
        this.setState({
            autoFocus: autoFocus
        });
    };
    Dropdown.prototype.render = function () {
        var _a = this.props,
            trigger = _a.trigger,
            rtl = _a.rtl,
            autoClose = _a.autoClose;
        var child = react_1.Children.only(this.props.children);
        var content = child;
        if (typeof child.type === 'function' && child.type.isNextMenu) {
            content = react_1.default.cloneElement(child, {
                onItemClick: makeChain(this.onMenuClick, child.props.onItemClick)
            });
        } else if (autoClose) {
            content = react_1.default.cloneElement(child, {
                onClick: makeChain(this.onMenuClick, child.props.onClick)
            });
        }
        var newTrigger = react_1.default.cloneElement(trigger, {
            onKeyDown: makeChain(this.onTriggerKeyDown, trigger.props.onKeyDown)
        });
        return react_1.default.createElement(Popup, tslib_1.__assign({}, this.props, { rtl: rtl, autoFocus: this.state.autoFocus, trigger: newTrigger, visible: this.getVisible(), onVisibleChange: this.onVisibleChange, canCloseByOutSideClick: true }), content);
    };
    Dropdown.propTypes = {
        prefix: prop_types_1.default.string,
        pure: prop_types_1.default.bool,
        rtl: prop_types_1.default.bool,
        className: prop_types_1.default.string,
        /**
         * 弹层内容
         */
        children: prop_types_1.default.node,
        /**
         * 弹层当前是否显示
         */
        visible: prop_types_1.default.bool,
        /**
         * 弹层默认是否显示
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 弹层显示或隐藏时触发的回调函数
         * @param {Boolean} visible 弹层是否显示
         * @param {String} type 触发弹层显示或隐藏的来源 fromContent 表示由Dropdown内容触发； fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
         */
        onVisibleChange: prop_types_1.default.func,
        /**
         * 触发弹层显示或者隐藏的元素
         */
        trigger: prop_types_1.default.node,
        /**
         * 触发弹层显示或隐藏的操作类型，可以是 'click'，'hover'，或者它们组成的数组，如 ['hover', 'click']
         */
        triggerType: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
        /**
         * 设置此属性，弹层无法显示或隐藏
         */
        disabled: prop_types_1.default.bool,
        /**
         * 弹层相对于触发元素的定位, 详见 Overlay 的定位部分
         */
        align: prop_types_1.default.string,
        /**
         * 弹层相对于trigger的定位的微调, 接收数组[hoz, ver], 表示弹层在 left / top 上的增量
         * e.g. [100, 100] 表示往右(RTL 模式下是往左) 、下分布偏移100px
         */
        offset: prop_types_1.default.array,
        /**
         * 弹层显示或隐藏的延时时间（以毫秒为单位），在 triggerType 被设置为 hover 时生效
         */
        delay: prop_types_1.default.number,
        /**
         * 弹层打开时是否让其中的元素自动获取焦点
         */
        autoFocus: prop_types_1.default.bool,
        /**
         * 是否显示遮罩
         */
        hasMask: prop_types_1.default.bool,
        /**
         * 开启后，children 不管是不是Menu，点击后都默认关掉弹层（2.x默认设置为true）
         * @version 1.23
         */
        autoClose: prop_types_1.default.bool,
        /**
         * 隐藏时是否保留子节点
         */
        cache: prop_types_1.default.bool,
        /**
         * 配置动画的播放方式，支持 { in: 'enter-class', out: 'leave-class' } 的对象参数，如果设置为 false，则不播放动画
         * @default { in: 'expandInDown', out: 'expandOutUp' }
         */
        animation: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.bool])
    };
    Dropdown.defaultProps = {
        prefix: 'next-',
        pure: false,
        defaultVisible: false,
        autoClose: false,
        onVisibleChange: noop,
        triggerType: 'hover',
        disabled: false,
        align: 'tl bl',
        offset: [0, 0],
        delay: 200,
        hasMask: false,
        cache: false,
        onPosition: noop
    };
    return Dropdown;
}(react_1.Component);
exports.default = Dropdown;

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var checkable_item_1 = __webpack_require__(142);
/**
 * Menu.CheckboxItem
 * @order 3
 * @description 该子组件选中情况不受 defaultSelectedKeys/selectedKeys 控制，请自行控制选中逻辑
 */
var CheckboxItem = /** @class */function (_super) {
  tslib_1.__extends(CheckboxItem, _super);
  function CheckboxItem() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  CheckboxItem.prototype.render = function () {
    var _a = this.props,
        checkboxDisabled = _a.checkboxDisabled,
        others = tslib_1.__rest(_a, ["checkboxDisabled"]);
    return react_1.default.createElement(checkable_item_1.default, tslib_1.__assign({ role: "menuitemcheckbox", checkType: "checkbox", checkDisabled: checkboxDisabled }, others));
  };
  CheckboxItem.menuChildType = 'item';
  CheckboxItem.propTypes = {
    /**
     * 是否选中
     */
    checked: prop_types_1.default.bool,
    /**
     * 是否半选中
     */
    indeterminate: prop_types_1.default.bool,
    /**
     * 是否禁用
     */
    disabled: prop_types_1.default.bool,
    /**
     * 选中或取消选中触发的回调函数
     * @param {Boolean} checked 是否选中
     * @param {Object} event 选中事件对象
     */
    onChange: prop_types_1.default.func,
    /**
     * 帮助文本
     */
    helper: prop_types_1.default.node,
    /**
     * 标签内容
     */
    children: prop_types_1.default.node,
    checkboxDisabled: prop_types_1.default.bool
  };
  CheckboxItem.defaultProps = {
    checked: false,
    indeterminate: false,
    disabled: false,
    onChange: function onChange() {},
    checkboxDisabled: false
  };
  return CheckboxItem;
}(react_1.Component);
exports.default = CheckboxItem;

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
function withContext(Checkbox) {
    var _a;
    return _a = /** @class */function (_super) {
        tslib_1.__extends(WrappedComp, _super);
        function WrappedComp() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        WrappedComp.prototype.render = function () {
            return react_1.default.createElement(Checkbox, tslib_1.__assign({}, this.props, { context: this.context }));
        };
        return WrappedComp;
    }(react_1.default.Component), _a.displayName = 'Checkbox', _a.contextTypes = {
        onChange: prop_types_1.default.func,
        __group__: prop_types_1.default.bool,
        selectedValue: prop_types_1.default.array,
        disabled: prop_types_1.default.bool,
        prefix: prop_types_1.default.string
    }, _a;
}
exports.default = withContext;

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var util_1 = __webpack_require__(4);
var checkbox_1 = __webpack_require__(143);
var pickOthers = util_1.obj.pickOthers;
/** Checkbox.Group */
var CheckboxGroup = /** @class */function (_super) {
    tslib_1.__extends(CheckboxGroup, _super);
    function CheckboxGroup(props) {
        var _this = _super.call(this, props) || this;
        var value = [];
        if ('value' in props) {
            value = props.value;
        } else if ('defaultValue' in props) {
            value = props.defaultValue;
        }
        if (!Array.isArray(value)) {
            if (value === null || value === undefined) {
                value = [];
            } else {
                value = [value];
            }
        }
        _this.state = {
            value: tslib_1.__spreadArray([], tslib_1.__read(value), false)
        };
        _this.onChange = _this.onChange.bind(_this);
        return _this;
    }
    CheckboxGroup.prototype.getChildContext = function () {
        return {
            __group__: true,
            onChange: this.onChange,
            selectedValue: this.state.value,
            disabled: this.props.disabled
        };
    };
    CheckboxGroup.getDerivedStateFromProps = function (nextProps) {
        if ('value' in nextProps) {
            var value = nextProps.value;
            if (!Array.isArray(value)) {
                if (value === null || value === undefined) {
                    value = [];
                } else {
                    value = [value];
                }
            }
            return { value: value };
        }
        return null;
    };
    CheckboxGroup.prototype.onChange = function (currentValue, e) {
        var value = this.state.value;
        var index = value.indexOf(currentValue);
        var valTemp = tslib_1.__spreadArray([], tslib_1.__read(value), false);
        if (index === -1) {
            valTemp.push(currentValue);
        } else {
            valTemp.splice(index, 1);
        }
        if (!('value' in this.props)) {
            this.setState({ value: valTemp });
        }
        this.props.onChange(valTemp, e);
    };
    CheckboxGroup.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props,
            className = _b.className,
            style = _b.style,
            prefix = _b.prefix,
            disabled = _b.disabled,
            direction = _b.direction,
            rtl = _b.rtl,
            isPreview = _b.isPreview,
            renderPreview = _b.renderPreview;
        var others = pickOthers(CheckboxGroup.propTypes, this.props);
        // 如果内嵌标签跟dataSource同时存在，以内嵌标签为主
        var children;
        var previewed = [];
        if (this.props.children) {
            children = react_1.default.Children.map(this.props.children, function (child) {
                if (!react_1.default.isValidElement(child)) {
                    return child;
                }
                var checked = _this.state.value && _this.state.value.indexOf(child.props.value) > -1;
                if (checked) {
                    previewed.push({
                        label: child.props.children,
                        value: child.props.value
                    });
                }
                return react_1.default.cloneElement(child, child.props.rtl === undefined ? { rtl: rtl } : null);
            });
        } else {
            children = this.props.dataSource.map(function (item, index) {
                var option = item;
                if ((typeof item === "undefined" ? "undefined" : (0, _typeof3.default)(item)) !== 'object') {
                    option = {
                        label: item,
                        value: item,
                        disabled: disabled
                    };
                }
                var checked = _this.state.value && _this.state.value.indexOf(option.value) > -1;
                if (checked) {
                    previewed.push({
                        label: option.label,
                        value: option.value
                    });
                }
                return react_1.default.createElement(checkbox_1.default, { key: index, value: option.value, checked: checked, rtl: rtl, disabled: disabled || option.disabled, label: option.label });
            });
        }
        if (isPreview) {
            var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
            if ('renderPreview' in this.props) {
                return react_1.default.createElement("div", tslib_1.__assign({}, others, { dir: rtl ? 'rtl' : undefined, className: previewCls }), renderPreview(previewed, this.props));
            }
            return react_1.default.createElement("p", tslib_1.__assign({}, others, { dir: rtl ? 'rtl' : undefined, className: previewCls }), previewed.map(function (item) {
                return item.label;
            }).join(', '));
        }
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "checkbox-group")] = true, _a["".concat(prefix, "checkbox-group-").concat(direction)] = true, _a[className] = !!className, _a.disabled = disabled, _a));
        return react_1.default.createElement("span", tslib_1.__assign({ dir: rtl ? 'rtl' : undefined }, others, { className: cls, style: style }), children);
    };
    CheckboxGroup.propTypes = {
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        /**
         * 自定义类名
         */
        className: prop_types_1.default.string,
        /**
         * 自定义内敛样式
         */
        style: prop_types_1.default.object,
        /**
         * 整体禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` 或者 `[{value: 'apple', label: '苹果',}, {value: 'pear', label: '梨'}, {value: 'orange', label: '橙子'}]`
         */
        dataSource: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.string), prop_types_1.default.arrayOf(prop_types_1.default.object)]),
        /**
         * 被选中的值列表
         */
        value: prop_types_1.default.oneOfType([prop_types_1.default.array, prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.bool]),
        /**
         * 默认被选中的值列表
         */
        defaultValue: prop_types_1.default.oneOfType([prop_types_1.default.array, prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.bool]),
        /**
         * 通过子元素方式设置内部 checkbox
         */
        children: prop_types_1.default.arrayOf(prop_types_1.default.element),
        /**
         * 选中值改变时的事件
         * @param {Array} value 选中项列表
         * @param {Event} e Dom 事件对象
         */
        onChange: prop_types_1.default.func,
        /**
         * 子项目的排列方式
         * - hoz: 水平排列 (default)
         * - ver: 垂直排列
         */
        direction: prop_types_1.default.oneOf(['hoz', 'ver']),
        /**
         * 是否为预览态
         * @version 1.19
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {Array} previewed 预览值 [{label: '', value:''},...]
         * @param {Object} props 所有传入的参数
         * @returns {reactNode} Element 渲染内容
         * @version 1.19
         */
        renderPreview: prop_types_1.default.func
    };
    CheckboxGroup.defaultProps = {
        dataSource: [],
        onChange: function onChange() {},
        prefix: 'next-',
        direction: 'hoz',
        isPreview: false
    };
    CheckboxGroup.childContextTypes = {
        onChange: prop_types_1.default.func,
        __group__: prop_types_1.default.bool,
        selectedValue: prop_types_1.default.array,
        disabled: prop_types_1.default.bool
    };
    return CheckboxGroup;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(CheckboxGroup);

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
function withContext(Radio) {
    var _a;
    return _a = /** @class */function (_super) {
        tslib_1.__extends(WrappedComp, _super);
        function WrappedComp(props) {
            var _this = _super.call(this, props) || this;
            _this.radioRef = null;
            return _this;
        }
        WrappedComp.prototype.focus = function () {
            if (this.radioRef) {
                this.radioRef.focus();
            }
        };
        WrappedComp.prototype.render = function () {
            var _this = this;
            return react_1.default.createElement(Radio, tslib_1.__assign({ ref: function ref(el) {
                    _this.radioRef = el;
                } }, this.props, { context: this.context }));
        };
        return WrappedComp;
    }(react_1.default.Component), _a.displayName = 'Radio', _a.contextTypes = {
        onChange: prop_types_1.default.func,
        __group__: prop_types_1.default.bool,
        isButton: prop_types_1.default.bool,
        selectedValue: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.bool]),
        disabled: prop_types_1.default.bool
    }, _a;
}
exports.default = withContext;

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var radio_1 = __webpack_require__(145);
var makeChain = util_1.func.makeChain;
var focusRef = util_1.focus.focusRef;
var pickOthers = util_1.obj.pickOthers;
/**
 * Radio.Group
 * @order 2
 */
var RadioGroup = /** @class */function (_super) {
    tslib_1.__extends(RadioGroup, _super);
    function RadioGroup(props) {
        var _this = _super.call(this, props) || this;
        _this.saveRadioRef = function (el, index) {
            if (el && typeof el.getInstance === 'function') {
                var radio = el.getInstance();
                _this.radioRefs[index] = radio;
            }
        };
        var value = '';
        if ('value' in props) {
            value = props.value;
        } else if ('defaultValue' in props) {
            value = props.defaultValue;
        }
        // The reference for the first Radio and for the selected Radio.
        _this.radioRefs = [];
        _this.hasFocus = false;
        _this.state = { value: value };
        _this.onChange = _this.onChange.bind(_this);
        return _this;
    }
    RadioGroup.getDerivedStateFromProps = function (props, state) {
        if ('value' in props && props.value !== state.value) {
            return {
                value: props.value
            };
        }
        return null;
    };
    RadioGroup.prototype.getChildContext = function () {
        var disabled = this.props.disabled;
        return {
            __group__: true,
            isButton: this.props.shape === 'button',
            onChange: this.onChange,
            selectedValue: this.state.value,
            disabled: disabled
        };
    };
    RadioGroup.prototype.onChange = function (currentValue, e) {
        if (!('value' in this.props)) {
            this.setState({ value: currentValue });
        }
        if (currentValue !== this.state.value) {
            this.props.onChange(currentValue, e);
        }
    };
    RadioGroup.prototype.focus = function () {
        if (!this.hasFocus) {
            var availableRef = this.radioRefs.filter(function (ref) {
                if (ref) {
                    return !ref.props.disabled;
                }
                return false;
            });
            var radioRef = availableRef.find(function (ref) {
                if (ref) {
                    return ref.props.checked;
                }
                return false;
            });
            if (radioRef) {
                focusRef(radioRef);
            } else if (availableRef.length > 0) {
                focusRef(availableRef[0]);
            }
        }
    };
    RadioGroup.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props,
            rtl = _b.rtl,
            className = _b.className,
            disabled = _b.disabled,
            shape = _b.shape,
            size = _b.size,
            style = _b.style,
            prefix = _b.prefix,
            direction = _b.direction,
            component = _b.component,
            isPreview = _b.isPreview,
            renderPreview = _b.renderPreview;
        var others = pickOthers(Object.keys(RadioGroup.propTypes), this.props);
        if (rtl) {
            others.dir = 'rtl';
        }
        var children;
        var previewed = {};
        this.radioRefs = [];
        if (this.props.children) {
            children = react_1.default.Children.map(this.props.children, function (child, index) {
                if (!react_1.default.isValidElement(child)) {
                    return child;
                }
                var checked = _this.state.value === child.props.value;
                if (checked) {
                    previewed.label = child.props.children;
                    previewed.value = child.props.value;
                }
                var tabIndex = index === 0 && !_this.state.value || checked ? 0 : -1;
                var childrtl = child.props.rtl === undefined ? rtl : child.props.rtl;
                if (child.type && child.type.displayName === 'Config(Radio)') {
                    return react_1.default.cloneElement(child, {
                        checked: checked,
                        tabIndex: tabIndex,
                        rtl: childrtl,
                        ref: function ref(e) {
                            _this.saveRadioRef(e, index);
                        }
                    });
                }
                return react_1.default.cloneElement(child, {
                    checked: checked,
                    rtl: childrtl,
                    ref: function ref(e) {
                        _this.saveRadioRef(e, index);
                    }
                });
            });
        } else {
            children = this.props.dataSource.map(function (item, index) {
                var option = item;
                if ((typeof item === "undefined" ? "undefined" : (0, _typeof3.default)(item)) !== 'object') {
                    option = {
                        label: item,
                        value: item,
                        disabled: disabled
                    };
                }
                var checked = _this.state.value === option.value;
                if (checked) {
                    previewed.label = option.label;
                    previewed.value = option.value;
                }
                return react_1.default.createElement(radio_1.default, { key: index, tabIndex: index === 0 && !_this.state.value || checked ? 0 : -1, value: option.value, checked: checked, label: option.label, disabled: disabled || option.disabled, ref: function ref(e) {
                        _this.saveRadioRef(e, index);
                    } });
            });
        }
        // Reset the ref if children is unavailable.
        if (children.length === 0) {
            this.firstRef = null;
        }
        if (!previewed.value) {
            this.selectedRef = null;
        }
        if (isPreview) {
            var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
            if ('renderPreview' in this.props) {
                return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: previewCls }), renderPreview(previewed, this.props));
            }
            return react_1.default.createElement("p", tslib_1.__assign({}, others, { className: previewCls }), previewed.label);
        }
        var isButtonShape = shape === 'button';
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "radio-group")] = true, _a["".concat(prefix, "radio-group-").concat(direction)] = !isButtonShape, _a["".concat(prefix, "radio-button")] = isButtonShape, _a["".concat(prefix, "radio-button-").concat(size)] = isButtonShape, _a[className] = !!className, _a.disabled = disabled, _a));
        var TagName = component;
        return react_1.default.createElement(TagName, tslib_1.__assign({}, others, { "aria-disabled": disabled, role: "radiogroup", className: cls, style: style, onFocus: makeChain(function () {
                this.hasFocus = true;
            }.bind(this), this.props.onFocus), onBlur: makeChain(function () {
                this.hasFocus = false;
            }.bind(this), this.props.onBlur) }), children);
    };
    RadioGroup.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), {
        /**
         * 样式类名的品牌前缀
         */
        prefix: prop_types_1.default.string,
        /**
         * 自定义类名
         */
        className: prop_types_1.default.string,
        /**
         * 自定义内敛样式
         */
        style: prop_types_1.default.object,
        /**
         * name
         */
        name: prop_types_1.default.string,
        /**
         * radio group的选中项的值
         */
        value: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.bool]),
        /**
         * radio group的默认值
         */
        defaultValue: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.bool]),
        /**
         * 设置标签类型
         */
        component: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.func]),
        /**
         * 选中值改变时的事件
         * @param {String/Number} value 选中项的值
         * @param {Event} e Dom 事件对象
         */
        onChange: prop_types_1.default.func,
        /**
         * 表示radio被禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 可以设置成 button 展示形状
         * @enumdesc 按钮状
         */
        shape: prop_types_1.default.oneOf(['normal', 'button']),
        /**
         * 与 `shape` 属性配套使用，shape设为button时有效
         * @enumdesc 大, 中, 小
         */
        size: prop_types_1.default.oneOf(['large', 'medium', 'small']),
        /**
         * 可选项列表, 数据项可为 String 或者 Object, 如 `['apple', 'pear', 'orange']` `[{label: 'apply', value: 'apple'}]`
         */
        dataSource: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.string), prop_types_1.default.arrayOf(prop_types_1.default.object)]),
        /**
         * 通过子元素方式设置内部radio
         */
        children: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.element), prop_types_1.default.element]),
        /**
         * 子项目的排列方式
         * - hoz: 水平排列 (default)
         * - ver: 垂直排列
         */
        direction: prop_types_1.default.oneOf(['hoz', 'ver']),
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {Object} previewed 预览值：{label: "", value: ""}
         * @param {Object} props 所有传入的参数
         * @returns {reactNode} Element 渲染内容
         */
        renderPreview: prop_types_1.default.func });
    RadioGroup.defaultProps = {
        dataSource: [],
        size: 'medium',
        onChange: function onChange() {},
        prefix: 'next-',
        component: 'div',
        direction: 'hoz',
        isPreview: false
    };
    RadioGroup.childContextTypes = {
        onChange: prop_types_1.default.func,
        __group__: prop_types_1.default.bool,
        isButton: prop_types_1.default.bool,
        selectedValue: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.bool]),
        disabled: prop_types_1.default.bool
    };
    return RadioGroup;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(RadioGroup);

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var checkable_item_1 = __webpack_require__(142);
/**
 * Menu.RadioItem
 * @order 4
 * @description 该子组件选中情况不受 defaultSelectedKeys/selectedKeys 控制，请自行控制选中逻辑
 */
var RadioItem = /** @class */function (_super) {
  tslib_1.__extends(RadioItem, _super);
  function RadioItem() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  RadioItem.prototype.render = function () {
    return react_1.default.createElement(checkable_item_1.default, tslib_1.__assign({ role: "menuitemradio", checkType: "radio" }, this.props));
  };
  RadioItem.menuChildType = 'item';
  RadioItem.propTypes = {
    /**
     * 是否选中
     */
    checked: prop_types_1.default.bool,
    /**
     * 是否禁用
     */
    disabled: prop_types_1.default.bool,
    /**
     * 选中或取消选中触发的回调函数
     * @param {Boolean} checked 是否选中
     * @param {Object} event 选中事件对象
     */
    onChange: prop_types_1.default.func,
    /**
     * 帮助文本
     */
    helper: prop_types_1.default.node,
    /**
     * 标签内容
     */
    children: prop_types_1.default.node
  };
  RadioItem.defaultProps = {
    checked: false,
    disabled: false,
    onChange: function onChange() {}
  };
  return RadioItem;
}(react_1.Component);
exports.default = RadioItem;

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var item_1 = __webpack_require__(31);
/**
 * Menu.Group
 * @order 5
 */
var Group = /** @class */function (_super) {
    tslib_1.__extends(Group, _super);
    function Group() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Group.prototype.render = function () {
        var _a;
        var _b = this.props,
            root = _b.root,
            className = _b.className,
            label = _b.label,
            children = _b.children,
            parentMode = _b.parentMode,
            others = tslib_1.__rest(_b, ["root", "className", "label", "children", "parentMode"]);
        var prefix = root.props.prefix;
        var newClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "menu-group-label")] = true, _a[className] = !!className, _a));
        var newChildren = children.map(function (child) {
            var _a;
            // to fix https://github.com/alibaba-fusion/next/issues/952
            if (typeof child !== 'function' && (typeof child === "undefined" ? "undefined" : (0, _typeof3.default)(child)) !== 'object') {
                return child;
            }
            var className = child.props.className;
            var newChildClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "menu-group-item")] = true, _a[className] = !!className, _a));
            return (0, react_1.cloneElement)(child, {
                parentMode: parentMode,
                className: newChildClassName
            });
        });
        return tslib_1.__spreadArray([react_1.default.createElement(item_1.default, tslib_1.__assign({ key: "menu-group-label", className: newClassName, replaceClassName: true, root: root, parentMode: parentMode }, others), label)], tslib_1.__read(newChildren), false);
    };
    Group.menuChildType = 'group';
    Group.propTypes = {
        root: prop_types_1.default.object,
        className: prop_types_1.default.string,
        /**
         * 标签内容
         */
        label: prop_types_1.default.node,
        /**
         * 菜单项
         */
        children: prop_types_1.default.node,
        parentMode: prop_types_1.default.oneOf(['inline', 'popup'])
    };
    return Group;
}(react_1.Component);
exports.default = Group;

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
/**
 * Menu.Divider
 * @order 6
 */
var Divider = /** @class */function (_super) {
    tslib_1.__extends(Divider, _super);
    function Divider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Divider.prototype.render = function () {
        var _a;
        var _b = this.props,
            root = _b.root,
            className = _b.className,
            parentMode = _b.parentMode,
            parent = _b.parent,
            others = tslib_1.__rest(_b, ["root", "className", "parentMode", "parent"]);
        var prefix = root.props.prefix;
        var newClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "menu-divider")] = true, _a[className] = !!className, _a));
        return react_1.default.createElement("li", tslib_1.__assign({ role: "separator", className: newClassName }, others));
    };
    Divider.menuChildType = 'divider';
    Divider.propTypes = {
        root: prop_types_1.default.object,
        className: prop_types_1.default.string
    };
    return Divider;
}(react_1.Component);
exports.default = Divider;

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var overlay_1 = __webpack_require__(12);
var util_1 = __webpack_require__(4);
var config_provider_1 = __webpack_require__(5);
var menu_1 = __webpack_require__(139);
var bindCtx = util_1.func.bindCtx;
var getContextProps = config_provider_1.default.getContextProps;
var Menu = config_provider_1.default.config(menu_1.default);
var menuInstance;
var ContextMenu = /** @class */function (_super) {
    tslib_1.__extends(ContextMenu, _super);
    function ContextMenu(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            visible: true
        };
        bindCtx(_this, ['handleOverlayClose', 'handleOverlayOpen', 'handleItemClick', 'getOverlay']);
        return _this;
    }
    ContextMenu.prototype.getOverlay = function (ref) {
        this.overlay = ref;
    };
    ContextMenu.prototype.close = function () {
        this.setState({
            visible: false
        });
        menuInstance = null;
    };
    ContextMenu.prototype.handleOverlayClose = function (triggerType, e) {
        var others = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            others[_i - 2] = arguments[_i];
        }
        var clickedPopupMenu = triggerType === 'docClick' && this.popupNodes.some(function (node) {
            return node.contains(e.target);
        });
        if (!clickedPopupMenu) {
            this.close();
            var overlayProps = this.props.overlayProps;
            if (overlayProps && overlayProps.onRequestClose) {
                overlayProps.onRequestClose.apply(overlayProps, tslib_1.__spreadArray([triggerType, e], tslib_1.__read(others), false));
            }
        }
    };
    ContextMenu.prototype.handleOverlayOpen = function () {
        this.popupNodes = this.overlay.getInstance().getContent().getInstance().popupNodes;
        var overlayProps = this.props.overlayProps;
        if (overlayProps && overlayProps.onOpen) {
            overlayProps.onOpen();
        }
    };
    ContextMenu.prototype.handleItemClick = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.close();
        this.props.onItemClick && (_a = this.props).onItemClick.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(args), false));
    };
    ContextMenu.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            className = _c.className,
            popupClassName = _c.popupClassName,
            target = _c.target,
            align = _c.align,
            offset = _c.offset,
            afterClose = _c.afterClose,
            _d = _c.overlayProps,
            overlayProps = _d === void 0 ? {} : _d,
            others = tslib_1.__rest(_c, ["className", "popupClassName", "target", "align", "offset", "afterClose", "overlayProps"]);
        var contextProps = getContextProps(this.props);
        var prefix = contextProps.prefix;
        var visible = this.state.visible;
        var newOverlayProps = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, contextProps), overlayProps), { target: target, align: align, offset: offset, afterClose: afterClose, visible: visible, onRequestClose: this.handleOverlayClose, onOpen: this.handleOverlayOpen, ref: this.getOverlay });
        var menuProps = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, contextProps), { triggerType: 'hover' }), others), { className: (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "context")] = true, _a[className] = !!className, _a)), popupClassName: (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "context")] = true, _b[popupClassName] = !!popupClassName, _b)), onItemClick: this.handleItemClick });
        newOverlayProps.rtl = false;
        return react_1.default.createElement(overlay_1.default, tslib_1.__assign({}, newOverlayProps), react_1.default.createElement(Menu, tslib_1.__assign({}, menuProps)));
    };
    ContextMenu.propTypes = {
        className: prop_types_1.default.string,
        popupClassName: prop_types_1.default.string,
        target: prop_types_1.default.any,
        align: prop_types_1.default.string,
        offset: prop_types_1.default.array,
        overlayProps: prop_types_1.default.object,
        afterClose: prop_types_1.default.func,
        mode: prop_types_1.default.oneOf(['inline', 'popup']),
        onOpen: prop_types_1.default.func,
        onItemClick: prop_types_1.default.func
    };
    ContextMenu.defaultProps = {
        prefix: 'next-',
        align: 'tl tl',
        mode: 'popup'
    };
    return ContextMenu;
}(react_1.Component);
/**
 * 创建上下文菜单
 * @exportName create
 * @param {Object} props 属性对象
 */
function create(props) {
    if (menuInstance) {
        menuInstance.destroy();
    }
    /* eslint-disable no-unused-vars */
    var afterClose = props.afterClose,
        others = tslib_1.__rest(props, ["afterClose"]);
    /* eslint-enable no-unused-vars */
    var div = document.createElement('div');
    document.body.appendChild(div);
    var closeChain = function closeChain() {
        (0, react_dom_1.unmountComponentAtNode)(div);
        document.body.removeChild(div);
        afterClose && afterClose();
    };
    var newContext = config_provider_1.default.getContext();
    var menu;
    (0, react_dom_1.render)(react_1.default.createElement(config_provider_1.default, tslib_1.__assign({}, newContext), react_1.default.createElement(ContextMenu, tslib_1.__assign({ ref: function ref(_ref) {
            menu = _ref;
        }, afterClose: closeChain }, others))), div);
    menuInstance = {
        destroy: function destroy() {
            if (menu) {
                menu.close();
            }
        }
    };
    return menuInstance;
}
exports.default = create;

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
/**
 * Breadcrumb.Item
 */
var Item = /** @class */function (_super) {
    tslib_1.__extends(Item, _super);
    function Item() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // stateless separator component
    Item.Separator = function (_a) {
        var prefix = _a.prefix,
            children = _a.children;
        return react_1.default.createElement("span", { className: "".concat(prefix, "breadcrumb-separator") }, children);
    };
    Item.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            rtl = _a.rtl,
            className = _a.className,
            children = _a.children,
            link = _a.link,
            activated = _a.activated,
            separator = _a.separator,
            onClick = _a.onClick,
            others = tslib_1.__rest(_a, ["prefix", "rtl", "className", "children", "link", "activated", "separator", "onClick"]);
        var clazz = (0, classnames_1.default)("".concat(prefix, "breadcrumb-text"), className, {
            activated: activated
        });
        return react_1.default.createElement("li", { dir: rtl ? 'rtl' : null, className: "".concat(prefix, "breadcrumb-item"), onClick: onClick }, link ? react_1.default.createElement("a", tslib_1.__assign({ href: link, className: clazz }, others), children) : react_1.default.createElement("span", tslib_1.__assign({ className: clazz }, others), children), activated ? null : Item.Separator({ prefix: prefix, children: separator }));
    };
    Item.propTypes = {
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        /**
         * 面包屑节点链接，如果设置这个属性，则该节点为`<a />` ，否则是`<span />`
         */
        link: prop_types_1.default.string,
        activated: prop_types_1.default.bool,
        separator: prop_types_1.default.node,
        className: prop_types_1.default.any,
        children: prop_types_1.default.node,
        /**
         * 元素点击事件
         * @param {MouseEvent} e Click Mouse Event
         */
        onClick: prop_types_1.default.func
    };
    Item.defaultProps = {
        prefix: 'next-'
    };
    Item._typeMark = 'breadcrumb_item';
    return Item;
}(react_1.Component);
exports.default = config_provider_1.default.config(Item);

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var React = __webpack_require__(1);
var react_1 = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
var classNames = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
function mapIconSize(size) {
    return {
        large: 'small',
        medium: 'xs',
        small: 'xs'
    }[size];
}
var Button = /** @class */function (_super) {
    tslib_1.__extends(Button, _super);
    function Button() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.onMouseUp = function (e) {
            // @ts-expect-error fixme: may have no blur
            _this.button.blur();
            if (_this.props.onMouseUp) {
                _this.props.onMouseUp(e);
            }
        };
        _this.buttonRefHandler = function (button) {
            _this.button = button;
        };
        return _this;
    }
    Button.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            prefix = _c.prefix,
            className = _c.className,
            type = _c.type,
            size = _c.size,
            htmlType = _c.htmlType,
            loading = _c.loading,
            text = _c.text,
            warning = _c.warning,
            ghost = _c.ghost,
            component = _c.component,
            iconSize = _c.iconSize,
            icons = _c.icons,
            disabled = _c.disabled,
            onClick = _c.onClick,
            children = _c.children,
            rtl = _c.rtl,
            others = tslib_1.__rest(_c, ["prefix", "className", "type", "size", "htmlType", "loading", "text", "warning", "ghost", "component", "iconSize", "icons", "disabled", "onClick", "children", "rtl"]);
        var ghostType = ['light', 'dark'].indexOf(ghost) >= 0 ? ghost : 'dark';
        var btnClsObj = (_a = {}, _a["".concat(prefix, "btn")] = true, _a["".concat(prefix).concat(size)] = size, _a["".concat(prefix, "btn-").concat(type)] = type && !ghost, _a["".concat(prefix, "btn-text")] = text, _a["".concat(prefix, "btn-warning")] = warning, _a["".concat(prefix, "btn-loading")] = loading, _a["".concat(prefix, "btn-ghost")] = ghost, _a["".concat(prefix, "btn-").concat(ghostType)] = ghost, _a[className] = className, _a);
        var loadingIcon = null;
        // 如果传入了 loading 的 icons，使用该节点来渲染
        if (icons && icons.loading && (0, react_1.isValidElement)(icons.loading)) {
            if (loading) {
                delete btnClsObj["".concat(prefix, "btn-loading")];
                btnClsObj["".concat(prefix, "btn-custom-loading")] = true;
            }
            var loadingSize = iconSize || mapIconSize(size);
            loadingIcon = React.cloneElement(icons.loading, {
                className: classNames((_b = {}, _b["".concat(prefix, "btn-custom-loading-icon")] = true, _b.show = loading, _b)),
                size: loadingSize
            });
        }
        var count = react_1.Children.count(children);
        // fixme: react children is a complex types, map children to modify is unrecommended
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var clonedChildren = react_1.Children.map(children, function (child, index) {
            var _a;
            if (child && ['function', 'object'].indexOf((0, _typeof3.default)(child.type)) > -1 && child.type._typeMark === 'icon') {
                var iconCls = classNames((_a = {}, _a["".concat(prefix, "btn-icon")] = !iconSize, _a["".concat(prefix, "btn-icon-size")] = iconSize, _a["".concat(prefix, "icon-first")] = count > 1 && index === 0, _a["".concat(prefix, "icon-last")] = count > 1 && index === count - 1, _a["".concat(prefix, "icon-alone")] = count === 1, _a[child.props.className] = !!child.props.className, _a));
                if ('size' in child.props) {
                    util_1.log.warning("The size of Icon will not take effect, when Icon is the [direct child element] of Button(<Button><Icon size=\"".concat(child.props.size, "\" /></Button>), use <Button iconSize=\"").concat(child.props.size, "\"> or <Button><div><Icon size=\"").concat(child.props.size, "\" /></div></Button> instead of."));
                }
                return React.cloneElement(child, {
                    className: iconCls,
                    size: iconSize || mapIconSize(size)
                });
            }
            if (!(0, react_1.isValidElement)(child)) {
                return React.createElement("span", { className: "".concat(prefix, "btn-helper") }, child);
            }
            return child;
        });
        var TagName = component;
        var tagAttrs = tslib_1.__assign(tslib_1.__assign({}, util_1.obj.pickOthers(Object.keys(Button.propTypes), others)), { type: htmlType, disabled: disabled, onClick: onClick, className: classNames(btnClsObj) });
        if (TagName !== 'button') {
            delete tagAttrs.type;
            if (tagAttrs.disabled) {
                delete tagAttrs.onClick; // a 标签的 onClick 浏览器默认不会禁用
                if ('href' in tagAttrs && tagAttrs.href) {
                    delete tagAttrs.href; // a 标签在禁用状态下无跳转
                }
            }
        }
        return React.createElement(TagName, tslib_1.__assign({}, tagAttrs, { dir: rtl ? 'rtl' : undefined, onMouseUp: this.onMouseUp, ref: this.buttonRefHandler }), loadingIcon, clonedChildren);
    };
    Button.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: PropTypes.string, rtl: PropTypes.bool, type: PropTypes.oneOf(['primary', 'secondary', 'normal']), size: PropTypes.oneOf(['small', 'medium', 'large']), icons: PropTypes.shape({ loading: PropTypes.node }), iconSize: PropTypes.oneOfType([PropTypes.oneOf(['xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl', 'inherit']), PropTypes.number]), htmlType: PropTypes.oneOf(['submit', 'reset', 'button']), component: PropTypes.oneOf(['button', 'a', 'div', 'span']), loading: PropTypes.bool, ghost: PropTypes.oneOf([true, false, 'light', 'dark']), text: PropTypes.bool, warning: PropTypes.bool, disabled: PropTypes.bool, onClick: PropTypes.func, className: PropTypes.string, onMouseUp: PropTypes.func, children: PropTypes.node });
    Button.defaultProps = {
        prefix: 'next-',
        type: 'normal',
        size: 'medium',
        icons: {},
        htmlType: 'button',
        component: 'button',
        loading: false,
        ghost: false,
        text: false,
        warning: false,
        disabled: false,
        onClick: function onClick() {}
    };
    return Button;
}(react_1.Component);
exports.default = Button;

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var React = __webpack_require__(1);
var react_1 = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
var classNames = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
/**
 * Button.Group
 */
var ButtonGroup = /** @class */function (_super) {
    tslib_1.__extends(ButtonGroup, _super);
    function ButtonGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ButtonGroup.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            className = _b.className,
            size = _b.size,
            children = _b.children,
            rtl = _b.rtl,
            others = tslib_1.__rest(_b, ["prefix", "className", "size", "children", "rtl"]);
        var groupCls = classNames((_a = {}, _a["".concat(prefix, "btn-group")] = true, _a[className] = className, _a));
        var cloneChildren = react_1.Children.map(children, function (child) {
            if (child) {
                // fixme: child may not be cloned
                return React.cloneElement(child, {
                    size: size
                });
            }
        });
        if (rtl) {
            others.dir = 'rtl';
        }
        return React.createElement("div", tslib_1.__assign({}, others, { className: groupCls }), cloneChildren);
    };
    ButtonGroup.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { rtl: PropTypes.bool, prefix: PropTypes.string, size: PropTypes.string, className: PropTypes.string, children: PropTypes.node });
    ButtonGroup.defaultProps = {
        prefix: 'next-',
        size: 'medium'
    };
    return ButtonGroup;
}(react_1.Component);
exports.default = config_provider_1.default.config(ButtonGroup);

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var moment_1 = __webpack_require__(16);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var card_header_1 = __webpack_require__(295);
var date_panel_header_1 = __webpack_require__(307);
var month_panel_header_1 = __webpack_require__(152);
var year_panel_header_1 = __webpack_require__(153);
var date_table_1 = __webpack_require__(154);
var month_table_1 = __webpack_require__(155);
var year_table_1 = __webpack_require__(156);
var utils_1 = __webpack_require__(19);
var isValueChanged = function isValueChanged(value, oldVlaue) {
    if (value && oldVlaue) {
        if (!moment_1.default.isMoment(value)) {
            value = (0, moment_1.default)(value);
        }
        if (!moment_1.default.isMoment(oldVlaue)) {
            oldVlaue = (0, moment_1.default)(oldVlaue);
        }
        return value.valueOf() !== oldVlaue.valueOf();
    } else {
        return value !== oldVlaue;
    }
};
/** Calendar */
var Calendar = /** @class */function (_super) {
    tslib_1.__extends(Calendar, _super);
    function Calendar(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.onSelectCell = function (date, nextMode) {
            var visibleMonth = _this.state.visibleMonth;
            var _a = _this.props,
                shape = _a.shape,
                showOtherMonth = _a.showOtherMonth;
            // 点击其他月份日期不生效
            if (!showOtherMonth && !(0, utils_1.isSameYearMonth)(visibleMonth, date)) {
                return;
            }
            _this.changeVisibleMonth(date, 'cellClick');
            if (!('value' in _this.props)) {
                // 非受控模式，直接修改当前state
                _this.setState({
                    value: date
                });
            }
            // 当用户所在的面板为初始化面板时，则选择动作为触发 onSelect 回调
            if (_this.state.mode === _this.MODES[0]) {
                _this.props.onSelect(date);
            }
            if (shape === 'panel') {
                _this.changeMode(nextMode);
            }
        };
        _this.changeMode = function (nextMode) {
            if (nextMode && _this.MODES.indexOf(nextMode) > -1 && nextMode !== _this.state.mode) {
                _this.setState({ mode: nextMode });
                _this.props.onModeChange(nextMode);
            }
        };
        _this.changeVisibleMonth = function (date, reason) {
            if (!(0, utils_1.isSameYearMonth)(date, _this.state.visibleMonth)) {
                _this.setState({ visibleMonth: date });
                _this.props.onVisibleMonthChange(date, reason);
            }
        };
        _this.goPrevDecade = function () {
            _this.changeVisibleMonthByOffset(-10, 'years');
        };
        _this.goNextDecade = function () {
            _this.changeVisibleMonthByOffset(10, 'years');
        };
        _this.goPrevYear = function () {
            _this.changeVisibleMonthByOffset(-1, 'years');
        };
        _this.goNextYear = function () {
            _this.changeVisibleMonthByOffset(1, 'years');
        };
        _this.goPrevMonth = function () {
            _this.changeVisibleMonthByOffset(-1, 'months');
        };
        _this.goNextMonth = function () {
            _this.changeVisibleMonthByOffset(1, 'months');
        };
        var value = (0, utils_1.formatDateValue)(props.value || props.defaultValue);
        var visibleMonth = (0, utils_1.getVisibleMonth)(props.defaultVisibleMonth, value);
        _this.MODES = props.modes;
        _this.today = (0, moment_1.default)();
        _this.state = {
            value: value,
            mode: props.mode || _this.MODES[0],
            MODES: _this.MODES,
            visibleMonth: visibleMonth
        };
        return _this;
    }
    Calendar.getDerivedStateFromProps = function (props, state) {
        var st = {};
        if ('value' in props) {
            var value = (0, utils_1.formatDateValue)(props.value);
            if (value && isValueChanged(props.value, state.value)) {
                st.visibleMonth = value;
            }
            st.value = value;
        }
        if (props.mode && state.MODES.indexOf(props.mode) > -1) {
            st.mode = props.mode;
        }
        return st;
    };
    /**
     * 根据日期偏移量设置当前展示的月份
     * @param {Number} offset 日期偏移的数量
     * @param {String} type 日期偏移的类型 days, months, years
     */
    Calendar.prototype.changeVisibleMonthByOffset = function (offset, type) {
        var cloneValue = this.state.visibleMonth.clone();
        cloneValue.add(offset, type);
        this.changeVisibleMonth(cloneValue, 'buttonClick');
    };
    Calendar.prototype.render = function () {
        var _a, _b, _c;
        var _d = this.props,
            prefix = _d.prefix,
            rtl = _d.rtl,
            className = _d.className,
            shape = _d.shape,
            showOtherMonth = _d.showOtherMonth,
            format = _d.format,
            locale = _d.locale,
            dateCellRender = _d.dateCellRender,
            monthCellRender = _d.monthCellRender,
            yearCellRender = _d.yearCellRender,
            disabledDate = _d.disabledDate,
            yearRange = _d.yearRange,
            disableChangeMode = _d.disableChangeMode,
            others = tslib_1.__rest(_d, ["prefix", "rtl", "className", "shape", "showOtherMonth", "format", "locale", "dateCellRender", "monthCellRender", "yearCellRender", "disabledDate", "yearRange", "disableChangeMode"]);
        var state = this.state;
        var classNames = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "calendar")] = true, _a["".concat(prefix, "calendar-").concat(shape)] = shape, _a), className);
        if (rtl) {
            others.dir = 'rtl';
        }
        var visibleMonth = state.visibleMonth;
        // reset moment locale
        if (locale.momentLocale) {
            state.value && state.value.locale(locale.momentLocale);
            visibleMonth.locale(locale.momentLocale);
        }
        var localeData = (0, utils_1.getLocaleData)(locale.format || {}, visibleMonth.localeData());
        var headerProps = {
            prefix: prefix,
            value: state.value,
            mode: state.mode,
            disableChangeMode: disableChangeMode,
            yearRange: yearRange,
            locale: locale,
            rtl: rtl,
            visibleMonth: visibleMonth,
            momentLocale: localeData,
            changeMode: this.changeMode,
            changeVisibleMonth: this.changeVisibleMonth,
            goNextDecade: this.goNextDecade,
            goNextYear: this.goNextYear,
            goNextMonth: this.goNextMonth,
            goPrevDecade: this.goPrevDecade,
            goPrevYear: this.goPrevYear,
            goPrevMonth: this.goPrevMonth
        };
        var tableProps = {
            prefix: prefix,
            visibleMonth: visibleMonth,
            showOtherMonth: showOtherMonth,
            value: state.value,
            mode: state.mode,
            locale: locale,
            dateCellRender: dateCellRender,
            monthCellRender: monthCellRender,
            yearCellRender: yearCellRender,
            disabledDate: disabledDate,
            momentLocale: localeData,
            today: this.today,
            goPrevDecade: this.goPrevDecade,
            goNextDecade: this.goNextDecade
        };
        var tables = (_b = {}, _b[utils_1.CALENDAR_MODE_DATE] = react_1.default.createElement(date_table_1.default, tslib_1.__assign({ format: format }, tableProps, { onSelectDate: this.onSelectCell })), _b[utils_1.CALENDAR_MODE_MONTH] = react_1.default.createElement(month_table_1.default, tslib_1.__assign({}, tableProps, { onSelectMonth: this.onSelectCell })), _b[utils_1.CALENDAR_MODE_YEAR] = react_1.default.createElement(year_table_1.default, tslib_1.__assign({}, tableProps, { rtl: rtl, onSelectYear: this.onSelectCell })), _b);
        var panelHeaders = (_c = {}, _c[utils_1.CALENDAR_MODE_DATE] = react_1.default.createElement(date_panel_header_1.default, tslib_1.__assign({}, headerProps)), _c[utils_1.CALENDAR_MODE_MONTH] = react_1.default.createElement(month_panel_header_1.default, tslib_1.__assign({}, headerProps)), _c[utils_1.CALENDAR_MODE_YEAR] = react_1.default.createElement(year_panel_header_1.default, tslib_1.__assign({}, headerProps)), _c);
        return react_1.default.createElement("div", tslib_1.__assign({}, util_1.obj.pickOthers(Calendar.propTypes, others), { className: classNames }), shape === 'panel' ? panelHeaders[state.mode] : react_1.default.createElement(card_header_1.default, tslib_1.__assign({}, headerProps)), tables[state.mode]);
    };
    Calendar.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, rtl: prop_types_1.default.bool,
        /**
         * 默认选中的日期（moment 对象）
         */
        defaultValue: utils_1.checkMomentObj,
        /**
         * 选中的日期值 (moment 对象)
         */
        value: utils_1.checkMomentObj,
        /**
         * 面板模式
         */
        mode: prop_types_1.default.oneOf(utils_1.CALENDAR_MODES),
        // 面板可变化的模式列表，仅初始化时接收一次
        modes: prop_types_1.default.array,
        // 禁用更改面板模式，采用 dropdown 的方式切换显示日期 (暂不正式对外透出)
        disableChangeMode: prop_types_1.default.bool,
        // 日期值的格式（用于日期title显示的格式）
        format: prop_types_1.default.string,
        /**
         * 是否展示非本月的日期
         */
        showOtherMonth: prop_types_1.default.bool,
        /**
         * 默认展示的月份
         */
        defaultVisibleMonth: prop_types_1.default.func,
        /**
         * 展现形态
         */
        shape: prop_types_1.default.oneOf(['card', 'fullscreen', 'panel']),
        /**
         * 选择日期单元格时的回调
         * @param {Object} value 对应的日期值 (moment 对象)
         */
        onSelect: prop_types_1.default.func,
        /**
         * 面板模式变化时的回调
         * @param {String} mode 对应面板模式 date month year
         */
        onModeChange: prop_types_1.default.func,
        /**
         * 展现的月份变化时的回调
         * @param {Object} value 显示的月份 (moment 对象)
         * @param {String} reason 触发月份改变原因
         */
        onVisibleMonthChange: prop_types_1.default.func,
        /**
         * 自定义样式类
         */
        className: prop_types_1.default.string,
        /**
         * 自定义日期渲染函数
         * @param {Object} value 日期值（moment对象）
         * @returns {ReactNode}
         */
        dateCellRender: prop_types_1.default.func,
        /**
         * 自定义月份渲染函数
         * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象
         * @returns {ReactNode}
         */
        monthCellRender: prop_types_1.default.func, yearCellRender: prop_types_1.default.func,
        /**
         * 年份范围，[START_YEAR, END_YEAR] (只在shape 为 ‘card’, 'fullscreen' 下生效)
         */
        yearRange: prop_types_1.default.arrayOf(prop_types_1.default.number),
        /**
         * 不可选择的日期
         * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象
         * @param {String} view 当前视图类型，year: 年， month: 月, date: 日
         * @returns {Boolean}
         */
        disabledDate: prop_types_1.default.func,
        /**
         * 国际化配置
         */
        locale: prop_types_1.default.object });
    Calendar.defaultProps = {
        prefix: 'next-',
        rtl: false,
        shape: 'fullscreen',
        modes: utils_1.CALENDAR_MODES,
        disableChangeMode: false,
        format: 'YYYY-MM-DD',
        onSelect: util_1.func.noop,
        onVisibleMonthChange: util_1.func.noop,
        onModeChange: util_1.func.noop,
        dateCellRender: function dateCellRender(value) {
            return value.date();
        },
        locale: zh_cn_1.default.Calendar,
        showOtherMonth: true
    };
    return Calendar;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Calendar);

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var select_1 = __webpack_require__(24);
var radio_1 = __webpack_require__(45);
var config_provider_1 = __webpack_require__(5);
var CardHeader = /** @class */function (_super) {
    tslib_1.__extends(CardHeader, _super);
    function CardHeader() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.selectContainerHandler = function (target) {
            var device = _this.props.device;
            if (device === 'phone') {
                return document.body;
            }
            return target.parentNode;
        };
        _this.onYearChange = function (year) {
            var _a = _this.props,
                visibleMonth = _a.visibleMonth,
                changeVisibleMonth = _a.changeVisibleMonth;
            changeVisibleMonth(visibleMonth.clone().year(year), 'yearSelect');
        };
        _this.changeVisibleMonth = function (month) {
            var _a = _this.props,
                visibleMonth = _a.visibleMonth,
                changeVisibleMonth = _a.changeVisibleMonth;
            changeVisibleMonth(visibleMonth.clone().month(month), 'monthSelect');
        };
        _this.onModePanelChange = function (mode) {
            _this.props.changeMode(mode);
        };
        return _this;
    }
    CardHeader.prototype.getYearSelect = function (year) {
        var _a = this.props,
            prefix = _a.prefix,
            yearRangeOffset = _a.yearRangeOffset,
            _b = _a.yearRange,
            yearRange = _b === void 0 ? [] : _b,
            locale = _a.locale;
        var _c = tslib_1.__read(yearRange, 2),
            startYear = _c[0],
            endYear = _c[1];
        if (!startYear || !endYear) {
            startYear = year - yearRangeOffset;
            endYear = year + yearRangeOffset;
        }
        var options = [];
        for (var i = startYear; i <= endYear; i++) {
            options.push(react_1.default.createElement(select_1.default.Option, { key: i, value: i }, i));
        }
        return react_1.default.createElement(select_1.default, { prefix: prefix, value: year, "aria-label": locale.yearSelectAriaLabel, onChange: this.onYearChange, popupContainer: this.selectContainerHandler }, options);
    };
    CardHeader.prototype.getMonthSelect = function (month) {
        var _a = this.props,
            prefix = _a.prefix,
            momentLocale = _a.momentLocale,
            locale = _a.locale;
        var localeMonths = momentLocale.monthsShort();
        var options = [];
        for (var i = 0; i < 12; i++) {
            options.push(react_1.default.createElement(select_1.default.Option, { key: i, value: i }, localeMonths[i]));
        }
        return react_1.default.createElement(select_1.default, { "aria-label": locale.monthSelectAriaLabel, prefix: prefix, value: month, onChange: this.changeVisibleMonth, popupContainer: this.selectContainerHandler }, options);
    };
    CardHeader.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            mode = _a.mode,
            locale = _a.locale,
            visibleMonth = _a.visibleMonth;
        var yearSelect = this.getYearSelect(visibleMonth.year());
        var monthSelect = mode === 'month' ? null : this.getMonthSelect(visibleMonth.month());
        var panelSelect = react_1.default.createElement(radio_1.default.Group, { shape: "button", size: "medium", value: mode, onChange: this.onModePanelChange }, react_1.default.createElement(radio_1.default, { value: "date" }, locale.month), react_1.default.createElement(radio_1.default, { value: "month" }, locale.year));
        return react_1.default.createElement("div", { className: "".concat(prefix, "calendar-header") }, yearSelect, monthSelect, panelSelect);
    };
    CardHeader.propTypes = {
        yearRange: prop_types_1.default.arrayOf(prop_types_1.default.number),
        yearRangeOffset: prop_types_1.default.number,
        locale: prop_types_1.default.object
    };
    CardHeader.defaultProps = {
        yearRangeOffset: 10
    };
    return CardHeader;
}(react_1.default.Component);
exports.default = config_provider_1.default.config(CardHeader);

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
/* eslint-disable valid-jsdoc */
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var util_1 = __webpack_require__(4);
var tag_1 = __webpack_require__(146);
var input_1 = __webpack_require__(15);
var icon_1 = __webpack_require__(7);
var zh_cn_1 = __webpack_require__(9);
var base_1 = __webpack_require__(150);
var util_2 = __webpack_require__(60);
var bindCtx = util_1.func.bindCtx,
    noop = util_1.func.noop;
var isIE9 = util_1.env.ieVersion === 9;
/**
 * 无障碍化注意事项:
 * 1. Select 无搜索情况下，不应该让 Input 可focus，此时外层wrap必须可focus，并且需要相应focus事件让外边框发生变化
 *
 * TODO: hightLight 后续改造注意点
 * 1. hightLight 跟随点击变化(fixed) 2. 弹窗打开时根据 是否高亮第一个选项的 api开关设置是否hightLight 第一项
 */
// 自定义弹层：1. 不需要关心Menu的点击事件 2. 不需要关心dataSource变化
/**
 * Select
 */
var Select = /** @class */function (_super) {
    tslib_1.__extends(Select, _super);
    function Select(props) {
        var _this = _super.call(this, props) || this;
        /**
         * 1. fix flash while click <label/>
         * 2. fix onBlur while has clear
         * @returns
         */
        _this.handleWrapClick = function (e) {
            // ignore click on input to choose text
            if (e.target.nodeName !== 'INPUT') {
                e.preventDefault();
            }
            _this.focusInput();
        };
        _this.handleArrowClick = function (e) {
            e.preventDefault();
            _this.focusInput();
            // because of can not close Popup by click Input while hasSearch.
            // so when Popup open and hasSearch, we should close Popup intentionally
            _this.state.visible && _this.hasSearch() && _this.setVisible(false);
        };
        _this.handleClear = function (e) {
            e.stopPropagation();
            _this.selectAllYet = false;
            _this.handleChange(undefined, 'clear');
        };
        // because dataSource maybe updated while select a item, so we should cache choosen value's item
        _this.valueDataSource = {
            valueDS: [], // [{value,label}]
            mapValueDS: {} // {value: {value,label}}
        };
        var searchValue = 'searchValue' in props ? props.searchValue : '';
        _this.dataStore.setOptions({
            key: searchValue,
            addonKey: props.mode === 'tag' // tag 模式手动输入的数据
        });
        (0, _extends3.default)(_this.state, {
            searchValue: searchValue,
            dataSource: _this.setDataSource(props)
        });
        // 根据value和计算后的dataSource，更新value对应的详细数据valueDataSource
        if (typeof _this.state.value !== 'undefined') {
            _this.valueDataSource = (0, util_2.getValueDataSource)(_this.state.value, _this.valueDataSource.mapValueDS, _this.dataStore.getMapDS());
        }
        bindCtx(_this, ['handleMenuSelect', 'handleItemClick', 'handleSearch', 'handleSearchKeyDown', 'handleSelectAll', 'maxTagPlaceholder']);
        return _this;
    }
    Select.getDerivedStateFromProps = function (nextProps, prevState) {
        var state = {};
        if ('value' in nextProps && nextProps.value !== prevState.value) {
            (0, _extends3.default)(state, {
                value: nextProps.value
            });
        }
        if ('highlightKey' in nextProps && nextProps.highlightKey !== prevState.highlightKey) {
            (0, _extends3.default)(state, {
                highlightKey: nextProps.highlightKey
            });
        } else if ('value' in nextProps && nextProps.value !== prevState.value && nextProps.mode === 'single') {
            (0, _extends3.default)(state, {
                highlightKey: nextProps.value
            });
        }
        if ('searchValue' in nextProps && nextProps.searchValue !== prevState.searchValue) {
            var searchValue = nextProps.searchValue;
            (0, _extends3.default)(state, {
                searchValue: searchValue === undefined || searchValue === null ? '' : searchValue
            });
        }
        if ('visible' in nextProps && nextProps.visible !== prevState.visible) {
            (0, _extends3.default)(state, {
                visible: nextProps.visible
            });
        }
        if (Object.keys(state).length) {
            return state;
        }
        return null;
    };
    Select.prototype.componentDidUpdate = function (prevProps, prevState) {
        var props = this.props;
        if ('searchValue' in props && this.state.searchValue !== prevState.searchValue) {
            this.dataStore.setOptions({ key: this.state.searchValue });
        }
        if (props.mode !== prevProps.mode) {
            this.dataStore.setOptions({
                addonKey: props.mode === 'tag'
            });
        }
        if (props.mode !== prevProps.mode) {
            this.dataStore.setOptions({
                addonKey: props.mode === 'tag'
            });
        }
        if (props.filter !== prevProps.filter) {
            this.dataStore.setOptions({
                filter: props.filter
            });
        }
        if (props.filterLocal !== prevProps.filterLocal) {
            this.dataStore.setOptions({
                filterLocal: props.filterLocal
            });
        }
        if (prevProps.children !== props.children || prevProps.dataSource !== props.dataSource) {
            /* eslint-disable react/no-did-update-set-state */
            this.setState({
                dataSource: this.setDataSource(props)
            });
            if (!props.popupContent) {
                this.setFirstHightLightKeyForMenu(this.state.searchValue);
            }
        }
        if ('value' in props) {
            this.valueDataSource = (0, util_2.getValueDataSource)(props.value, this.valueDataSource.mapValueDS, this.dataStore.getMapDS());
            this.updateSelectAllYet(this.valueDataSource.value);
        } else if ('defaultValue' in props && props.defaultValue === this.valueDataSource.value && (props.children !== prevProps.children || props.dataSource !== prevProps.dataSource)) {
            // has defaultValue and value not changed and dataSource changed
            // fix: set defaultValue first, then update dataSource.
            this.valueDataSource = (0, util_2.getValueDataSource)(props.defaultValue, this.valueDataSource.mapValueDS, this.dataStore.getMapDS());
        }
        if (prevProps.label !== this.props.label || prevState.value !== this.state.value || props.searchValue !== this.state.searchValue) {
            this.syncWidth();
        }
    };
    Select.prototype.componentDidMount = function () {
        if (isIE9) {
            this.ie9Hack();
        }
        _super.prototype.componentDidMount.call(this);
    };
    // ie9 下 table-cell 布局不支持宽度超出隐藏
    Select.prototype.ie9Hack = function () {
        try {
            var width = this.selectDOM.currentStyle.width;
            this.setState({
                fixWidth: width !== 'auto'
            });
        } catch (e) {
            //
        }
    };
    Select.prototype.useDetailValue = function () {
        var _a = this.props,
            popupContent = _a.popupContent,
            useDetailValue = _a.useDetailValue,
            dataSource = _a.dataSource;
        return useDetailValue || popupContent && !dataSource;
    };
    Select.prototype.hasSearch = function () {
        var _a = this.props,
            showSearch = _a.showSearch,
            mode = _a.mode;
        return showSearch || mode === 'tag';
    };
    Select.prototype.getTagSize = function () {
        var _a = this.props,
            size = _a.size,
            adjustTagSize = _a.adjustTagSize;
        if (adjustTagSize) {
            return size;
        }
        return size === 'large' ? 'medium' : 'small';
    };
    /**
     * Menu.Item onSelect
     * @private
     * @param  {Array<string>} keys
     * @
     */
    Select.prototype.handleMenuSelect = function (keys, item) {
        var _a = this.props,
            mode = _a.mode,
            readOnly = _a.readOnly,
            disabled = _a.disabled;
        if (readOnly || disabled) {
            return false;
        }
        var isSingle = mode === 'single';
        if (isSingle) {
            // 单选
            return this.handleSingleSelect(keys[0], 'itemClick');
        } else {
            // 正常多选
            return this.handleMultipleSelect(keys, 'itemClick', item.props && item.props._key);
        }
    };
    Select.prototype.handleItemClick = function (key) {
        if (!this.props.popupAutoFocus) {
            this.focusInput();
        }
        // key is string type here, fix https://github.com/alibaba-fusion/next/issues/4004
        if (this.props.mode === 'single' && key === String(this.state.value)) {
            this.setVisible(false, 'itemClick');
        }
    };
    /**
     * 单选模式
     */
    Select.prototype.handleSingleSelect = function (key, triggerType) {
        // TODO: 这里 cacheValue=false 有问题，dataSource 更新的时候就应该处理
        var cacheValue = this.props.cacheValue;
        // get data only from dataStore while cacheValue=false
        var itemObj = (0, util_2.getValueDataSource)(key, cacheValue ? this.valueDataSource.mapValueDS : {}, this.dataStore.getMapDS());
        this.valueDataSource = itemObj;
        this.setVisible(false, triggerType);
        // 应在return之前传出highlightKey
        this.setState({
            highlightKey: key
        });
        if (this.useDetailValue()) {
            return this.handleChange(itemObj.valueDS, triggerType);
        } else {
            this.handleChange(itemObj.value, triggerType, itemObj.valueDS);
        }
        // 清空搜索
        if (!('searchValue' in this.props) && this.state.searchValue) {
            this.handleSearchClear(triggerType);
        }
    };
    /**
     * 多选模式 multiple/tag
     */
    Select.prototype.handleMultipleSelect = function (keys, triggerType, key, keepSearchValue) {
        var _this = this;
        var itemObj = (0, util_2.getValueDataSource)(keys, this.valueDataSource.mapValueDS, this.dataStore.getMapDS());
        var _a = this.props,
            cacheValue = _a.cacheValue,
            mode = _a.mode,
            hiddenSelected = _a.hiddenSelected;
        // cache those value maybe not exists in dataSource
        if (cacheValue || mode === 'tag') {
            this.valueDataSource = itemObj;
        }
        if (hiddenSelected) {
            this.setVisible(false, triggerType);
        }
        // 因为搜索后会设置 hightLight 为第一个item，menu渲染会自动滚动到 hightLight 的元素上面。
        // 所以设置 hightLight 为当前选中项避免滚动
        key && this.state.visible && this.setState({
            highlightKey: key
        });
        if (this.useDetailValue()) {
            this.handleChange(itemObj.valueDS, triggerType);
        } else {
            this.handleChange(itemObj.value, triggerType, itemObj.valueDS);
        }
        this.updateSelectAllYet(itemObj.value);
        // 清空搜索
        if (!('searchValue' in this.props) && this.state.searchValue && !keepSearchValue) {
            // 因为 SearchValue 被 clear 后会重新渲染 Menu，所以在 Overlay 检测 safeNode 的时候 e.target 可能会找不到导致弹窗关闭
            setTimeout(function () {
                _this.handleSearchClear(triggerType);
            });
        }
    };
    Select.prototype.updateSelectAllYet = function (value) {
        var _this = this;
        // multiple mode
        // is current state select all or not
        this.selectAllYet = false;
        if (this.props.hasSelectAll && Array.isArray(value)) {
            var selectAllValues = this.dataStore.getEnableDS().map(function (item) {
                return item.value;
            });
            if (selectAllValues.length <= value.length) {
                this.selectAllYet = true;
                selectAllValues.forEach(function (val) {
                    if (value.indexOf(val) === -1) {
                        _this.selectAllYet = false;
                        return;
                    }
                });
            }
        }
    };
    Select.prototype.handleSearchValue = function (value) {
        if (this.state.searchValue === value) {
            return;
        }
        var filterLocal = this.props.filterLocal;
        if (filterLocal) {
            if (!('searchValue' in this.props)) {
                this.setState({
                    searchValue: value,
                    dataSource: this.dataStore.updateByKey(value)
                });
                this.setFirstHightLightKeyForMenu(value);
            }
        } else if (!('searchValue' in this.props)) {
            this.setState({
                searchValue: value
            });
        }
    };
    /**
     * Handle search input change event
     * @param {String} value search text
     * @param {Event} e change Event
     */
    Select.prototype.handleSearch = function (value, e) {
        this.handleSearchValue(value);
        // inputing should trigger popup open
        if (!this.state.visible && value) {
            this.setVisible(true);
        }
        this.props.onSearch(value, e);
    };
    Select.prototype.handleSearchClear = function (triggerType) {
        this.handleSearchValue('');
        this.props.onSearchClear(triggerType);
    };
    // 搜索框 keyDown 事件
    Select.prototype.handleSearchKeyDown = function (e) {
        var _a = this.props,
            popupContent = _a.popupContent,
            onKeyDown = _a.onKeyDown,
            showSearch = _a.showSearch,
            mode = _a.mode,
            hasClear = _a.hasClear,
            onToggleHighlightItem = _a.onToggleHighlightItem,
            readOnly = _a.readOnly,
            disabled = _a.disabled;
        var hasSearch = this.hasSearch();
        if (popupContent) {
            // 搜索的时候不阻止冒泡会无法输入
            if (hasSearch && e.keyCode === util_1.KEYCODE.SPACE) {
                e.stopPropagation();
            }
            return onKeyDown(e);
        }
        var proxy = 'search';
        switch (e.keyCode) {
            case util_1.KEYCODE.UP:
                e.preventDefault();
                onToggleHighlightItem(this.toggleHighlightItem(-1, e), 'up');
                break;
            case util_1.KEYCODE.DOWN:
                e.preventDefault();
                onToggleHighlightItem(this.toggleHighlightItem(1, e), 'down');
                break;
            case util_1.KEYCODE.ENTER:
                e.preventDefault();
                if (readOnly || disabled) {
                    break;
                }
                this.chooseHighlightItem(proxy, e);
                break;
            case util_1.KEYCODE.ESC:
                e.preventDefault();
                this.state.visible && this.setVisible(false, 'keyDown');
                break;
            case util_1.KEYCODE.SPACE:
                e.stopPropagation();
                !hasSearch && e.preventDefault();
                break;
            case util_1.KEYCODE.BACKSPACE:
                if (readOnly || disabled) {
                    break;
                }
                if (mode === 'multiple' && showSearch || mode === 'tag') {
                    // 在多选并且有搜索的情况下，删除最后一个 tag
                    var valueDS = this.valueDataSource.valueDS;
                    if (valueDS && valueDS.length && !valueDS[valueDS.length - 1].disabled) {
                        this.handleDeleteTag(e);
                    }
                } else if (mode === 'single' && hasClear && !this.state.visible) {
                    // 单选、非展开、并且可清除的情况，允许按删除键清除
                    this.handleClear(e);
                }
                break;
            default:
                break;
        }
        onKeyDown(e);
    };
    Select.prototype.chooseMultipleItem = function (key) {
        var value = this.state.value || [];
        var keys = value.map(function (v) {
            return (0, util_2.valueToSelectKey)(v);
        });
        var keepSearchValue = false;
        var index = keys.map(function (v) {
            return "".concat(v);
        }).indexOf(key);
        if (index > -1) {
            // unselect
            keys.splice(index, 1);
            keepSearchValue = true; // 回车反选保留搜索值
        } else {
            // select
            keys.push(key);
        }
        this.handleMultipleSelect(keys, 'enter', null, keepSearchValue);
    };
    // 回车 选择高亮的 item
    Select.prototype.chooseHighlightItem = function (proxy, e) {
        var mode = this.props.mode;
        if (!this.state.visible) {
            // input tag by itself
            if (mode === 'tag' && this.state.searchValue) {
                this.chooseMultipleItem(this.state.searchValue);
            }
            return false;
        }
        var highlightKey = this.state.highlightKey;
        // 没有高亮选项 或者 没有可选菜单
        if (highlightKey === null || !this.dataStore.getMenuDS().length) {
            return;
        }
        if (mode === 'single') {
            this.handleSingleSelect(highlightKey, 'enter');
        } else {
            this.chooseMultipleItem(highlightKey);
            // 阻止事件冒泡到最外层，让Popup 监听到触发弹层关闭
            e && e.stopPropagation();
        }
    };
    /**
     * Handle Tag close event
     * @param  {Object} item
     * @return {Boolean} false  return false to prevent auto close
     * ----
     * It MUST be multiple mode, needn't additional judgement
     */
    Select.prototype.handleTagClose = function (item) {
        var readOnly = this.props.readOnly;
        if (readOnly) return false;
        if (this.useDetailValue()) {
            var value = this.state.value.filter(function (v) {
                return item.value !== v.value;
            });
            this.handleChange(value, 'tag');
        } else {
            // filter out current item, and then call handleMenuSelect
            var value = this.state.value.filter(function (v) {
                return item.value !== v;
            });
            this.handleMultipleSelect(value, 'tag');
        }
        this.props.onRemove(item);
        // prevent tag close
        return false;
    };
    // eslint-disable-next-line valid-jsdoc
    /**
     * Handle BACKSPACE key event
     * @param {Event} e keyDown event
     * ---
     * It MUST be multiple mode
     */
    Select.prototype.handleDeleteTag = function (e) {
        var value = this.state.value;
        var searchValue = this.state.searchValue;
        if (searchValue || !value || !value.length) {
            return false;
        }
        e.preventDefault();
        var nextValues = value.slice(0, value.length - 1);
        // 手动调用 handleMenuSelect 时直接传入原生的 value，可以减少 toString 的操作
        if (this.useDetailValue()) {
            this.handleChange(nextValues, 'tag');
        } else {
            this.handleMultipleSelect(nextValues, 'tag');
        }
    };
    /**
     * Handle SelectAll span click event
     * @param {Event} e click event
     */
    Select.prototype.handleSelectAll = function (e) {
        e && e.preventDefault();
        var nextValues;
        if (this.selectAllYet) {
            nextValues = [];
        } else {
            nextValues = this.dataStore.getEnableDS().map(function (item) {
                return item.value;
            });
        }
        // 直接传 values，减少 toString 操作
        this.handleMultipleSelect(nextValues, 'selectAll');
    };
    Select.prototype.handleVisibleChange = function (visible, type) {
        this.setVisible(visible, type);
    };
    Select.prototype.afterClose = function () {
        // 关闭的时候清空搜索值
        if (this.hasSearch()) {
            this.handleSearchClear('popupClose');
        }
    };
    Select.prototype.maxTagPlaceholder = function (selectedValues, totalValues) {
        var locale = this.props.locale;
        return "".concat(util_1.str.template(locale.maxTagPlaceholder, {
            selected: selectedValues.length,
            total: totalValues.length
        }));
    };
    /**
     * 如果用户是自定义的弹层，则直接以 value 为准，不再校验 dataSource
     * TODO: 2.0 中 value 接受 string/object{value,label} 两种类型的数据，自动做识别，可以避免用户去转换，也和 date-picker 对齐
     * 此外 onChange 第一个参数根据 api 来控制类型是 [string] 还是 [object{value,label}]
     * @param {object} props
     */
    Select.prototype.renderValues = function () {
        var _this = this;
        var _a = this.props,
            prefix = _a.prefix,
            mode = _a.mode,
            valueRender = _a.valueRender,
            fillProps = _a.fillProps,
            disabled = _a.disabled,
            maxTagCount = _a.maxTagCount,
            maxTagPlaceholder = _a.maxTagPlaceholder,
            tagInline = _a.tagInline,
            tagClosable = _a.tagClosable;
        var tagSize = this.getTagSize();
        var value = this.state.value;
        if ((0, util_2.isNull)(value)) {
            return null;
        }
        // get detail value
        if (!this.useDetailValue()) {
            if (value === this.valueDataSource.value) {
                value = this.valueDataSource.valueDS;
            } else {
                value = (0, util_2.getValueDataSource)(value, this.valueDataSource.mapValueDS, this.dataStore.getMapDS()).valueDS;
            }
        }
        if (mode === 'single') {
            if (!value) {
                return null;
            }
            var retvalue = fillProps && (typeof value === "undefined" ? "undefined" : (0, _typeof3.default)(value)) === 'object' && fillProps in value ? value[fillProps] : valueRender(value);
            // 0 => '0'
            return typeof retvalue === 'number' ? retvalue.toString() : retvalue;
        } else if (value) {
            var limitedCountValue = value;
            var maxTagPlaceholderEl = void 0;
            var totalValue = this.dataStore.getFlattenDS();
            var holder = 'maxTagPlaceholder' in this.props ? maxTagPlaceholder : this.maxTagPlaceholder;
            if (maxTagCount !== undefined && value.length > maxTagCount && !tagInline) {
                limitedCountValue = limitedCountValue.slice(0, maxTagCount);
                maxTagPlaceholderEl = react_1.default.createElement(tag_1.default, { key: "_count", type: "primary", size: tagSize, animation: false }, holder(value, totalValue));
            }
            if (value.length > 0 && tagInline) {
                maxTagPlaceholderEl = react_1.default.createElement("div", { className: "".concat(prefix, "select-tag-compact"), key: "_count" }, holder(value, totalValue));
            }
            value = limitedCountValue;
            if (!Array.isArray(value)) {
                value = [value];
            }
            var selectedValueNodes = value.map(function (v) {
                if (!v) {
                    return null;
                }
                var labelNode = fillProps ? v[fillProps] : valueRender(v);
                return react_1.default.createElement(tag_1.default, { key: v.value, disabled: disabled || v.disabled, type: "primary", size: tagSize, animation: false, onClose: _this.handleTagClose.bind(_this, v), closable: tagClosable }, labelNode);
            });
            if (maxTagPlaceholderEl) {
                if (tagInline) {
                    selectedValueNodes.unshift(maxTagPlaceholderEl);
                } else {
                    selectedValueNodes.push(maxTagPlaceholderEl);
                }
            }
            return selectedValueNodes;
        }
        return null;
    };
    Select.prototype.hasClear = function () {
        var _a = this.props,
            hasClear = _a.hasClear,
            readOnly = _a.readOnly,
            disabled = _a.disabled,
            showSearch = _a.showSearch;
        var _b = this.state,
            value = _b.value,
            visible = _b.visible;
        return typeof value !== 'undefined' && value !== null && (Array.isArray(value) ? value.length > 0 : true) && hasClear && !readOnly && !disabled && !(showSearch && visible);
    };
    /**
     * render arrow
     * @param {object} props
     * @param {function} [clickHandler]
     */
    Select.prototype.renderExtraNode = function () {
        var _a = this.props,
            hasArrow = _a.hasArrow,
            hasClear = _a.hasClear,
            prefix = _a.prefix;
        var ret = [];
        if (hasArrow) {
            ret.push(react_1.default.createElement("span", { key: "arrow", "aria-hidden": true, onClick: this.handleArrowClick, className: "".concat(prefix, "select-arrow") }, react_1.default.createElement(icon_1.default, { type: "arrow-down", className: "".concat(prefix, "select-symbol-fold") })));
        }
        // do not use this.hasClear() here, to make sure clear btn always exists, can not influenced by apis like `disabled` `readOnly`
        if (hasClear) {
            ret.push(react_1.default.createElement("span", { key: "clear", "aria-hidden": true, onClick: this.handleClear, className: "".concat(prefix, "select-clear") }, react_1.default.createElement(icon_1.default, { type: "delete-filling" })));
        }
        return ret;
    };
    /**
     * 选择器
     * @override
     * @param {object} props
     */
    Select.prototype.renderSelect = function () {
        var _a;
        var _this = this;
        var _b = this.props,
            prefix = _b.prefix,
            showSearch = _b.showSearch,
            placeholder = _b.placeholder,
            mode = _b.mode,
            size = _b.size,
            className = _b.className,
            style = _b.style,
            readOnly = _b.readOnly,
            disabled = _b.disabled,
            hasBorder = _b.hasBorder,
            label = _b.label,
            locale = _b.locale,
            state = _b.state,
            onBlur = _b.onBlur,
            onFocus = _b.onFocus,
            onMouseEnter = _b.onMouseEnter,
            onMouseLeave = _b.onMouseLeave,
            rtl = _b.rtl;
        var others = util_1.obj.pickOthers(Select.propTypes, this.props);
        // select不是输入框，应过滤掉addonTextAfter
        if ('addonTextAfter' in others) {
            delete others.addonTextAfter;
        }
        var othersData = util_1.obj.pickAttrsWith(others, 'data-');
        var visible = this.state.visible;
        var isSingle = mode === 'single';
        var hasSearch = this.hasSearch();
        var valueNodes = this.renderValues();
        // compatible with selectPlaceHolder. TODO: removed in 2.0 version
        var _placeholder = placeholder || locale.selectPlaceholder || locale.selectPlaceHolder;
        if (valueNodes && valueNodes.length) {
            _placeholder = null;
        }
        // 弹窗展开时将当前的值作为 placeholder，这个功能的前提是 valueNode 必须是一个字符串
        if (showSearch && visible && isSingle && typeof valueNodes === 'string') {
            _placeholder = valueNodes;
        }
        // 下拉箭头
        var extra = this.renderExtraNode();
        var triggerClazz = (0, classnames_1.default)(["".concat(prefix, "select"), "".concat(prefix, "select-trigger"), "".concat(prefix, "select-").concat(mode), "".concat(prefix).concat(size), className], (_a = {}, _a["".concat(prefix, "active")] = visible, _a["".concat(prefix, "inactive")] = !visible, _a["".concat(prefix, "no-search")] = !hasSearch, _a["".concat(prefix, "has-search")] = hasSearch, _a["".concat(prefix, "select-in-ie")] = isIE9, _a["".concat(prefix, "select-in-ie-fixwidth")] = this.state.fixWidth, _a["".concat(prefix, "has-clear")] = this.hasClear(), _a));
        var valuetext = this.valueDataSource.valueDS ? this.valueDataSource.valueDS.label : '';
        return react_1.default.createElement("span", tslib_1.__assign({}, othersData, { className: triggerClazz, style: style, dir: rtl ? 'rtl' : undefined, ref: this.saveSelectRef, onClick: this.handleWrapClick, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onMouseDown: this.handleWrapClick }), react_1.default.createElement(input_1.default, tslib_1.__assign({ "aria-valuetext": valuetext }, util_1.obj.pickOthers(othersData, others), { role: "combobox", tabIndex: 0, "aria-expanded": this.state.visible, "aria-disabled": disabled, state: state, label: label, extra: extra, value: this.state.searchValue, size: size, readOnly: !this.hasSearch() || readOnly, disabled: disabled, placeholder: _placeholder, hasBorder: hasBorder, hasClear: false, htmlSize: "1", inputRender: function inputRender(inputEl) {
                return _this.renderSearchInput(valueNodes, _placeholder, inputEl);
            }, onChange: this.handleSearch, onKeyDown: this.handleSearchKeyDown, onFocus: onFocus, onBlur: onBlur, className: "".concat(prefix, "select-inner"), ref: this.saveInputRef })), react_1.default.createElement("span", { className: "".concat(prefix, "sr-only"), "aria-live": "polite" }, this.state.srReader));
    };
    Select.prototype.renderSearchInput = function (valueNodes, placeholder, inputEl) {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            mode = _b.mode,
            tagInline = _b.tagInline;
        var isSingle = mode === 'single';
        var mirrorText = this.state.searchValue;
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "select-values")] = true, _a["".concat(prefix, "input-text-field")] = true, _a["".concat(prefix, "select-compact")] = !isSingle && tagInline, _a));
        var title = typeof valueNodes === 'string' ? valueNodes : '';
        var searchInput = [isSingle && valueNodes ? react_1.default.createElement("em", { title: title, key: "select-value" }, valueNodes) : valueNodes];
        var triggerSearch = react_1.default.createElement("span", { key: "trigger-search", className: "".concat(prefix, "select-trigger-search") }, inputEl, react_1.default.createElement("span", { "aria-hidden": true }, react_1.default.createElement("span", null, mirrorText || placeholder), react_1.default.createElement("span", { style: { display: 'inline-block', width: 1 } }, "\xA0")));
        if (!isSingle && tagInline) {
            searchInput.unshift(triggerSearch);
        } else {
            searchInput.push(triggerSearch);
        }
        return react_1.default.createElement("span", { className: cls }, searchInput);
    };
    /**
     * 渲染弹层的 header 内容
     * @override
     * @param {object} props
     */
    Select.prototype.renderMenuHeader = function () {
        var _a, _b;
        var _c = this.props,
            prefix = _c.prefix,
            hasSelectAll = _c.hasSelectAll,
            mode = _c.mode,
            locale = _c.locale,
            menuProps = _c.menuProps;
        if (menuProps && 'header' in menuProps) {
            return menuProps.header;
        }
        var sourceCount = this.dataStore.getEnableDS().length;
        // 多选模式下才有全选
        if (!hasSelectAll || mode === 'single' || !sourceCount) {
            return null;
        }
        var text = typeof hasSelectAll === 'boolean' ? locale.selectAll : hasSelectAll;
        var selectAllYet = this.selectAllYet;
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "select-all")] = true, _a["".concat(prefix, "selected")] = selectAllYet, _a));
        var clsInner = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "select-all-inner")] = true, _b));
        // remove style={{'lineHeight': 'unset'}} in next Y
        // remove style={{'display': 'none'}} in next Y
        return react_1.default.createElement("div", { key: "all", onClick: this.handleSelectAll, className: cls, style: { lineHeight: 'unset' } }, selectAllYet ? react_1.default.createElement(icon_1.default, { className: "".concat(prefix, "menu-icon-selected"), style: { display: 'none' }, type: "select" }) : null, react_1.default.createElement("span", { className: clsInner }, text));
    };
    Select.prototype.render = function () {
        var mode = this.props.mode;
        var props = tslib_1.__assign({}, this.props);
        // forbid to close Popup by click Input while hasSearch
        if (this.hasSearch()) {
            props.canCloseByTrigger = false;
        }
        if (mode === 'single') {
            props.cache = true;
        }
        return _super.prototype.render.call(this, props);
    };
    Select.propTypes = tslib_1.__assign(tslib_1.__assign({}, base_1.default.propTypes), {
        /**
         * 选择器模式
         */
        mode: prop_types_1.default.oneOf(['single', 'multiple', 'tag']),
        /**
         * 当前值，用于受控模式
         */
        value: prop_types_1.default.any,
        /**
         * 初始的默认值
         */
        defaultValue: prop_types_1.default.any,
        /**
         * Select发生改变时触发的回调
         * @param {*} value 选中的值
         * @param {String} actionType 触发的方式, 'itemClick', 'enter', 'tag'
         * @param {*} item 选中的值的对象数据 (useDetailValue=false有效)
         */
        onChange: prop_types_1.default.func,
        /**
         * 传入的数据源，可以动态渲染子项，详见 [dataSource的使用](#dataSource的使用)
         */
        dataSource: prop_types_1.default.arrayOf(prop_types_1.default.oneOfType([prop_types_1.default.shape({
            value: prop_types_1.default.any,
            label: prop_types_1.default.any,
            disabled: prop_types_1.default.bool,
            children: prop_types_1.default.array
        }), prop_types_1.default.bool, prop_types_1.default.number, prop_types_1.default.string])),
        /**
         * 是否有边框
         */
        hasBorder: prop_types_1.default.bool,
        /**
         * 是否有下拉箭头
         */
        hasArrow: prop_types_1.default.bool,
        /**
         * 展开后是否能搜索（tag 模式下固定为true）
         */
        showSearch: prop_types_1.default.bool,
        /**
         * 当搜索框值变化时回调
         * @param {String} value 数据
         */
        onSearch: prop_types_1.default.func,
        /**
         * 当搜索框值被(选择、弹窗关闭)导致清空时候的回调
         * @param {String} actionType 触发的方式, 'select'(选择清空), 'popupClose'(弹窗关闭清空)
         */
        onSearchClear: prop_types_1.default.func,
        /**
         * 多选模式下是否有全选功能
         */
        hasSelectAll: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.string]),
        /**
         * 填充到选择框里的值的 key
         */
        fillProps: prop_types_1.default.string,
        /**
         * value 使用对象类型 `{value, label}`, 同时 onChange 第一个参数返回也修改为 dataSource 中的对象
         */
        useDetailValue: prop_types_1.default.bool,
        /**
         * dataSource 变化的时是否保留已选的内容
         */
        cacheValue: prop_types_1.default.bool,
        /**
         * 渲染 Select 展现内容的方法
         * @param {Object} item 渲染节点的item
         * @return {ReactNode} 展现内容
         * @default item => `item.label || item.value`
         */
        valueRender: prop_types_1.default.func,
        /**
         * 渲染 MenuItem 内容的方法
         * @param {Object} item 渲染节点的item
         * @param {String} searchValue 搜索关键字（如果开启搜索）
         * @return {ReactNode} item node
         */
        itemRender: prop_types_1.default.func,
        /**
         * 弹层内容为空的文案
         */
        notFoundContent: prop_types_1.default.node, style: prop_types_1.default.object,
        /**
         * 受控搜索值，一般不需要设置
         * @type {[type]}
         */
        searchValue: prop_types_1.default.string,
        /**
         * 是否一行显示，仅在 mode 为 multiple 的时候生效
         * @version 1.15
         */
        tagInline: prop_types_1.default.bool,
        /**
         * tag 是否可关闭
         * @version 1.20
         */
        tagClosable: prop_types_1.default.bool,
        /**
         * tag 尺寸是否和 select 保持一致(mode=multiple/tag 模式生效），默认false
         * @version 1.24
         */
        adjustTagSize: prop_types_1.default.bool,
        /**
         * 最多显示多少个 tag
         * @version 1.15
         */
        maxTagCount: prop_types_1.default.number,
        /**
         * 隐藏多余 tag 时显示的内容，在 maxTagCount 生效时起作用
         * @param {object} selectedValues 当前已选中的元素
         * @param {object} totalValues 总待选元素
         * @version 1.15
         */
        maxTagPlaceholder: prop_types_1.default.func,
        /**
         * 选择后是否立即隐藏菜单 (mode=multiple/tag 模式生效)
         */
        hiddenSelected: prop_types_1.default.bool,
        /**
         * tag 删除回调
         * @param {object} item 渲染节点的item
         */
        onRemove: prop_types_1.default.func,
        /**
         * 焦点事件
         */
        onFocus: prop_types_1.default.func,
        /**
         * 是否自动高亮第一个选项
         */
        // highlightFirstItem: PropTypes.bool,
        /**
         * 失去焦点事件
         */
        onBlur: prop_types_1.default.func, onMouseEnter: prop_types_1.default.func, onMouseLeave: prop_types_1.default.func, onKeyDown: prop_types_1.default.func, locale: prop_types_1.default.object,
        /**
         * 展开下拉菜单时是否自动焦点到弹层
         */
        popupAutoFocus: prop_types_1.default.bool,
        /**
         * 是否展示 dataSource 中 children
         */
        showDataSourceChildren: prop_types_1.default.bool });
    Select.defaultProps = tslib_1.__assign(tslib_1.__assign({}, base_1.default.defaultProps), { locale: zh_cn_1.default.Select, mode: 'single', showSearch: false, cacheValue: true, tagInline: false, adjustTagSize: false, onSearch: noop, onSearchClear: noop, hasArrow: true, onRemove: noop,
        // highlightFirstItem: true,
        valueRender: function valueRender(item) {
            return item && (item.label || item.value);
        }, onKeyDown: noop, onFocus: noop, onBlur: noop, onMouseEnter: noop, onMouseLeave: noop, popupAutoFocus: false, tagClosable: true });
    Select.displayName = 'Select';
    return Select;
}(base_1.default);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Select);

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var Group = /** @class */function (_super) {
    tslib_1.__extends(Group, _super);
    function Group() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Group.prototype.render = function () {
        var _a = this.props,
            className = _a.className,
            prefix = _a.prefix,
            children = _a.children,
            rtl = _a.rtl,
            others = tslib_1.__rest(_a, ["className", "prefix", "children", "rtl"]);
        var clazz = (0, classnames_1.default)("".concat(prefix || 'next-', "tag-group"), className);
        return react_1.default.createElement("div", tslib_1.__assign({ className: clazz, dir: rtl ? 'rtl' : undefined }, others), children);
    };
    Group.propTypes = {
        prefix: prop_types_1.default.string,
        className: prop_types_1.default.any,
        children: prop_types_1.default.node,
        rtl: prop_types_1.default.bool
    };
    Group.defaultProps = {
        prefix: 'next-',
        rtl: false
    };
    return Group;
}(react_1.Component);
exports.default = Group;

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var util_1 = __webpack_require__(4);
var tag_1 = __webpack_require__(87);
var noop = util_1.func.noop,
    bindCtx = util_1.func.bindCtx;
/**
 * Tag.Selectable
 */
var Selectable = /** @class */function (_super) {
    tslib_1.__extends(Selectable, _super);
    function Selectable(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            checked: 'checked' in props ? props.checked : props.defaultChecked || false
        };
        bindCtx(_this, ['handleClick']);
        return _this;
    }
    Selectable.getDerivedStateFromProps = function (props, state) {
        if (props.checked !== undefined && props.checked !== state.checked) {
            return {
                checked: props.checked
            };
        }
        return null;
    };
    Selectable.prototype.handleClick = function (e) {
        e && e.preventDefault();
        // IE9 不支持 pointer-events，还是可能会触发 click 事件
        if (this.props.disabled) {
            return false;
        }
        var checked = this.state.checked;
        this.setState({
            checked: !checked
        });
        this.props.onChange(!checked, e);
    };
    Selectable.prototype.render = function () {
        var attrFilterTarget = ['checked', 'defaultChecked', 'onChange', 'className',
        // 防止这些额外的参数影响 tag 的类型
        '_shape', 'closable'];
        var others = util_1.obj.pickOthers(attrFilterTarget, this.props);
        var isChecked = 'checked' in this.props ? this.props.checked : this.state.checked;
        var clazz = (0, classnames_1.default)(this.props.className, {
            checked: isChecked
        });
        return react_1.default.createElement(tag_1.default, tslib_1.__assign({}, others, { role: "checkbox", _shape: "checkable", "aria-checked": isChecked, className: clazz, onClick: this.handleClick }));
    };
    Selectable.propTypes = {
        /**
         * 标签是否被选中，受控用法
         * tag checked or not, a controlled way
         */
        checked: prop_types_1.default.bool,
        /**
         * 标签是否默认被选中，非受控用法
         * tag checked or not by default, a uncontrolled way
         */
        defaultChecked: prop_types_1.default.bool,
        /**
         * 选中状态变化时触发的事件
         * @param {Boolean} checked 是否选中
         * @param {Event} e Dom 事件对象
         */
        onChange: prop_types_1.default.func,
        /**
         * 标签是否被禁用
         */
        disabled: prop_types_1.default.bool,
        className: prop_types_1.default.any
    };
    Selectable.defaultProps = {
        onChange: noop
    };
    return Selectable;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Selectable);

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var tag_1 = __webpack_require__(87);
/**
 * Tag.Closeable
 */
var Closeable = /** @class */function (_super) {
  tslib_1.__extends(Closeable, _super);
  function Closeable() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Closeable.prototype.render = function () {
    var _a = this.props,
        disabled = _a.disabled,
        className = _a.className,
        closeArea = _a.closeArea,
        onClose = _a.onClose,
        afterClose = _a.afterClose,
        onClick = _a.onClick,
        type = _a.type,
        size = _a.size,
        children = _a.children,
        rtl = _a.rtl,
        others = tslib_1.__rest(_a, ["disabled", "className", "closeArea", "onClose", "afterClose", "onClick", "type", "size", "children", "rtl"]);
    return react_1.default.createElement(tag_1.default, tslib_1.__assign({}, others, { rtl: rtl, disabled: disabled, className: className, closeArea: closeArea, onClose: onClose, afterClose: afterClose, onClick: onClick, type: type, size: size, closable: true }), children);
  };
  Closeable.propTypes = {
    disabled: prop_types_1.default.bool,
    className: prop_types_1.default.any,
    /**
     * closeable 标签的 onClose 响应区域, tag: 标签体, tail(默认): 关闭按钮
     * @enumdesc 标签, 尾部icon
     */
    closeArea: prop_types_1.default.oneOf(['tag', 'tail']),
    /**
     * 点击关闭按钮时的回调
     * @param {String} from 事件来源, tag: 标签体点击, tail: 关闭按钮点击
     * @returns {Boolean} true则关闭, false阻止关闭
     */
    onClose: prop_types_1.default.func,
    /**
     * 标签关闭后执行的回调
     */
    afterClose: prop_types_1.default.func,
    /**
     * 点击回调
     */
    onClick: prop_types_1.default.func,
    type: prop_types_1.default.oneOf(['normal', 'primary']),
    /**
     * 标签的尺寸（large 尺寸为兼容表单场景 large = medium）
     */
    size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
    children: prop_types_1.default.any,
    rtl: prop_types_1.default.bool
  };
  Closeable.defaultProps = {
    disabled: false,
    type: 'normal'
  };
  return Closeable;
}(react_1.Component);
exports.default = Closeable;

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var input_1 = __webpack_require__(147);
var index_1 = __webpack_require__(7);
function preventDefault(e) {
    e.preventDefault();
}
var Password = /** @class */function (_super) {
    tslib_1.__extends(Password, _super);
    function Password() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.state = {
            hint: 'eye-close',
            htmlType: 'password'
        };
        _this.toggleEye = function (e) {
            e.preventDefault();
            if (_this.props.disabled) return;
            var eyeClose = _this.state.hint === 'eye';
            _this.setState({
                hint: eyeClose ? 'eye-close' : 'eye',
                htmlType: eyeClose || !_this.props.showToggle ? 'password' : 'text'
            });
        };
        return _this;
    }
    Password.prototype.render = function () {
        var _a = this.props,
            showToggle = _a.showToggle,
            others = tslib_1.__rest(_a, ["showToggle"]);
        var _b = this.state,
            hint = _b.hint,
            htmlType = _b.htmlType;
        var extra = showToggle ? react_1.default.createElement(index_1.default, { type: hint, onClick: this.toggleEye, onMouseDown: preventDefault }) : null;
        return react_1.default.createElement(input_1.default, tslib_1.__assign({}, others, { extra: extra, htmlType: htmlType }));
    };
    Password.displayName = 'Password';
    Password.getDerivedStateFromProps = input_1.default.getDerivedStateFromProps;
    Password.propTypes = tslib_1.__assign(tslib_1.__assign({}, input_1.default.propTypes), {
        /**
         * 是否展示切换按钮
         */
        showToggle: prop_types_1.default.bool });
    Password.defaultProps = tslib_1.__assign(tslib_1.__assign({}, input_1.default.defaultProps), { showToggle: true });
    return Password;
}(input_1.default);
exports.default = Password;

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var util_1 = __webpack_require__(4);
var base_1 = __webpack_require__(148);
function onNextFrame(cb) {
    if (window.requestAnimationFrame) {
        return window.requestAnimationFrame(cb);
    }
    return window.setTimeout(cb, 1);
}
function clearNextFrameAction(nextFrameId) {
    if (window.cancelAnimationFrame) {
        window.cancelAnimationFrame(nextFrameId);
    } else {
        window.clearTimeout(nextFrameId);
    }
}
// safari in mac
var isMacSafari = typeof navigator !== 'undefined' && navigator && navigator.userAgent ? navigator.userAgent.match(/^((?!chrome|android|windows).)*safari/i) : false;
var hiddenStyle = {
    visibility: 'hidden',
    position: 'absolute',
    zIndex: '-1000',
    top: '-1000px',
    overflowY: 'hidden',
    left: 0,
    right: 0
};
/**
 * Input.TextArea
 * @order 2
 */
var TextArea = /** @class */function (_super) {
    tslib_1.__extends(TextArea, _super);
    function TextArea(props) {
        var _this = _super.call(this, props) || this;
        _this._resizeTextArea = function (value) {
            if (_this.nextFrameActionId) {
                clearNextFrameAction(_this.nextFrameActionId);
            }
            _this.nextFrameActionId = onNextFrame(function () {
                var height = _this._getHeight(value);
                var maxHeight = _this.state.maxHeight ? _this.state.maxHeight : Infinity;
                _this.setState({
                    height: _this._getHeight(value),
                    overflowY: height <= maxHeight ? 'hidden' : undefined
                });
            });
        };
        var value;
        if ('value' in props) {
            value = props.value;
        } else {
            value = props.defaultValue;
        }
        _this.state = {
            value: typeof value === 'undefined' || value === null ? '' : value
        };
        return _this;
    }
    TextArea.prototype.componentDidMount = function () {
        var autoHeight = this.props.autoHeight;
        if (autoHeight) {
            if ((typeof autoHeight === "undefined" ? "undefined" : (0, _typeof3.default)(autoHeight)) === 'object') {
                /* eslint-disable react/no-did-mount-set-state */
                this.setState(this._getMinMaxHeight(autoHeight, this.state.value));
            } else {
                this.setState({
                    height: this._getHeight(this.state.value),
                    overflowY: 'hidden'
                });
            }
        }
    };
    TextArea.prototype.componentDidUpdate = function (prevProps) {
        if (this.props.autoHeight && (this.props.value !== prevProps.value || this.props.isPreview !== prevProps.isPreview)) {
            this._resizeTextArea(this.props.value);
        }
    };
    TextArea.prototype._getMinMaxHeight = function (_a, value) {
        var minRows = _a.minRows,
            maxRows = _a.maxRows;
        var node = react_dom_1.default.findDOMNode(this.helpRef);
        if (!node) {
            return {};
        }
        node.setAttribute('rows', minRows);
        var minHeight = node.clientHeight;
        node.setAttribute('rows', maxRows);
        var maxHeight = node.clientHeight;
        node.setAttribute('rows', '1');
        var height = this._getHeight(value);
        return {
            minHeight: minHeight,
            maxHeight: maxHeight,
            height: height,
            overflowY: height <= maxHeight ? 'hidden' : undefined
        };
    };
    TextArea.prototype._getHeight = function (value) {
        var node = react_dom_1.default.findDOMNode(this.helpRef);
        if (!node) {
            return 0;
        }
        node.value = value;
        return node.scrollHeight;
    };
    TextArea.prototype.ieHack = function (value) {
        // Fix: textarea dit not support maxLength in ie9
        /* istanbul ignore if */
        if (util_1.env.ieVersion === 9 && this.props.maxLength) {
            var maxLength = parseInt(this.props.maxLength);
            var len = this.getValueLength(value, true);
            if (len > maxLength && this.props.cutString) {
                value = value.replace(/\n/g, '\n\n');
                value = value.substr(0, maxLength);
                value = value.replace(/\n\n/g, '\n');
            }
        }
        this.props.autoHeight && this._resizeTextArea(value);
        return value;
    };
    /**
     * value.length !== maxLength  in ie/safari(mac) while value has `Enter`
     * about maxLength compute: `Enter` was considered to be one char(\n) in chrome , but two chars(\r\n) in ie/safari(mac).
     * so while value has `Enter`, we should let display length + 1
     */
    TextArea.prototype.getValueLength = function (value) {
        var _a = this.props,
            maxLength = _a.maxLength,
            cutString = _a.cutString;
        var nv = "".concat(value);
        var strLen = this.props.getValueLength(nv);
        if (typeof strLen !== 'number') {
            strLen = nv.length;
        }
        /* istanbul ignore if */
        if (util_1.env.ieVersion || isMacSafari) {
            strLen = strLen + nv.split('\n').length - 1;
            if (strLen > maxLength && cutString) {
                strLen = maxLength;
            }
        }
        return strLen;
    };
    TextArea.prototype.saveTextAreaRef = function (textArea) {
        this.inputRef = textArea;
    };
    TextArea.prototype.saveHelpRef = function (ref) {
        this.helpRef = ref;
    };
    TextArea.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            rows = _c.rows,
            style = _c.style,
            className = _c.className,
            autoHeight = _c.autoHeight,
            isPreview = _c.isPreview,
            renderPreview = _c.renderPreview,
            prefix = _c.prefix,
            rtl = _c.rtl,
            hasBorder = _c.hasBorder,
            size = _c.size,
            composition = _c.composition;
        var cls = (0, classnames_1.default)(this.getClass(), (_a = {}, _a["".concat(prefix).concat(size)] = size === 'large' || 'size' === 'small', _a["".concat(prefix, "input-textarea")] = true, _a["".concat(prefix, "noborder")] = !hasBorder, _a[className] = !!className, _a));
        var props = this.getProps();
        // custom data attributes are assigned to the top parent node
        // data-类自定义数据属性分配到顶层node节点
        var dataProps = util_1.obj.pickAttrsWith(this.props, 'data-');
        // Custom props are transparently transmitted to the core input node by default
        // 自定义属性默认透传到核心node节点：input
        var others = util_1.obj.pickOthers((0, _extends3.default)({}, dataProps, TextArea.propTypes), this.props);
        var textareStyle = tslib_1.__assign(tslib_1.__assign({}, props.style), { height: this.state.height, minHeight: this.state.minHeight, maxHeight: this.state.maxHeight, overflowY: this.state.overflowY });
        var previewCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "input-textarea")] = true, _b["".concat(prefix, "form-preview")] = true, _b[className] = !!className, _b));
        var wrapStyle = autoHeight ? tslib_1.__assign(tslib_1.__assign({}, style), { position: 'relative' }) : style;
        if (isPreview) {
            var value = props.value;
            if ('renderPreview' in this.props) {
                return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: previewCls }), renderPreview(value, this.props));
            }
            return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: previewCls }), value.split('\n').map(function (data, i) {
                return react_1.default.createElement("p", { key: "p-".concat(i) }, data);
            }));
        }
        var compositionProps = {};
        if (composition) {
            compositionProps.onCompositionStart = this.handleCompositionStart;
            compositionProps.onCompositionEnd = this.handleCompositionEnd;
        }
        return react_1.default.createElement("span", tslib_1.__assign({ className: cls, style: wrapStyle, dir: rtl ? 'rtl' : undefined }, dataProps), react_1.default.createElement("textarea", tslib_1.__assign({}, others, props, compositionProps, { "data-real": true, rows: rows, style: textareStyle, ref: this.saveRef.bind(this), onKeyDown: this.onKeyDown.bind(this) })), autoHeight ? react_1.default.createElement("textarea", { "data-fake": true, ref: this.saveHelpRef.bind(this), style: tslib_1.__assign(tslib_1.__assign({}, props.style), hiddenStyle), rows: "1" }) : null, this.renderControl());
    };
    TextArea.displayName = 'TextArea';
    TextArea.getDerivedStateFromProps = base_1.default.getDerivedStateFromProps;
    TextArea.propTypes = tslib_1.__assign(tslib_1.__assign({}, base_1.default.propTypes), {
        /**
         * 是否有边框
         */
        hasBorder: prop_types_1.default.bool,
        /**
         * 状态
         * @enumdesc 错误
         */
        state: prop_types_1.default.oneOf(['error', 'warning']),
        /**
         * 自动高度 true / {minRows: 2, maxRows: 4}
         */
        autoHeight: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.object]),
        /**
         * 多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)
         */
        rows: prop_types_1.default.number,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {number} value 评分值
         */
        renderPreview: prop_types_1.default.func });
    TextArea.defaultProps = tslib_1.__assign(tslib_1.__assign({}, base_1.default.defaultProps), { hasBorder: true, isPreview: false, rows: 4, autoHeight: false });
    return TextArea;
}(base_1.default);
exports.default = TextArea;

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var util_1 = __webpack_require__(60);
/**
 * manage dataSource for menu list
 */
var DataStore = /** @class */function () {
    function DataStore(options) {
        this.options = tslib_1.__assign({ filter: util_1.filter, key: undefined, addonKey: false, filterLocal: true, showDataSourceChildren: true }, options);
        // origin data
        this.dataSource = [];
        // current data for menu display
        this.menuDataSource = [];
        // key=>value map for menuDataSource
        this.mapDataSource = {};
        // current data can be select (not disabled) on menu
        this.enabledDataSource = [];
        this.flattenDataSource = [];
    }
    DataStore.prototype.setOptions = function (options) {
        (0, _extends3.default)(this.options, options);
    };
    DataStore.prototype.updateByDS = function (dataSource, isChildren) {
        if (isChildren === void 0) {
            isChildren = false;
        }
        this.dataSource = isChildren ? (0, util_1.parseDataSourceFromChildren)(dataSource) : (0, util_1.normalizeDataSource)(dataSource, 0, this.options.showDataSourceChildren);
        return this.updateAll();
    };
    DataStore.prototype.updateByKey = function (key) {
        if (key === this.options.key) {
            return this.getMenuDS();
        }
        this.options.key = key;
        return this.updateAll();
    };
    DataStore.prototype.getOriginDS = function () {
        return this.dataSource;
    };
    DataStore.prototype.getMenuDS = function () {
        return this.menuDataSource;
    };
    DataStore.prototype.getFlattenDS = function () {
        return this.flattenDataSource;
    };
    DataStore.prototype.getEnableDS = function () {
        return this.enabledDataSource;
    };
    DataStore.prototype.getMapDS = function () {
        return this.mapDataSource;
    };
    DataStore.prototype.updateAll = function () {
        var _this = this;
        var _a = this.options,
            key = _a.key,
            filter = _a.filter,
            filterLocal = _a.filterLocal,
            showDataSourceChildren = _a.showDataSourceChildren;
        this.menuDataSource = (0, util_1.filterDataSource)(this.dataSource, filterLocal ? key : '', filter, this.options.addonKey);
        this.flattenDataSource = showDataSourceChildren ? (0, util_1.flattingDataSource)(this.menuDataSource) : this.menuDataSource;
        this.mapDataSource = {};
        this.flattenDataSource.forEach(function (item) {
            _this.mapDataSource["".concat(item.value)] = item;
        });
        this.enabledDataSource = this.flattenDataSource.filter(function (item) {
            return !item.disabled;
        });
        return this.menuDataSource;
    };
    return DataStore;
}();
exports.default = DataStore;

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var prop_types_1 = __webpack_require__(2);
var react_1 = __webpack_require__(1);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var react_dom_1 = __webpack_require__(8);
var util_1 = __webpack_require__(4);
var NOOP = function NOOP() {};
var MAX_SYNC_UPDATES = 40;
var isEqualSubset = function isEqualSubset(a, b) {
    for (var key in b) {
        if (a[key] !== b[key]) {
            return false;
        }
    }
    return true;
};
var getOffset = function getOffset(el) {
    var offset = el.clientLeft || 0;
    do {
        offset += el.offsetTop || 0;
        el = el.offsetParent;
    } while (el);
    return offset;
};
var constrain = function constrain(from, size, _a) {
    var children = _a.children,
        minSize = _a.minSize;
    var length = children && children.length;
    size = Math.max(size, minSize);
    if (size > length) {
        size = length;
    }
    from = from ? Math.max(Math.min(from, length - size), 0) : 0;
    return { from: from, size: size };
};
/** VirtualList */
var VirtualList = /** @class */function (_super) {
    tslib_1.__extends(VirtualList, _super);
    function VirtualList(props) {
        var _this = _super.call(this, props) || this;
        var jumpIndex = props.jumpIndex;
        var _a = constrain(jumpIndex, 0, props),
            from = _a.from,
            size = _a.size;
        _this.state = { from: from, size: size };
        _this.cache = {};
        _this.cacheAdd = {};
        _this.scrollTo = _this.scrollTo.bind(_this);
        _this.cachedScroll = null;
        _this.unstable = false;
        _this.updateCounter = 0;
        return _this;
    }
    VirtualList.getDerivedStateFromProps = function (nextProps, prevState) {
        var from = prevState.from,
            size = prevState.size;
        return constrain(from, size, nextProps);
    };
    VirtualList.prototype.componentDidMount = function () {
        var jumpIndex = this.props.jumpIndex;
        this.updateFrameAndClearCache = this.updateFrameAndClearCache.bind(this);
        util_1.events.on(window, 'resize', this.updateFrameAndClearCache);
        this.updateFrame(this.scrollTo.bind(this, jumpIndex));
    };
    VirtualList.prototype.componentDidUpdate = function (prevProps) {
        var _this = this;
        var oldIndex = prevProps.jumpIndex;
        var newIndex = this.props.jumpIndex;
        if (oldIndex !== newIndex) {
            this.updateFrame(this.scrollTo.bind(this, newIndex));
        }
        // If the list has reached an unstable state, prevent an infinite loop.
        if (this.unstable) {
            return;
        }
        if (++this.updateCounter > MAX_SYNC_UPDATES) {
            this.unstable = true;
        }
        if (!this.updateCounterTimeoutId) {
            this.updateCounterTimeoutId = setTimeout(function () {
                _this.updateCounter = 0;
                delete _this.updateCounterTimeoutId;
            }, 0);
        }
        this.updateFrame();
    };
    VirtualList.prototype.componentWillUnmount = function () {
        util_1.events.off(window, 'resize', this.updateFrameAndClearCache);
        util_1.events.off(this.scrollParent, 'scroll', this.updateFrameAndClearCache);
        util_1.events.off(this.scrollParent, 'mousewheel', NOOP);
    };
    VirtualList.prototype.maybeSetState = function (b, cb) {
        if (isEqualSubset(this.state, b)) {
            return cb();
        }
        this.setState(b, cb);
    };
    VirtualList.prototype.getEl = function () {
        return this.el || this.items || {};
    };
    VirtualList.prototype.getScrollParent = function () {
        var el = this.getEl();
        el = el.parentElement;
        switch (window.getComputedStyle(el).overflowY) {
            case 'auto':
            case 'scroll':
            case 'overlay':
            case 'visible':
                return el;
        }
        return window;
    };
    VirtualList.prototype.getScroll = function () {
        // Cache scroll position as this causes a forced synchronous layout.
        // if (typeof this.cachedScroll === 'number') {
        //     return this.cachedScroll;
        // }
        var scrollParent = this.scrollParent;
        var scrollKey = 'scrollTop';
        var actual = scrollParent === window ? // Firefox always returns document.body[scrollKey] as 0 and Chrome/Safari
        // always return document.documentElement[scrollKey] as 0, so take
        // whichever has a value.
        document.body[scrollKey] || document.documentElement[scrollKey] : scrollParent[scrollKey];
        var max = this.getScrollSize() - this.getViewportSize();
        var scroll = Math.max(0, Math.min(actual, max));
        var el = this.getEl();
        this.cachedScroll = getOffset(scrollParent) + scroll - getOffset(el);
        return this.cachedScroll;
    };
    VirtualList.prototype.setScroll = function (offset) {
        var scrollParent = this.scrollParent;
        offset += getOffset(this.getEl());
        if (scrollParent === window) {
            return window.scrollTo(0, offset);
        }
        offset -= getOffset(this.scrollParent);
        scrollParent.scrollTop = offset;
    };
    VirtualList.prototype.getViewportSize = function () {
        var scrollParent = this.scrollParent;
        return scrollParent === window ? window.innerHeight : scrollParent.clientHeight;
    };
    VirtualList.prototype.getScrollSize = function () {
        var scrollParent = this.scrollParent;
        var body = document.body,
            documentElement = document.documentElement;
        var key = 'scrollHeight';
        return scrollParent === window ? Math.max(body[key], documentElement[key]) : scrollParent[key];
    };
    VirtualList.prototype.getStartAndEnd = function (threshold) {
        if (threshold === void 0) {
            threshold = this.props.threshold;
        }
        var scroll = this.getScroll();
        var trueScroll = scroll;
        var start = Math.max(0, trueScroll - threshold);
        var end = trueScroll + this.getViewportSize() + threshold;
        return { start: start, end: end };
    };
    // Called by 'scroll' and 'resize' events, clears scroll position cache.
    VirtualList.prototype.updateFrameAndClearCache = function (cb) {
        this.cachedScroll = null;
        return this.updateFrame(cb);
    };
    VirtualList.prototype.updateFrame = function (cb) {
        this.updateScrollParent();
        if (typeof cb !== 'function') {
            cb = NOOP;
        }
        return this.updateVariableFrame(cb);
    };
    VirtualList.prototype.updateScrollParent = function () {
        var prev = this.scrollParent;
        this.scrollParent = this.getScrollParent();
        if (prev === this.scrollParent) {
            return;
        }
        if (prev) {
            util_1.events.off(prev, 'scroll', this.updateFrameAndClearCache);
            util_1.events.off(prev, 'mousewheel', NOOP);
        }
        util_1.events.on(this.scrollParent, 'scroll', this.updateFrameAndClearCache);
        util_1.events.on(this.scrollParent, 'mousewheel', NOOP);
        // You have to attach mousewheel listener to the scrollable element.
        // Just an empty listener. After that onscroll events will be fired synchronously.
    };
    VirtualList.prototype.updateVariableFrame = function (cb) {
        if (!this.props.itemSizeGetter) {
            this.cacheSizes();
        }
        var _a = this.getStartAndEnd(),
            start = _a.start,
            end = _a.end;
        var _b = this.props,
            pageSize = _b.pageSize,
            children = _b.children;
        var length = children.length;
        var space = 0;
        var from = 0;
        var size = 0;
        var maxFrom = length - 1;
        while (from < maxFrom) {
            var itemSize = this.getSizeOf(from);
            if (itemSize === null || itemSize === undefined || space + itemSize > start) {
                break;
            }
            space += itemSize;
            ++from;
        }
        var maxSize = length - from;
        while (size < maxSize && space < end) {
            var itemSize = this.getSizeOf(from + size);
            if (itemSize === null || itemSize === undefined) {
                size = Math.min(size + pageSize, maxSize);
                break;
            }
            space += itemSize;
            ++size;
        }
        this.maybeSetState({ from: from, size: size }, cb);
    };
    VirtualList.prototype.getSpaceBefore = function (index, cache) {
        if (cache === void 0) {
            cache = {};
        }
        if (!index) {
            return 0;
        }
        if (cache[index] !== null && cache[index] !== undefined) {
            return cache[index] || 0;
        }
        // Find the closest space to index there is a cached value for.
        var from = index;
        while (from > 0 && (cache[from] === null || cache[from] === undefined)) {
            from--;
        }
        // Finally, accumulate sizes of items from - index.
        var space = cache[from] || 0;
        for (var i = from; i < index; ++i) {
            cache[i] = space;
            var itemSize = this.getSizeOf(i);
            if (itemSize === null || itemSize === undefined) {
                break;
            }
            space += itemSize;
        }
        cache[index] = space;
        return cache[index] || 0;
    };
    VirtualList.prototype.cacheSizes = function () {
        var cache = this.cache;
        var from = this.state.from;
        var _a = this.items,
            children = _a.children,
            _b = _a.props,
            props = _b === void 0 ? {} : _b;
        var itemEls = children || props.children || [];
        try {
            // <Select useVirtual /> 模式下，在快速点击切换Tab的情况下（Select实例快速出现、消失） 有时会出现this.items不存在，导致页面报错。怀疑是Select的异步timer渲染逻辑引起的
            for (var i = 0, l = itemEls.length; i < l; ++i) {
                var ulRef = (0, react_dom_1.findDOMNode)(this.items);
                var height = ulRef.children[i].offsetHeight;
                if (height > 0) {
                    cache[from + i] = height;
                }
            }
        } catch (error) {
            // ...
        }
    };
    VirtualList.prototype.getSizeOf = function (index) {
        var cache = this.cache;
        var _a = this.props,
            itemSizeGetter = _a.itemSizeGetter,
            jumpIndex = _a.jumpIndex;
        // Try the cache.
        if (index in cache) {
            return cache[index];
        }
        if (itemSizeGetter) {
            return itemSizeGetter(index);
        }
        if (!this.defaultItemHeight && jumpIndex > -1) {
            var keysList = Object.keys(this.cache);
            var len = keysList.length;
            var height = this.cache[len - 1];
            this.defaultItemHeight = height;
        }
        if (this.defaultItemHeight) {
            return this.defaultItemHeight;
        }
    };
    VirtualList.prototype.scrollTo = function (index) {
        this.setScroll(this.getSpaceBefore(index, this.cacheAdd));
    };
    VirtualList.prototype.renderMenuItems = function () {
        var _this = this;
        var _a = this.props,
            children = _a.children,
            itemsRenderer = _a.itemsRenderer;
        var _b = this.state,
            from = _b.from,
            size = _b.size;
        var items = [];
        for (var i = 0; i < size; ++i) {
            items.push(children[from + i]);
        }
        return itemsRenderer(items, function (c) {
            _this.items = c;
            return _this.items;
        });
    };
    VirtualList.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props,
            _c = _b.children,
            children = _c === void 0 ? [] : _c,
            prefix = _b.prefix,
            className = _b.className;
        var length = children.length;
        var from = this.state.from;
        var items = this.renderMenuItems();
        var style = { position: 'relative' };
        var size = this.getSpaceBefore(length, {});
        if (size) {
            style.height = size;
        }
        var offset = this.getSpaceBefore(from, this.cacheAdd);
        var transform = "translate(0px, ".concat(offset, "px)");
        var listStyle = {
            msTransform: transform,
            WebkitTransform: transform,
            transform: transform
        };
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "virtual-list-wrapper")] = true, _a[className] = !!className, _a));
        return react_1.default.createElement("div", { className: cls, style: style, ref: function ref(c) {
                _this.el = c;
                return _this.el;
            } }, react_1.default.createElement("div", { style: listStyle }, items));
    };
    VirtualList.displayName = 'VirtualList';
    VirtualList.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 渲染的子节点
         */
        children: prop_types_1.default.any,
        /**
         * 最小加载数量
         */
        minSize: prop_types_1.default.number,
        /**
         * 一屏数量
         */
        pageSize: prop_types_1.default.number,
        /**
         * 父渲染函数，默认为 (items, ref) => <ul ref={ref}>{items}</ul>
         */
        itemsRenderer: prop_types_1.default.func,
        /**
         * 缓冲区高度
         */
        threshold: prop_types_1.default.number,
        /**
         * 获取item高度的函数
         */
        itemSizeGetter: prop_types_1.default.func,
        /**
         * 设置跳转位置，需要设置 itemSizeGetter 才能生效, 不设置认为元素等高并取第一个元素高度作为默认高
         */
        jumpIndex: prop_types_1.default.number,
        className: prop_types_1.default.string
    };
    VirtualList.defaultProps = {
        prefix: 'next-',
        itemsRenderer: function itemsRenderer(items, ref) {
            return react_1.default.createElement("ul", { ref: ref }, items);
        },
        minSize: 1,
        pageSize: 10,
        jumpIndex: 0,
        threshold: 100
    };
    return VirtualList;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(VirtualList);

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var util_1 = __webpack_require__(4);
var input_1 = __webpack_require__(15);
var base_1 = __webpack_require__(150);
var bindCtx = util_1.func.bindCtx,
    noop = util_1.func.noop;
/**
 * Select.AutoComplete
 */
var AutoComplete = /** @class */function (_super) {
    tslib_1.__extends(AutoComplete, _super);
    function AutoComplete(props) {
        var _this = _super.call(this, props) || this;
        _this.handleChange = function (value, proxy, item) {
            var _a = _this.props,
                disabled = _a.disabled,
                readOnly = _a.readOnly,
                filterLocal = _a.filterLocal;
            if (disabled || readOnly) {
                return false;
            }
            var actionType = typeof proxy === 'string' ? proxy : 'change';
            _this.isInputing = actionType === 'change';
            if (filterLocal) {
                _this.setState({
                    dataSource: _this.dataStore.updateByKey(value)
                });
                _this.shouldControlPopup(_this.props, actionType);
                _this.setFirstHightLightKeyForMenu(value);
            }
            // 非受控模式清空内部数据
            if (!('value' in _this.props)) {
                _this.setState({
                    value: value
                });
            }
            // 不自动高亮的情况下, highlightKey 根据value精确值走，也就是被选中元素自动高亮，这样也不会影响不在选项内的用户搜索操作
            if (!_this.props.autoHighlightFirstItem) {
                _this.setState({
                    highlightKey: value
                });
            }
            _this.props.onChange(value, actionType, item);
            if (actionType === 'itemClick' || actionType === 'enter') {
                // 点击 item 的时候不会触发关闭，需要手动关闭，其它类型比如 keyDown 等都会有其它事件句柄处理
                _this.setVisible(false, actionType);
            }
        };
        _this.isAutoComplete = true;
        _this.isInputing = false;
        _this.dataStore.setOptions({ key: _this.state.value });
        (0, _extends3.default)(_this.state, {
            dataSource: _this.setDataSource(props)
        });
        bindCtx(_this, ['handleTriggerKeyDown', 'handleMenuSelect', 'handleItemClick']);
        return _this;
    }
    AutoComplete.getDerivedStateFromProps = function (nextProps, prevState) {
        var state = {};
        if ('value' in nextProps && nextProps.value !== prevState.value) {
            (0, _extends3.default)(state, {
                value: nextProps.value
            });
        }
        if ('visible' in nextProps && nextProps.visible !== prevState.visible) {
            (0, _extends3.default)(state, {
                visible: nextProps.visible
            });
        }
        if (Object.keys(state).length) {
            return state;
        }
        return null;
    };
    AutoComplete.prototype.componentDidUpdate = function (prevProps, prevState) {
        var props = this.props;
        if ('value' in props) {
            this.dataStore.setOptions({ key: props.value });
        }
        if (props.filter !== prevProps.filter) {
            this.dataStore.setOptions({
                filter: props.filter
            });
        }
        if (props.filterLocal !== prevProps.filterLocal) {
            this.dataStore.setOptions({
                filterLocal: props.filterLocal
            });
        }
        if (prevProps.children !== props.children || prevProps.dataSource !== props.dataSource) {
            /* eslint-disable react/no-did-update-set-state */
            this.setState({
                dataSource: this.setDataSource(props)
            });
            // remote dataSource and focused
            // 因为autoComplete没有下拉数据不展示，搜索并且有数据了需要自动展示下拉
            if (!props.filterLocal && this.isInputing) {
                this.shouldControlPopup(props, 'update');
            }
            if (!props.filterLocal && !props.popupContent) {
                this.setFirstHightLightKeyForMenu();
            }
        }
    };
    AutoComplete.prototype.shouldControlPopup = function (props, type) {
        if (props === void 0) {
            props = this.props;
        }
        var hasPopup = props.popupContent || this.dataStore.getMenuDS().length;
        if (hasPopup) {
            this.setVisible(true, type);
        } else {
            this.setVisible(false, type);
        }
    };
    AutoComplete.prototype.handleMenuSelect = function (keys) {
        var key = keys[0];
        var mapDS = this.dataStore.getMapDS();
        if (key in mapDS) {
            var item = mapDS[key];
            this.handleSelectEvent(key, item, 'itemClick');
        }
    };
    AutoComplete.prototype.handleItemClick = function () {
        this.setVisible(false, 'itemClick');
    };
    AutoComplete.prototype.handleSelectEvent = function (key, item, triggerType) {
        var value = item && item[this.props.fillProps] || key;
        if (triggerType === 'itemClick' || triggerType === 'enter') {
            // 点击 item 的时候不会触发关闭，需要手动关闭，其它类型比如 keyDown 等都会有其它事件句柄处理
            this.setVisible(false, triggerType);
        }
        this.handleChange(value, triggerType, item);
    };
    AutoComplete.prototype.handleVisibleChange = function (visible, type) {
        if (!('visible' in this.props) && visible && !this.props.popupContent && !this.dataStore.getMenuDS().length) {
            return;
        }
        this.setVisible(visible, type);
    };
    AutoComplete.prototype.beforeClose = function () {
        this.isInputing = false;
    };
    /**
     * Handle trigger keydown event
     * @param {Event} e
     */
    AutoComplete.prototype.handleTriggerKeyDown = function (e) {
        var _a = this.props,
            popupContent = _a.popupContent,
            onToggleHighlightItem = _a.onToggleHighlightItem,
            onKeyDown = _a.onKeyDown;
        if (popupContent) {
            e.stopPropagation(); //stopPropagation can make use onChange triggerd while typing space('') in Input
            return onKeyDown(e);
        }
        switch (e.keyCode) {
            case util_1.KEYCODE.UP:
                e.preventDefault();
                onToggleHighlightItem(this.toggleHighlightItem(-1, e), 'up');
                break;
            case util_1.KEYCODE.DOWN:
                e.preventDefault();
                onToggleHighlightItem(this.toggleHighlightItem(1, e), 'down');
                break;
            case util_1.KEYCODE.ENTER:
                e.preventDefault();
                this.chooseHighlightItem(e);
                break;
            case util_1.KEYCODE.SPACE:
                // stopPropagation can make use onChange triggerd while typing space('') in Input
                e.stopPropagation();
                break;
            case util_1.KEYCODE.ESC:
                e.preventDefault();
                this.state.visible && this.setVisible(false, 'esc');
                break;
            default:
                break;
        }
        onKeyDown(e);
    };
    // 回车 选择高亮的 item
    AutoComplete.prototype.chooseHighlightItem = function () {
        if (!this.state.visible) {
            return false;
        }
        var highlightKey = this.state.highlightKey;
        var highlightItem = this.dataStore.getEnableDS().find(function (item) {
            return highlightKey === "".concat(item.value);
        });
        if (highlightItem) {
            this.handleSelectEvent(highlightKey, highlightItem, 'enter');
        }
    };
    AutoComplete.prototype.hasClear = function () {
        var _a = this.props,
            hasClear = _a.hasClear,
            readOnly = _a.readOnly,
            disabled = _a.disabled;
        var value = this.state.value;
        return value && hasClear && !readOnly && !disabled;
    };
    /**
     * 选择器
     * @override
     * @param {object} props
     */
    AutoComplete.prototype.renderSelect = function (props) {
        var _a;
        if (props === void 0) {
            props = this.props;
        }
        var placeholder = props.placeholder,
            size = props.size,
            prefix = props.prefix,
            className = props.className,
            style = props.style,
            label = props.label,
            readOnly = props.readOnly,
            disabled = props.disabled,
            highlightHolder = props.highlightHolder,
            locale = props.locale,
            hasClear = props.hasClear,
            state = props.state,
            rtl = props.rtl;
        var others = util_1.obj.pickOthers(AutoComplete.propTypes, props);
        var othersData = util_1.obj.pickAttrsWith(others, 'data-');
        var value = this.state.value;
        var visible = this.state.visible;
        // // 下拉箭头
        // const arrowNode = this.renderArrowNode(props, () => {
        //     this.focusInput();
        //     this.setVisible(!this.state.visible);
        // });
        // trigger className
        var triggerClazz = (0, classnames_1.default)(["".concat(prefix, "select"), "".concat(prefix, "select-auto-complete"), "".concat(prefix, "size-").concat(size), className], (_a = {}, _a["".concat(prefix, "active")] = visible, _a["".concat(prefix, "disabled")] = disabled, _a));
        // highlightKey into placeholder
        // compatible with selectPlaceHolder. TODO: removed in 2.0 version
        var _placeholder = placeholder || locale.autoCompletePlaceholder || locale.autoCompletePlaceHolder;
        if (highlightHolder && visible) {
            _placeholder = this.state.highlightKey || _placeholder;
        }
        // Input props
        var _inputProps = tslib_1.__assign(tslib_1.__assign({}, util_1.obj.pickOthers(othersData, others)), { state: state, ref: this.saveInputRef, hasClear: hasClear, value: value, size: size, disabled: disabled, readOnly: readOnly, placeholder: _placeholder, label: label,
            // extra: arrowNode,
            onChange: this.handleChange, onKeyDown: this.handleTriggerKeyDown });
        return react_1.default.createElement("span", tslib_1.__assign({}, othersData, { className: triggerClazz, style: style, dir: rtl ? 'rtl' : undefined, ref: this.saveSelectRef, onClick: this.focusInput }), react_1.default.createElement(input_1.default, tslib_1.__assign({ role: "combobox", "aria-autocomplete": "list", "aria-disabled": disabled, "aria-expanded": this.state.visible }, _inputProps)), react_1.default.createElement("span", { className: "".concat(prefix, "sr-only"), "aria-live": "polite" }, this.state.srReader));
    };
    AutoComplete.prototype.render = function () {
        var _this = this;
        if (this.hasClear()) {
            // clear 按钮点击后，会在 dom 结构中被删除掉，需要将其额外设置为安全节点，防止触发弹层的显示或隐藏
            var safeNode = this.props.popupProps.safeNode || [];
            var safeNodes = Array.isArray(safeNode) ? safeNode : [safeNode];
            safeNodes.push(function () {
                return _this.clearNode;
            });
            this.props.popupProps.safeNode = safeNodes;
        }
        return _super.prototype.render.call(this, (0, _extends3.default)({}, this.props, { canCloseByTrigger: false }));
    };
    AutoComplete.propTypes = tslib_1.__assign(tslib_1.__assign({}, base_1.default.propTypes), {
        /**
         * 当前值，用于受控模式
         */
        value: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        /**
         * 初始化的默认值
         */
        defaultValue: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        /**
         * Select发生改变时触发的回调
         * @param {*} value 选中的值
         * @param {String} actionType 触发的方式, 'itemClick', 'enter', 'change'
         * @param {*} item 选中的值的对象数据
         */
        onChange: prop_types_1.default.func,
        /**
         * 传入的数据源，可以动态渲染子项
         */
        dataSource: prop_types_1.default.arrayOf(prop_types_1.default.oneOfType([prop_types_1.default.shape({
            value: prop_types_1.default.string,
            label: prop_types_1.default.any,
            disabled: prop_types_1.default.bool,
            children: prop_types_1.default.array
        }), prop_types_1.default.string])),
        /**
         * 填充到选择框里的值的 key，默认是 value
         */
        fillProps: prop_types_1.default.string,
        /**
         * 渲染 MenuItem 内容的方法
         * @param {Object} item 渲染节点的 item
         * @return {ReactNode} item node
         */
        itemRender: prop_types_1.default.func,
        // input keydown
        onKeyDown: prop_types_1.default.func,
        // 是否将当前高亮的选项作为 placeholder
        highlightHolder: prop_types_1.default.bool, style: prop_types_1.default.object });
    AutoComplete.defaultProps = tslib_1.__assign(tslib_1.__assign({}, base_1.default.defaultProps), { onKeyDown: noop, fillProps: 'value' });
    return AutoComplete;
}(base_1.default);
exports.default = (0, react_lifecycles_compat_1.polyfill)(AutoComplete);

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
/* istanbul ignore file */
/**
 * Select.Option
 */
var Option = /** @class */function (_super) {
    tslib_1.__extends(Option, _super);
    function Option() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Option.prototype.render = function () {
        return this.props.children;
    };
    Option.propTypes = {
        /**
         * 选项值
         */
        value: prop_types_1.default.any.isRequired,
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        children: prop_types_1.default.any
    };
    Option._typeMark = 'next_select_option';
    return Option;
}(react_1.default.Component);
exports.default = Option;

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
/* istanbul ignore file */
/**
 * Select.OptionGroup
 */
var OptionGroup = /** @class */function (_super) {
    tslib_1.__extends(OptionGroup, _super);
    function OptionGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OptionGroup.prototype.render = function () {
        return this.props.children;
    };
    OptionGroup.propTypes = {
        /**
         * 设置分组的文案
         */
        label: prop_types_1.default.node,
        children: prop_types_1.default.any
    };
    OptionGroup._typeMark = 'next_select_option_group';
    return OptionGroup;
}(react_1.default.Component);
exports.default = OptionGroup;

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
/* istanbul ignore file */
var react_1 = __webpack_require__(1);
var icon_1 = __webpack_require__(7);
var dropdown_1 = __webpack_require__(43);
var menu_1 = __webpack_require__(151);
var utils_1 = __webpack_require__(19);
/* eslint-disable */
var DatePanelHeader = /** @class */function (_super) {
    tslib_1.__extends(DatePanelHeader, _super);
    function DatePanelHeader() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.selectContainerHandler = function (target) {
            return target.parentNode;
        };
        _this.onYearChange = function (year) {
            var _a = _this.props,
                visibleMonth = _a.visibleMonth,
                changeVisibleMonth = _a.changeVisibleMonth;
            changeVisibleMonth(visibleMonth.clone().year(year), 'yearSelect');
        };
        _this.changeVisibleMonth = function (month) {
            var _a = _this.props,
                visibleMonth = _a.visibleMonth,
                changeVisibleMonth = _a.changeVisibleMonth;
            changeVisibleMonth(visibleMonth.clone().month(month), 'monthSelect');
        };
        return _this;
    }
    DatePanelHeader.prototype.render = function () {
        var _this = this;
        var _a = this.props,
            prefix = _a.prefix,
            visibleMonth = _a.visibleMonth,
            momentLocale = _a.momentLocale,
            locale = _a.locale,
            changeMode = _a.changeMode,
            goNextMonth = _a.goNextMonth,
            goNextYear = _a.goNextYear,
            goPrevMonth = _a.goPrevMonth,
            goPrevYear = _a.goPrevYear,
            disableChangeMode = _a.disableChangeMode,
            yearRangeOffset = _a.yearRangeOffset,
            _b = _a.yearRange,
            yearRange = _b === void 0 ? [] : _b;
        var localedMonths = momentLocale.months();
        var monthLabel = localedMonths[visibleMonth.month()];
        var yearLabel = visibleMonth.year();
        var btnCls = "".concat(prefix, "calendar-btn");
        var monthButton = react_1.default.createElement("button", { role: "button", type: "button", className: btnCls, title: monthLabel, onClick: function onClick() {
                return changeMode('month', 'start');
            } }, monthLabel);
        var yearButton = react_1.default.createElement("button", { role: "button", type: "button", className: btnCls, title: yearLabel, onClick: function onClick() {
                return changeMode('year', 'start');
            } }, yearLabel);
        if (disableChangeMode) {
            var months = (0, utils_1.getMonths)(momentLocale);
            var years = (0, utils_1.getYears)(yearRange, yearRangeOffset, visibleMonth.year());
            monthButton = react_1.default.createElement(dropdown_1.default, { align: "tc bc", container: this.selectContainerHandler, trigger: react_1.default.createElement("button", { role: "button", type: "button", className: btnCls, title: monthLabel }, monthLabel, react_1.default.createElement(icon_1.default, { type: "arrow-down" })), triggerType: "click" }, react_1.default.createElement(menu_1.default, { prefix: prefix, value: visibleMonth.month(), dataSource: months, onChange: function onChange(value) {
                    return _this.changeVisibleMonth(value);
                } }));
            yearButton = react_1.default.createElement(dropdown_1.default, { align: "tc bc", container: this.selectContainerHandler, trigger: react_1.default.createElement("button", { role: "button", type: "button", className: btnCls, title: yearLabel }, yearLabel, react_1.default.createElement(icon_1.default, { type: "arrow-down" })), triggerType: "click" }, react_1.default.createElement(menu_1.default, { prefix: prefix, value: visibleMonth.year(), dataSource: years, onChange: this.onYearChange }));
        }
        return react_1.default.createElement("div", { className: "".concat(prefix, "calendar-panel-header") }, react_1.default.createElement("button", { role: "button", type: "button", title: locale.prevYear, className: "".concat(btnCls, " ").concat(btnCls, "-prev-year"), onClick: goPrevYear }, react_1.default.createElement(icon_1.default, { type: "arrow-double-left", className: "".concat(prefix, "calendar-symbol-prev-super") })), react_1.default.createElement("button", { role: "button", type: "button", title: locale.prevMonth, className: "".concat(btnCls, " ").concat(btnCls, "-prev-month"), onClick: goPrevMonth }, react_1.default.createElement(icon_1.default, { type: "arrow-left", className: "".concat(prefix, "calendar-symbol-prev") })), react_1.default.createElement("div", { className: "".concat(prefix, "calendar-panel-header-full") }, monthButton, yearButton), react_1.default.createElement("button", { role: "button", type: "button", title: locale.nextMonth, className: "".concat(btnCls, " ").concat(btnCls, "-next-month"), onClick: goNextMonth }, react_1.default.createElement(icon_1.default, { type: "arrow-right", className: "".concat(prefix, "calendar-symbol-next") })), react_1.default.createElement("button", { role: "button", type: "button", title: locale.nextYear, className: "".concat(btnCls, " ").concat(btnCls, "-next-year"), onClick: goNextYear }, react_1.default.createElement(icon_1.default, { type: "arrow-double-right", className: "".concat(prefix, "calendar-symbol-next-super") })));
    };
    DatePanelHeader.defaultProps = {
        yearRangeOffset: 10
    };
    return DatePanelHeader;
}(react_1.default.PureComponent);
exports.default = DatePanelHeader;

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var utils_1 = __webpack_require__(19);
var DateTableHead = /** @class */function (_super) {
    tslib_1.__extends(DateTableHead, _super);
    function DateTableHead() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DateTableHead.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            momentLocale = _a.momentLocale;
        var firstDayOfWeek = momentLocale.firstDayOfWeek();
        var weekdaysShort = momentLocale.weekdaysShort();
        var elements = [];
        for (var i = 0; i < utils_1.DAYS_OF_WEEK; i++) {
            var index = (firstDayOfWeek + i) % utils_1.DAYS_OF_WEEK;
            elements.push(react_1.default.createElement("th", { key: i, className: "".concat(prefix, "calendar-th"), role: "cell" }, weekdaysShort[index]));
        }
        return react_1.default.createElement("thead", { className: "".concat(prefix, "calendar-thead"), role: "rowgroup" }, react_1.default.createElement("tr", { role: "row" }, elements));
    };
    return DateTableHead;
}(react_1.PureComponent);
exports.default = DateTableHead;

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
/* istanbul ignore file */
var react_1 = __webpack_require__(1);
var icon_1 = __webpack_require__(7);
var dropdown_1 = __webpack_require__(43);
var menu_1 = __webpack_require__(151);
var utils_1 = __webpack_require__(19);
/* eslint-disable */
var RangePanelHeader = /** @class */function (_super) {
    tslib_1.__extends(RangePanelHeader, _super);
    function RangePanelHeader() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.selectContainerHandler = function (target) {
            return target.parentNode;
        };
        _this.onYearChange = function (visibleMonth, year, tag) {
            var changeVisibleMonth = _this.props.changeVisibleMonth;
            var startYear = visibleMonth.clone().year(year).add(tag === 'end' ? -1 : 0, 'month');
            changeVisibleMonth(startYear, 'yearSelect');
        };
        _this.changeVisibleMonth = function (visibleMonth, month, tag) {
            var changeVisibleMonth = _this.props.changeVisibleMonth;
            var startMonth = tag === 'end' ? month - 1 : month;
            changeVisibleMonth(visibleMonth.clone().month(startMonth), 'monthSelect');
        };
        return _this;
    }
    RangePanelHeader.prototype.render = function () {
        var _this = this;
        var _a = this.props,
            prefix = _a.prefix,
            startVisibleMonth = _a.startVisibleMonth,
            endVisibleMonth = _a.endVisibleMonth,
            _b = _a.yearRange,
            yearRange = _b === void 0 ? [] : _b,
            yearRangeOffset = _a.yearRangeOffset,
            momentLocale = _a.momentLocale,
            locale = _a.locale,
            changeMode = _a.changeMode,
            goNextMonth = _a.goNextMonth,
            goNextYear = _a.goNextYear,
            goPrevMonth = _a.goPrevMonth,
            goPrevYear = _a.goPrevYear,
            disableChangeMode = _a.disableChangeMode;
        var localedMonths = momentLocale.months();
        var startMonthLabel = localedMonths[startVisibleMonth.month()];
        var endMonthLabel = localedMonths[endVisibleMonth.month()];
        var startYearLabel = startVisibleMonth.year();
        var endYearLabel = endVisibleMonth.year();
        var btnCls = "".concat(prefix, "calendar-btn");
        var months = (0, utils_1.getMonths)(momentLocale);
        var startYears = (0, utils_1.getYears)(yearRange, yearRangeOffset, startVisibleMonth.year());
        var endYears = (0, utils_1.getYears)(yearRange, yearRangeOffset, endVisibleMonth.year());
        return react_1.default.createElement("div", { className: "".concat(prefix, "calendar-panel-header") }, react_1.default.createElement("button", { role: "button", type: "button", title: locale.prevYear, className: "".concat(btnCls, " ").concat(btnCls, "-prev-year"), onClick: goPrevYear }, react_1.default.createElement(icon_1.default, { type: "arrow-double-left", className: "".concat(prefix, "calendar-symbol-prev-super") })), react_1.default.createElement("button", { role: "button", type: "button", title: locale.prevMonth, className: "".concat(btnCls, " ").concat(btnCls, "-prev-month"), onClick: goPrevMonth }, react_1.default.createElement(icon_1.default, { type: "arrow-left", className: "".concat(prefix, "calendar-symbol-prev") })), react_1.default.createElement("div", { className: "".concat(prefix, "calendar-panel-header-left") }, disableChangeMode ? react_1.default.createElement(dropdown_1.default, { align: "tc bc", container: this.selectContainerHandler, trigger: react_1.default.createElement("button", { role: "button", type: "button", className: btnCls, title: startMonthLabel }, startMonthLabel, react_1.default.createElement(icon_1.default, { type: "arrow-down" })), triggerType: "click" }, react_1.default.createElement(menu_1.default, { prefix: prefix, value: startVisibleMonth.month(), dataSource: months, onChange: function onChange(value) {
                return _this.changeVisibleMonth(startVisibleMonth, value, 'start');
            } })) : react_1.default.createElement("button", { role: "button", type: "button", title: startMonthLabel, className: btnCls, onClick: function onClick() {
                return changeMode('month', 'start');
            } }, startMonthLabel), disableChangeMode ? react_1.default.createElement(dropdown_1.default, { align: "tc bc", container: this.selectContainerHandler, trigger: react_1.default.createElement("button", { role: "button", type: "button", className: btnCls, title: startYearLabel }, startYearLabel, react_1.default.createElement(icon_1.default, { type: "arrow-down" })), triggerType: "click" }, react_1.default.createElement(menu_1.default, { prefix: prefix, value: startVisibleMonth.year(), dataSource: startYears, onChange: function onChange(v) {
                return _this.onYearChange(startVisibleMonth, v, 'start');
            } })) : react_1.default.createElement("button", { role: "button", type: "button", title: startYearLabel, className: btnCls, onClick: function onClick() {
                return changeMode('year', 'start');
            } }, startYearLabel)), react_1.default.createElement("div", { className: "".concat(prefix, "calendar-panel-header-right") }, disableChangeMode ? react_1.default.createElement(dropdown_1.default, { align: "tc bc", container: this.selectContainerHandler, trigger: react_1.default.createElement("button", { role: "button", type: "button", className: btnCls, title: endMonthLabel }, endMonthLabel, react_1.default.createElement(icon_1.default, { type: "arrow-down" })), triggerType: "click" }, react_1.default.createElement(menu_1.default, { prefix: prefix, value: endVisibleMonth.month(), dataSource: months, onChange: function onChange(value) {
                return _this.changeVisibleMonth(endVisibleMonth, value, 'end');
            } })) : react_1.default.createElement("button", { role: "button", type: "button", title: endMonthLabel, className: btnCls, onClick: function onClick() {
                return changeMode('month', 'end');
            } }, endMonthLabel), disableChangeMode ? react_1.default.createElement(dropdown_1.default, { align: "tc bc", container: this.selectContainerHandler, trigger: react_1.default.createElement("button", { role: "button", type: "button", className: btnCls, title: endYearLabel }, endYearLabel, react_1.default.createElement(icon_1.default, { type: "arrow-down" })), triggerType: "click" }, react_1.default.createElement(menu_1.default, { prefix: prefix, value: endVisibleMonth.year(), dataSource: endYears, onChange: function onChange(v) {
                return _this.onYearChange(endVisibleMonth, v, 'end');
            } })) : react_1.default.createElement("button", { role: "button", type: "button", title: endYearLabel, className: btnCls, onClick: function onClick() {
                return changeMode('year', 'end');
            } }, endYearLabel)), react_1.default.createElement("button", { role: "button", type: "button", title: locale.nextMonth, className: "".concat(btnCls, " ").concat(btnCls, "-next-month"), onClick: goNextMonth }, react_1.default.createElement(icon_1.default, { type: "arrow-right", className: "".concat(prefix, "calendar-symbol-next") })), react_1.default.createElement("button", { role: "button", type: "button", title: locale.nextYear, className: "".concat(btnCls, " ").concat(btnCls, "-next-year"), onClick: goNextYear }, react_1.default.createElement(icon_1.default, { type: "arrow-double-right", className: "".concat(prefix, "calendar-symbol-next-super") })));
    };
    RangePanelHeader.defaultProps = {
        yearRangeOffset: 10
    };
    return RangePanelHeader;
}(react_1.default.PureComponent);
exports.default = RangePanelHeader;

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var card_1 = __webpack_require__(311);
var header_1 = __webpack_require__(312);
var bullet_header_1 = __webpack_require__(158);
var media_1 = __webpack_require__(160);
var divider_1 = __webpack_require__(313);
var content_1 = __webpack_require__(314);
var collapse_content_1 = __webpack_require__(159);
var actions_1 = __webpack_require__(161);
card_1.default.Header = header_1.default;
card_1.default.Media = media_1.default;
card_1.default.Divider = divider_1.default;
card_1.default.Content = content_1.default;
card_1.default.Actions = actions_1.default;
card_1.default.BulletHeader = bullet_header_1.default;
card_1.default.CollaspeContent = collapse_content_1.default;
card_1.default.CollapseContent = collapse_content_1.default;
exports.default = config_provider_1.default.config(card_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('titlePrefixLine' in props) {
            deprecated('titlePrefixLine', 'showTitleBullet', 'Card');
            var titlePrefixLine = props.titlePrefixLine,
                others = tslib_1.__rest(props, ["titlePrefixLine"]);
            props = tslib_1.__assign({ showTitleBullet: titlePrefixLine }, others);
        }
        if ('titleBottomLine' in props) {
            deprecated('titleBottomLine', 'showHeadDivider', 'Card');
            var titleBottomLine = props.titleBottomLine,
                others = tslib_1.__rest(props, ["titleBottomLine"]);
            props = tslib_1.__assign({ showHeadDivider: titleBottomLine }, others);
        }
        if ('bodyHeight' in props) {
            deprecated('bodyHeight', 'contentHeight', 'Card');
            var bodyHeight = props.bodyHeight,
                others = tslib_1.__rest(props, ["bodyHeight"]);
            props = tslib_1.__assign({ contentHeight: bodyHeight }, others);
        }
        return props;
    }
});

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
/* eslint-disable valid-jsdoc */
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var bullet_header_1 = __webpack_require__(158);
var collapse_content_1 = __webpack_require__(159);
var media_1 = __webpack_require__(160);
var actions_1 = __webpack_require__(161);
var util_1 = __webpack_require__(4);
var pickOthers = util_1.obj.pickOthers;
/**
 * Card
 * @order 0
 */
var Card = /** @class */function (_super) {
  tslib_1.__extends(Card, _super);
  function Card() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Card.prototype.render = function () {
    var _a;
    var _b = this.props,
        prefix = _b.prefix,
        className = _b.className,
        title = _b.title,
        subTitle = _b.subTitle,
        extra = _b.extra,
        showTitleBullet = _b.showTitleBullet,
        showHeadDivider = _b.showHeadDivider,
        children = _b.children,
        rtl = _b.rtl,
        contentHeight = _b.contentHeight,
        free = _b.free,
        actions = _b.actions,
        hasBorder = _b.hasBorder,
        media = _b.media;
    var cardCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "card")] = true, _a["".concat(prefix, "card-free")] = free, _a["".concat(prefix, "card-noborder")] = !hasBorder, _a["".concat(prefix, "card-show-divider")] = showHeadDivider, _a["".concat(prefix, "card-hide-divider")] = !showHeadDivider, _a), className);
    var others = pickOthers(Object.keys(Card.propTypes), this.props);
    others.dir = rtl ? 'rtl' : undefined;
    return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: cardCls }), media && react_1.default.createElement(media_1.default, null, media), react_1.default.createElement(bullet_header_1.default, { title: title, subTitle: subTitle, extra: extra, showTitleBullet: showTitleBullet }), free ? children : react_1.default.createElement(collapse_content_1.default, { contentHeight: contentHeight }, children), actions && react_1.default.createElement(actions_1.default, null, actions));
  };
  Card.displayName = 'Card';
  Card.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, rtl: prop_types_1.default.bool,
    /**
     * 卡片的上的图片 / 视频
     */
    media: prop_types_1.default.node,
    /**
     * 卡片的标题
     */
    title: prop_types_1.default.node,
    /**
     * 卡片的副标题
     */
    subTitle: prop_types_1.default.node,
    /**
     * 卡片操作组，位置在卡片底部
     */
    actions: prop_types_1.default.node,
    /**
     * 是否显示标题的项目符号
     */
    showTitleBullet: prop_types_1.default.bool,
    /**
     * 是否展示头部的分隔线
     */
    showHeadDivider: prop_types_1.default.bool,
    /**
     * 内容区域的固定高度
     */
    contentHeight: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    /**
     * 标题区域的用户自定义内容
     */
    extra: prop_types_1.default.node,
    /**
     * 是否开启自由模式，开启后card 将使用子组件配合使用, 设置此项后 title, subtitle, 等等属性都将失效
     */
    free: prop_types_1.default.bool,
    /**
     * 是否带边框
     * @version 1.24
     */
    hasBorder: prop_types_1.default.bool, className: prop_types_1.default.string, children: prop_types_1.default.node });
  Card.defaultProps = {
    prefix: 'next-',
    free: false,
    showTitleBullet: true,
    showHeadDivider: true,
    hasBorder: true,
    contentHeight: 120
  };
  return Card;
}(react_1.default.Component);
exports.default = Card;

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
/**
 * Card.Header
 * @order 2
 */
var CardHeader = /** @class */function (_super) {
    tslib_1.__extends(CardHeader, _super);
    function CardHeader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardHeader.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            title = _a.title,
            subTitle = _a.subTitle,
            extra = _a.extra,
            className = _a.className,
            Component = _a.component,
            others = tslib_1.__rest(_a, ["prefix", "title", "subTitle", "extra", "className", "component"]);
        return react_1.default.createElement(Component, tslib_1.__assign({}, others, { className: (0, classnames_1.default)("".concat(prefix, "card-header"), className) }), extra && react_1.default.createElement("div", { className: "".concat(prefix, "card-header-extra") }, extra), react_1.default.createElement("div", { className: "".concat(prefix, "card-header-titles") }, title && react_1.default.createElement("div", { className: "".concat(prefix, "card-header-title") }, title), subTitle && react_1.default.createElement("div", { className: "".concat(prefix, "card-header-subtitle") }, subTitle)));
    };
    CardHeader.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 卡片的标题
         */
        title: prop_types_1.default.node,
        /**
         * 卡片的副标题
         */
        subTitle: prop_types_1.default.node,
        /**
         * 标题区域的用户自定义内容
         */
        extra: prop_types_1.default.node,
        /**
         * 设置标签类型
         */
        component: prop_types_1.default.elementType,
        className: prop_types_1.default.string
    };
    CardHeader.defaultProps = {
        prefix: 'next-',
        component: 'div'
    };
    return CardHeader;
}(react_1.Component);
exports.default = config_provider_1.default.config(CardHeader);

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
/**
 * Card.Divider
 * @order 4
 */
var CardDivider = /** @class */function (_super) {
    tslib_1.__extends(CardDivider, _super);
    function CardDivider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardDivider.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            Component = _b.component,
            inset = _b.inset,
            className = _b.className,
            others = tslib_1.__rest(_b, ["prefix", "component", "inset", "className"]);
        var dividerClassName = (0, classnames_1.default)("".concat(prefix, "card-divider"), (_a = {}, _a["".concat(prefix, "card-divider--inset")] = inset, _a), className);
        return react_1.default.createElement(Component, tslib_1.__assign({}, others, { className: dividerClassName }));
    };
    CardDivider.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 设置标签类型
         */
        component: prop_types_1.default.elementType,
        /**
         * 分割线是否向内缩进
         */
        inset: prop_types_1.default.bool,
        className: prop_types_1.default.string
    };
    CardDivider.defaultProps = {
        prefix: 'next-',
        component: 'hr'
    };
    return CardDivider;
}(react_1.Component);
exports.default = config_provider_1.default.config(CardDivider);

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
/**
 * Card.Content
 * @order 3
 */
var CardContent = /** @class */function (_super) {
    tslib_1.__extends(CardContent, _super);
    function CardContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardContent.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            className = _a.className,
            Component = _a.component,
            others = tslib_1.__rest(_a, ["prefix", "className", "component"]);
        return react_1.default.createElement(Component, tslib_1.__assign({}, others, { className: (0, classnames_1.default)("".concat(prefix, "card-content-container"), className) }));
    };
    CardContent.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 设置标签类型
         */
        component: prop_types_1.default.elementType,
        className: prop_types_1.default.string
    };
    CardContent.defaultProps = {
        prefix: 'next-',
        component: 'div'
    };
    return CardContent;
}(react_1.Component);
exports.default = config_provider_1.default.config(CardContent);

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var lodash_clonedeep_1 = __webpack_require__(163);
var classnames_1 = __webpack_require__(3);
var menu_1 = __webpack_require__(13);
var util_1 = __webpack_require__(4);
var menu_2 = __webpack_require__(317);
var item_1 = __webpack_require__(318);
var utils_1 = __webpack_require__(319);
var bindCtx = util_1.func.bindCtx;
var pickOthers = util_1.obj.pickOthers;
var addClass = util_1.dom.addClass,
    removeClass = util_1.dom.removeClass,
    setStyle = util_1.dom.setStyle,
    getStyle = util_1.dom.getStyle;
// 数据打平
var flatDataSource = function flatDataSource(data, prefix, v2n, p2n) {
    if (prefix === void 0) {
        prefix = '0';
    }
    if (v2n === void 0) {
        v2n = {};
    }
    if (p2n === void 0) {
        p2n = {};
    }
    data.forEach(function (item, index) {
        var value = item.value,
            children = item.children;
        var pos = "".concat(prefix, "-").concat(index);
        var newValue = String(value);
        item.value = newValue;
        v2n[newValue] = p2n[pos] = tslib_1.__assign(tslib_1.__assign({}, item), { pos: pos, _source: item });
        if (children && children.length) {
            flatDataSource(children, pos, v2n, p2n);
        }
    });
    return { v2n: v2n, p2n: p2n };
};
function preHandleData(data, immutable) {
    var _data = immutable ? (0, lodash_clonedeep_1.default)(data) : data;
    try {
        return flatDataSource(_data);
    } catch (err) {
        if ((err.message || '').match('Cannot assign to read only property')) {
            // eslint-disable-next-line no-console
            console.error(err.message, 'try to set immutable to true to allow immutable dataSource');
        }
        throw err;
    }
}
var getExpandedValue = function getExpandedValue(v, _v2n, _p2n) {
    if (!v || !_v2n[v]) {
        return [];
    }
    var pos = _v2n[v].pos;
    if (pos.split('-').length === 2) {
        return [];
    }
    var expandedMap = {};
    Object.keys(_p2n).forEach(function (p) {
        if ((0, utils_1.isDescendantOrSelf)(p, pos) && p !== pos) {
            expandedMap[_p2n[p].value] = p;
        }
    });
    return Object.keys(expandedMap).sort(function (prev, next) {
        return expandedMap[prev].split('-').length - expandedMap[next].split('-').length;
    });
};
var normalizeValue = function normalizeValue(value) {
    if (value) {
        if (Array.isArray(value)) {
            return value;
        }
        return [value];
    }
    return [];
};
/**
 * Cascader
 */
var Cascader = /** @class */function (_super) {
    tslib_1.__extends(Cascader, _super);
    function Cascader(props, context) {
        var _this = _super.call(this, props, context) || this;
        var defaultValue = props.defaultValue,
            value = props.value,
            defaultExpandedValue = props.defaultExpandedValue,
            expandedValue = props.expandedValue,
            dataSource = props.dataSource,
            multiple = props.multiple,
            checkStrictly = props.checkStrictly,
            canOnlyCheckLeaf = props.canOnlyCheckLeaf,
            loadData = props.loadData,
            immutable = props.immutable;
        var _a = preHandleData(dataSource, immutable),
            v2n = _a.v2n,
            p2n = _a.p2n;
        var normalizedValue = normalizeValue(typeof value === 'undefined' ? defaultValue : value);
        if (!loadData) {
            normalizedValue = normalizedValue.filter(function (v) {
                return v2n[v];
            });
        }
        var realExpandedValue = typeof expandedValue === 'undefined' ? typeof defaultExpandedValue === 'undefined' ? getExpandedValue(normalizedValue[0], v2n, p2n) : normalizeValue(defaultExpandedValue) : normalizeValue(expandedValue);
        var st = {
            value: normalizedValue,
            expandedValue: realExpandedValue,
            isExpandedValueSetByAction: false
        };
        if (multiple && !checkStrictly && !canOnlyCheckLeaf) {
            st.value = (0, utils_1.getAllCheckedValues)(st.value, v2n, p2n);
        }
        _this.lastExpandedValue = tslib_1.__spreadArray([], tslib_1.__read(st.expandedValue), false);
        _this.state = tslib_1.__assign(tslib_1.__assign({}, st), { _v2n: v2n, _p2n: p2n });
        bindCtx(_this, ['handleMouseLeave', 'handleFocus', 'handleFold', 'getCascaderNode', 'getCascaderInnerNode', 'onBlur']);
        return _this;
    }
    Cascader.getDerivedStateFromProps = function (props, state) {
        var _a = preHandleData(props.dataSource, props.immutable),
            v2n = _a.v2n,
            p2n = _a.p2n;
        var states = {};
        if ('value' in props) {
            states.value = normalizeValue(props.value);
            if (!props.loadData) {
                states.value = states.value.filter(function (v) {
                    return v2n[v];
                });
            }
            var multiple = props.multiple,
                checkStrictly = props.checkStrictly,
                canOnlyCheckLeaf = props.canOnlyCheckLeaf;
            if (multiple && !checkStrictly && !canOnlyCheckLeaf) {
                states.value = (0, utils_1.getAllCheckedValues)(states.value, v2n, p2n);
            }
            if (
            // 非受控模式下，若已经通过用户事件调整了expandedValue，则忽略下面的空值兜底处理
            !state.isExpandedValueSetByAction && !state.expandedValue.length && !('expandedValue' in props)) {
                states.expandedValue = getExpandedValue(states.value[0], v2n, p2n);
            }
        }
        if ('expandedValue' in props) {
            states.expandedValue = normalizeValue(props.expandedValue);
            // 受控模式则重置isExpandedValueSetByAction
            states.isExpandedValueSetByAction = false;
        }
        return tslib_1.__assign(tslib_1.__assign({}, states), { _v2n: v2n, _p2n: p2n });
    };
    Cascader.prototype.componentDidMount = function () {
        this.setCascaderInnerWidth();
    };
    Cascader.prototype.componentDidUpdate = function () {
        this.setCascaderInnerWidth();
    };
    Cascader.prototype.getCascaderNode = function (ref) {
        this.cascader = ref;
    };
    Cascader.prototype.getCascaderInnerNode = function (ref) {
        this.cascaderInner = ref;
    };
    Cascader.prototype.setCascaderInnerWidth = function () {
        if (!this.cascaderInner) {
            return;
        }
        var menus = [].slice.call(this.cascaderInner.querySelectorAll(".".concat(this.props.prefix, "cascader-menu-wrapper")));
        if (menus.length === 0) {
            return;
        }
        var menusWidth = Math.ceil(menus.reduce(function (ret, menu) {
            return ret + Math.ceil(menu.getBoundingClientRect().width);
        }, 0));
        if (getStyle(this.cascaderInner, 'width') !== menusWidth) {
            setStyle(this.cascaderInner, 'width', menusWidth);
        }
        if (getStyle(this.cascader, 'display') === 'inline-block') {
            var hasRightBorderClass_1 = "".concat(this.props.prefix, "has-right-border");
            menus.forEach(function (menu) {
                return removeClass(menu, hasRightBorderClass_1);
            });
            if (this.cascader.clientWidth > menusWidth) {
                addClass(menus[menus.length - 1], hasRightBorderClass_1);
            }
        }
    };
    /*eslint-enable*/
    Cascader.prototype.flatValue = function (value) {
        return (0, utils_1.filterChildValue)(value, this.state._v2n, this.state._p2n);
    };
    Cascader.prototype.getValue = function (pos) {
        return this.state._p2n[pos] ? this.state._p2n[pos].value : null;
    };
    Cascader.prototype.getPos = function (value) {
        return this.state._v2n[value] ? this.state._v2n[value].pos : null;
    };
    Cascader.prototype.getData = function (value) {
        var _this = this;
        return value.map(function (v) {
            return _this.state._v2n[v];
        });
    };
    Cascader.prototype.processValue = function (value, v, checked) {
        var index = value.indexOf(v);
        if (checked && index === -1) {
            value.push(v);
        } else if (!checked && index > -1) {
            value.splice(index, 1);
        }
    };
    Cascader.prototype.handleSelect = function (v, canExpand) {
        var _this = this;
        if (!(this.props.canOnlySelectLeaf && canExpand)) {
            var data = this.state._v2n[v];
            var nums_1 = data.pos.split('-');
            var selectedPath = nums_1.slice(1).reduce(function (ret, num, index) {
                var p = nums_1.slice(0, index + 2).join('-');
                ret.push(_this.state._p2n[p]);
                return ret;
            }, []);
            if (this.state.value[0] !== v) {
                if (!('value' in this.props)) {
                    this.setState({
                        value: [v]
                    });
                }
                if ('onChange' in this.props) {
                    this.props.onChange(v, data, {
                        selectedPath: selectedPath
                    });
                }
            }
            if ('onSelect' in this.props) {
                this.props.onSelect(v, data, {
                    selectedPath: selectedPath
                });
            }
        }
        if (canExpand) {
            if (!this.props.canOnlySelectLeaf) {
                this.lastExpandedValue = this.state.expandedValue.slice(0, -1);
            }
        } else {
            this.lastExpandedValue = tslib_1.__spreadArray([], tslib_1.__read(this.state.expandedValue), false);
        }
    };
    /*eslint-disable max-statements*/
    Cascader.prototype.handleCheck = function (v, checked) {
        var _this = this;
        var _a = this.props,
            checkStrictly = _a.checkStrictly,
            canOnlyCheckLeaf = _a.canOnlyCheckLeaf;
        var value = tslib_1.__spreadArray([], tslib_1.__read(this.state.value), false);
        if (checkStrictly || canOnlyCheckLeaf) {
            this.processValue(value, v, checked);
        } else {
            var pos = this.getPos(v);
            var ps = Object.keys(this.state._p2n);
            (0, utils_1.forEachEnableNode)(this.state._v2n[v], function (node) {
                if (node.checkable === false) return;
                _this.processValue(value, node.value, checked);
            });
            var currentPos = pos;
            var nums = pos.split('-');
            for (var i = nums.length; i > 2; i--) {
                var parentCheck = true;
                var parentPos = nums.slice(0, i - 1).join('-');
                if (this.state._p2n[parentPos].disabled || this.state._p2n[parentPos].checkboxDisabled || this.state._p2n[parentPos].checkable === false) {
                    currentPos = parentPos;
                    continue;
                }
                var parentValue = this.state._p2n[parentPos].value;
                var parentChecked = value.indexOf(parentValue) > -1;
                if (!checked && !parentChecked) {
                    break;
                }
                for (var j = 0; j < ps.length; j++) {
                    var p = ps[j];
                    var pnode = this.state._p2n[p];
                    if ((0, utils_1.isSiblingOrSelf)(currentPos, p) && !pnode.disabled && !pnode.checkboxDisabled) {
                        var k = pnode.value;
                        // eslint-disable-next-line max-depth
                        if (pnode.checkable === false) {
                            // eslint-disable-next-line max-depth
                            if (!pnode.children || pnode.children.length === 0) {
                                continue;
                            }
                            // eslint-disable-next-line max-depth
                            for (var m = 0; m < pnode.children.length; m++) {
                                // eslint-disable-next-line max-depth
                                if (!pnode.children.every(function (child) {
                                    return (0, utils_1.isNodeChecked)(child, value);
                                })) {
                                    parentCheck = false;
                                    break;
                                }
                            }
                        } else if (value.indexOf(k) === -1) {
                            parentCheck = false;
                        }
                        if (!parentCheck) break;
                    }
                }
                this.processValue(value, parentValue, parentCheck);
                currentPos = parentPos;
            }
        }
        if (!('value' in this.props)) {
            this.setState({
                value: value
            });
        }
        if ('onChange' in this.props) {
            if (checkStrictly || canOnlyCheckLeaf) {
                var data = this.getData(value);
                this.props.onChange(value, data, {
                    checked: checked,
                    currentData: this.state._v2n[v],
                    checkedData: data
                });
            } else {
                var flatValue = this.flatValue(value);
                var flatData = this.getData(flatValue);
                var checkedData = this.getData(value);
                var indeterminateValue = this.getIndeterminate(value);
                var indeterminateData = this.getData(indeterminateValue);
                this.props.onChange(flatValue, flatData, {
                    checked: checked,
                    currentData: this.state._v2n[v],
                    checkedData: checkedData,
                    indeterminateData: indeterminateData
                });
            }
        }
        this.lastExpandedValue = tslib_1.__spreadArray([], tslib_1.__read(this.state.expandedValue), false);
    };
    Cascader.prototype.handleExpand = function (value, level, canExpand, focusedFirstChild) {
        var _this = this;
        var expandedValue = this.state.expandedValue;
        if (canExpand || expandedValue.length > level) {
            if (canExpand) {
                expandedValue.splice(level, expandedValue.length - level, value);
            } else {
                expandedValue.splice(level);
            }
            var callback = function callback() {
                _this.setExpandValue(expandedValue, true);
                if (focusedFirstChild) {
                    var endExpandedValue = expandedValue[expandedValue.length - 1];
                    _this.setState({
                        focusedValue: _this.state._v2n[endExpandedValue].children[0].value
                    });
                }
            };
            var loadData = this.props.loadData;
            if (canExpand && loadData) {
                var data = this.state._v2n[value];
                return loadData(data, data._source).then(callback);
            } else {
                return callback();
            }
        }
    };
    Cascader.prototype.handleMouseLeave = function () {
        this.setExpandValue(tslib_1.__spreadArray([], tslib_1.__read(this.lastExpandedValue), false), true);
    };
    Cascader.prototype.setExpandValue = function (expandedValue, isExpandedValueSetByAction) {
        if (isExpandedValueSetByAction === void 0) {
            isExpandedValueSetByAction = false;
        }
        if (!('expandedValue' in this.props)) {
            this.setState({
                expandedValue: expandedValue,
                isExpandedValueSetByAction: isExpandedValueSetByAction
            });
        }
        if ('onExpand' in this.props) {
            this.props.onExpand(expandedValue);
        }
    };
    Cascader.prototype.getFirstFocusKeyByDataSource = function (dataSource) {
        if (!dataSource || dataSource.length === 0) {
            return '';
        }
        for (var i = 0; i < dataSource.length; i++) {
            if (dataSource[i] && !dataSource[i].disabled) {
                return dataSource[i].value;
            }
        }
        return '';
    };
    Cascader.prototype.getFirstFocusKeyByFilteredPaths = function (filteredPaths) {
        if (!filteredPaths || filteredPaths.length === 0) {
            return '';
        }
        for (var i = 0; i < filteredPaths.length; i++) {
            var path = filteredPaths[i];
            if (!path.some(function (item) {
                return item.disabled;
            })) {
                var lastItem = path[path.length - 1];
                return lastItem.value;
            }
        }
        return '';
    };
    Cascader.prototype.getFirstFocusKey = function () {
        var _a = this.props,
            dataSource = _a.dataSource,
            searchValue = _a.searchValue,
            filteredPaths = _a.filteredPaths;
        return !searchValue ? this.getFirstFocusKeyByDataSource(dataSource) : this.getFirstFocusKeyByFilteredPaths(filteredPaths);
    };
    Cascader.prototype.setFocusValue = function () {
        this.setState({
            focusedValue: this.getFirstFocusKey()
        });
    };
    Cascader.prototype.handleFocus = function (focusedValue) {
        this.setState({
            focusedValue: focusedValue
        });
    };
    Cascader.prototype.handleFold = function () {
        var expandedValue = this.state.expandedValue;
        if (expandedValue.length > 0) {
            this.setExpandValue(expandedValue.slice(0, -1), true);
        }
        this.setState({
            focusedValue: expandedValue[expandedValue.length - 1]
        });
    };
    Cascader.prototype.getIndeterminate = function (value) {
        var _this = this;
        var indeterminateValues = [];
        var poss = (0, utils_1.filterChildValue)(value.filter(function (v) {
            return !!_this.state._v2n[v];
        }).filter(function (v) {
            return !_this.state._v2n[v].disabled && !_this.state._v2n[v].checkboxDisabled && _this.state._v2n[v].checkable !== false;
        }), this.state._v2n, this.state._p2n).map(function (v) {
            return _this.state._v2n[v].pos;
        });
        poss.forEach(function (pos) {
            var nums = pos.split('-');
            for (var i = nums.length; i > 2; i--) {
                var parentPos = nums.slice(0, i - 1).join('-');
                var parent_1 = _this.state._p2n[parentPos];
                if (parent_1.disabled || parent_1.checkboxDisabled) break;
                var parentValue = parent_1.value;
                if (indeterminateValues.indexOf(parentValue) === -1) {
                    indeterminateValues.push(parentValue);
                }
            }
        });
        return indeterminateValues;
    };
    Cascader.prototype.onBlur = function (e) {
        this.setState({
            focusedValue: undefined
        });
        this.props.onBlur && this.props.onBlur(e);
    };
    Cascader.prototype.renderMenu = function (data, level) {
        var _this = this;
        var _a = this.props,
            prefix = _a.prefix,
            multiple = _a.multiple,
            useVirtual = _a.useVirtual,
            checkStrictly = _a.checkStrictly,
            expandTriggerType = _a.expandTriggerType,
            loadData = _a.loadData,
            canOnlyCheckLeaf = _a.canOnlyCheckLeaf,
            listClassName = _a.listClassName,
            listStyle = _a.listStyle,
            itemRender = _a.itemRender;
        var _b = this.state,
            value = _b.value,
            expandedValue = _b.expandedValue,
            focusedValue = _b.focusedValue;
        return react_1.default.createElement(menu_2.default, { key: level, prefix: prefix, useVirtual: useVirtual, className: listClassName, style: listStyle, ref: this.saveMenuRef, focusedKey: focusedValue, onItemFocus: this.handleFocus, onBlur: this.onBlur }, data.map(function (item) {
            var disabled = !!item.disabled;
            var canExpand = !!item.children && !!item.children.length || !!loadData && !item.isLeaf;
            var expanded = expandedValue[level] === item.value;
            var props = {
                prefix: prefix,
                disabled: disabled,
                canExpand: canExpand,
                expanded: expanded,
                expandTriggerType: expandTriggerType,
                onExpand: _this.handleExpand.bind(_this, item.value, level, canExpand),
                onFold: _this.handleFold
            };
            if ('title' in item) {
                props.title = item.title;
            }
            if (multiple) {
                props.checkable = !(canOnlyCheckLeaf && canExpand);
                props.checked = value.indexOf(item.value) > -1 || !!item.checked;
                props.indeterminate = (checkStrictly || canOnlyCheckLeaf ? false : _this.indeterminate.indexOf(item.value) > -1) || !!item.indeterminate;
                props.checkboxDisabled = !!item.checkboxDisabled;
                props.onCheck = _this.handleCheck.bind(_this, item.value);
            } else {
                props.selected = value[0] === item.value;
                props.onSelect = _this.handleSelect.bind(_this, item.value, canExpand);
            }
            var itemContent = itemRender(item, props);
            if (itemContent === null) {
                return null;
            }
            return react_1.default.createElement(item_1.default, tslib_1.__assign({ key: item.value }, props), itemContent);
        }).filter(function (v) {
            return v;
        }));
    };
    Cascader.prototype.renderMenus = function () {
        var dataSource = this.props.dataSource;
        var expandedValue = this.state.expandedValue;
        var menus = [];
        var data = dataSource;
        for (var i = 0; i <= expandedValue.length; i++) {
            if (!data) {
                break;
            }
            menus.push(this.renderMenu(data, i));
            var expandedItem = void 0;
            for (var j = 0; j < data.length; j++) {
                if (data[j].value === expandedValue[i]) {
                    expandedItem = data[j];
                    break;
                }
            }
            data = expandedItem ? expandedItem.children : null;
        }
        return menus;
    };
    Cascader.prototype.renderFilteredItem = function (path) {
        var _a = this.props,
            prefix = _a.prefix,
            resultRender = _a.resultRender,
            searchValue = _a.searchValue,
            multiple = _a.multiple;
        var value = this.state.value;
        var lastItem = path[path.length - 1];
        var Item;
        var props = {
            key: lastItem.value,
            className: "".concat(prefix, "cascader-filtered-item"),
            disabled: path.some(function (item) {
                return item.disabled;
            }),
            children: resultRender(searchValue, path)
        };
        if (multiple) {
            Item = menu_1.default.CheckboxItem;
            var _b = this.props,
                checkStrictly = _b.checkStrictly,
                canOnlyCheckLeaf = _b.canOnlyCheckLeaf;
            props.checked = value.indexOf(lastItem.value) > -1;
            props.indeterminate = !checkStrictly && !canOnlyCheckLeaf && this.indeterminate.indexOf(lastItem.value) > -1;
            props.checkboxDisabled = lastItem.checkboxDisabled;
            props.onChange = this.handleCheck.bind(this, lastItem.value);
        } else {
            Item = menu_1.default.Item;
            props.selected = value[0] === lastItem.value;
            props.onSelect = this.handleSelect.bind(this, lastItem.value, false);
        }
        return react_1.default.createElement(Item, tslib_1.__assign({}, props));
    };
    Cascader.prototype.renderFilteredList = function () {
        var _this = this;
        var _a = this.props,
            prefix = _a.prefix,
            filteredListStyle = _a.filteredListStyle,
            filteredPaths = _a.filteredPaths,
            _b = _a.focusable,
            focusable = _b === void 0 ? false : _b;
        var focusedValue = this.state.focusedValue;
        return react_1.default.createElement(menu_1.default
        // 如果不设置为false， CascaderSelect 开启 showSearch后，弹窗展开时，光标无法到input上去，也无法输入.
        // TODO: set focusable=true in 2.x
        , {
            // 如果不设置为false， CascaderSelect 开启 showSearch后，弹窗展开时，光标无法到input上去，也无法输入.
            // TODO: set focusable=true in 2.x
            focusable: focusable, focusedKey: focusedValue, onItemFocus: this.handleFocus, className: "".concat(prefix, "cascader-filtered-list"), style: filteredListStyle }, filteredPaths.map(function (path) {
            return _this.renderFilteredItem(path);
        }));
    };
    Cascader.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            rtl = _b.rtl,
            className = _b.className,
            expandTriggerType = _b.expandTriggerType,
            multiple = _b.multiple,
            dataSource = _b.dataSource,
            checkStrictly = _b.checkStrictly,
            canOnlyCheckLeaf = _b.canOnlyCheckLeaf,
            searchValue = _b.searchValue;
        var others = pickOthers(Object.keys(Cascader.propTypes), this.props);
        var value = this.state.value;
        if (rtl) {
            others.dir = 'rtl';
        }
        var props = tslib_1.__assign({ className: (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "cascader")] = true, _a.multiple = multiple, _a[className] = !!className, _a)), ref: 'cascader' }, others);
        if (expandTriggerType === 'hover') {
            props.onMouseLeave = this.handleMouseLeave;
        }
        if (multiple && !checkStrictly && !canOnlyCheckLeaf) {
            this.indeterminate = this.getIndeterminate(value);
        }
        return react_1.default.createElement("div", tslib_1.__assign({}, props, { ref: this.getCascaderNode }), !searchValue ? react_1.default.createElement("div", { className: "".concat(prefix, "cascader-inner"), ref: this.getCascaderInnerNode }, dataSource && dataSource.length ? this.renderMenus() : null) : this.renderFilteredList());
    };
    Cascader.propTypes = {
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        pure: prop_types_1.default.bool,
        className: prop_types_1.default.string,
        /**
         * 数据源，结构可参考下方说明
         */
        dataSource: prop_types_1.default.arrayOf(prop_types_1.default.object),
        /**
         * （非受控）默认值
         */
        defaultValue: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.arrayOf(prop_types_1.default.string)]),
        /**
         * （受控）当前值
         */
        value: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.arrayOf(prop_types_1.default.string)]),
        /**
         * 选中值改变时触发的回调函数
         * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组
         * @param {Object|Array} data 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点
         * @param {Object} extra 额外参数
         * @param {Array} extra.selectedPath 单选时选中的数据的路径
         * @param {Boolean} extra.checked 多选时当前的操作是选中还是取消选中
         * @param {Object} extra.currentData 多选时当前操作的数据
         * @param {Array} extra.checkedData 多选时所有被选中的数据
         * @param {Array} extra.indeterminateData 多选时半选的数据
         */
        onChange: prop_types_1.default.func,
        onSelect: prop_types_1.default.func,
        /**
         * （非受控）默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置
         */
        defaultExpandedValue: prop_types_1.default.arrayOf(prop_types_1.default.string),
        /**
         * （受控）当前展开值
         */
        expandedValue: prop_types_1.default.arrayOf(prop_types_1.default.string),
        /**
         * 展开触发的方式
         */
        expandTriggerType: prop_types_1.default.oneOf(['click', 'hover']),
        /**
         * 展开时触发的回调函数
         * @param {Array} expandedValue 各列展开值的数组
         */
        onExpand: prop_types_1.default.func,
        /**
         * 是否开启虚拟滚动
         */
        useVirtual: prop_types_1.default.bool,
        /**
         * 是否多选
         */
        multiple: prop_types_1.default.bool,
        /**
         * 单选时是否只能选中叶子节点
         */
        canOnlySelectLeaf: prop_types_1.default.bool,
        /**
         * 多选时是否只能选中叶子节点
         */
        canOnlyCheckLeaf: prop_types_1.default.bool,
        /**
         * 父子节点是否选中不关联
         */
        checkStrictly: prop_types_1.default.bool,
        /**
         * 每列列表样式对象
         */
        listStyle: prop_types_1.default.object,
        /**
         * 每列列表类名
         */
        listClassName: prop_types_1.default.string,
        /**
         * 每列列表项渲染函数
         * @param {Object} data 数据
         * @return {ReactNode} 列表项内容
         */
        itemRender: prop_types_1.default.func,
        /**
         * 异步加载数据函数
         * @param {Object} data 当前点击异步加载的数据
         * @param {Object} source 当前点击数据，source是原始对象
         */
        loadData: prop_types_1.default.func,
        searchValue: prop_types_1.default.string,
        onBlur: prop_types_1.default.func,
        filteredPaths: prop_types_1.default.array,
        filteredListStyle: prop_types_1.default.object,
        resultRender: prop_types_1.default.func,
        /**
         * 是否是不可变数据
         * @version 1.23
         */
        immutable: prop_types_1.default.bool
    };
    Cascader.defaultProps = {
        prefix: 'next-',
        rtl: false,
        pure: false,
        dataSource: [],
        defaultValue: null,
        canOnlySelectLeaf: false,
        canOnlyCheckLeaf: false,
        expandTriggerType: 'click',
        multiple: false,
        useVirtual: false,
        checkStrictly: false,
        itemRender: function itemRender(item) {
            return item.label;
        },
        immutable: false
    };
    return Cascader;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Cascader);

/***/ }),
/* 316 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_dom_1 = __webpack_require__(8);
var menu_1 = __webpack_require__(13);
var virtual_list_1 = __webpack_require__(46);
var CascaderMenu = /** @class */function (_super) {
    tslib_1.__extends(CascaderMenu, _super);
    function CascaderMenu() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.saveMenuRef = function (ref) {
            _this.menuEl = ref;
        };
        _this.saveVirtualRef = function (ref) {
            _this.virtualEl = ref;
        };
        return _this;
    }
    CascaderMenu.prototype.componentDidMount = function () {
        this.scrollToSelectedItem();
    };
    CascaderMenu.prototype.scrollToSelectedItem = function () {
        var _a = this.props,
            prefix = _a.prefix,
            useVirtual = _a.useVirtual,
            children = _a.children;
        if (!children || children.length === 0) {
            return;
        }
        var selectedIndex = children.findIndex(function (item) {
            return !!item.props.checked || !!item.props.selected || !!item.props.expanded;
        });
        if (selectedIndex === -1) {
            return;
        }
        if (useVirtual) {
            var instance_1 = this.virtualEl.getInstance();
            setTimeout(function () {
                return instance_1.scrollTo(selectedIndex);
            }, 0);
        } else {
            var itemSelector = ".".concat(prefix, "menu-item");
            var menu = (0, react_dom_1.findDOMNode)(this.menuEl);
            var targetItem = menu.querySelectorAll(itemSelector)[selectedIndex];
            if (targetItem) {
                menu.scrollTop = targetItem.offsetTop - Math.floor((menu.clientHeight / targetItem.clientHeight - 1) / 2) * targetItem.clientHeight;
            }
        }
    };
    CascaderMenu.prototype.renderMenu = function (items, ref, props) {
        var _this = this;
        return react_1.default.createElement(menu_1.default, tslib_1.__assign({ ref: ref, role: "listbox" }, props), items.map(function (node) {
            if (react_1.default.isValidElement(node) && node.type.menuChildType === 'item') {
                return react_1.default.cloneElement(node, {
                    menu: _this
                });
            }
            return node;
        }));
    };
    CascaderMenu.prototype.render = function () {
        var _this = this;
        var _a = this.props,
            prefix = _a.prefix,
            useVirtual = _a.useVirtual,
            className = _a.className,
            style = _a.style,
            children = _a.children,
            others = tslib_1.__rest(_a, ["prefix", "useVirtual", "className", "style", "children"]);
        var menuProps = tslib_1.__assign({ labelToggleChecked: false, className: "".concat(prefix, "cascader-menu") }, others);
        return react_1.default.createElement("div", { ref: this.saveMenuRef, className: "".concat(prefix, "cascader-menu-wrapper ").concat(className ? className : ''), style: style }, useVirtual ? react_1.default.createElement(virtual_list_1.default, { ref: this.saveVirtualRef, itemsRenderer: function itemsRenderer(items, ref) {
                return _this.renderMenu(items, ref, menuProps);
            } }, children) : this.renderMenu(children, undefined, menuProps));
    };
    CascaderMenu.propTypes = {
        prefix: prop_types_1.default.string,
        className: prop_types_1.default.string,
        useVirtual: prop_types_1.default.bool,
        children: prop_types_1.default.node
    };
    return CascaderMenu;
}(react_1.Component);
exports.default = CascaderMenu;

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var menu_1 = __webpack_require__(13);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
var bindCtx = util_1.func.bindCtx;
var pickOthers = util_1.obj.pickOthers;
var CascaderMenuItem = /** @class */function (_super) {
    tslib_1.__extends(CascaderMenuItem, _super);
    function CascaderMenuItem(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            loading: false
        };
        bindCtx(_this, ['handleExpand', 'handleClick', 'handleMouseEnter', 'handleKeyDown', 'removeLoading']);
        return _this;
    }
    CascaderMenuItem.prototype.addLoading = function () {
        this.setState({
            loading: true
        });
    };
    CascaderMenuItem.prototype.removeLoading = function () {
        this.setState({
            loading: false
        });
    };
    CascaderMenuItem.prototype.setLoadingIfNeed = function (p) {
        if (p && typeof p.then === 'function') {
            this.addLoading();
            p.then(this.removeLoading).catch(this.removeLoading);
        }
    };
    CascaderMenuItem.prototype.handleExpand = function (focusedFirstChild) {
        this.setLoadingIfNeed(this.props.onExpand(focusedFirstChild));
    };
    CascaderMenuItem.prototype.handleClick = function () {
        this.handleExpand(false);
    };
    CascaderMenuItem.prototype.handleMouseEnter = function () {
        this.handleExpand(false);
    };
    CascaderMenuItem.prototype.handleKeyDown = function (e) {
        if (!this.props.disabled) {
            if (e.keyCode === util_1.KEYCODE.RIGHT || e.keyCode === util_1.KEYCODE.ENTER) {
                if (this.props.canExpand) {
                    this.handleExpand(true);
                }
            } else if (e.keyCode === util_1.KEYCODE.LEFT || e.keyCode === util_1.KEYCODE.ESC) {
                this.props.onFold();
            } else if (e.keyCode === util_1.KEYCODE.SPACE) {
                this.handleExpand(false);
            }
        }
    };
    CascaderMenuItem.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            className = _b.className,
            menu = _b.menu,
            disabled = _b.disabled,
            selected = _b.selected,
            onSelect = _b.onSelect,
            expanded = _b.expanded,
            canExpand = _b.canExpand,
            expandTriggerType = _b.expandTriggerType,
            checkable = _b.checkable,
            checked = _b.checked,
            indeterminate = _b.indeterminate,
            checkboxDisabled = _b.checkboxDisabled,
            onCheck = _b.onCheck,
            children = _b.children;
        var others = pickOthers(Object.keys(CascaderMenuItem.propTypes), this.props);
        var loading = this.state.loading;
        var itemProps = tslib_1.__assign({ className: (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "cascader-menu-item")] = true, _a["".concat(prefix, "expanded")] = expanded, _a[className] = !!className, _a)), disabled: disabled, menu: menu, onKeyDown: this.handleKeyDown, role: 'option' }, others);
        if (!disabled) {
            if (expandTriggerType === 'hover') {
                itemProps.onMouseEnter = this.handleMouseEnter;
            } else {
                itemProps.onClick = this.handleClick;
            }
        }
        var Item, title;
        if (checkable) {
            Item = menu_1.default.CheckboxItem;
            itemProps.checked = checked;
            itemProps.indeterminate = indeterminate;
            itemProps.checkboxDisabled = checkboxDisabled;
            itemProps.onChange = onCheck;
        } else {
            Item = menu_1.default.Item;
            itemProps.selected = selected;
            itemProps.onSelect = onSelect;
        }
        if (typeof children === 'string') {
            title = children;
        }
        return react_1.default.createElement(Item, tslib_1.__assign({ title: title }, itemProps), children, canExpand ? loading ? react_1.default.createElement(icon_1.default, { className: "".concat(prefix, "cascader-menu-icon-right ").concat(prefix, "cascader-menu-icon-loading"), type: "loading" }) : react_1.default.createElement(icon_1.default, { className: "".concat(prefix, "cascader-menu-icon-right ").concat(prefix, "cascader-menu-icon-expand"), type: "arrow-right" }) : null);
    };
    CascaderMenuItem.menuChildType = 'item';
    CascaderMenuItem.propTypes = {
        prefix: prop_types_1.default.string,
        className: prop_types_1.default.string,
        disabled: prop_types_1.default.bool,
        selected: prop_types_1.default.bool,
        onSelect: prop_types_1.default.func,
        expanded: prop_types_1.default.bool,
        canExpand: prop_types_1.default.bool,
        menu: prop_types_1.default.any,
        expandTriggerType: prop_types_1.default.oneOf(['click', 'hover']),
        onExpand: prop_types_1.default.func,
        onFold: prop_types_1.default.func,
        checkable: prop_types_1.default.bool,
        checked: prop_types_1.default.bool,
        indeterminate: prop_types_1.default.bool,
        checkboxDisabled: prop_types_1.default.bool,
        onCheck: prop_types_1.default.func,
        children: prop_types_1.default.node
    };
    return CascaderMenuItem;
}(react_1.Component);
exports.default = CascaderMenuItem;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllCheckedValues = exports.isSiblingOrSelf = exports.isDescendantOrSelf = exports.filterParentValue = exports.filterChildValue = exports.getCheckableParentNode = exports.isNodeDisabledChecked = exports.forEachEnableNode = exports.isNodeChecked = exports.normalizeToArray = void 0;
var tslib_1 = __webpack_require__(0);
/* eslint-disable valid-jsdoc */
function normalizeToArray(values) {
    if (values !== undefined && values !== null) {
        if (Array.isArray(values)) {
            return tslib_1.__spreadArray([], tslib_1.__read(values), false);
        }
        return [values];
    }
    return [];
}
exports.normalizeToArray = normalizeToArray;
/**
 * 判断子节点是否是选中状态，如果 checkable={false} 则向下递归，
 * @param {Node} child
 * @param {Array} checkedValues
 */
function isNodeChecked(node, checkedValues) {
    if (node.disabled || node.checkboxDisabled) return true;
    /* istanbul ignore next */
    if (node.checkable === false) {
        return !node.children || node.children.length === 0 || node.children.every(function (c) {
            return isNodeChecked(c, checkedValues);
        });
    }
    return checkedValues.indexOf(node.value) > -1;
}
exports.isNodeChecked = isNodeChecked;
/**
 * 遍历所有可用的子节点
 * @param {Node}
 * @param {Function} callback
 */
function forEachEnableNode(node, callback) {
    if (callback === void 0) {
        callback = function callback() {};
    }
    if (node.disabled || node.checkboxDisabled) return;
    // eslint-disable-next-line callback-return
    callback(node);
    if (node.children && node.children.length > 0) {
        node.children.forEach(function (child) {
            return forEachEnableNode(child, callback);
        });
    }
}
exports.forEachEnableNode = forEachEnableNode;
/**
 * 判断节点是否禁用checked
 * @param {Node} node
 * @returns {Boolean}
 */
function isNodeDisabledChecked(node) {
    if (node.disabled || node.checkboxDisabled) return true;
    /* istanbul ignore next */
    if (node.checkable === false) {
        return !node.children || node.children.length === 0 || node.children.every(isNodeDisabledChecked);
    }
    return false;
}
exports.isNodeDisabledChecked = isNodeDisabledChecked;
/**
 * 递归获取一个 checkable = {true} 的父节点，当 checkable={false} 时继续往上查找
 * @param {Node} node
 * @param {Map} _p2n
 * @return {Node}
 */
function getCheckableParentNode(node, _p2n) {
    var parentPos = node.pos.split(['-']);
    if (parentPos.length === 2) return node;
    parentPos.splice(parentPos.length - 1, 1);
    parentPos = parentPos.join('-');
    var parentNode = _p2n[parentPos];
    if (parentNode.disabled || parentNode.checkboxDisabled) return false;
    /* istanbul ignore next */
    if (parentNode.checkable === false) {
        return getCheckableParentNode(parentNode, _p2n);
    }
    return parentNode;
}
exports.getCheckableParentNode = getCheckableParentNode;
/**
 * 过滤子节点
 * @param {Array} values
 * @param {Object} _v2n
 */
function filterChildValue(values, _v2n, _p2n) {
    var newValues = [];
    values.forEach(function (value) {
        var node = getCheckableParentNode(_v2n[value], _p2n);
        if (!node || node.checkable === false || node === _v2n[value] || values.indexOf(node.value) === -1) {
            newValues.push(value);
        }
    });
    return newValues;
}
exports.filterChildValue = filterChildValue;
function filterParentValue(values, _v2n) {
    var newValues = [];
    for (var i = 0; i < values.length; i++) {
        var node = _v2n[values[i]];
        if (!node.children || node.children.length === 0 || node.children.every(isNodeDisabledChecked)) {
            newValues.push(values[i]);
        }
    }
    return newValues;
}
exports.filterParentValue = filterParentValue;
function isDescendantOrSelf(currentPos, targetPos) {
    if (!currentPos || !targetPos) {
        return false;
    }
    var currentNums = currentPos.split('-');
    var targetNums = targetPos.split('-');
    return currentNums.length <= targetNums.length && currentNums.every(function (num, index) {
        return num === targetNums[index];
    });
}
exports.isDescendantOrSelf = isDescendantOrSelf;
function isSiblingOrSelf(currentPos, targetPos) {
    var currentNums = currentPos.split('-').slice(0, -1);
    var targetNums = targetPos.split('-').slice(0, -1);
    return currentNums.length === targetNums.length && currentNums.every(function (num, index) {
        return num === targetNums[index];
    });
}
exports.isSiblingOrSelf = isSiblingOrSelf;
// eslint-disable-next-line max-statements
function getAllCheckedValues(checkedValues, _v2n, _p2n) {
    checkedValues = normalizeToArray(checkedValues);
    var filteredValues = checkedValues.filter(function (value) {
        return !!_v2n[value];
    });
    var flatValues = tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(filterChildValue(filteredValues, _v2n, _p2n)), false), tslib_1.__read(filteredValues.filter(function (value) {
        return _v2n[value].disabled || _v2n[value].checkboxDisabled;
    })), false);
    var removeValue = function removeValue(child) {
        if (child.disabled || child.checkboxDisabled) return;
        if (child.checkable === false && child.children && child.children.length > 0) {
            return child.children.forEach(removeValue);
        }
        flatValues.splice(flatValues.indexOf(child.value), 1);
    };
    var addParentValue = function addParentValue(i, parent) {
        return flatValues.splice(i, 0, parent.value);
    };
    var values = tslib_1.__spreadArray([], tslib_1.__read(flatValues), false);
    for (var i = 0; i < values.length; i++) {
        var pos = _v2n[values[i]].pos;
        var nums = pos.split('-');
        if (nums.length === 2) {
            break;
        }
        for (var j = nums.length - 2; j > 0; j--) {
            var parentPos = nums.slice(0, j + 1).join('-');
            var parent_1 = _p2n[parentPos];
            if (parent_1.checkable === false || parent_1.disabled || parent_1.checkboxDisabled) continue;
            var parentChecked = parent_1.children.every(function (child) {
                return isNodeChecked(child, flatValues);
            });
            if (parentChecked) {
                parent_1.children.forEach(removeValue);
                addParentValue(i, parent_1);
            } else {
                break;
            }
        }
    }
    var newValues = [];
    flatValues.forEach(function (value) {
        if (_v2n[value].disabled || _v2n[value].checkboxDisabled) {
            newValues.push(value);
            return;
        }
        forEachEnableNode(_v2n[value], function (node) {
            if (node.checkable === false) return;
            newValues.push(node.value);
        });
    });
    return newValues;
}
exports.getAllCheckedValues = getAllCheckedValues;

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var cascader_select_1 = __webpack_require__(321);
exports.default = config_provider_1.default.config(cascader_select_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('shape' in props) {
            deprecated('shape', 'hasBorder', 'CascaderSelect');
            var shape = props.shape,
                others = tslib_1.__rest(props, ["shape"]);
            props = tslib_1.__assign({ hasBorder: shape !== 'arrow-only' }, others);
        }
        if ('container' in props) {
            deprecated('container', 'popupContainer', 'CascaderSelect');
            var container = props.container,
                others = tslib_1.__rest(props, ["container"]);
            props = tslib_1.__assign({ popupContainer: container }, others);
        }
        if ('expandTrigger' in props) {
            deprecated('expandTrigger', 'expandTriggerType', 'CascaderSelect');
            var expandTrigger = props.expandTrigger,
                others = tslib_1.__rest(props, ["expandTrigger"]);
            props = tslib_1.__assign({ expandTriggerType: expandTrigger }, others);
        }
        if ('showItemCount' in props) {
            deprecated('showItemCount', 'listStyle | listClassName', 'CascaderSelect');
        }
        if ('labelWidth' in props) {
            deprecated('labelWidth', 'listStyle | listClassName', 'CascaderSelect');
        }
        return props;
    }
});

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var select_1 = __webpack_require__(24);
var cascader_1 = __webpack_require__(162);
var menu_1 = __webpack_require__(13);
var util_1 = __webpack_require__(4);
var zh_cn_1 = __webpack_require__(9);
var bindCtx = util_1.func.bindCtx;
var pickOthers = util_1.obj.pickOthers;
var getStyle = util_1.dom.getStyle;
var normalizeValue = function normalizeValue(value) {
    if (value) {
        if (Array.isArray(value)) {
            return value;
        }
        return [value];
    }
    return [];
};
/**
 * CascaderSelect
 */
var CascaderSelect = /** @class */function (_super) {
    tslib_1.__extends(CascaderSelect, _super);
    function CascaderSelect(props) {
        var _this = _super.call(this, props) || this;
        /**
         * 刷新值数据缓存，删除无效值
         * @param {Arrary | String} curValue 当前值
         */
        _this.refreshValueDataCache = function (curValue) {
            if (curValue) {
                var valueArr_1 = Array.isArray(curValue) ? curValue : [curValue];
                valueArr_1.length && Object.keys(_this._valueDataCache).forEach(function (v) {
                    if (!valueArr_1.includes(v)) {
                        delete _this._valueDataCache[v];
                    }
                });
            } else {
                _this._valueDataCache = {};
            }
        };
        _this.state = {
            value: normalizeValue('value' in props ? props.value : props.defaultValue),
            searchValue: '',
            visible: typeof props.visible === 'undefined' ? props.defaultVisible : props.visible
        };
        // 缓存选中值数据
        _this._valueDataCache = {};
        bindCtx(_this, ['handleVisibleChange', 'handleAfterOpen', 'handleSelect', 'handleChange', 'handleClear', 'handleRemove', 'handleSearch', 'getPopup', 'saveSelectRef', 'saveCascaderRef', 'handleKeyDown']);
        return _this;
    }
    CascaderSelect.getDerivedStateFromProps = function (props) {
        var st = {};
        if ('value' in props) {
            st.value = normalizeValue(props.value);
        }
        if ('visible' in props) {
            st.visible = props.visible;
        }
        return st;
    };
    CascaderSelect.prototype.updateCache = function (dataSource) {
        var _this = this;
        this._v2n = {};
        this._p2n = {};
        var loop = function loop(data, prefix) {
            if (prefix === void 0) {
                prefix = '0';
            }
            return data.forEach(function (item, index) {
                var value = item.value,
                    children = item.children;
                var pos = "".concat(prefix, "-").concat(index);
                _this._v2n[value] = _this._p2n[pos] = tslib_1.__assign(tslib_1.__assign({}, item), { pos: pos });
                if (children && children.length) {
                    loop(children, pos);
                }
            });
        };
        loop(dataSource);
    };
    CascaderSelect.prototype.flatValue = function (value) {
        var _this = this;
        var getDepth = function getDepth(v) {
            var pos = _this.getPos(v);
            if (!pos) {
                return 0;
            }
            return pos.split('-').length;
        };
        var newValue = value.slice(0).sort(function (prev, next) {
            return getDepth(prev) - getDepth(next);
        });
        for (var i = 0; i < newValue.length; i++) {
            for (var j = 0; j < newValue.length; j++) {
                if (i !== j && this.isDescendantOrSelf(this.getPos(newValue[i]), this.getPos(newValue[j]))) {
                    newValue.splice(j, 1);
                    j--;
                }
            }
        }
        return newValue;
    };
    CascaderSelect.prototype.isDescendantOrSelf = function (currentPos, targetPos) {
        if (!currentPos || !targetPos) {
            return false;
        }
        var currentNums = currentPos.split('-');
        var targetNums = targetPos.split('-');
        return currentNums.length <= targetNums.length && currentNums.every(function (num, index) {
            return num === targetNums[index];
        });
    };
    CascaderSelect.prototype.getValue = function (pos) {
        return this._p2n[pos] ? this._p2n[pos].value : null;
    };
    CascaderSelect.prototype.getPos = function (value) {
        return this._v2n[value] ? this._v2n[value].pos : null;
    };
    CascaderSelect.prototype.getData = function (value) {
        var _this = this;
        return value.map(function (v) {
            return _this._v2n[v] || _this._valueDataCache[v];
        });
    };
    CascaderSelect.prototype.getLabelPath = function (data) {
        var _this = this;
        var nums = data.pos.split('-');
        return nums.slice(1).reduce(function (ret, num, index) {
            var p = nums.slice(0, index + 2).join('-');
            ret.push(_this._p2n[p].label);
            return ret;
        }, []);
    };
    CascaderSelect.prototype.getSingleData = function (value) {
        if (!value.length) {
            return null;
        }
        if (Array.isArray(value)) value = value[0];
        var data = this._v2n[value];
        if (data) {
            var labelPath = this.getLabelPath(data);
            var displayRender = this.props.displayRender || function (labels) {
                return labels.join(' / ');
            };
            data = tslib_1.__assign(tslib_1.__assign({}, data), { label: displayRender(labelPath, data) });
            this._valueDataCache[value] = data;
            this.refreshValueDataCache(value);
        } else {
            data = this._valueDataCache[value];
        }
        return data || {
            value: value
        };
    };
    CascaderSelect.prototype.getMultipleData = function (value) {
        var _this = this;
        if (!value.length) {
            return null;
        }
        var _a = this.props,
            checkStrictly = _a.checkStrictly,
            canOnlyCheckLeaf = _a.canOnlyCheckLeaf,
            displayRender = _a.displayRender;
        var flatValue = checkStrictly || canOnlyCheckLeaf ? value : this.flatValue(value);
        var data = flatValue.map(function (v) {
            var item = _this._v2n[v];
            if (item) {
                _this._valueDataCache[v] = item;
            } else {
                item = _this._valueDataCache[v];
            }
            return item || { value: v };
        });
        if (displayRender) {
            data = data.map(function (item) {
                if (!item.pos || !(item.value in _this._v2n)) {
                    return item;
                }
                var labelPath = _this.getLabelPath(item);
                var newItem = tslib_1.__assign(tslib_1.__assign({}, item), { label: displayRender(labelPath, item) });
                _this._valueDataCache[item.value] = newItem;
                return newItem;
            });
        }
        return data;
    };
    CascaderSelect.prototype.getIndeterminate = function (value) {
        var _this = this;
        var indeterminate = [];
        var positions = value.map(this.getPos.bind(this));
        positions.forEach(function (pos) {
            if (!pos) {
                return false;
            }
            var nums = pos.split('-');
            for (var i = nums.length; i > 2; i--) {
                var parentPos = nums.slice(0, i - 1).join('-');
                var parentValue = _this.getValue(parentPos);
                if (indeterminate.indexOf(parentValue) === -1) {
                    indeterminate.push(parentValue);
                }
            }
        });
        return indeterminate;
    };
    CascaderSelect.prototype.saveSelectRef = function (ref) {
        this.select = ref;
    };
    CascaderSelect.prototype.saveCascaderRef = function (ref) {
        this.cascader = ref;
    };
    CascaderSelect.prototype.completeValue = function (value) {
        var newValue = [];
        var flatValue = this.flatValue(value).reverse();
        var ps = Object.keys(this._p2n);
        for (var i = 0; i < ps.length; i++) {
            for (var j = 0; j < flatValue.length; j++) {
                var v = flatValue[j];
                if (this.isDescendantOrSelf(this.getPos(v), ps[i])) {
                    newValue.push(this.getValue(ps[i]));
                    ps.splice(i, 1);
                    i--;
                    break;
                }
            }
        }
        return newValue;
    };
    CascaderSelect.prototype.isLeaf = function (data) {
        return !(data.children && data.children.length || !!this.props.loadData && !data.isLeaf);
    };
    CascaderSelect.prototype.handleVisibleChange = function (visible, type) {
        var _this = this;
        var searchValue = this.state.searchValue;
        if (!('visible' in this.props)) {
            this.setState({
                visible: visible
            });
        }
        if (!visible && searchValue) {
            this.setState({
                searchValue: ''
            });
        }
        if (['fromCascader', 'keyboard'].indexOf(type) !== -1 && !visible) {
            // 这里需要延迟下，showSearch 的情况下通过手动设置 menuProps={{focusable: true}} 回车 focus 会有延迟
            setTimeout(function () {
                return _this.select.focusInput();
            }, 0);
        }
        this.props.onVisibleChange(visible, type);
    };
    CascaderSelect.prototype.handleKeyDown = function (e) {
        var onKeyDown = this.props.onKeyDown;
        var visible = this.state.visible;
        if (onKeyDown) {
            onKeyDown(e);
        }
        if (!visible) {
            return;
        }
        switch (e.keyCode) {
            case util_1.KEYCODE.UP:
            case util_1.KEYCODE.DOWN:
                this.cascader.setFocusValue();
                e.preventDefault();
                break;
            default:
                break;
        }
    };
    CascaderSelect.prototype.getPopup = function (ref) {
        this.popup = ref;
        if (typeof this.props.popupProps.ref === 'function') {
            this.props.popupProps.ref(ref);
        }
    };
    CascaderSelect.prototype.handleAfterOpen = function () {
        if (!this.popup) {
            return;
        }
        var _a = this.props,
            prefix = _a.prefix,
            popupProps = _a.popupProps;
        var _b = popupProps.v2,
            v2 = _b === void 0 ? false : _b;
        if (!v2) {
            var dropDownNode = this.popup.getInstance().overlay.getInstance().getContentNode();
            var cascaderNode = dropDownNode.querySelector(".".concat(prefix, "cascader"));
            if (cascaderNode) {
                this.cascaderHeight = getStyle(cascaderNode, 'height');
            }
        }
        if (typeof popupProps.afterOpen === 'function') {
            popupProps.afterOpen();
        }
    };
    CascaderSelect.prototype.handleSelect = function (value, data) {
        var _a = this.props,
            multiple = _a.multiple,
            changeOnSelect = _a.changeOnSelect;
        var _b = this.state,
            visible = _b.visible,
            searchValue = _b.searchValue;
        if (!multiple && (!changeOnSelect || this.isLeaf(data) || !!searchValue)) {
            this.handleVisibleChange(!visible, 'fromCascader');
        }
    };
    CascaderSelect.prototype.handleChange = function (value, data, extra) {
        var _this = this;
        var _a = this.props,
            multiple = _a.multiple,
            onChange = _a.onChange;
        var _b = this.state,
            searchValue = _b.searchValue,
            stateValue = _b.value;
        var st = {};
        if (multiple && stateValue && Array.isArray(stateValue)) {
            var noExistedValues_1 = stateValue.filter(function (v) {
                return !_this._v2n[v];
            });
            if (noExistedValues_1.length > 0) {
                value = value.filter(function (v) {
                    return !(noExistedValues_1.indexOf(v) >= 0);
                });
            }
            value = tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(noExistedValues_1), false), tslib_1.__read(value), false);
            // onChange 中的 data 参数也应该保留不存在的 value 的数据
            // 在 dataSource 异步加载的情况下，会出现value重复的现象，需要去重
            data = tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(noExistedValues_1.map(function (v) {
                return _this._valueDataCache[v];
            }).filter(function (v) {
                return v;
            })), false), tslib_1.__read(data), false).filter(function (current, index, arr) {
                return index === arr.indexOf(current);
            });
            // 更新缓存
            this.refreshValueDataCache(value);
        }
        if (!('value' in this.props)) {
            st.value = value;
        }
        if (!multiple && searchValue) {
            st.searchValue = '';
        }
        if (Object.keys(st).length) {
            this.setState(st);
        }
        if (onChange) {
            onChange(value, data, extra);
        }
        if (searchValue && this.select) {
            this.select.handleSearchClear();
        }
    };
    CascaderSelect.prototype.handleClear = function () {
        // 单选时点击清空按钮
        var _a = this.props,
            hasClear = _a.hasClear,
            multiple = _a.multiple,
            treeCheckable = _a.treeCheckable;
        if (hasClear && (!multiple || !treeCheckable)) {
            if (!('value' in this.props)) {
                this.setState({
                    value: []
                });
            }
            this.props.onChange(null, null);
        }
    };
    CascaderSelect.prototype.handleRemove = function (currentData) {
        var currentValue = currentData.value;
        var value;
        var _a = this.props,
            multiple = _a.multiple,
            checkStrictly = _a.checkStrictly,
            onChange = _a.onChange;
        if (multiple) {
            value = tslib_1.__spreadArray([], tslib_1.__read(this.state.value), false);
            value.splice(value.indexOf(currentValue), 1);
            if (this.props.onChange) {
                var data = this.getData(value);
                var checked = false;
                if (checkStrictly) {
                    this.props.onChange(value, data, {
                        checked: checked,
                        currentData: currentData,
                        checkedData: data
                    });
                } else {
                    var checkedValue = this.completeValue(value);
                    var checkedData = this.getData(checkedValue);
                    var indeterminateValue = this.getIndeterminate(value);
                    var indeterminateData = this.getData(indeterminateValue);
                    this.props.onChange(value, data, {
                        checked: checked,
                        currentData: currentData,
                        checkedData: checkedData,
                        indeterminateData: indeterminateData
                    });
                }
            }
        } else {
            value = [];
            onChange(null, null);
        }
        if (!('value' in this.props)) {
            this.setState({
                value: value
            });
        }
        this.refreshValueDataCache(value);
    };
    CascaderSelect.prototype.handleSearch = function (searchValue) {
        this.setState({
            searchValue: searchValue
        });
        this.props.onSearch && this.props.onSearch(searchValue);
    };
    CascaderSelect.prototype.getPath = function (pos) {
        var items = [];
        var nums = pos.split('-');
        if (nums === 2) {
            items.push(this._p2n[pos]);
        } else {
            for (var i = 1; i < nums.length; i++) {
                var p = nums.slice(0, i + 1).join('-');
                items.push(this._p2n[p]);
            }
        }
        return items;
    };
    CascaderSelect.prototype.filterItems = function () {
        var _this = this;
        var _a = this.props,
            multiple = _a.multiple,
            changeOnSelect = _a.changeOnSelect,
            canOnlyCheckLeaf = _a.canOnlyCheckLeaf,
            filter = _a.filter;
        var searchValue = this.state.searchValue;
        var items = Object.keys(this._p2n).map(function (p) {
            return _this._p2n[p];
        });
        if (!multiple && !changeOnSelect || multiple && canOnlyCheckLeaf) {
            items = items.filter(function (item) {
                return !item.children || !item.children.length;
            });
        }
        return items.map(function (item) {
            return _this.getPath(item.pos);
        }).filter(function (path) {
            return filter(searchValue, path);
        });
    };
    CascaderSelect.prototype.renderNotFound = function () {
        var _a = this.props,
            prefix = _a.prefix,
            notFoundContent = _a.notFoundContent,
            locale = _a.locale;
        return react_1.default.createElement(menu_1.default, { className: "".concat(prefix, "cascader-select-not-found") }, react_1.default.createElement(menu_1.default.Item, null, notFoundContent || locale.notFoundContent));
    };
    CascaderSelect.prototype.renderCascader = function () {
        var dataSource = this.props.dataSource;
        if (dataSource.length === 0) {
            return this.renderNotFound();
        }
        var searchValue = this.state.searchValue;
        var filteredPaths = [];
        if (searchValue) {
            filteredPaths = this.filterItems();
            if (filteredPaths.length === 0) {
                return this.renderNotFound();
            }
        }
        var _a = this.props,
            multiple = _a.multiple,
            useVirtual = _a.useVirtual,
            changeOnSelect = _a.changeOnSelect,
            checkStrictly = _a.checkStrictly,
            canOnlyCheckLeaf = _a.canOnlyCheckLeaf,
            defaultExpandedValue = _a.defaultExpandedValue,
            expandTriggerType = _a.expandTriggerType,
            onExpand = _a.onExpand,
            listStyle = _a.listStyle,
            listClassName = _a.listClassName,
            loadData = _a.loadData,
            showSearch = _a.showSearch,
            resultRender = _a.resultRender,
            readOnly = _a.readOnly,
            itemRender = _a.itemRender,
            immutable = _a.immutable,
            _b = _a.menuProps,
            menuProps = _b === void 0 ? {} : _b;
        var value = this.state.value;
        var props = {
            dataSource: dataSource,
            value: value,
            multiple: multiple,
            useVirtual: useVirtual,
            canOnlySelectLeaf: !changeOnSelect,
            checkStrictly: checkStrictly,
            canOnlyCheckLeaf: canOnlyCheckLeaf,
            defaultExpandedValue: defaultExpandedValue,
            expandTriggerType: expandTriggerType,
            ref: this.saveCascaderRef,
            onExpand: onExpand,
            listStyle: listStyle,
            listClassName: listClassName,
            loadData: loadData,
            itemRender: itemRender,
            immutable: immutable
        };
        if ('expandedValue' in this.props) {
            props.expandedValue = this.props.expandedValue;
        }
        if (!readOnly) {
            props.onChange = this.handleChange;
            props.onSelect = this.handleSelect;
        }
        if (showSearch) {
            props.searchValue = searchValue;
            props.filteredPaths = filteredPaths;
            props.resultRender = resultRender;
            props.filteredListStyle = { height: this.cascaderHeight };
        }
        return react_1.default.createElement(cascader_1.default, tslib_1.__assign({}, props, menuProps));
    };
    CascaderSelect.prototype.renderPopupContent = function () {
        var _a = this.props,
            prefix = _a.prefix,
            header = _a.header,
            footer = _a.footer;
        return react_1.default.createElement("div", { className: "".concat(prefix, "cascader-select-dropdown") }, header, this.renderCascader(), footer);
    };
    CascaderSelect.prototype.renderPreview = function (others) {
        var _a = this.props,
            prefix = _a.prefix,
            multiple = _a.multiple,
            className = _a.className,
            renderPreview = _a.renderPreview;
        var value = this.state.value;
        var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
        var items = (multiple ? this.getMultipleData(value) : this.getSingleData(value)) || [];
        if (!Array.isArray(items)) {
            items = [items];
        }
        if (typeof renderPreview === 'function') {
            return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: previewCls }), renderPreview(items, this.props));
        }
        return react_1.default.createElement("p", tslib_1.__assign({}, others, { className: previewCls }), items.map(function (_a) {
            var label = _a.label;
            return label;
        }).join(', '));
    };
    CascaderSelect.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            size = _a.size,
            hasArrow = _a.hasArrow,
            hasBorder = _a.hasBorder,
            hasClear = _a.hasClear,
            label = _a.label,
            readOnly = _a.readOnly,
            placeholder = _a.placeholder,
            dataSource = _a.dataSource,
            disabled = _a.disabled,
            multiple = _a.multiple,
            className = _a.className,
            showSearch = _a.showSearch,
            popupStyle = _a.popupStyle,
            popupClassName = _a.popupClassName,
            popupContainer = _a.popupContainer,
            popupProps = _a.popupProps,
            followTrigger = _a.followTrigger,
            isPreview = _a.isPreview,
            resultAutoWidth = _a.resultAutoWidth;
        var _b = this.state,
            value = _b.value,
            searchValue = _b.searchValue,
            visible = _b.visible;
        var others = pickOthers(Object.keys(CascaderSelect.propTypes), this.props);
        // mode应与multiple api保持一致
        if (multiple && 'mode' in others && others.mode !== 'multiple') {
            delete others.mode;
        }
        this.updateCache(dataSource);
        if (isPreview) {
            return this.renderPreview(others);
        }
        var popupContent = this.renderPopupContent();
        var props = {
            prefix: prefix,
            className: className,
            size: size,
            placeholder: placeholder,
            disabled: disabled,
            hasArrow: hasArrow,
            hasBorder: hasBorder,
            hasClear: hasClear,
            label: label,
            readOnly: readOnly,
            ref: this.saveSelectRef,
            autoWidth: false,
            mode: multiple ? 'multiple' : 'single',
            value: multiple ? this.getMultipleData(value) : this.getSingleData(value),
            onChange: this.handleClear,
            onRemove: this.handleRemove,
            visible: visible,
            onVisibleChange: this.handleVisibleChange,
            showSearch: showSearch,
            onSearch: this.handleSearch,
            onKeyDown: this.handleKeyDown,
            popupContent: popupContent,
            popupStyle: popupStyle,
            popupClassName: popupClassName,
            popupContainer: popupContainer,
            popupProps: popupProps,
            followTrigger: followTrigger
        };
        if (!multiple) {
            // 单选模式 select 会强制cache=true，会导致菜单展开状态的初始化不执行
            // 若用户没有手动设置cache true，这里重置为false
            if (!popupProps || !popupProps.cache) {
                props.popupProps = tslib_1.__assign(tslib_1.__assign({}, popupProps), { cache: false });
            }
        }
        if (showSearch) {
            props.popupProps = tslib_1.__assign(tslib_1.__assign({}, popupProps), { ref: this.getPopup, afterOpen: this.handleAfterOpen });
            props.autoWidth = resultAutoWidth && !!searchValue;
        }
        return react_1.default.createElement(select_1.default, tslib_1.__assign({}, props, others));
    };
    CascaderSelect.propTypes = {
        prefix: prop_types_1.default.string,
        pure: prop_types_1.default.bool,
        className: prop_types_1.default.string,
        /**
         * 选择框大小
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        /**
         * 选择框占位符
         */
        placeholder: prop_types_1.default.string,
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 是否有下拉箭头
         */
        hasArrow: prop_types_1.default.bool,
        /**
         * 是否有边框
         */
        hasBorder: prop_types_1.default.bool,
        /**
         * 是否有清除按钮
         */
        hasClear: prop_types_1.default.bool,
        /**
         * 自定义内联 label
         */
        label: prop_types_1.default.node,
        /**
         * 是否只读，只读模式下可以展开弹层但不能选
         */
        readOnly: prop_types_1.default.bool,
        /**
         * 数据源，结构可参考下方说明
         */
        dataSource: prop_types_1.default.arrayOf(prop_types_1.default.object),
        /**
         * （非受控）默认值
         */
        defaultValue: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.arrayOf(prop_types_1.default.string)]),
        /**
         * （受控）当前值
         */
        value: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.arrayOf(prop_types_1.default.string)]),
        /**
         * 选中值改变时触发的回调函数
         * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组
         * @param {Object|Array} data 选中的数据，包括 value 和 label，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点
         * @param {Object} extra 额外参数
         * @param {Array} extra.selectedPath 单选时选中的数据的路径
         * @param {Boolean} extra.checked 多选时当前的操作是选中还是取消选中
         * @param {Object} extra.currentData 多选时当前操作的数据
         * @param {Array} extra.checkedData 多选时所有被选中的数据
         * @param {Array} extra.indeterminateData 多选时半选的数据
         */
        onChange: prop_types_1.default.func,
        /**
         * 默认展开值，如果不设置，组件内部会根据 defaultValue/value 进行自动设置
         */
        defaultExpandedValue: prop_types_1.default.arrayOf(prop_types_1.default.string),
        /**
         * （受控）当前展开值
         */
        expandedValue: prop_types_1.default.arrayOf(prop_types_1.default.string),
        /**
         * 展开触发的方式
         */
        expandTriggerType: prop_types_1.default.oneOf(['click', 'hover']),
        onExpand: prop_types_1.default.func,
        /**
         * 是否开启虚拟滚动
         */
        useVirtual: prop_types_1.default.bool,
        /**
         * 是否多选
         */
        multiple: prop_types_1.default.bool,
        /**
         * 是否选中即发生改变, 该属性仅在单选模式下有效
         */
        changeOnSelect: prop_types_1.default.bool,
        /**
         * 是否只能勾选叶子项的checkbox，该属性仅在多选模式下有效
         */
        canOnlyCheckLeaf: prop_types_1.default.bool,
        /**
         * 父子节点是否选中不关联
         */
        checkStrictly: prop_types_1.default.bool,
        /**
         * 每列列表样式对象
         */
        listStyle: prop_types_1.default.object,
        /**
         * 每列列表类名
         */
        listClassName: prop_types_1.default.string,
        /**
         * 选择框单选时展示结果的自定义渲染函数
         * @param {Array} label 选中路径的文本数组
         * @return {ReactNode} 渲染在选择框中的内容
         * @default 单选时：labelPath => labelPath.join(' / ')；多选时：labelPath => labelPath[labelPath.length - 1]
         */
        displayRender: prop_types_1.default.func,
        /**
         * 渲染 item 内容的方法
         * @param {Object} item 渲染节点的item
         * @return {ReactNode} item node
         */
        itemRender: prop_types_1.default.func,
        /**
         * 是否显示搜索框
         */
        showSearch: prop_types_1.default.bool,
        /**
         * 自定义搜索函数
         * @param {String} searchValue 搜索的关键字
         * @param {Array} path 节点路径
         * @return {Boolean} 是否匹配
         * @default 根据路径所有节点的文本值模糊匹配
         */
        filter: prop_types_1.default.func,
        /**
         * 当搜索框值变化时回调
         * @param {String} value 数据
         * @version 1.23
         */
        onSearch: prop_types_1.default.func,
        /**
         * 搜索结果自定义渲染函数
         * @param {String} searchValue 搜索的关键字
         * @param {Array} path 匹配到的节点路径
         * @return {ReactNode} 渲染的内容
         * @default 按照节点文本 a / b / c 的模式渲染
         */
        resultRender: prop_types_1.default.func,
        /**
         * 搜索结果列表是否和选择框等宽
         */
        resultAutoWidth: prop_types_1.default.bool,
        /**
         * 无数据时显示内容
         */
        notFoundContent: prop_types_1.default.node,
        /**
         * 国际化
         */
        locale: prop_types_1.default.object,
        /**
         * 异步加载数据函数
         * @param {Object} data 当前点击异步加载的数据
         */
        loadData: prop_types_1.default.func,
        /**
         * 自定义下拉框头部
         */
        header: prop_types_1.default.node,
        /**
         * 自定义下拉框底部
         */
        footer: prop_types_1.default.node,
        /**
         * 初始下拉框是否显示
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 当前下拉框是否显示
         */
        visible: prop_types_1.default.bool,
        /**
         * 下拉框显示或关闭时触发事件的回调函数
         * @param {Boolean} visible 是否显示
         * @param {String} type 触发显示关闭的操作类型, fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
         */
        onVisibleChange: prop_types_1.default.func,
        /**
         * 下拉框自定义样式对象
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 下拉框样式自定义类名
         */
        popupClassName: prop_types_1.default.string,
        /**
         * 下拉框挂载的容器节点
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 透传到 Popup 的属性对象
         */
        popupProps: prop_types_1.default.object,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {Array<data>} value 选择值 { label: , value:}
         */
        renderPreview: prop_types_1.default.func,
        /**
         * 是否是不可变数据
         * @version 1.23
         */
        immutable: prop_types_1.default.bool
    };
    CascaderSelect.defaultProps = {
        prefix: 'next-',
        pure: false,
        size: 'medium',
        disabled: false,
        hasArrow: true,
        hasBorder: true,
        hasClear: false,
        dataSource: [],
        defaultValue: null,
        expandTriggerType: 'click',
        onExpand: function onExpand() {},
        useVirtual: false,
        multiple: false,
        changeOnSelect: false,
        canOnlyCheckLeaf: false,
        checkStrictly: false,
        showSearch: false,
        filter: function filter(searchValue, path) {
            return path.some(function (item) {
                return String(item.label).toLowerCase().indexOf(String(searchValue).toLowerCase()) > -1;
            });
        },
        resultRender: function resultRender(searchValue, path) {
            var parts = [];
            path.forEach(function (item, i) {
                var reExp = searchValue.replace(/[-.+*?^$()[\]{}|\\]/g, function (v) {
                    return "\\".concat(v);
                });
                var re = new RegExp(reExp, 'gi');
                var others = item.label.split(re);
                var matches = item.label.match(re);
                others.forEach(function (other, j) {
                    if (other) {
                        parts.push(other);
                    }
                    if (j < others.length - 1) {
                        parts.push(react_1.default.createElement("em", { key: "".concat(i, "-").concat(j) }, matches[j]));
                    }
                });
                if (i < path.length - 1) {
                    parts.push(' / ');
                }
            });
            return react_1.default.createElement("span", null, parts);
        },
        resultAutoWidth: true,
        defaultVisible: false,
        onVisibleChange: function onVisibleChange() {},
        popupProps: {},
        immutable: false,
        locale: zh_cn_1.default.Select
    };
    return CascaderSelect;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(CascaderSelect);

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var collapse_1 = __webpack_require__(323);
var panel_1 = __webpack_require__(164);
collapse_1.default.Panel = panel_1.default;
exports.default = collapse_1.default;

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var panel_1 = __webpack_require__(164);
/** Collapse */
var Collapse = /** @class */function (_super) {
    tslib_1.__extends(Collapse, _super);
    function Collapse(props) {
        var _this = _super.call(this, props) || this;
        var expandedKeys;
        if ('expandedKeys' in props) {
            expandedKeys = props.expandedKeys;
        } else {
            expandedKeys = props.defaultExpandedKeys;
        }
        _this.state = {
            expandedKeys: typeof expandedKeys === 'undefined' ? [] : expandedKeys
        };
        return _this;
    }
    Collapse.getDerivedStateFromProps = function (props) {
        if ('expandedKeys' in props) {
            return {
                expandedKeys: typeof props.expandedKeys === 'undefined' ? [] : props.expandedKeys
            };
        }
        return null;
    };
    Collapse.prototype.onItemClick = function (key) {
        var expandedKeys = this.state.expandedKeys;
        if (this.props.accordion) {
            expandedKeys = String(expandedKeys[0]) === String(key) ? [] : [key];
        } else {
            expandedKeys = tslib_1.__spreadArray([], tslib_1.__read(expandedKeys), false);
            var stringKey_1 = String(key);
            var index = expandedKeys.findIndex(function (k) {
                return String(k) === stringKey_1;
            });
            var isExpanded = index > -1;
            if (isExpanded) {
                expandedKeys.splice(index, 1);
            } else {
                expandedKeys.push(key);
            }
        }
        this.setExpandedKey(expandedKeys);
    };
    Collapse.prototype.genratePanelId = function (itemId, index) {
        var collapseId = this.props.id;
        var id;
        if (itemId) {
            // 优先用 item自带的id
            id = itemId;
        } else if (collapseId) {
            // 其次用 collapseId 和 index 生成id
            id = "".concat(collapseId, "-panel-").concat(index);
        }
        return id;
    };
    Collapse.prototype.getProps = function (item, index, key) {
        var _this = this;
        var expandedKeys = this.state.expandedKeys;
        var title = item.title;
        var disabled = this.props.disabled;
        if (!disabled) {
            disabled = item.disabled;
        }
        var isExpanded = false;
        if (this.props.accordion) {
            isExpanded = String(expandedKeys[0]) === String(key);
        } else {
            isExpanded = expandedKeys.some(function (expandedKey) {
                if (expandedKey === null || expandedKey === undefined || key === null || key === undefined) {
                    return false;
                }
                if (expandedKey === key || expandedKey.toString() === key.toString()) {
                    return true;
                }
                return false;
            });
        }
        var id = this.genratePanelId(item.id, index);
        return {
            key: key,
            title: title,
            isExpanded: isExpanded,
            disabled: disabled,
            id: id,
            onClick: disabled ? null : function () {
                _this.onItemClick(key);
                if ('onClick' in item) {
                    item.onClick(key);
                }
            }
        };
    };
    Collapse.prototype.getItemsByDataSource = function () {
        var _this = this;
        var props = this.props;
        var dataSource = props.dataSource;
        // 是否有dataSource.item传入过key
        var hasKeys = dataSource.some(function (item) {
            return 'key' in item;
        });
        return dataSource.map(function (item, index) {
            // 传入过key就用item.key 没传入则统一使用index为key
            var key = hasKeys ? item.key : "".concat(index);
            return react_1.default.createElement(panel_1.default, tslib_1.__assign({}, _this.getProps(item, index, key), { key: key }), item.content);
        });
    };
    Collapse.prototype.getItemsByChildren = function () {
        var _this = this;
        // 是否有child传入过key
        var allKeys = react_1.default.Children.map(this.props.children, function (child) {
            return child && child.key;
        });
        var hasKeys = Boolean(allKeys && allKeys.length);
        return react_1.default.Children.map(this.props.children, function (child, index) {
            if (child && typeof child.type === 'function' && child.type.isNextPanel) {
                // 传入过key就用child.key 没传入则统一使用index为key
                var key = hasKeys ? child.key : "".concat(index);
                return react_1.default.cloneElement(child, _this.getProps(child.props, index, key));
            } else {
                return child;
            }
        });
    };
    Collapse.prototype.setExpandedKey = function (expandedKeys) {
        if (!('expandedKeys' in this.props)) {
            this.setState({ expandedKeys: expandedKeys });
        }
        this.props.onExpand(this.props.accordion ? expandedKeys[0] : expandedKeys);
    };
    Collapse.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            className = _b.className,
            style = _b.style,
            disabled = _b.disabled,
            dataSource = _b.dataSource,
            id = _b.id,
            rtl = _b.rtl;
        var collapseClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "collapse")] = true, _a["".concat(prefix, "collapse-disabled")] = disabled, _a[className] = Boolean(className), _a));
        var others = util_1.obj.pickOthers(Collapse.propTypes, this.props);
        return react_1.default.createElement("div", tslib_1.__assign({ id: id, className: collapseClassName, style: style }, others, { role: "presentation", dir: rtl ? 'rtl' : undefined }), dataSource ? this.getItemsByDataSource() : this.getItemsByChildren());
    };
    Collapse.propTypes = {
        /**
         * 样式前缀
         */
        prefix: prop_types_1.default.string,
        /**
         * 组件接受行内样式
         */
        style: prop_types_1.default.object,
        /**
         * 使用数据模型构建
         */
        dataSource: prop_types_1.default.array,
        /**
         * 默认展开keys
         */
        defaultExpandedKeys: prop_types_1.default.array,
        /**
         * 受控展开keys
         */
        expandedKeys: prop_types_1.default.array,
        /**
         * 展开状态发升变化时候的回调
         */
        onExpand: prop_types_1.default.func,
        /**
         * 所有禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 扩展class
         */
        className: prop_types_1.default.string,
        /**
         * 手风琴模式，一次只能打开一个
         */
        accordion: prop_types_1.default.bool,
        children: prop_types_1.default.node,
        id: prop_types_1.default.string,
        rtl: prop_types_1.default.bool
    };
    Collapse.defaultProps = {
        accordion: false,
        prefix: 'next-',
        onExpand: util_1.func.noop
    };
    Collapse.contextTypes = {
        prefix: prop_types_1.default.string
    };
    return Collapse;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(config_provider_1.default.config(Collapse));

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var date_picker_1 = __webpack_require__(325);
var range_picker_1 = __webpack_require__(327);
var month_picker_1 = __webpack_require__(328);
var year_picker_1 = __webpack_require__(329);
var week_picker_1 = __webpack_require__(330);
/* istanbul ignore next */
var transform = function transform(props, deprecated) {
    var open = props.open,
        defaultOpen = props.defaultOpen,
        onOpenChange = props.onOpenChange,
        others = tslib_1.__rest(props, ["open", "defaultOpen", "onOpenChange"]);
    var newProps = others;
    delete newProps.formater;
    if ('open' in props) {
        deprecated('open', 'visible', 'DatePicker');
        newProps.visible = open;
        if ('visible' in props) {
            newProps.visible = props.visible;
        }
    }
    if ('defaultOpen' in props) {
        deprecated('defaultOpen', 'defaultVisible', 'DatePicker');
        newProps.defaultVisible = defaultOpen;
        if ('defaultVisible' in props) {
            newProps.defaultVisible = props.defaultVisible;
        }
    }
    if ('onOpenChange' in props && typeof onOpenChange === 'function') {
        deprecated('onOpenChange', 'onVisibleChange', 'DatePicker');
        newProps.onVisibleChange = onOpenChange;
        if ('onVisibleChange' in props) {
            newProps.onVisibleChange = props.onVisibleChange;
        }
    }
    if ('formater' in props) {
        deprecated('formater', 'format showTime.format', 'DatePicker');
    }
    if ('format' in props && typeof props.format !== 'string') {
        deprecated('format', 'format: PropTypes.string,', 'DatePicker');
    }
    if ('ranges' in props) {
        deprecated('ranges', 'footerRender: PropTypes.func', 'RangePicker');
    }
    return newProps;
};
date_picker_1.default.RangePicker = config_provider_1.default.config(range_picker_1.default, {
    componentName: 'DatePicker',
    transform: transform
});
date_picker_1.default.MonthPicker = config_provider_1.default.config(month_picker_1.default, {
    componentName: 'DatePicker',
    transform: transform
});
date_picker_1.default.YearPicker = config_provider_1.default.config(year_picker_1.default, {
    componentName: 'DatePicker',
    transform: transform
});
date_picker_1.default.WeekPicker = config_provider_1.default.config(week_picker_1.default, {
    componentName: 'DatePicker'
});
exports.default = config_provider_1.default.config(date_picker_1.default, {
    transform: transform
});

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var moment_1 = __webpack_require__(16);
var config_provider_1 = __webpack_require__(5);
var overlay_1 = __webpack_require__(12);
var input_1 = __webpack_require__(15);
var icon_1 = __webpack_require__(7);
var calendar_1 = __webpack_require__(32);
var panel_1 = __webpack_require__(88);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(25);
var panel_footer_1 = __webpack_require__(165);
var Popup = overlay_1.default.Popup;
/**
 * DatePicker
 */
var DatePicker = /** @class */function (_super) {
    tslib_1.__extends(DatePicker, _super);
    function DatePicker(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.onValueChange = function (newValue, handler) {
            if (handler === void 0) {
                handler = 'onChange';
            }
            var ret = _this.state.inputAsString && newValue ? newValue.format(_this.state.dateTimeFormat) : newValue;
            _this.props[handler](ret);
        };
        _this.onSelectCalendarPanel = function (value) {
            var _a = _this.props,
                showTime = _a.showTime,
                resetTime = _a.resetTime;
            var prevValue = _this.state.value;
            var newValue = value;
            if (showTime) {
                if (!prevValue) {
                    // 第一次选择日期值时，如果设置了默认时间，则使用该默认时间
                    if (showTime.defaultValue) {
                        var defaultTimeValue = (0, util_2.formatDateValue)(showTime.defaultValue, _this.state.timeFormat);
                        newValue = (0, util_2.resetValueTime)(value, defaultTimeValue);
                    }
                } else if (!resetTime) {
                    // 非第一选择日期，如果开启了 resetTime 属性，则记住之前选择的时间值
                    newValue = (0, util_2.resetValueTime)(value, prevValue);
                }
            }
            _this.handleChange(newValue, prevValue, { inputing: false });
            if (!showTime) {
                _this.onVisibleChange(false, 'calendarSelect');
            }
        };
        _this.onSelectTimePanel = function (value) {
            _this.handleChange(value, _this.state.value, { inputing: false });
        };
        _this.clearValue = function () {
            _this.setState({
                dateInputStr: '',
                timeInputStr: ''
            });
            _this.handleChange(null, _this.state.value, { inputing: false });
        };
        _this.onDateInputChange = function (inputStr, e, eventType) {
            if (eventType === 'clear' || !inputStr) {
                e.stopPropagation();
                _this.clearValue();
            } else {
                _this.setState({
                    dateInputStr: inputStr,
                    inputing: 'date'
                });
            }
        };
        _this.onTimeInputChange = function (inputStr) {
            _this.setState({
                timeInputStr: inputStr,
                inputing: 'time'
            });
        };
        _this.onDateInputBlur = function () {
            var _a = _this.state,
                dateInputStr = _a.dateInputStr,
                value = _a.value,
                format = _a.format;
            var resetTime = _this.props.resetTime;
            if (dateInputStr) {
                var disabledDate = _this.props.disabledDate;
                var parsed = (0, moment_1.default)(dateInputStr, format, true);
                _this.setState({
                    dateInputStr: '',
                    inputing: false
                });
                if (parsed.isValid() && !disabledDate(parsed, 'date')) {
                    parsed = resetTime ? parsed : (0, util_2.resetValueTime)(parsed, value);
                    _this.handleChange(parsed, value);
                }
            }
        };
        _this.onTimeInputBlur = function () {
            var _a = _this.state,
                value = _a.value,
                timeInputStr = _a.timeInputStr,
                timeFormat = _a.timeFormat;
            if (timeInputStr) {
                var parsed = (0, moment_1.default)(timeInputStr, timeFormat, true);
                _this.setState({
                    timeInputStr: '',
                    inputing: false
                });
                if (parsed.isValid()) {
                    var hour = parsed.hour();
                    var minute = parsed.minute();
                    var second = parsed.second();
                    var newValue = value.clone().hour(hour).minute(minute).second(second);
                    _this.handleChange(newValue, _this.state.value);
                }
            }
        };
        _this.onKeyDown = function (e) {
            var format = _this.props.format;
            var _a = _this.state,
                dateInputStr = _a.dateInputStr,
                value = _a.value;
            var dateStr = (0, util_2.onDateKeydown)(e, { format: format, dateInputStr: dateInputStr, value: value }, 'day');
            if (!dateStr) return;
            _this.onDateInputChange(dateStr);
        };
        _this.onTimeKeyDown = function (e) {
            var showTime = _this.props.showTime;
            var _a = _this.state,
                timeInputStr = _a.timeInputStr,
                timeFormat = _a.timeFormat,
                value = _a.value;
            var _b = (typeof showTime === "undefined" ? "undefined" : (0, _typeof3.default)(showTime)) === 'object' ? showTime : {},
                disabledMinutes = _b.disabledMinutes,
                disabledSeconds = _b.disabledSeconds,
                _c = _b.hourStep,
                hourStep = _c === void 0 ? 1 : _c,
                _d = _b.minuteStep,
                minuteStep = _d === void 0 ? 1 : _d,
                _e = _b.secondStep,
                secondStep = _e === void 0 ? 1 : _e;
            var unit = 'second';
            if (disabledSeconds) {
                unit = disabledMinutes ? 'hour' : 'minute';
            }
            var timeStr = (0, util_2.onTimeKeydown)(e, {
                format: timeFormat,
                timeInputStr: timeInputStr,
                value: value,
                steps: {
                    hour: hourStep,
                    minute: minuteStep,
                    second: secondStep
                }
            }, unit);
            if (!timeStr) return;
            _this.onTimeInputChange(timeStr);
        };
        _this.handleChange = function (newValue, prevValue, others) {
            if (others === void 0) {
                others = {};
            }
            if (!('value' in _this.props)) {
                _this.setState(tslib_1.__assign({ value: newValue }, others));
            } else {
                _this.setState(tslib_1.__assign({}, others));
            }
            var newValueOf = newValue ? newValue.valueOf() : null;
            var preValueOf = prevValue ? prevValue.valueOf() : null;
            if (newValueOf !== preValueOf) {
                _this.onValueChange(newValue);
            }
        };
        _this.onFoucsDateInput = function () {
            if (_this.state.panel !== util_2.PANEL.DATE) {
                _this.setState({
                    panel: util_2.PANEL.DATE
                });
            }
        };
        _this.onFoucsTimeInput = function () {
            if (_this.state.panel !== util_2.PANEL.TIME) {
                _this.setState({
                    panel: util_2.PANEL.TIME
                });
            }
        };
        _this.onVisibleChange = function (visible, type) {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: visible
                });
            }
            _this.props.onVisibleChange(visible, type);
        };
        _this.changePanel = function (panel) {
            _this.setState({
                panel: panel
            });
        };
        _this.onOk = function (value) {
            _this.onVisibleChange(false, 'okBtnClick');
            _this.onValueChange(value || _this.state.value, 'onOk');
        };
        var _a = (0, util_2.getDateTimeFormat)(props.format, props.showTime),
            format = _a.format,
            timeFormat = _a.timeFormat,
            dateTimeFormat = _a.dateTimeFormat;
        _this.state = {
            value: (0, util_2.formatDateValue)(props.defaultValue, dateTimeFormat),
            dateInputStr: '',
            timeInputStr: '',
            inputing: false, // 当前是否处于输入状态
            visible: props.defaultVisible,
            inputAsString: typeof props.defaultValue === 'string',
            panel: util_2.PANEL.DATE,
            format: format,
            timeFormat: timeFormat,
            dateTimeFormat: dateTimeFormat
        };
        return _this;
    }
    DatePicker.getDerivedStateFromProps = function (props) {
        var formatStates = (0, util_2.getDateTimeFormat)(props.format, props.showTime);
        var states = {};
        if ('value' in props) {
            states.value = (0, util_2.formatDateValue)(props.value, formatStates.dateTimeFormat);
            states.inputAsString = typeof props.value === 'string';
        }
        if ('visible' in props) {
            states.visible = props.visible;
        }
        return tslib_1.__assign(tslib_1.__assign({}, states), formatStates);
    };
    DatePicker.prototype.renderPreview = function (others) {
        var _a = this.props,
            prefix = _a.prefix,
            className = _a.className,
            renderPreview = _a.renderPreview;
        var _b = this.state,
            value = _b.value,
            dateTimeFormat = _b.dateTimeFormat;
        var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
        var label = value ? value.format(dateTimeFormat) : '';
        if (typeof renderPreview === 'function') {
            return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: previewCls }), renderPreview(value, this.props));
        }
        return react_1.default.createElement("p", tslib_1.__assign({}, others, { className: previewCls }), label);
    };
    DatePicker.prototype.render = function () {
        var _a, _b, _c, _d, _e, _f;
        var _g = this.props,
            prefix = _g.prefix,
            rtl = _g.rtl,
            locale = _g.locale,
            label = _g.label,
            state = _g.state,
            defaultVisibleMonth = _g.defaultVisibleMonth,
            onVisibleMonthChange = _g.onVisibleMonthChange,
            showTime = _g.showTime,
            disabledDate = _g.disabledDate,
            footerRender = _g.footerRender,
            placeholder = _g.placeholder,
            size = _g.size,
            disabled = _g.disabled,
            hasClear = _g.hasClear,
            popupTriggerType = _g.popupTriggerType,
            popupAlign = _g.popupAlign,
            popupContainer = _g.popupContainer,
            popupStyle = _g.popupStyle,
            popupClassName = _g.popupClassName,
            popupProps = _g.popupProps,
            popupComponent = _g.popupComponent,
            popupContent = _g.popupContent,
            followTrigger = _g.followTrigger,
            className = _g.className,
            inputProps = _g.inputProps,
            dateCellRender = _g.dateCellRender,
            monthCellRender = _g.monthCellRender,
            yearCellRender = _g.yearCellRender,
            dateInputAriaLabel = _g.dateInputAriaLabel,
            timeInputAriaLabel = _g.timeInputAriaLabel,
            isPreview = _g.isPreview,
            disableChangeMode = _g.disableChangeMode,
            yearRange = _g.yearRange,
            others = tslib_1.__rest(_g, ["prefix", "rtl", "locale", "label", "state", "defaultVisibleMonth", "onVisibleMonthChange", "showTime", "disabledDate", "footerRender", "placeholder", "size", "disabled", "hasClear", "popupTriggerType", "popupAlign", "popupContainer", "popupStyle", "popupClassName", "popupProps", "popupComponent", "popupContent", "followTrigger", "className", "inputProps", "dateCellRender", "monthCellRender", "yearCellRender", "dateInputAriaLabel", "timeInputAriaLabel", "isPreview", "disableChangeMode", "yearRange"]);
        var _h = this.state,
            visible = _h.visible,
            value = _h.value,
            dateInputStr = _h.dateInputStr,
            timeInputStr = _h.timeInputStr,
            panel = _h.panel,
            inputing = _h.inputing,
            format = _h.format,
            timeFormat = _h.timeFormat,
            dateTimeFormat = _h.dateTimeFormat;
        var datePickerCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "date-picker")] = true, _a), className);
        var triggerInputCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "date-picker-input")] = true, _b["".concat(prefix, "error")] = false, _b));
        var panelBodyClassName = (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "date-picker-body")] = true, _c["".concat(prefix, "date-picker-body-show-time")] = showTime, _c));
        var panelDateInputCls = (0, classnames_1.default)((_d = {}, _d["".concat(prefix, "date-picker-panel-input")] = true, _d["".concat(prefix, "focus")] = panel === util_2.PANEL.DATE, _d));
        if (rtl) {
            others.dir = 'rtl';
        }
        if (isPreview) {
            return this.renderPreview(util_1.obj.pickOthers(others, DatePicker.PropTypes));
        }
        var sharedInputProps = tslib_1.__assign(tslib_1.__assign({}, inputProps), { size: size, disabled: disabled, onChange: this.onDateInputChange, onBlur: this.onDateInputBlur, onPressEnter: this.onDateInputBlur, onKeyDown: this.onKeyDown });
        var dateInputValue = inputing === 'date' ? dateInputStr : value && value.format(format) || '';
        var triggerInputValue = dateInputValue;
        var dateInput = react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedInputProps, { "aria-label": dateInputAriaLabel, value: dateInputValue, onFocus: this.onFoucsDateInput, placeholder: format, className: panelDateInputCls }));
        var datePanel = react_1.default.createElement(calendar_1.default, { shape: "panel", value: value, format: format, dateCellRender: dateCellRender, monthCellRender: monthCellRender, yearCellRender: yearCellRender, onSelect: this.onSelectCalendarPanel, defaultVisibleMonth: defaultVisibleMonth, onVisibleMonthChange: onVisibleMonthChange, disabledDate: disabledDate, disableChangeMode: disableChangeMode, yearRange: yearRange });
        var panelFooter = footerRender();
        var timeInput = null;
        var timePanel = null;
        if (showTime) {
            var timeInputValue = inputing === 'time' ? timeInputStr : value && value.format(timeFormat) || '';
            triggerInputValue = value && value.format(dateTimeFormat) || '';
            var timePanelProps = (typeof showTime === "undefined" ? "undefined" : (0, _typeof3.default)(showTime)) === 'object' ? showTime : {};
            var showSecond = timeFormat.indexOf('s') > -1;
            var showMinute = timeFormat.indexOf('m') > -1;
            var panelTimeInputCls = (0, classnames_1.default)((_e = {}, _e["".concat(prefix, "date-picker-panel-input")] = true, _e["".concat(prefix, "focus")] = panel === util_2.PANEL.TIME, _e));
            timeInput = react_1.default.createElement(input_1.default, { placeholder: timeFormat, value: timeInputValue, size: size, "aria-label": timeInputAriaLabel, disabled: disabled || !value, onChange: this.onTimeInputChange, onFocus: this.onFoucsTimeInput, onBlur: this.onTimeInputBlur, onPressEnter: this.onTimeInputBlur, onKeyDown: this.onTimeKeyDown, className: panelTimeInputCls });
            timePanel = react_1.default.createElement(panel_1.default, tslib_1.__assign({}, timePanelProps, { locale: locale, className: "".concat(prefix, "date-picker-panel-time"), showSecond: showSecond, showMinute: showMinute, disabled: disabled, prefix: prefix, value: value, onSelect: this.onSelectTimePanel }));
            panelFooter = panelFooter || react_1.default.createElement(panel_footer_1.default, { prefix: prefix, locale: locale, value: value, panel: panel, onPanelChange: this.changePanel, onOk: this.onOk });
        }
        var panelBody = (_f = {}, _f[util_2.PANEL.DATE] = datePanel, _f[util_2.PANEL.TIME] = timePanel, _f)[panel];
        var allowClear = value && hasClear;
        var trigger = react_1.default.createElement("div", { className: "".concat(prefix, "date-picker-trigger") }, react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedInputProps, { label: label, state: state, value: triggerInputValue, role: "combobox", "aria-expanded": visible, readOnly: true, placeholder: placeholder || (showTime ? locale.datetimePlaceholder : locale.placeholder), hint: react_1.default.createElement(icon_1.default, { type: "calendar", className: "".concat(prefix, "date-picker-symbol-calendar-icon") }), hasClear: allowClear, className: triggerInputCls })));
        var PopupComponent = popupComponent ? popupComponent : Popup;
        return react_1.default.createElement("div", tslib_1.__assign({}, util_1.obj.pickOthers(DatePicker.propTypes, others), { className: datePickerCls }), react_1.default.createElement(PopupComponent, tslib_1.__assign({ autoFocus: true, align: popupAlign }, popupProps, { followTrigger: followTrigger, disabled: disabled, visible: visible, onVisibleChange: this.onVisibleChange, triggerType: popupTriggerType, container: popupContainer, style: popupStyle, className: popupClassName, trigger: trigger }), popupContent ? popupContent : react_1.default.createElement("div", { dir: others.dir, className: panelBodyClassName }, react_1.default.createElement("div", { className: "".concat(prefix, "date-picker-panel-header") }, dateInput, timeInput), panelBody, panelFooter)));
    };
    DatePicker.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, rtl: prop_types_1.default.bool,
        /**
         * 输入框内置标签
         */
        label: prop_types_1.default.node,
        /**
         * 输入框状态
         */
        state: prop_types_1.default.oneOf(['success', 'loading', 'error']),
        /**
         * 输入提示
         */
        placeholder: prop_types_1.default.string,
        /**
         * 默认展现的月
         * @return {MomentObject} 返回包含指定月份的 moment 对象实例
         */
        defaultVisibleMonth: prop_types_1.default.func, onVisibleMonthChange: prop_types_1.default.func,
        /**
         * 日期值（受控）moment 对象
         */
        value: util_2.checkDateValue,
        /**
         * 初始日期值，moment 对象
         */
        defaultValue: util_2.checkDateValue,
        /**
         * 日期值的格式（用于限定用户输入和展示）
         */
        format: prop_types_1.default.string,
        /**
         * 是否使用时间控件，传入 TimePicker 的属性 { defaultValue, format, ... }
         */
        showTime: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.bool]),
        /**
         * 每次选择日期时是否重置时间（仅在 showTime 开启时有效）
         */
        resetTime: prop_types_1.default.bool,
        /**
         * 禁用日期函数
         * @param {MomentObject} 日期值
         * @param {String} view 当前视图类型，year: 年， month: 月, date: 日
         * @return {Boolean} 是否禁用
         */
        disabledDate: prop_types_1.default.func,
        /**
         * 自定义面板页脚
         * @return {Node} 自定义的面板页脚组件
         */
        footerRender: prop_types_1.default.func,
        /**
         * 日期值改变时的回调
         * @param {MomentObject|String} value 日期值
         */
        onChange: prop_types_1.default.func,
        /**
         * 点击确认按钮时的回调
         * @param {MomentObject|String} value 日期值
         */
        onOk: prop_types_1.default.func,
        /**
         * 输入框尺寸
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 是否显示清空按钮
         */
        hasClear: prop_types_1.default.bool,
        /**
         * 弹层显示状态
         */
        visible: prop_types_1.default.bool,
        /**
         * 弹层默认是否显示
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 弹层展示状态变化时的回调
         * @param {Boolean} visible 弹层是否显示
         * @param {String} type 触发弹层显示和隐藏的来源 calendarSelect 表示由日期表盘的选择触发； okBtnClick 表示由确认按钮触发； fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
         */
        onVisibleChange: prop_types_1.default.func,
        /**
         * 弹层触发方式
         */
        popupTriggerType: prop_types_1.default.oneOf(['click', 'hover']),
        /**
         * 弹层对齐方式,具体含义见 OverLay文档
         */
        popupAlign: prop_types_1.default.string,
        /**
         * 弹层容器
         * @param {Element} target 目标元素
         * @return {Element} 弹层的容器元素
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 弹层自定义样式
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 弹层自定义样式类
         */
        popupClassName: prop_types_1.default.string,
        /**
         * 弹层其他属性
         */
        popupProps: prop_types_1.default.object,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 输入框其他属性
         */
        inputProps: prop_types_1.default.object,
        /**
         * 自定义日期渲染函数
         * @param {Moment} calendarDate 日期值（moment对象）
         * @returns {ReactNode}
         */
        dateCellRender: prop_types_1.default.func,
        /**
         * 自定义月份渲染函数
         * @param {Moment} calendarDate 对应 Calendar 返回的自定义日期对象
         * @returns {ReactNode}
         */
        monthCellRender: prop_types_1.default.func,
        /**
         * 自定义年份渲染函数
         * @param {Moment} calendarDate 对应 Calendar 返回的自定义日期对象
         * @returns {ReactNode}
         */
        yearCellRender: prop_types_1.default.func,
        /**
         * 日期输入框的 aria-label 属性
         */
        dateInputAriaLabel: prop_types_1.default.string,
        /**
         * 时间输入框的 aria-label 属性
         */
        timeInputAriaLabel: prop_types_1.default.string,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {MomentObject} value 日期
         */
        renderPreview: prop_types_1.default.func, locale: prop_types_1.default.object, className: prop_types_1.default.string, name: prop_types_1.default.string,
        /**
         * 自定义弹层组件
         */
        popupComponent: prop_types_1.default.elementType,
        /**
         * 自定义弹层内容
         */
        popupContent: prop_types_1.default.node,
        /**
         * 禁用日期选择器的日期模式切换
         */
        disableChangeMode: prop_types_1.default.bool, yearRange: prop_types_1.default.arrayOf(prop_types_1.default.number) });
    DatePicker.defaultProps = {
        prefix: 'next-',
        rtl: false,
        format: 'YYYY-MM-DD',
        size: 'medium',
        showTime: false,
        resetTime: false,
        disabledDate: function disabledDate() {
            return false;
        },
        footerRender: function footerRender() {
            return null;
        },
        hasClear: true,
        popupTriggerType: 'click',
        popupAlign: 'tl tl',
        locale: zh_cn_1.default.DatePicker,
        defaultVisible: false,
        onChange: util_1.func.noop,
        onVisibleChange: util_1.func.noop,
        onOk: util_1.func.noop
    };
    return DatePicker;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(DatePicker);

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var utils_1 = __webpack_require__(89);
function scrollTo(element, to, duration) {
    var requestAnimationFrame = window.requestAnimationFrame || function requestAnimationFrameTimeout() {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return setTimeout(params[0], 10);
    };
    if (duration <= 0) {
        element.scrollTop = to;
        return;
    }
    var difference = to - element.scrollTop;
    var perTick = difference / duration * 10;
    requestAnimationFrame(function () {
        element.scrollTop = element.scrollTop + perTick;
        if (element.scrollTop === to) {
            return;
        }
        scrollTo(element, to, duration - 10);
    });
}
var noop = function noop() {};
var TimeMenu = /** @class */function (_super) {
    tslib_1.__extends(TimeMenu, _super);
    function TimeMenu() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this._menuRefHandler = function (ref) {
            _this.menu = ref;
        };
        _this.createMenuItems = function (list) {
            var _a = _this.props,
                prefix = _a.prefix,
                mode = _a.mode,
                disabled = _a.disabled,
                disabledItems = _a.disabledItems,
                activeIndex = _a.activeIndex,
                onSelect = _a.onSelect,
                renderTimeMenuItems = _a.renderTimeMenuItems,
                timeValue = _a.value;
            list = renderTimeMenuItems(list, mode, timeValue) || list;
            return list.map(function (_a) {
                var _b;
                var label = _a.label,
                    value = _a.value;
                var isDisabled = disabled || disabledItems(value);
                var itemCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "time-picker-menu-item")] = true, _b["".concat(prefix, "disabled")] = isDisabled, _b["".concat(prefix, "selected")] = value === activeIndex, _b));
                var onClick = isDisabled ? noop : function () {
                    return onSelect(value, mode);
                };
                return react_1.default.createElement("li", { role: "option", "aria-selected": String(value === activeIndex), key: value, title: value, className: itemCls, onClick: onClick }, label);
            });
        };
        return _this;
    }
    TimeMenu.prototype.componentDidMount = function () {
        this.scrollToSelected(0);
    };
    TimeMenu.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.activeIndex !== this.props.activeIndex) {
            this.scrollToSelected(120);
        }
    };
    TimeMenu.prototype.scrollToSelected = function (duration) {
        if (duration === void 0) {
            duration = 0;
        }
        var _a = this.props,
            activeIndex = _a.activeIndex,
            step = _a.step;
        var targetIndex = Math.floor((activeIndex || 0) / step);
        var firstItem = this.menu.children[targetIndex];
        var offsetTo = firstItem.offsetTop;
        scrollTo(this.menu, offsetTo, duration);
    };
    TimeMenu.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            title = _a.title,
            mode = _a.mode,
            step = _a.step;
        var total = mode === 'hour' ? 24 : 60;
        var list = [];
        for (var i = 0; i < total; i++) {
            if (i % step === 0) {
                list.push({
                    label: i,
                    value: i
                });
            }
        }
        var menuTitle = title ? react_1.default.createElement("div", { className: "".concat(prefix, "time-picker-menu-title") }, title) : null;
        return react_1.default.createElement("div", { className: "".concat(prefix, "time-picker-menu") }, menuTitle, react_1.default.createElement("ul", { role: "listbox", className: "".concat(prefix, "time-picker-menu-").concat(mode), ref: this._menuRefHandler }, this.createMenuItems(list)));
    };
    TimeMenu.propTypes = {
        prefix: prop_types_1.default.string,
        title: prop_types_1.default.node,
        mode: prop_types_1.default.oneOf(['hour', 'minute', 'second']),
        step: prop_types_1.default.number,
        activeIndex: prop_types_1.default.number,
        value: utils_1.checkMomentObj,
        disabledItems: prop_types_1.default.func,
        renderTimeMenuItems: prop_types_1.default.func,
        onSelect: prop_types_1.default.func,
        disabled: prop_types_1.default.bool
    };
    TimeMenu.defaultProps = {
        step: 1,
        disabledItems: function disabledItems() {
            return false;
        },
        renderTimeMenuItems: function renderTimeMenuItems(list) {
            return list;
        },
        onSelect: function onSelect() {},
        disabled: false
    };
    return TimeMenu;
}(react_1.default.Component);
exports.default = TimeMenu;

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var moment_1 = __webpack_require__(16);
var config_provider_1 = __webpack_require__(5);
var overlay_1 = __webpack_require__(12);
var input_1 = __webpack_require__(15);
var icon_1 = __webpack_require__(7);
var calendar_1 = __webpack_require__(32);
var range_calendar_1 = __webpack_require__(157);
var panel_1 = __webpack_require__(88);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(25);
var panel_footer_1 = __webpack_require__(165);
var Popup = overlay_1.default.Popup;
function mapInputStateName(name) {
    return {
        startValue: 'startDateInputStr',
        endValue: 'endDateInputStr',
        startTime: 'startTimeInputStr',
        endTime: 'endTimeInputStr'
    }[name];
}
function mapTimeToValue(name) {
    return {
        startTime: 'startValue',
        endTime: 'endValue'
    }[name];
}
function getFormatValues(values, format) {
    if (!Array.isArray(values)) {
        return [null, null];
    }
    return [(0, util_2.formatDateValue)(values[0], format), (0, util_2.formatDateValue)(values[1], format)];
}
/**
 * DatePicker.RangePicker
 */
var RangePicker = /** @class */function (_super) {
    tslib_1.__extends(RangePicker, _super);
    function RangePicker(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.onValueChange = function (values, handler) {
            if (handler === void 0) {
                handler = 'onChange';
            }
            var ret;
            if (!values.length || !_this.state.inputAsString) {
                ret = values;
            } else {
                ret = [values[0] ? values[0].format(_this.state.dateTimeFormat) : null, values[1] ? values[1].format(_this.state.dateTimeFormat) : null];
            }
            _this.props[handler](ret);
        };
        _this.onSelectCalendarPanel = function (value, active) {
            var _a = _this.props,
                showTime = _a.showTime,
                resetTime = _a.resetTime;
            var _b = _this.state,
                prevActiveDateInput = _b.activeDateInput,
                prevStartValue = _b.startValue,
                prevEndValue = _b.endValue,
                timeFormat = _b.timeFormat;
            var newState = {
                activeDateInput: active || prevActiveDateInput,
                inputing: false
            };
            var newValue = value;
            switch (active || prevActiveDateInput) {
                case 'startValue':
                    {
                        if (!prevEndValue || value.valueOf() <= prevEndValue.valueOf()) {
                            newState.activeDateInput = 'endValue';
                        }
                        if (showTime) {
                            if (!prevStartValue) {
                                // 第一次选择，如果设置了时间默认值，则使用该默认时间
                                if (showTime.defaultValue) {
                                    var defaultTimeValue = (0, util_2.formatDateValue)(Array.isArray(showTime.defaultValue) ? showTime.defaultValue[0] : showTime.defaultValue, timeFormat);
                                    newValue = (0, util_2.resetValueTime)(value, defaultTimeValue);
                                }
                            } else if (!resetTime) {
                                // 非第一次选择，如果开启了 resetTime ，则记住之前选择的时间值
                                newValue = (0, util_2.resetValueTime)(value, prevStartValue);
                            }
                        }
                        newState.startValue = newValue;
                        // 如果起始日期大于结束日期
                        if (prevEndValue && newValue.valueOf() > prevEndValue.valueOf()) {
                            // 将结束日期设置为起始日期 如果需要的话保留时间
                            newState.endValue = resetTime ? newValue : (0, util_2.resetValueTime)(value, prevEndValue);
                            // 如果结束日期不大于起始日期则将结束日期设置为等于开始日期
                            if (newState.endValue.valueOf() < newState.startValue.valueOf()) {
                                newState.endValue = (0, moment_1.default)(newState.startValue);
                            }
                            newState.activeDateInput = 'endValue';
                        }
                        break;
                    }
                case 'endValue':
                    if (!prevStartValue) {
                        newState.activeDateInput = 'startValue';
                    }
                    if (showTime) {
                        if (!prevEndValue) {
                            // 第一次选择，如果设置了时间默认值，则使用该默认时间
                            if (showTime.defaultValue) {
                                var defaultTimeValue = (0, util_2.formatDateValue)(Array.isArray(showTime.defaultValue) ? showTime.defaultValue[1] || showTime.defaultValue[0] : showTime.defaultValue, timeFormat);
                                newValue = (0, util_2.resetValueTime)(value, defaultTimeValue);
                            }
                        } else if (!resetTime) {
                            // 非第一次选择，如果开启了 resetTime ，则记住之前选择的时间值
                            newValue = (0, util_2.resetValueTime)(value, prevEndValue);
                        }
                    }
                    newState.endValue = newValue;
                    // 选择了一个比开始日期更小的结束日期，此时表示用户重新选择了
                    if (prevStartValue && newValue.valueOf() <= prevStartValue.valueOf()) {
                        newState.startValue = resetTime ? value : (0, util_2.resetValueTime)(value, prevStartValue);
                        newState.endValue = resetTime ? value : (0, util_2.resetValueTime)(value, prevEndValue);
                        // 如果结束日期不大于起始日期则将结束日期设置为等于开始日期
                        if (newState.endValue.valueOf() < newState.startValue.valueOf()) {
                            newState.endValue = (0, moment_1.default)(newState.startValue);
                        }
                    }
                    break;
            }
            var newStartValue = 'startValue' in newState ? newState.startValue : prevStartValue;
            var newEndValue = 'endValue' in newState ? newState.endValue : prevEndValue;
            // 受控状态选择不更新值
            if ('value' in _this.props) {
                delete newState.startValue;
                delete newState.endValue;
            }
            _this.setState(newState);
            _this.onValueChange([newStartValue, newEndValue]);
        };
        _this.clearRange = function () {
            _this.setState({
                startDateInputStr: '',
                endDateInputStr: '',
                startTimeInputStr: '',
                endTimeInputStr: ''
            });
            if (!('value' in _this.props)) {
                _this.setState({
                    startValue: null,
                    endValue: null
                });
            }
            _this.onValueChange([]);
        };
        _this.onDateInputChange = function (inputStr, e, eventType) {
            var _a;
            if (eventType === 'clear' || !inputStr) {
                e.stopPropagation();
                _this.clearRange();
            } else {
                var stateName = mapInputStateName(_this.state.activeDateInput);
                _this.setState((_a = {}, _a[stateName] = inputStr, _a.inputing = _this.state.activeDateInput, _a));
            }
        };
        _this.onDateInputBlur = function () {
            var _a;
            var resetTime = _this.props.resetTime;
            var activeDateInput = _this.state.activeDateInput;
            var stateName = mapInputStateName(activeDateInput);
            var dateInputStr = _this.state[stateName];
            if (dateInputStr) {
                var _b = _this.props,
                    format = _b.format,
                    disabledDate = _b.disabledDate;
                var parsed = (0, moment_1.default)(dateInputStr, format, true);
                _this.setState((_a = {}, _a[stateName] = '', _a.inputing = false, _a));
                if (parsed.isValid() && !disabledDate(parsed, 'date')) {
                    var valueName = activeDateInput;
                    var newValue = resetTime ? parsed : (0, util_2.resetValueTime)(parsed, _this.state[activeDateInput]);
                    _this.handleChange(valueName, newValue);
                }
            }
        };
        _this.onDateInputKeyDown = function (e) {
            var type = _this.props.type;
            var _a = _this.state,
                activeDateInput = _a.activeDateInput,
                format = _a.format;
            var stateName = mapInputStateName(activeDateInput);
            var dateInputStr = _this.state[stateName];
            var dateStr = (0, util_2.onDateKeydown)(e, {
                format: format,
                value: _this.state[activeDateInput],
                dateInputStr: dateInputStr
            }, type === 'date' ? 'day' : type);
            if (!dateStr) return;
            return _this.onDateInputChange(dateStr);
        };
        _this.onFocusDateInput = function (type) {
            if (type !== _this.state.activeDateInput) {
                _this.setState({
                    activeDateInput: type
                });
            }
            if (_this.state.panel !== util_2.PANEL.DATE) {
                _this.setState({
                    panel: util_2.PANEL.DATE
                });
            }
        };
        _this.onFocusTimeInput = function (type) {
            if (type !== _this.state.activeDateInput) {
                _this.setState({
                    activeDateInput: type
                });
            }
            if (_this.state.panel !== util_2.PANEL.TIME) {
                _this.setState({
                    panel: util_2.PANEL.TIME
                });
            }
        };
        _this.onSelectStartTime = function (value) {
            if (!('value' in _this.props)) {
                _this.setState({
                    startValue: value,
                    inputing: false,
                    activeDateInput: 'startTime'
                });
            }
            if (value.valueOf() !== _this.state.startValue.valueOf()) {
                _this.onValueChange([value, _this.state.endValue]);
            }
        };
        _this.onSelectEndTime = function (value) {
            if (!('value' in _this.props)) {
                _this.setState({
                    endValue: value,
                    inputing: false,
                    activeDateInput: 'endTime'
                });
            }
            if (value.valueOf() !== _this.state.endValue.valueOf()) {
                _this.onValueChange([_this.state.startValue, value]);
            }
        };
        _this.onTimeInputChange = function (inputStr) {
            var _a;
            var stateName = mapInputStateName(_this.state.activeDateInput);
            _this.setState((_a = {}, _a[stateName] = inputStr, _a.inputing = _this.state.activeDateInput, _a));
        };
        _this.onTimeInputBlur = function () {
            var _a;
            var stateName = mapInputStateName(_this.state.activeDateInput);
            var timeInputStr = _this.state[stateName];
            var parsed = (0, moment_1.default)(timeInputStr, _this.state.timeFormat, true);
            _this.setState((_a = {}, _a[stateName] = '', _a.inputing = false, _a));
            if (parsed.isValid()) {
                var hour = parsed.hour();
                var minute = parsed.minute();
                var second = parsed.second();
                var valueName = mapTimeToValue(_this.state.activeDateInput);
                var newValue = _this.state[valueName].clone().hour(hour).minute(minute).second(second);
                _this.handleChange(valueName, newValue);
            }
        };
        _this.onTimeInputKeyDown = function (e) {
            var showTime = _this.props.showTime;
            var _a = _this.state,
                activeDateInput = _a.activeDateInput,
                timeFormat = _a.timeFormat;
            var stateName = mapInputStateName(activeDateInput);
            var timeInputStr = _this.state[stateName];
            var _b = (typeof showTime === "undefined" ? "undefined" : (0, _typeof3.default)(showTime)) === 'object' ? showTime : {},
                disabledMinutes = _b.disabledMinutes,
                disabledSeconds = _b.disabledSeconds,
                _c = _b.hourStep,
                hourStep = _c === void 0 ? 1 : _c,
                _d = _b.minuteStep,
                minuteStep = _d === void 0 ? 1 : _d,
                _e = _b.secondStep,
                secondStep = _e === void 0 ? 1 : _e;
            var unit = 'second';
            if (disabledSeconds) {
                unit = disabledMinutes ? 'hour' : 'minute';
            }
            var timeStr = (0, util_2.onTimeKeydown)(e, {
                format: timeFormat,
                timeInputStr: timeInputStr,
                value: _this.state[activeDateInput.indexOf('start') ? 'startValue' : 'endValue'],
                steps: {
                    hour: hourStep,
                    minute: minuteStep,
                    second: secondStep
                }
            }, unit);
            if (!timeStr) return;
            _this.onTimeInputChange(timeStr);
        };
        _this.handleChange = function (valueName, newValue) {
            var _a;
            var values = ['startValue', 'endValue'].map(function (name) {
                return valueName === name ? newValue : _this.state[name];
            });
            // 判断起始时间是否大于结束时间
            if (values[0] && values[1] && values[0].valueOf() > values[1].valueOf()) {
                return;
            }
            if (!('value' in _this.props)) {
                _this.setState((_a = {}, _a[valueName] = newValue, _a));
            }
            _this.onValueChange(values);
        };
        _this.onVisibleChange = function (visible, type) {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: visible
                });
            }
            _this.props.onVisibleChange(visible, type);
        };
        _this.changePanel = function (panel) {
            var _a = _this.state,
                startValue = _a.startValue,
                endValue = _a.endValue;
            _this.setState({
                panel: panel,
                activeDateInput: panel === util_2.PANEL.DATE ? !!startValue && !endValue ? 'endValue' : 'startValue' : 'startTime'
            });
        };
        _this.onOk = function (value) {
            _this.onVisibleChange(false, 'okBtnClick');
            _this.onValueChange(value || [_this.state.startValue, _this.state.endValue], 'onOk');
        };
        // 如果用户没有给定时间禁用逻辑，则给默认到禁用逻辑
        _this.getDisabledTime = function (_a) {
            var startValue = _a.startValue,
                endValue = _a.endValue;
            var _b = _this.props.showTime || {},
                disabledHours = _b.disabledHours,
                disabledMinutes = _b.disabledMinutes,
                disabledSeconds = _b.disabledSeconds;
            var disabledTime = {};
            if (startValue && endValue) {
                var isSameDay_1 = startValue.format('L') === endValue.format('L');
                var newDisabledHours = (0, util_2.isFunction)(disabledHours) ? disabledHours : function (index) {
                    if (isSameDay_1 && index < startValue.hour()) {
                        return true;
                    }
                };
                var newDisabledMinutes = (0, util_2.isFunction)(disabledMinutes) ? disabledMinutes : function (index) {
                    if (isSameDay_1 && startValue.hour() === endValue.hour() && index < startValue.minute()) {
                        return true;
                    }
                };
                var newDisabledSeconds = (0, util_2.isFunction)(disabledSeconds) ? disabledSeconds : function (index) {
                    if (isSameDay_1 && startValue.hour() === endValue.hour() && startValue.minute() === endValue.minute() && index < startValue.second()) {
                        return true;
                    }
                };
                disabledTime = {
                    disabledHours: newDisabledHours,
                    disabledMinutes: newDisabledMinutes,
                    disabledSeconds: newDisabledSeconds
                };
            }
            return disabledTime;
        };
        var _a = (0, util_2.getDateTimeFormat)(props.format, props.showTime, props.type),
            format = _a.format,
            timeFormat = _a.timeFormat,
            dateTimeFormat = _a.dateTimeFormat;
        var val = props.value || props.defaultValue;
        var values = getFormatValues(val, dateTimeFormat);
        _this.state = {
            visible: props.visible || props.defaultVisible,
            startValue: values[0],
            endValue: values[1],
            startDateInputStr: '',
            endDateInputStr: '',
            activeDateInput: 'startValue',
            startTimeInputStr: '',
            endTimeInputStr: '',
            inputing: false, // 当前是否处于输入状态
            panel: util_2.PANEL.DATE,
            format: format,
            timeFormat: timeFormat,
            dateTimeFormat: dateTimeFormat,
            inputAsString: val && (typeof val[0] === 'string' || typeof val[1] === 'string')
        };
        return _this;
    }
    RangePicker.getDerivedStateFromProps = function (props) {
        var formatStates = (0, util_2.getDateTimeFormat)(props.format, props.showTime, props.type);
        var states = {};
        if ('value' in props) {
            var values = getFormatValues(props.value, formatStates.dateTimeFormat);
            states.startValue = values[0];
            states.endValue = values[1];
            states.inputAsString = props.value && (typeof props.value[0] === 'string' || typeof props.value[1] === 'string');
        }
        if ('visible' in props) {
            states.visible = props.visible;
        }
        return tslib_1.__assign(tslib_1.__assign({}, states), formatStates);
    };
    RangePicker.prototype.renderPreview = function (_a, others) {
        var _b = tslib_1.__read(_a, 2),
            startValue = _b[0],
            endValue = _b[1];
        var _c = this.props,
            prefix = _c.prefix,
            className = _c.className,
            renderPreview = _c.renderPreview;
        var dateTimeFormat = this.state.dateTimeFormat;
        var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
        var startLabel = startValue ? startValue.format(dateTimeFormat) : '';
        var endLabel = endValue ? endValue.format(dateTimeFormat) : '';
        if (typeof renderPreview === 'function') {
            return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: previewCls }), renderPreview([startValue, endValue], this.props));
        }
        return react_1.default.createElement("p", tslib_1.__assign({}, others, { className: previewCls }), startLabel, " - ", endLabel);
    };
    RangePicker.prototype.render = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var _this = this;
        var _j = this.props,
            prefix = _j.prefix,
            rtl = _j.rtl,
            type = _j.type,
            defaultVisibleMonth = _j.defaultVisibleMonth,
            onVisibleMonthChange = _j.onVisibleMonthChange,
            showTime = _j.showTime,
            _disabledDate = _j.disabledDate,
            footerRender = _j.footerRender,
            label = _j.label,
            _k = _j.ranges,
            ranges = _k === void 0 ? {} : _k,
            // 兼容0.x ranges 属性
        inputState = _j.state,
            size = _j.size,
            disabled = _j.disabled,
            hasClear = _j.hasClear,
            popupTriggerType = _j.popupTriggerType,
            popupAlign = _j.popupAlign,
            popupContainer = _j.popupContainer,
            popupStyle = _j.popupStyle,
            popupClassName = _j.popupClassName,
            popupProps = _j.popupProps,
            popupComponent = _j.popupComponent,
            popupContent = _j.popupContent,
            followTrigger = _j.followTrigger,
            className = _j.className,
            locale = _j.locale,
            inputProps = _j.inputProps,
            dateCellRender = _j.dateCellRender,
            monthCellRender = _j.monthCellRender,
            yearCellRender = _j.yearCellRender,
            startDateInputAriaLabel = _j.startDateInputAriaLabel,
            startTimeInputAriaLabel = _j.startTimeInputAriaLabel,
            endDateInputAriaLabel = _j.endDateInputAriaLabel,
            endTimeInputAriaLabel = _j.endTimeInputAriaLabel,
            isPreview = _j.isPreview,
            disableChangeMode = _j.disableChangeMode,
            yearRange = _j.yearRange,
            placeholder = _j.placeholder,
            others = tslib_1.__rest(_j, ["prefix", "rtl", "type", "defaultVisibleMonth", "onVisibleMonthChange", "showTime", "disabledDate", "footerRender", "label", "ranges", "state", "size", "disabled", "hasClear", "popupTriggerType", "popupAlign", "popupContainer", "popupStyle", "popupClassName", "popupProps", "popupComponent", "popupContent", "followTrigger", "className", "locale", "inputProps", "dateCellRender", "monthCellRender", "yearCellRender", "startDateInputAriaLabel", "startTimeInputAriaLabel", "endDateInputAriaLabel", "endTimeInputAriaLabel", "isPreview", "disableChangeMode", "yearRange", "placeholder"]);
        var state = this.state;
        var classNames = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "range-picker")] = true, _a["".concat(prefix).concat(size)] = size, _a["".concat(prefix, "disabled")] = disabled, _a), className);
        var panelBodyClassName = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "range-picker-body")] = true, _b["".concat(prefix, "range-picker-body-show-time")] = showTime, _b));
        var triggerCls = (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "range-picker-trigger")] = true, _c["".concat(prefix, "error")] = inputState === 'error', _c));
        var startDateInputCls = (0, classnames_1.default)((_d = {}, _d["".concat(prefix, "range-picker-panel-input-start-date")] = true, _d["".concat(prefix, "focus")] = state.activeDateInput === 'startValue', _d));
        var endDateInputCls = (0, classnames_1.default)((_e = {}, _e["".concat(prefix, "range-picker-panel-input-end-date")] = true, _e["".concat(prefix, "focus")] = state.activeDateInput === 'endValue', _e));
        if (rtl) {
            others.dir = 'rtl';
        }
        if (isPreview) {
            return this.renderPreview([state.startValue, state.endValue], util_1.obj.pickOthers(others, RangePicker.PropTypes));
        }
        var startDateInputValue = state.inputing === 'startValue' ? state.startDateInputStr : state.startValue && state.startValue.format(state.format) || '';
        var endDateInputValue = state.inputing === 'endValue' ? state.endDateInputStr : state.endValue && state.endValue.format(state.format) || '';
        var startTriggerValue = startDateInputValue;
        var endTriggerValue = endDateInputValue;
        var sharedInputProps = tslib_1.__assign(tslib_1.__assign({}, inputProps), { size: size, disabled: disabled, onChange: this.onDateInputChange, onBlur: this.onDateInputBlur, onPressEnter: this.onDateInputBlur, onKeyDown: this.onDateInputKeyDown });
        var startDateInput = react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedInputProps, { "aria-label": startDateInputAriaLabel, placeholder: state.format, value: startDateInputValue, onFocus: function onFocus() {
                return _this.onFocusDateInput('startValue');
            }, className: startDateInputCls }));
        var endDateInput = react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedInputProps, { "aria-label": endDateInputAriaLabel, placeholder: state.format, value: endDateInputValue, onFocus: function onFocus() {
                return _this.onFocusDateInput('endValue');
            }, className: endDateInputCls }));
        var shareCalendarProps = {
            showOtherMonth: true,
            dateCellRender: dateCellRender,
            monthCellRender: monthCellRender,
            yearCellRender: yearCellRender,
            format: state.format,
            defaultVisibleMonth: defaultVisibleMonth,
            onVisibleMonthChange: onVisibleMonthChange
        };
        var datePanel = type === 'date' ? react_1.default.createElement(range_calendar_1.default, tslib_1.__assign({}, shareCalendarProps, { yearRange: yearRange, disableChangeMode: disableChangeMode, disabledDate: _disabledDate, onSelect: this.onSelectCalendarPanel, startValue: state.startValue, endValue: state.endValue })) : react_1.default.createElement("div", { className: "".concat(prefix, "range-picker-panel-body") }, react_1.default.createElement(calendar_1.default, tslib_1.__assign({ shape: "panel", modes: type === 'month' ? ['month', 'year'] : ['year'] }, shareCalendarProps, { disabledDate: function disabledDate(date) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                return state.endValue && date.isAfter(state.endValue, type) || _disabledDate && _disabledDate.apply(void 0, tslib_1.__spreadArray([date], tslib_1.__read(args), false));
            }, onSelect: function onSelect(value) {
                var selectedValue = value.clone().date(1).hour(0).minute(0).second(0);
                if (type === 'year') {
                    selectedValue.month(0);
                }
                _this.onSelectCalendarPanel(selectedValue, 'startValue');
            }, value: state.startValue })), react_1.default.createElement(calendar_1.default, tslib_1.__assign({ shape: "panel", modes: type === 'month' ? ['month', 'year'] : ['year'] }, shareCalendarProps, { disabledDate: function disabledDate(date) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                return state.startValue && date.isBefore(state.startValue, type) || _disabledDate && _disabledDate.apply(void 0, tslib_1.__spreadArray([date], tslib_1.__read(args), false));
            }, onSelect: function onSelect(value) {
                var selectedValue = value.clone().hour(23).minute(59).second(59);
                if (type === 'year') {
                    selectedValue.month(11).date(31);
                } else {
                    selectedValue.date(selectedValue.daysInMonth());
                }
                _this.onSelectCalendarPanel(selectedValue, 'endValue');
            }, value: state.endValue })));
        var startTimeInput = null;
        var endTimeInput = null;
        var timePanel = null;
        var panelFooter = footerRender();
        if (showTime) {
            var startTimeInputValue = state.inputing === 'startTime' ? state.startTimeInputStr : state.startValue && state.startValue.format(state.timeFormat) || '';
            var endTimeInputValue = state.inputing === 'endTime' ? state.endTimeInputStr : state.endValue && state.endValue.format(state.timeFormat) || '';
            startTriggerValue = state.startValue && state.startValue.format(state.dateTimeFormat) || '';
            endTriggerValue = state.endValue && state.endValue.format(state.dateTimeFormat) || '';
            var sharedTimeInputProps = {
                size: size,
                placeholder: state.timeFormat,
                onFocus: this.onFocusTimeInput,
                onBlur: this.onTimeInputBlur,
                onPressEnter: this.onTimeInputBlur,
                onChange: this.onTimeInputChange,
                onKeyDown: this.onTimeInputKeyDown
            };
            var startTimeInputCls = (0, classnames_1.default)((_f = {}, _f["".concat(prefix, "range-picker-panel-input-start-time")] = true, _f["".concat(prefix, "focus")] = state.activeDateInput === 'startTime', _f));
            startTimeInput = react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedTimeInputProps, { value: startTimeInputValue, "aria-label": startTimeInputAriaLabel, disabled: disabled || !state.startValue, onFocus: function onFocus() {
                    return _this.onFocusTimeInput('startTime');
                }, className: startTimeInputCls }));
            var endTimeInputCls = (0, classnames_1.default)((_g = {}, _g["".concat(prefix, "range-picker-panel-input-end-time")] = true, _g["".concat(prefix, "focus")] = state.activeDateInput === 'endTime', _g));
            endTimeInput = react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedTimeInputProps, { value: endTimeInputValue, "aria-label": endTimeInputAriaLabel, disabled: disabled || !state.endValue, onFocus: function onFocus() {
                    return _this.onFocusTimeInput('endTime');
                }, className: endTimeInputCls }));
            var showSecond = state.timeFormat.indexOf('s') > -1;
            var showMinute = state.timeFormat.indexOf('m') > -1;
            var sharedTimePickerProps = tslib_1.__assign(tslib_1.__assign({}, showTime), { prefix: prefix, locale: locale, disabled: disabled, showSecond: showSecond, showMinute: showMinute });
            var disabledTime = this.getDisabledTime(state);
            timePanel = react_1.default.createElement("div", { className: "".concat(prefix, "range-picker-panel-time") }, react_1.default.createElement(panel_1.default, tslib_1.__assign({}, sharedTimePickerProps, { disabled: disabled || !state.startValue, className: "".concat(prefix, "range-picker-panel-time-start"), value: state.startValue, onSelect: this.onSelectStartTime })), react_1.default.createElement(panel_1.default, tslib_1.__assign({}, sharedTimePickerProps, disabledTime, { disabled: disabled || !state.endValue, className: "".concat(prefix, "range-picker-panel-time-end"), value: state.endValue, onSelect: this.onSelectEndTime })));
        }
        panelFooter = panelFooter || react_1.default.createElement(panel_footer_1.default, { prefix: prefix, value: state.startValue || state.endValue, ranges: Object.keys(ranges).map(function (key) {
                return {
                    label: key,
                    value: ranges[key],
                    onChange: function onChange(values) {
                        _this.setState({
                            startValue: values[0],
                            endValue: values[1]
                        });
                        _this.onValueChange(values);
                    }
                };
            }), disabledOk: !state.startValue || !state.endValue || state.startValue.valueOf() > state.endValue.valueOf(), locale: locale, panel: state.panel, onPanelChange: showTime ? this.changePanel : null, onOk: this.onOk });
        var panelBody = (_h = {}, _h[util_2.PANEL.DATE] = datePanel, _h[util_2.PANEL.TIME] = timePanel, _h)[state.panel];
        var allowClear = state.startValue && state.endValue && hasClear;
        var _l = tslib_1.__read(placeholder || [], 2),
            startPlaceholder = _l[0],
            endPlaceholder = _l[1];
        if (typeof placeholder === 'string') {
            startPlaceholder = placeholder;
            endPlaceholder = placeholder;
        }
        var trigger = react_1.default.createElement("div", { className: triggerCls }, react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedInputProps, { readOnly: true, role: "combobox", "aria-expanded": state.visible, label: label, placeholder: startPlaceholder || locale.startPlaceholder, value: startTriggerValue, hasBorder: false, className: "".concat(prefix, "range-picker-trigger-input"), onFocus: function onFocus() {
                return _this.onFocusDateInput('startValue');
            } })), react_1.default.createElement("span", { className: "".concat(prefix, "range-picker-trigger-separator") }, "-"), react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedInputProps, { readOnly: true, role: "combobox", "aria-expanded": state.visible, placeholder: endPlaceholder || locale.endPlaceholder, value: endTriggerValue, hasBorder: false, className: "".concat(prefix, "range-picker-trigger-input"), onFocus: function onFocus() {
                return _this.onFocusDateInput('endValue');
            }, hasClear: allowClear, hint: react_1.default.createElement(icon_1.default, { type: "calendar", className: "".concat(prefix, "date-picker-symbol-calendar-icon") }) })));
        var PopupComponent = popupComponent ? popupComponent : Popup;
        return react_1.default.createElement("div", tslib_1.__assign({}, util_1.obj.pickOthers(RangePicker.propTypes, others), { className: classNames }), react_1.default.createElement(PopupComponent, tslib_1.__assign({ autoFocus: true, align: popupAlign }, popupProps, { followTrigger: followTrigger, disabled: disabled, visible: state.visible, onVisibleChange: this.onVisibleChange, triggerType: popupTriggerType, container: popupContainer, style: popupStyle, className: popupClassName, trigger: trigger }), popupContent ? popupContent : react_1.default.createElement("div", { dir: others.dir, className: panelBodyClassName }, react_1.default.createElement("div", { className: "".concat(prefix, "range-picker-panel-header") }, react_1.default.createElement("div", { className: "".concat(prefix, "range-picker-panel-input") }, startDateInput, startTimeInput, react_1.default.createElement("span", { className: "".concat(prefix, "range-picker-panel-input-separator") }, "-"), endDateInput, endTimeInput)), panelBody, panelFooter)));
    };
    RangePicker.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, rtl: prop_types_1.default.bool,
        /**
         * 日期范围类型
         */
        type: prop_types_1.default.oneOf(['date', 'month', 'year']),
        /**
         * 默认展示的起始月份
         * @return {MomentObject} 返回包含指定月份的 moment 对象实例
         */
        defaultVisibleMonth: prop_types_1.default.func, onVisibleMonthChange: prop_types_1.default.func,
        /**
         * 日期范围值数组 [moment, moment]
         */
        value: prop_types_1.default.array,
        /**
         * 初始的日期范围值数组 [moment, moment]
         */
        defaultValue: prop_types_1.default.array,
        /**
         * 日期格式
         */
        format: prop_types_1.default.string,
        /**
         * 是否使用时间控件，支持传入 TimePicker 的属性
         */
        showTime: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.bool]),
        /**
         * 每次选择是否重置时间（仅在 showTime 开启时有效）
         */
        resetTime: prop_types_1.default.bool,
        /**
         * 禁用日期函数
         * @param {MomentObject} 日期值
         * @param {String} view 当前视图类型，year: 年， month: 月, date: 日
         * @return {Boolean} 是否禁用
         */
        disabledDate: prop_types_1.default.func,
        /**
         * 自定义面板页脚
         * @return {Node} 自定义的面板页脚组件
         */
        footerRender: prop_types_1.default.func,
        /**
         * 日期范围值改变时的回调 [ MomentObject|String, MomentObject|String ]
         * @param {Array<MomentObject|String>} value 日期值
         */
        onChange: prop_types_1.default.func,
        /**
         * 点击确认按钮时的回调 返回开始时间和结束时间`[ MomentObject|String, MomentObject|String ]`
         * @return {Array} 日期范围
         */
        onOk: prop_types_1.default.func,
        /**
         * 输入框内置标签
         */
        label: prop_types_1.default.node,
        /**
         * 输入框状态
         */
        state: prop_types_1.default.oneOf(['error', 'loading', 'success']),
        /**
         * 输入框尺寸
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 是否显示清空按钮
         */
        hasClear: prop_types_1.default.bool,
        /**
         * 弹层显示状态
         */
        visible: prop_types_1.default.bool,
        /**
         * 弹层默认是否显示
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 弹层展示状态变化时的回调
         * @param {Boolean} visible 弹层是否显示
         * @param {String} type 触发弹层显示和隐藏的来源 okBtnClick 表示由确认按钮触发； fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
         */
        onVisibleChange: prop_types_1.default.func,
        /**
         * 弹层触发方式
         */
        popupTriggerType: prop_types_1.default.oneOf(['click', 'hover']),
        /**
         * 弹层对齐方式, 具体含义见 OverLay文档
         */
        popupAlign: prop_types_1.default.string,
        /**
         * 弹层容器
         * @param {Element} target 目标元素
         * @return {Element} 弹层的容器元素
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 弹层自定义样式
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 弹层自定义样式类
         */
        popupClassName: prop_types_1.default.string,
        /**
         * 弹层其他属性
         */
        popupProps: prop_types_1.default.object,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 输入框其他属性
         */
        inputProps: prop_types_1.default.object,
        /**
         * 自定义日期单元格渲染
         */
        dateCellRender: prop_types_1.default.func,
        /**
         * 自定义月份渲染函数
         * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象
         * @returns {ReactNode}
         */
        monthCellRender: prop_types_1.default.func, yearCellRender: prop_types_1.default.func,
        /**
         * 开始日期输入框的 aria-label 属性
         */
        startDateInputAriaLabel: prop_types_1.default.string,
        /**
         * 开始时间输入框的 aria-label 属性
         */
        startTimeInputAriaLabel: prop_types_1.default.string,
        /**
         * 结束日期输入框的 aria-label 属性
         */
        endDateInputAriaLabel: prop_types_1.default.string,
        /**
         * 结束时间输入框的 aria-label 属性
         */
        endTimeInputAriaLabel: prop_types_1.default.string,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {Array<MomentObject, MomentObject>} value 日期区间
         */
        renderPreview: prop_types_1.default.func, disableChangeMode: prop_types_1.default.bool, yearRange: prop_types_1.default.arrayOf(prop_types_1.default.number), ranges: prop_types_1.default.object, locale: prop_types_1.default.object, className: prop_types_1.default.string, name: prop_types_1.default.string, popupComponent: prop_types_1.default.elementType, popupContent: prop_types_1.default.node, placeholder: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.string), prop_types_1.default.string]) });
    RangePicker.defaultProps = {
        prefix: 'next-',
        rtl: false,
        type: 'date',
        size: 'medium',
        showTime: false,
        resetTime: false,
        disabledDate: function disabledDate() {
            return false;
        },
        footerRender: function footerRender() {
            return null;
        },
        hasClear: true,
        defaultVisible: false,
        popupTriggerType: 'click',
        popupAlign: 'tl tl',
        locale: zh_cn_1.default.DatePicker,
        disableChangeMode: false,
        onChange: util_1.func.noop,
        onOk: util_1.func.noop,
        onVisibleChange: util_1.func.noop
    };
    return RangePicker;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(RangePicker);

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var moment_1 = __webpack_require__(16);
var config_provider_1 = __webpack_require__(5);
var overlay_1 = __webpack_require__(12);
var input_1 = __webpack_require__(15);
var icon_1 = __webpack_require__(7);
var calendar_1 = __webpack_require__(32);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(25);
var Popup = overlay_1.default.Popup;
/**
 * DatePicker.MonthPicker
 */
var MonthPicker = /** @class */function (_super) {
    tslib_1.__extends(MonthPicker, _super);
    function MonthPicker(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.onValueChange = function (newValue) {
            var ret = _this.state.inputAsString && newValue ? newValue.format(_this.props.format) : newValue;
            _this.props.onChange(ret);
        };
        _this.onSelectCalendarPanel = function (value) {
            // const { format } = this.props;
            var prevSelectedMonth = _this.state.value;
            var selectedMonth = value.clone().date(1).hour(0).minute(0).second(0);
            _this.handleChange(selectedMonth, prevSelectedMonth, { inputing: false }, function () {
                _this.onVisibleChange(false, 'calendarSelect');
            });
        };
        _this.clearValue = function () {
            _this.setState({
                dateInputStr: ''
            });
            _this.handleChange(null, _this.state.value);
        };
        _this.onDateInputChange = function (inputStr, e, eventType) {
            if (eventType === 'clear' || !inputStr) {
                e.stopPropagation();
                _this.clearValue();
            } else {
                _this.setState({
                    dateInputStr: inputStr,
                    inputing: true
                });
            }
        };
        _this.onDateInputBlur = function () {
            var dateInputStr = _this.state.dateInputStr;
            if (dateInputStr) {
                var _a = _this.props,
                    disabledDate = _a.disabledDate,
                    format = _a.format;
                var parsed = (0, moment_1.default)(dateInputStr, format, true);
                _this.setState({
                    dateInputStr: '',
                    inputing: false
                });
                if (parsed.isValid() && !disabledDate(parsed, 'month')) {
                    _this.handleChange(parsed, _this.state.value);
                }
            }
        };
        _this.onKeyDown = function (e) {
            var format = _this.props.format;
            var _a = _this.state,
                dateInputStr = _a.dateInputStr,
                value = _a.value;
            var dateStr = (0, util_2.onDateKeydown)(e, { format: format, dateInputStr: dateInputStr, value: value }, 'month');
            if (!dateStr) return;
            _this.onDateInputChange(dateStr);
        };
        _this.handleChange = function (newValue, prevValue, others, callback) {
            if (others === void 0) {
                others = {};
            }
            if (!('value' in _this.props)) {
                _this.setState(tslib_1.__assign({ value: newValue }, others));
            } else {
                _this.setState(tslib_1.__assign({}, others));
            }
            var format = _this.props.format;
            var newValueOf = newValue ? newValue.format(format) : null;
            var preValueOf = prevValue ? prevValue.format(format) : null;
            if (newValueOf !== preValueOf) {
                _this.onValueChange(newValue);
                if (typeof callback === 'function') {
                    return callback();
                }
            }
        };
        _this.onVisibleChange = function (visible, type) {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: visible
                });
            }
            _this.props.onVisibleChange(visible, type);
        };
        _this.state = {
            value: (0, util_2.formatDateValue)(props.defaultValue, props.format),
            dateInputStr: '',
            inputing: false,
            visible: props.defaultVisible,
            inputAsString: typeof props.defaultValue === 'string'
        };
        return _this;
    }
    MonthPicker.getDerivedStateFromProps = function (props) {
        var states = {};
        if ('value' in props) {
            states.value = (0, util_2.formatDateValue)(props.value, props.format);
            states.inputAsString = typeof props.value === 'string';
        }
        if ('visible' in props) {
            states.visible = props.visible;
        }
        return states;
    };
    MonthPicker.prototype.renderPreview = function (others) {
        var _a = this.props,
            prefix = _a.prefix,
            format = _a.format,
            className = _a.className,
            renderPreview = _a.renderPreview;
        var value = this.state.value;
        var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
        var label = value ? value.format(format) : '';
        if (typeof renderPreview === 'function') {
            return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: previewCls }), renderPreview(value, this.props));
        }
        return react_1.default.createElement("p", tslib_1.__assign({}, others, { className: previewCls }), label);
    };
    MonthPicker.prototype.render = function () {
        var _a, _b, _c;
        var _d = this.props,
            prefix = _d.prefix,
            rtl = _d.rtl,
            locale = _d.locale,
            label = _d.label,
            state = _d.state,
            format = _d.format,
            defaultVisibleYear = _d.defaultVisibleYear,
            disabledDate = _d.disabledDate,
            footerRender = _d.footerRender,
            placeholder = _d.placeholder,
            size = _d.size,
            disabled = _d.disabled,
            hasClear = _d.hasClear,
            popupTriggerType = _d.popupTriggerType,
            popupAlign = _d.popupAlign,
            popupContainer = _d.popupContainer,
            popupStyle = _d.popupStyle,
            popupClassName = _d.popupClassName,
            popupProps = _d.popupProps,
            popupComponent = _d.popupComponent,
            popupContent = _d.popupContent,
            followTrigger = _d.followTrigger,
            className = _d.className,
            inputProps = _d.inputProps,
            monthCellRender = _d.monthCellRender,
            yearCellRender = _d.yearCellRender,
            dateInputAriaLabel = _d.dateInputAriaLabel,
            isPreview = _d.isPreview,
            others = tslib_1.__rest(_d, ["prefix", "rtl", "locale", "label", "state", "format", "defaultVisibleYear", "disabledDate", "footerRender", "placeholder", "size", "disabled", "hasClear", "popupTriggerType", "popupAlign", "popupContainer", "popupStyle", "popupClassName", "popupProps", "popupComponent", "popupContent", "followTrigger", "className", "inputProps", "monthCellRender", "yearCellRender", "dateInputAriaLabel", "isPreview"]);
        var _e = this.state,
            visible = _e.visible,
            value = _e.value,
            dateInputStr = _e.dateInputStr,
            inputing = _e.inputing;
        var monthPickerCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "month-picker")] = true, _a), className);
        var triggerInputCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "month-picker-input")] = true, _b["".concat(prefix, "error")] = false, _b));
        var panelBodyClassName = (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "month-picker-body")] = true, _c));
        if (rtl) {
            others.dir = 'rtl';
        }
        if (isPreview) {
            return this.renderPreview(util_1.obj.pickOthers(others, MonthPicker.PropTypes));
        }
        var panelInputCls = "".concat(prefix, "month-picker-panel-input");
        var sharedInputProps = tslib_1.__assign(tslib_1.__assign({}, inputProps), { size: size, disabled: disabled, onChange: this.onDateInputChange, onBlur: this.onDateInputBlur, onPressEnter: this.onDateInputBlur, onKeyDown: this.onKeyDown });
        var dateInputValue = inputing ? dateInputStr : value && value.format(format) || '';
        var triggerInputValue = dateInputValue;
        var dateInput = react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedInputProps, { value: dateInputValue, "aria-label": dateInputAriaLabel, onFocus: this.onFoucsDateInput, placeholder: format, className: panelInputCls }));
        var datePanel = react_1.default.createElement(calendar_1.default, { shape: "panel", modes: ['month', 'year'], monthCellRender: monthCellRender, yearCellRender: yearCellRender, value: value, onSelect: this.onSelectCalendarPanel, defaultVisibleMonth: defaultVisibleYear, disabledDate: disabledDate });
        var panelBody = datePanel;
        var panelFooter = footerRender();
        var allowClear = value && hasClear;
        var trigger = react_1.default.createElement("div", { className: "".concat(prefix, "month-picker-trigger") }, react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedInputProps, { label: label, state: state, readOnly: true, value: triggerInputValue, placeholder: placeholder || locale.monthPlaceholder, hint: react_1.default.createElement(icon_1.default, { type: "calendar", className: "".concat(prefix, "date-picker-symbol-calendar-icon") }), hasClear: allowClear, className: triggerInputCls })));
        var PopupComponent = popupComponent ? popupComponent : Popup;
        return react_1.default.createElement("div", tslib_1.__assign({}, util_1.obj.pickOthers(MonthPicker.propTypes, others), { className: monthPickerCls }), react_1.default.createElement(PopupComponent, tslib_1.__assign({ autoFocus: true, align: popupAlign }, popupProps, { followTrigger: followTrigger, role: "combobox", "aria-expanded": visible, disabled: disabled, visible: visible, onVisibleChange: this.onVisibleChange, triggerType: popupTriggerType, container: popupContainer, style: popupStyle, className: popupClassName, trigger: trigger }), popupContent ? popupContent : react_1.default.createElement("div", { className: panelBodyClassName, dir: others.dir }, react_1.default.createElement("div", { className: "".concat(prefix, "month-picker-panel-header") }, dateInput), panelBody, panelFooter)));
    };
    MonthPicker.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, rtl: prop_types_1.default.bool,
        /**
         * 输入框内置标签
         */
        label: prop_types_1.default.node,
        /**
         * 输入框状态
         */
        state: prop_types_1.default.oneOf(['success', 'loading', 'error']),
        /**
         * 输入提示
         */
        placeholder: prop_types_1.default.string,
        /**
         * 默认展现的年
         * @return {MomentObject} 返回包含指定年份的 moment 对象实例
         */
        defaultVisibleYear: prop_types_1.default.func,
        /**
         * 日期值（受控）moment 对象
         */
        value: util_2.checkDateValue,
        /**
         * 初始日期值，moment 对象
         */
        defaultValue: util_2.checkDateValue,
        /**
         * 日期值的格式（用于限定用户输入和展示）
         */
        format: prop_types_1.default.string,
        /**
         * 禁用日期函数
         * @param {MomentObject} 日期值
         * @param {String} view 当前视图类型，year: 年， month: 月, date: 日
         * @return {Boolean} 是否禁用
         */
        disabledDate: prop_types_1.default.func,
        /**
         * 自定义面板页脚
         * @return {Node} 自定义的面板页脚组件
         */
        footerRender: prop_types_1.default.func,
        /**
         * 日期值改变时的回调
         * @param {MomentObject|String} value 日期值
         */
        onChange: prop_types_1.default.func,
        /**
         * 输入框尺寸
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 是否显示清空按钮
         */
        hasClear: prop_types_1.default.bool,
        /**
         * 弹层显示状态
         */
        visible: prop_types_1.default.bool,
        /**
         * 弹层默认是否显示
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 弹层展示状态变化时的回调
         * @param {Boolean} visible 弹层是否显示
         * @param {String} type 触发弹层显示和隐藏的来源 calendarSelect 表示由日期表盘的选择触发； fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
         */
        onVisibleChange: prop_types_1.default.func,
        /**
         * 弹层触发方式
         */
        popupTriggerType: prop_types_1.default.oneOf(['click', 'hover']),
        /**
         * 弹层对齐方式, 具体含义见 OverLay文档
         */
        popupAlign: prop_types_1.default.string,
        /**
         * 弹层容器
         * @param {Element} target 目标元素
         * @return {Element} 弹层的容器元素
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 弹层自定义样式
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 弹层自定义样式类
         */
        popupClassName: prop_types_1.default.string,
        /**
         * 弹层其他属性
         */
        popupProps: prop_types_1.default.object,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 输入框其他属性
         */
        inputProps: prop_types_1.default.object,
        /**
         * 自定义月份渲染函数
         * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象
         * @returns {ReactNode}
         */
        monthCellRender: prop_types_1.default.func, yearCellRender: prop_types_1.default.func,
        /**
         * 日期输入框的 aria-label 属性
         */
        dateInputAriaLabel: prop_types_1.default.string,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {MomentObject} value 月份
         */
        renderPreview: prop_types_1.default.func, locale: prop_types_1.default.object, className: prop_types_1.default.string, name: prop_types_1.default.string, popupComponent: prop_types_1.default.elementType, popupContent: prop_types_1.default.node });
    MonthPicker.defaultProps = {
        prefix: 'next-',
        rtl: false,
        format: 'YYYY-MM',
        size: 'medium',
        disabledDate: function disabledDate() {
            return false;
        },
        footerRender: function footerRender() {
            return null;
        },
        hasClear: true,
        popupTriggerType: 'click',
        popupAlign: 'tl tl',
        locale: zh_cn_1.default.DatePicker,
        onChange: util_1.func.noop,
        onVisibleChange: util_1.func.noop
    };
    return MonthPicker;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(MonthPicker);

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var moment_1 = __webpack_require__(16);
var overlay_1 = __webpack_require__(12);
var input_1 = __webpack_require__(15);
var icon_1 = __webpack_require__(7);
var calendar_1 = __webpack_require__(32);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(25);
var Popup = overlay_1.default.Popup;
/**
 * DatePicker.YearPicker
 */
var YearPicker = /** @class */function (_super) {
    tslib_1.__extends(YearPicker, _super);
    function YearPicker(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.onValueChange = function (newValue) {
            var ret = _this.state.inputAsString && newValue ? newValue.format(_this.props.format) : newValue;
            _this.props.onChange(ret);
        };
        _this.onSelectCalendarPanel = function (value) {
            // const { format } = this.props;
            var prevSelectedMonth = _this.state.value;
            var selectedMonth = value.clone().month(0).date(1).hour(0).minute(0).second(0);
            _this.handleChange(selectedMonth, prevSelectedMonth, { inputing: false }, function () {
                _this.onVisibleChange(false, 'calendarSelect');
            });
        };
        _this.clearValue = function () {
            _this.setState({
                dateInputStr: ''
            });
            _this.handleChange(null, _this.state.value);
        };
        _this.onDateInputChange = function (inputStr, e, eventType) {
            if (eventType === 'clear' || !inputStr) {
                e.stopPropagation();
                _this.clearValue();
            } else {
                _this.setState({
                    dateInputStr: inputStr,
                    inputing: true
                });
            }
        };
        _this.onDateInputBlur = function () {
            var dateInputStr = _this.state.dateInputStr;
            if (dateInputStr) {
                var _a = _this.props,
                    disabledDate = _a.disabledDate,
                    format = _a.format;
                var parsed = (0, moment_1.default)(dateInputStr, format, true);
                _this.setState({
                    dateInputStr: '',
                    inputing: false
                });
                if (parsed.isValid() && !disabledDate(parsed, 'year')) {
                    _this.handleChange(parsed, _this.state.value);
                }
            }
        };
        _this.onKeyDown = function (e) {
            var format = _this.props.format;
            var _a = _this.state,
                dateInputStr = _a.dateInputStr,
                value = _a.value;
            var dateStr = (0, util_2.onDateKeydown)(e, { format: format, dateInputStr: dateInputStr, value: value }, 'year');
            if (!dateStr) return;
            _this.onDateInputChange(dateStr);
        };
        _this.handleChange = function (newValue, prevValue, others, callback) {
            if (others === void 0) {
                others = {};
            }
            if (!('value' in _this.props)) {
                _this.setState(tslib_1.__assign({ value: newValue }, others));
            } else {
                _this.setState(tslib_1.__assign({}, others));
            }
            var format = _this.props.format;
            var newValueOf = newValue ? newValue.format(format) : null;
            var preValueOf = prevValue ? prevValue.format(format) : null;
            if (newValueOf !== preValueOf) {
                _this.onValueChange(newValue);
                if (typeof callback === 'function') {
                    return callback();
                }
            }
        };
        _this.onVisibleChange = function (visible, reason) {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: visible
                });
            }
            _this.props.onVisibleChange(visible, reason);
        };
        _this.state = {
            value: (0, util_2.formatDateValue)(props.defaultValue, props.format),
            dateInputStr: '',
            inputing: false,
            visible: props.defaultVisible,
            inputAsString: typeof props.defaultValue === 'string' // 判断用户输入是否是字符串
        };
        return _this;
    }
    YearPicker.getDerivedStateFromProps = function (props) {
        var states = {};
        if ('value' in props) {
            states.value = (0, util_2.formatDateValue)(props.value, props.format);
            states.inputAsString = typeof props.value === 'string';
        }
        if ('visible' in props) {
            states.visible = props.visible;
        }
        return states;
    };
    YearPicker.prototype.renderPreview = function (others) {
        var _a = this.props,
            prefix = _a.prefix,
            format = _a.format,
            className = _a.className,
            renderPreview = _a.renderPreview;
        var value = this.state.value;
        var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
        var label = value ? value.format(format) : '';
        if (typeof renderPreview === 'function') {
            return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: previewCls }), renderPreview(value, this.props));
        }
        return react_1.default.createElement("p", tslib_1.__assign({}, others, { className: previewCls }), label);
    };
    YearPicker.prototype.render = function () {
        var _a, _b, _c;
        var _d = this.props,
            prefix = _d.prefix,
            rtl = _d.rtl,
            locale = _d.locale,
            label = _d.label,
            state = _d.state,
            format = _d.format,
            disabledDate = _d.disabledDate,
            footerRender = _d.footerRender,
            placeholder = _d.placeholder,
            size = _d.size,
            disabled = _d.disabled,
            hasClear = _d.hasClear,
            popupTriggerType = _d.popupTriggerType,
            popupAlign = _d.popupAlign,
            popupContainer = _d.popupContainer,
            popupStyle = _d.popupStyle,
            popupClassName = _d.popupClassName,
            popupProps = _d.popupProps,
            popupComponent = _d.popupComponent,
            popupContent = _d.popupContent,
            followTrigger = _d.followTrigger,
            className = _d.className,
            inputProps = _d.inputProps,
            dateInputAriaLabel = _d.dateInputAriaLabel,
            yearCellRender = _d.yearCellRender,
            isPreview = _d.isPreview,
            others = tslib_1.__rest(_d, ["prefix", "rtl", "locale", "label", "state", "format", "disabledDate", "footerRender", "placeholder", "size", "disabled", "hasClear", "popupTriggerType", "popupAlign", "popupContainer", "popupStyle", "popupClassName", "popupProps", "popupComponent", "popupContent", "followTrigger", "className", "inputProps", "dateInputAriaLabel", "yearCellRender", "isPreview"]);
        var _e = this.state,
            visible = _e.visible,
            value = _e.value,
            dateInputStr = _e.dateInputStr,
            inputing = _e.inputing;
        var yearPickerCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "year-picker")] = true, _a), className);
        var triggerInputCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "year-picker-input")] = true, _b["".concat(prefix, "error")] = false, _b));
        var panelBodyClassName = (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "year-picker-body")] = true, _c));
        if (rtl) {
            others.dir = 'rtl';
        }
        if (isPreview) {
            return this.renderPreview(util_1.obj.pickOthers(others, YearPicker.PropTypes));
        }
        var panelInputCls = "".concat(prefix, "year-picker-panel-input");
        var sharedInputProps = tslib_1.__assign(tslib_1.__assign({}, inputProps), { size: size, disabled: disabled, onChange: this.onDateInputChange, onBlur: this.onDateInputBlur, onPressEnter: this.onDateInputBlur, onKeyDown: this.onKeyDown });
        var dateInputValue = inputing ? dateInputStr : value && value.format(format) || '';
        var triggerInputValue = dateInputValue;
        var dateInput = react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedInputProps, { "aria-label": dateInputAriaLabel, value: dateInputValue, placeholder: format, className: panelInputCls }));
        var datePanel = react_1.default.createElement(calendar_1.default, { shape: "panel", modes: ['year'], value: value, yearCellRender: yearCellRender, onSelect: this.onSelectCalendarPanel, disabledDate: disabledDate });
        var panelBody = datePanel;
        var panelFooter = footerRender();
        var allowClear = value && hasClear;
        var trigger = react_1.default.createElement("div", { className: "".concat(prefix, "year-picker-trigger") }, react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedInputProps, { label: label, state: state, value: triggerInputValue, role: "combobox", "aria-expanded": visible, readOnly: true, placeholder: placeholder || locale.yearPlaceholder, hint: react_1.default.createElement(icon_1.default, { type: "calendar", className: "".concat(prefix, "date-picker-symbol-calendar-icon") }), hasClear: allowClear, className: triggerInputCls })));
        var PopupComponent = popupComponent ? popupComponent : Popup;
        return react_1.default.createElement("div", tslib_1.__assign({}, util_1.obj.pickOthers(YearPicker.propTypes, others), { className: yearPickerCls }), react_1.default.createElement(PopupComponent, tslib_1.__assign({ autoFocus: true, align: popupAlign }, popupProps, { followTrigger: followTrigger, disabled: disabled, visible: visible, onVisibleChange: this.onVisibleChange, triggerType: popupTriggerType, container: popupContainer, style: popupStyle, className: popupClassName, trigger: trigger }), popupContent ? popupContent : react_1.default.createElement("div", { dir: others.dir, className: panelBodyClassName }, react_1.default.createElement("div", { className: "".concat(prefix, "year-picker-panel-header") }, dateInput), panelBody, panelFooter)));
    };
    YearPicker.propTypes = {
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        /**
         * 输入框内置标签
         */
        label: prop_types_1.default.node,
        /**
         * 输入框状态
         */
        state: prop_types_1.default.oneOf(['success', 'loading', 'error']),
        /**
         * 输入提示
         */
        placeholder: prop_types_1.default.string,
        /**
         * 日期值（受控）moment 对象
         */
        value: util_2.checkDateValue,
        /**
         * 初始日期值，moment 对象
         */
        defaultValue: util_2.checkDateValue,
        /**
         * 日期值的格式（用于限定用户输入和展示）
         */
        format: prop_types_1.default.string,
        /**
         * 禁用日期函数
         * @param {MomentObject} 日期值
         * @param {String} view 当前视图类型，year: 年， month: 月, date: 日
         * @return {Boolean} 是否禁用
         */
        disabledDate: prop_types_1.default.func,
        /**
         * 自定义面板页脚
         * @return {Node} 自定义的面板页脚组件
         */
        footerRender: prop_types_1.default.func,
        /**
         * 日期值改变时的回调
         * @param {MomentObject|String} value 日期值
         */
        onChange: prop_types_1.default.func,
        /**
         * 输入框尺寸
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 是否显示清空按钮
         */
        hasClear: prop_types_1.default.bool,
        /**
         * 弹层显示状态
         */
        visible: prop_types_1.default.bool,
        /**
         * 弹层默认是否显示
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 弹层展示状态变化时的回调
         * @param {Boolean} visible 弹层是否显示
         * @param {String} reason 触发弹层显示和隐藏的来源 calendarSelect 表示由日期表盘的选择触发； fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
         */
        onVisibleChange: prop_types_1.default.func,
        /**
         * 弹层触发方式
         */
        popupTriggerType: prop_types_1.default.oneOf(['click', 'hover']),
        /**
         * 弹层对齐方式, 具体含义见 OverLay文档
         */
        popupAlign: prop_types_1.default.string,
        /**
         * 弹层容器
         * @param {Element} target 目标元素
         * @return {Element} 弹层的容器元素
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 弹层自定义样式
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 弹层自定义样式类
         */
        popupClassName: prop_types_1.default.string,
        /**
         * 弹层其他属性
         */
        popupProps: prop_types_1.default.object,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 输入框其他属性
         */
        inputProps: prop_types_1.default.object,
        yearCellRender: prop_types_1.default.func, // 兼容 0.x yearCellRender
        /**
         * 日期输入框的 aria-label 属性
         */
        dateInputAriaLabel: prop_types_1.default.string,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {MomentObject} value 年份
         */
        renderPreview: prop_types_1.default.func,
        locale: prop_types_1.default.object,
        className: prop_types_1.default.string,
        name: prop_types_1.default.string,
        popupComponent: prop_types_1.default.elementType,
        popupContent: prop_types_1.default.node
    };
    YearPicker.defaultProps = {
        prefix: 'next-',
        rtl: false,
        format: 'YYYY',
        size: 'medium',
        disabledDate: function disabledDate() {
            return false;
        },
        footerRender: function footerRender() {
            return null;
        },
        hasClear: true,
        popupTriggerType: 'click',
        popupAlign: 'tl tl',
        locale: zh_cn_1.default.DatePicker,
        onChange: util_1.func.noop,
        onVisibleChange: util_1.func.noop
    };
    return YearPicker;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(YearPicker);

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var moment_1 = __webpack_require__(16);
var react_lifecycles_compat_1 = __webpack_require__(6);
var overlay_1 = __webpack_require__(12);
var input_1 = __webpack_require__(15);
var icon_1 = __webpack_require__(7);
var calendar_1 = __webpack_require__(32);
var config_provider_1 = __webpack_require__(5);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(25);
var Popup = overlay_1.default.Popup;
/**
 * DatePicker.WeekPicker
 */
var WeekPicker = /** @class */function (_super) {
    tslib_1.__extends(WeekPicker, _super);
    function WeekPicker(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.handleChange = function (newValue, prevValue) {
            if (!('value' in _this.props)) {
                _this.setState({
                    value: newValue
                });
            }
            var newValueOf = newValue ? newValue.valueOf() : null;
            var preValueOf = prevValue ? prevValue.valueOf() : null;
            if (newValueOf !== preValueOf) {
                _this.props.onChange(newValue);
            }
        };
        _this.onDateInputChange = function (value, e, eventType) {
            if (eventType === 'clear' || !value) {
                e.stopPropagation();
                _this.handleChange(null, _this.state.value);
            }
        };
        _this.onKeyDown = function (e) {
            if ([util_1.KEYCODE.UP, util_1.KEYCODE.DOWN, util_1.KEYCODE.PAGE_UP, util_1.KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1) {
                return;
            }
            if (e.altKey && [util_1.KEYCODE.PAGE_UP, util_1.KEYCODE.PAGE_DOWN].indexOf(e.keyCode) === -1 || e.controlKey || e.shiftKey) {
                return;
            }
            var date = _this.state.value;
            if (date && date.isValid()) {
                var stepUnit = e.altKey ? 'year' : 'month';
                switch (e.keyCode) {
                    case util_1.KEYCODE.UP:
                        date.subtract(1, 'w');
                        break;
                    case util_1.KEYCODE.DOWN:
                        date.add(1, 'w');
                        break;
                    case util_1.KEYCODE.PAGE_UP:
                        date.subtract(1, stepUnit);
                        break;
                    case util_1.KEYCODE.PAGE_DOWN:
                        date.add(1, stepUnit);
                        break;
                }
            } else {
                date = (0, moment_1.default)();
            }
            e.preventDefault();
            _this.handleChange(date, _this.state.value);
        };
        _this.onVisibleChange = function (visible, type) {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: visible
                });
            }
            _this.props.onVisibleChange(visible, type);
        };
        _this.onSelectCalendarPanel = function (value) {
            _this.handleChange(value, _this.state.value);
            _this.onVisibleChange(false, 'calendarSelect');
        };
        _this.dateRender = function (value) {
            var _a;
            var _b = _this.props,
                prefix = _b.prefix,
                dateCellRender = _b.dateCellRender;
            var selectedValue = _this.state.value;
            var content = dateCellRender && typeof dateCellRender === 'function' ? dateCellRender(value) : value.dates();
            if (selectedValue && selectedValue.years() === value.years() && selectedValue.weeks() === value.weeks()) {
                var firstDay = moment_1.default.localeData().firstDayOfWeek();
                var endDay = firstDay - 1 < 0 ? 6 : firstDay - 1;
                return react_1.default.createElement("div", { className: (0, classnames_1.default)("".concat(prefix, "calendar-week-active-date"), (_a = {}, _a["".concat(prefix, "calendar-week-active-start")] = value.days() === moment_1.default.localeData().firstDayOfWeek(), _a["".concat(prefix, "calendar-week-active-end")] = value.days() === endDay, _a)) }, react_1.default.createElement("span", null, content));
            }
            return content;
        };
        var value = (0, util_2.formatDateValue)(props.value || props.defaultValue, props.format);
        _this.state = {
            value: value,
            visible: props.visible || props.defaultVisible
        };
        return _this;
    }
    WeekPicker.getDerivedStateFromProps = function (props) {
        var st = {};
        if ('value' in props) {
            st.value = (0, util_2.formatDateValue)(props.value, props.format);
        }
        if ('visible' in props) {
            st.visible = props.visible;
        }
        return st;
    };
    WeekPicker.prototype.renderPreview = function (others) {
        var _a = this.props,
            prefix = _a.prefix,
            format = _a.format,
            className = _a.className,
            renderPreview = _a.renderPreview;
        var value = this.state.value;
        var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
        var label = value ? value.format(format) : '';
        if (typeof renderPreview === 'function') {
            return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: previewCls }), renderPreview(value, this.props));
        }
        return react_1.default.createElement("p", tslib_1.__assign({}, others, { className: previewCls }), label);
    };
    WeekPicker.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            rtl = _a.rtl,
            locale = _a.locale,
            label = _a.label,
            state = _a.state,
            format = _a.format,
            defaultVisibleMonth = _a.defaultVisibleMonth,
            onVisibleMonthChange = _a.onVisibleMonthChange,
            disabledDate = _a.disabledDate,
            footerRender = _a.footerRender,
            placeholder = _a.placeholder,
            size = _a.size,
            disabled = _a.disabled,
            hasClear = _a.hasClear,
            popupTriggerType = _a.popupTriggerType,
            popupAlign = _a.popupAlign,
            popupContainer = _a.popupContainer,
            popupStyle = _a.popupStyle,
            popupClassName = _a.popupClassName,
            popupProps = _a.popupProps,
            popupComponent = _a.popupComponent,
            popupContent = _a.popupContent,
            followTrigger = _a.followTrigger,
            className = _a.className,
            inputProps = _a.inputProps,
            monthCellRender = _a.monthCellRender,
            yearCellRender = _a.yearCellRender,
            isPreview = _a.isPreview,
            others = tslib_1.__rest(_a, ["prefix", "rtl", "locale", "label", "state", "format", "defaultVisibleMonth", "onVisibleMonthChange", "disabledDate", "footerRender", "placeholder", "size", "disabled", "hasClear", "popupTriggerType", "popupAlign", "popupContainer", "popupStyle", "popupClassName", "popupProps", "popupComponent", "popupContent", "followTrigger", "className", "inputProps", "monthCellRender", "yearCellRender", "isPreview"]);
        var _b = this.state,
            visible = _b.visible,
            value = _b.value;
        var sharedInputProps = tslib_1.__assign(tslib_1.__assign({}, inputProps), { size: size, disabled: disabled, onChange: this.onDateInputChange, onKeyDown: this.onKeyDown });
        if (rtl) {
            others.dir = 'rtl';
        }
        if (isPreview) {
            return this.renderPreview(util_1.obj.pickOthers(others, WeekPicker.PropTypes));
        }
        var trigger = react_1.default.createElement("div", { className: "".concat(prefix, "week-picker-trigger") }, react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedInputProps, { label: label, state: state, value: value ? value.format(format) : '', role: "combobox", "aria-expanded": visible, readOnly: true, placeholder: placeholder || locale.weekPlaceholder, hint: react_1.default.createElement(icon_1.default, { type: "calendar", className: "".concat(prefix, "date-picker-symbol-calendar-icon") }), hasClear: value && hasClear, className: "".concat(prefix, "week-picker-input") })));
        var PopupComponent = popupComponent ? popupComponent : Popup;
        return react_1.default.createElement("div", tslib_1.__assign({}, util_1.obj.pickOthers(WeekPicker.propTypes, others), { className: (0, classnames_1.default)("".concat(prefix, "week-picker"), className) }), react_1.default.createElement(PopupComponent, tslib_1.__assign({ align: popupAlign }, popupProps, { followTrigger: followTrigger, disabled: disabled, visible: visible, onVisibleChange: this.onVisibleChange, triggerType: popupTriggerType, container: popupContainer, style: popupStyle, className: popupClassName, trigger: trigger }), popupContent ? popupContent : react_1.default.createElement("div", { dir: others.dir, className: "".concat(prefix, "week-picker-body") }, react_1.default.createElement(calendar_1.default, { shape: "panel", value: value, format: format, className: "".concat(prefix, "calendar-week"), dateCellRender: this.dateRender, monthCellRender: monthCellRender, yearCellRender: yearCellRender, onSelect: this.onSelectCalendarPanel, defaultVisibleMonth: defaultVisibleMonth, onVisibleMonthChange: onVisibleMonthChange, disabledDate: disabledDate }), footerRender())));
    };
    WeekPicker.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, rtl: prop_types_1.default.bool,
        /**
         * 输入框内置标签
         */
        label: prop_types_1.default.node,
        /**
         * 输入框状态
         */
        state: prop_types_1.default.oneOf(['success', 'loading', 'error']),
        /**
         * 输入提示
         */
        placeholder: prop_types_1.default.string,
        /**
         * 默认展现的月
         * @return {MomentObject} 返回包含指定月份的 moment 对象实例
         */
        defaultVisibleMonth: prop_types_1.default.func, onVisibleMonthChange: prop_types_1.default.func,
        /**
         * 日期值（受控）moment 对象
         */
        value: util_2.checkDateValue,
        /**
         * 初始日期值，moment 对象
         */
        defaultValue: util_2.checkDateValue,
        /**
         * 日期值的格式（用于限定用户输入和展示）
         */
        format: prop_types_1.default.string,
        /**
         * 禁用日期函数
         * @param {MomentObject} 日期值
         * @param {String} view 当前视图类型，year: 年， month: 月, date: 日
         * @return {Boolean} 是否禁用
         */
        disabledDate: prop_types_1.default.func,
        /**
         * 自定义面板页脚
         * @return {Node} 自定义的面板页脚组件
         */
        footerRender: prop_types_1.default.func,
        /**
         * 日期值改变时的回调
         * @param {MomentObject|String} value 日期值
         */
        onChange: prop_types_1.default.func,
        /**
         * 输入框尺寸
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 是否显示清空按钮
         */
        hasClear: prop_types_1.default.bool,
        /**
         * 弹层显示状态
         */
        visible: prop_types_1.default.bool,
        /**
         * 弹层默认是否显示
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 弹层展示状态变化时的回调
         * @param {Boolean} visible 弹层是否显示
         * @param {String} type 触发弹层显示和隐藏的来源 calendarSelect 表示由日期表盘的选择触发； okBtnClick 表示由确认按钮触发； fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
         */
        onVisibleChange: prop_types_1.default.func,
        /**
         * 弹层触发方式
         */
        popupTriggerType: prop_types_1.default.oneOf(['click', 'hover']),
        /**
         * 弹层对齐方式,具体含义见 OverLay文档
         */
        popupAlign: prop_types_1.default.string,
        /**
         * 弹层容器
         * @param {Element} target 目标元素
         * @return {Element} 弹层的容器元素
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 弹层自定义样式
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 弹层自定义样式类
         */
        popupClassName: prop_types_1.default.string,
        /**
         * 弹层其他属性
         */
        popupProps: prop_types_1.default.object,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 输入框其他属性
         */
        inputProps: prop_types_1.default.object,
        /**
         * 自定义日期渲染函数
         * @param {Object} value 日期值（moment对象）
         * @returns {ReactNode}
         */
        dateCellRender: prop_types_1.default.func,
        /**
         * 自定义月份渲染函数
         * @param {Object} calendarDate 对应 Calendar 返回的自定义日期对象
         * @returns {ReactNode}
         */
        monthCellRender: prop_types_1.default.func,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {MomentObject} value 年份
         */
        renderPreview: prop_types_1.default.func, yearCellRender: prop_types_1.default.func, locale: prop_types_1.default.object, className: prop_types_1.default.string, name: prop_types_1.default.string, popupComponent: prop_types_1.default.elementType, popupContent: prop_types_1.default.node });
    WeekPicker.defaultProps = {
        prefix: 'next-',
        rtl: false,
        format: 'GGGG-Wo',
        size: 'medium',
        disabledDate: function disabledDate() {
            return false;
        },
        footerRender: function footerRender() {
            return null;
        },
        hasClear: true,
        popupTriggerType: 'click',
        popupAlign: 'tl tl',
        locale: zh_cn_1.default.DatePicker,
        defaultVisible: false,
        onChange: util_1.func.noop,
        onVisibleChange: util_1.func.noop
    };
    return WeekPicker;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(WeekPicker);

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var dialog_1 = __webpack_require__(166);
var dialog_v2_1 = __webpack_require__(167);
var inner_1 = __webpack_require__(90);
var show_1 = __webpack_require__(332);
var Dialog = /** @class */function (_super) {
    tslib_1.__extends(Dialog, _super);
    function Dialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Dialog.prototype.render = function () {
        var _a = this.props,
            v2 = _a.v2,
            others = tslib_1.__rest(_a, ["v2"]);
        if (v2) {
            return react_1.default.createElement(dialog_v2_1.default, tslib_1.__assign({}, others));
        } else {
            return react_1.default.createElement(dialog_1.default, tslib_1.__assign({}, others));
        }
    };
    return Dialog;
}(react_1.default.Component);
Dialog.Inner = inner_1.default;
Dialog.show = function (config) {
    var warning = config_provider_1.default.getContextProps(config, 'Dialog').warning;
    if (warning !== false) {
        config = processProps(config, util_1.log.deprecated);
    }
    return (0, show_1.show)(config);
};
Dialog.alert = function (config) {
    var warning = config_provider_1.default.getContextProps(config, 'Dialog').warning;
    if (warning !== false) {
        config = processProps(config, util_1.log.deprecated);
    }
    return (0, show_1.alert)(config);
};
Dialog.confirm = function (config) {
    var warning = config_provider_1.default.getContextProps(config, 'Dialog').warning;
    if (warning !== false) {
        config = processProps(config, util_1.log.deprecated);
    }
    return (0, show_1.confirm)(config);
};
Dialog.success = function (config) {
    return (0, show_1.success)(config);
};
Dialog.error = function (config) {
    return (0, show_1.error)(config);
};
Dialog.notice = function (config) {
    return (0, show_1.notice)(config);
};
Dialog.warning = function (config) {
    return (0, show_1.warning)(config);
};
Dialog.help = function (config) {
    return (0, show_1.help)(config);
};
Dialog.withContext = show_1.withContext;
/* istanbul ignore next */
function processProps(props, deprecated) {
    if ('closable' in props) {
        deprecated('closable', 'closeable', 'Dialog');
        var closable = props.closable,
            others = tslib_1.__rest(props, ["closable"]);
        props = tslib_1.__assign({ closeable: closable }, others);
    }
    if ('v2' in props) {
        var nProps = tslib_1.__assign({}, props);
        if ('align' in props) {
            delete nProps.align;
            deprecated('align', 'centered', '<Dialog v2 />');
        }
        if ('shouldUpdatePosition' in props) {
            delete nProps.shouldUpdatePosition;
            util_1.log.warning("Warning: [ shouldUpdatePosition ] is deprecated at [ <Dialog v2 /> ]");
        }
        if ('minMargin' in props) {
            // delete nProps.minMargin;
            deprecated('minMargin', 'top/bottom', '<Dialog v2 />');
        }
        if ('isFullScreen' in props) {
            props.overFlowScroll = !props.isFullScreen;
            delete nProps.isFullScreen;
            deprecated('isFullScreen', 'overFlowScroll', '<Dialog v2 />');
        }
        return nProps;
    }
    var overlayPropNames = ['target', 'offset', 'beforeOpen', 'onOpen', 'afterOpen', 'beforePosition', 'onPosition', 'cache', 'safeNode', 'wrapperClassName', 'container'];
    overlayPropNames.forEach(function (name) {
        var _a;
        if (name in props) {
            deprecated(name, "overlayProps.".concat(name), 'Dialog');
            var overlayProps = props.overlayProps,
                others = tslib_1.__rest(props, ["overlayProps"]);
            var newOverlayProps = tslib_1.__assign((_a = {}, _a[name] = props[name], _a), overlayProps || {});
            delete others[name];
            props = tslib_1.__assign({ overlayProps: newOverlayProps }, others);
        }
    });
    return props;
}
exports.default = config_provider_1.default.config(Dialog, {
    transform: function transform(props, deprecated) {
        return processProps(props, deprecated);
    }
});

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.withContext = exports.confirm = exports.help = exports.warning = exports.notice = exports.error = exports.success = exports.alert = exports.show = exports.ModalInner = void 0;
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var message_1 = __webpack_require__(91);
var zh_cn_1 = __webpack_require__(9);
var dialog_1 = __webpack_require__(166);
var dialog_v2_1 = __webpack_require__(167);
var Dialog = config_provider_1.default.config(dialog_1.default);
var Dialog2 = config_provider_1.default.config((0, react_1.forwardRef)(function (props, ref) {
    (0, react_1.useImperativeHandle)(ref, function () {
        return undefined;
    });
    return react_1.default.createElement(dialog_v2_1.default, tslib_1.__assign({}, props));
}));
var noop = function noop() {};
var MESSAGE_TYPE = {
    alert: 'warning', // deprecated in 2.x
    confirm: 'help',
    success: 'success',
    error: 'error',
    warning: 'warning',
    notice: 'notice',
    help: 'help'
};
var ModalInner = function ModalInner(_a) {
    var type = _a.type,
        _b = _a.messageProps,
        messageProps = _b === void 0 ? {} : _b,
        title = _a.title,
        rtl = _a.rtl,
        _c = _a.prefix,
        prefix = _c === void 0 ? 'next-' : _c,
        content = _a.content;
    return react_1.default.createElement(message_1.default, tslib_1.__assign({ size: "large", shape: "addon", type: MESSAGE_TYPE[type] }, messageProps, { title: title, rtl: rtl, className: (0, classnames_1.default)("".concat(prefix, "dialog-message"), messageProps.className) }), content);
};
exports.ModalInner = ModalInner;
var Modal = /** @class */function (_super) {
    tslib_1.__extends(Modal, _super);
    function Modal() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.state = {
            visible: true,
            okLoading: false,
            cancelLoading: false
        };
        _this.close = function () {
            _this.setState({
                visible: false
            });
        };
        _this.okLoading = function (loading) {
            _this.setState({
                okLoading: loading
            });
        };
        _this.cancelLoading = function (loading) {
            _this.setState({
                cancelLoading: loading
            });
        };
        return _this;
    }
    Modal.prototype.wrapper = function (fn, callback, changeLoading) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var res = fn.apply(void 0, tslib_1.__spreadArray([], tslib_1.__read(args), false));
            if (res && res.then) {
                changeLoading(true);
                res.then(function (result) {
                    changeLoading(false);
                    if (result !== false) {
                        return callback();
                    }
                }).catch(function (e) {
                    changeLoading(false);
                    throw e;
                });
            } else if (res !== false) {
                return callback();
            }
        };
    };
    Modal.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            type = _a.type,
            title = _a.title,
            content = _a.content,
            messageProps = _a.messageProps,
            footerActions = _a.footerActions,
            onOk = _a.onOk,
            onCancel = _a.onCancel,
            onClose = _a.onClose,
            okProps = _a.okProps,
            cancelProps = _a.cancelProps,
            needWrapper = _a.needWrapper,
            rtl = _a.rtl,
            className = _a.className,
            v2 = _a.v2,
            _b = _a.width,
            width = _b === void 0 ? 420 : _b,
            others = tslib_1.__rest(_a, ["prefix", "type", "title", "content", "messageProps", "footerActions", "onOk", "onCancel", "onClose", "okProps", "cancelProps", "needWrapper", "rtl", "className", "v2", "width"]);
        var newTitle = needWrapper && type ? null : title;
        var newContent = needWrapper && type ? react_1.default.createElement(exports.ModalInner, { type: type, messageProps: messageProps, title: title, rtl: rtl, prefix: prefix, content: content }) : content;
        var newFooterActions = footerActions || (type === 'confirm' ? ['ok', 'cancel'] : ['alert', 'success', 'error', 'notice', 'warning', 'help'].indexOf(type) > -1 ? ['ok'] : undefined);
        var newOnOk = this.wrapper(onOk, this.close, this.okLoading);
        var newOnCancel = this.wrapper(onCancel, this.close, this.cancelLoading);
        var newOnClose = this.wrapper(onClose, this.close, this.cancelLoading);
        var _c = this.state,
            visible = _c.visible,
            okLoading = _c.okLoading,
            cancelLoading = _c.cancelLoading;
        // 不能直接改，这里修改相当于改了全局 okProps
        // okProps.loading = loading;
        var newOkProps = tslib_1.__assign({}, okProps);
        if (!('loading' in okProps)) {
            newOkProps.loading = okLoading;
        }
        var newCancelProps = tslib_1.__assign({}, cancelProps);
        if (!('loading' in cancelProps)) {
            newCancelProps.loading = cancelLoading;
        }
        var classNames = (0, classnames_1.default)("".concat(prefix, "dialog-quick"), className);
        var Tag = v2 ? Dialog2 : Dialog;
        return react_1.default.createElement(Tag, tslib_1.__assign({ prefix: prefix, role: "alertdialog" }, others, { visible: visible, title: newTitle, rtl: rtl, footerActions: newFooterActions, onOk: this.state.loading ? noop : newOnOk, onCancel: newOnCancel, onClose: newOnClose, okProps: newOkProps, cancelProps: newCancelProps, className: classNames, width: v2 ? width : undefined }), newContent);
    };
    Modal.propTypes = {
        prefix: prop_types_1.default.string,
        pure: prop_types_1.default.bool,
        rtl: prop_types_1.default.bool,
        type: prop_types_1.default.oneOf(['alert', 'confirm', 'success', 'error', 'notice', 'warning', 'help']),
        title: prop_types_1.default.node,
        content: prop_types_1.default.node,
        messageProps: prop_types_1.default.object,
        footerActions: prop_types_1.default.array,
        /**
         * Callback function triggered when Ok button is clicked
         * @param {Object} event click event object
         * @returns {Promise} Optionally handles a Promise return object
         */
        onOk: prop_types_1.default.func,
        /**
         * Callback function triggered when Cancel button is clicked
         * @param {Object} event click event object
         * @returns {Promise} Optionally handles a Promise return object
         */
        onCancel: prop_types_1.default.func,
        /**
         * Callback function triggered when Close button is clicked
         * @param {Object} event click event object
         * @returns {Promise} Optionally handles a Promise return object
         */
        onClose: prop_types_1.default.func,
        okProps: prop_types_1.default.object,
        cancelProps: prop_types_1.default.object,
        locale: prop_types_1.default.object,
        needWrapper: prop_types_1.default.bool,
        className: prop_types_1.default.string
    };
    Modal.defaultProps = {
        prefix: 'next-',
        pure: false,
        messageProps: {},
        onOk: noop,
        onCancel: noop,
        onClose: noop,
        okProps: {},
        cancelProps: {},
        locale: zh_cn_1.default.Dialog,
        needWrapper: true
    };
    return Modal;
}(react_1.Component);
var ConfigModal = config_provider_1.default.config(Modal, { componentName: 'Dialog' });
/**
 * 创建对话框
 * @exportName show
 * @param {Object} config 配置项
 * @returns {Object} 包含有 hide 方法，可用来关闭对话框
 */
var show = function show(config) {
    if (config === void 0) {
        config = {};
    }
    var container = document.createElement('div');
    var unmount = function unmount() {
        if (config.afterClose) {
            config.afterClose();
        }
        react_dom_1.default.unmountComponentAtNode(container);
        container.parentNode.removeChild(container);
    };
    document.body.appendChild(container);
    var newContext = config.contextConfig;
    if (!newContext) newContext = config_provider_1.default.getContext();
    var instance, myRef;
    react_dom_1.default.render(react_1.default.createElement(config_provider_1.default, tslib_1.__assign({}, newContext), react_1.default.createElement(ConfigModal, tslib_1.__assign({}, config, { afterClose: unmount, ref: function ref(_ref) {
            myRef = _ref;
        } }))), container, function () {
        instance = myRef;
    });
    return {
        hide: function hide() {
            var inc = instance && instance.getInstance();
            inc && inc.close();
        }
    };
};
exports.show = show;
var methodFactory = function methodFactory(type) {
    return function (config) {
        if (config === void 0) {
            config = {};
        }
        config.type = type;
        return (0, exports.show)(config);
    };
};
/**
 * 创建警示对话框
 * @exportName alert
 * @param {Object} config 配置项
 * @returns {Object} 包含有 hide 方法，可用来关闭对话框
 */
exports.alert = methodFactory('alert');
exports.success = methodFactory('success');
exports.error = methodFactory('error');
exports.notice = methodFactory('notice');
exports.warning = methodFactory('warning');
exports.help = methodFactory('help');
/**
 * 创建确认对话框
 * @exportName confirm
 * @param {Object} config 配置项
 * @returns {Object} 包含有 hide 方法，可用来关闭对话框
 */
exports.confirm = methodFactory('confirm');
var withContext = function withContext(WrappedComponent) {
    var HOC = function HOC(props) {
        return react_1.default.createElement(config_provider_1.default.Consumer, null, function (contextConfig) {
            return react_1.default.createElement(WrappedComponent, tslib_1.__assign({}, props, { contextDialog: {
                    show: function show(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return (0, exports.show)(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    },
                    alert: function alert(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return (0, exports.alert)(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    },
                    confirm: function confirm(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return (0, exports.confirm)(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    },
                    success: function success(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return (0, exports.success)(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    },
                    error: function error(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return (0, exports.error)(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    },
                    warning: function warning(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return (0, exports.warning)(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    },
                    notice: function notice(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return (0, exports.notice)(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    },
                    help: function help(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return (0, exports.help)(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    }
                } }));
        });
    };
    return HOC;
};
exports.withContext = withContext;

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.withContext = void 0;
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var overlay_1 = __webpack_require__(12);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var message_1 = __webpack_require__(92);
var config = config_provider_1.default.config;
var instance;
var timeouts = {};
var Mask = /** @class */function (_super) {
    tslib_1.__extends(Mask, _super);
    function Mask() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.state = {
            visible: true
        };
        _this.handleClose = function (silent) {
            if (silent === void 0) {
                silent = false;
            }
            _this.setState({
                visible: false
            });
            if (!silent) {
                _this.props.onClose && _this.props.onClose();
            }
        };
        return _this;
    }
    Mask.prototype.componentWillUnmount = function () {
        var timeoutId = this.props.timeoutId;
        if (timeoutId in timeouts) {
            var timeout = timeouts[timeoutId];
            clearTimeout(timeout);
            delete timeouts[timeoutId];
        }
    };
    Mask.prototype.render = function () {
        /* eslint-disable no-unused-vars */
        var _a = this.props,
            prefix = _a.prefix,
            type = _a.type,
            title = _a.title,
            content = _a.content,
            align = _a.align,
            offset = _a.offset,
            hasMask = _a.hasMask,
            afterClose = _a.afterClose,
            animation = _a.animation,
            overlayProps = _a.overlayProps,
            timeoutId = _a.timeoutId,
            className = _a.className,
            style = _a.style,
            others = tslib_1.__rest(_a, ["prefix", "type", "title", "content", "align", "offset", "hasMask", "afterClose", "animation", "overlayProps", "timeoutId", "className", "style"]);
        /* eslint-enable */
        var visible = this.state.visible;
        return react_1.default.createElement(overlay_1.default, tslib_1.__assign({}, overlayProps, { prefix: prefix, animation: animation, visible: visible, align: align, offset: offset, hasMask: hasMask, afterClose: afterClose }), react_1.default.createElement(message_1.default, tslib_1.__assign({}, others, { prefix: prefix, visible: true, type: type, shape: "toast", title: title, style: style, className: "".concat(prefix, "message-wrapper ").concat(className), onClose: this.handleClose }), content));
    };
    Mask.contextTypes = {
        prefix: prop_types_1.default.string
    };
    Mask.propTypes = {
        prefix: prop_types_1.default.string,
        type: prop_types_1.default.string,
        title: prop_types_1.default.node,
        content: prop_types_1.default.node,
        align: prop_types_1.default.string,
        offset: prop_types_1.default.array,
        hasMask: prop_types_1.default.bool,
        afterClose: prop_types_1.default.func,
        animation: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.bool]),
        overlayProps: prop_types_1.default.object,
        onClose: prop_types_1.default.func,
        timeoutId: prop_types_1.default.string,
        style: prop_types_1.default.object,
        className: prop_types_1.default.string
    };
    Mask.defaultProps = {
        prefix: 'next-',
        align: 'tc tc',
        offset: [0, 30],
        hasMask: false,
        animation: {
            in: 'pulse',
            out: 'zoomOut'
        },
        style: {},
        className: ''
    };
    return Mask;
}(react_1.default.Component);
var NewMask = config(Mask);
var create = function create(props) {
    /* eslint-disable no-unused-vars */
    var duration = props.duration,
        afterClose = props.afterClose,
        contextConfig = props.contextConfig,
        others = tslib_1.__rest(props, ["duration", "afterClose", "contextConfig"]);
    /* eslint-enable no-unused-vars */
    var div = document.createElement('div');
    document.body.appendChild(div);
    var closeChain = function closeChain() {
        react_dom_1.default.unmountComponentAtNode(div);
        document.body.removeChild(div);
        afterClose && afterClose();
    };
    var newContext = contextConfig;
    if (!newContext) newContext = config_provider_1.default.getContext();
    var mask,
        myRef,
        destroyed = false;
    var destroy = function destroy() {
        var inc = mask && mask.getInstance();
        inc && inc.handleClose(true);
        destroyed = true;
    };
    react_dom_1.default.render(react_1.default.createElement(config_provider_1.default, tslib_1.__assign({}, newContext), react_1.default.createElement(NewMask, tslib_1.__assign({ afterClose: closeChain }, others, { ref: function ref(_ref) {
            myRef = _ref;
        } }))), div, function () {
        mask = myRef;
        if (mask && destroyed) {
            destroy();
        }
    });
    return {
        component: mask,
        destroy: destroy
    };
};
function handleConfig(config, type) {
    var newConfig = {};
    if (typeof config === 'string' || react_1.default.isValidElement(config)) {
        newConfig.title = config;
    } else if (isObject(config)) {
        newConfig = tslib_1.__assign({}, config);
    }
    if (typeof newConfig.duration !== 'number') {
        newConfig.duration = 3000;
    }
    if (type) {
        newConfig.type = type;
    }
    return newConfig;
}
function isObject(obj) {
    return {}.toString.call(obj) === '[object Object]';
}
function open(config, type) {
    close();
    config = handleConfig(config, type);
    var timeoutId = (0, util_1.guid)();
    instance = create(tslib_1.__assign(tslib_1.__assign({}, config), { timeoutId: timeoutId }));
    if (config.duration > 0) {
        var timeout = setTimeout(close, config.duration);
        timeouts[timeoutId] = timeout;
    }
}
function close() {
    if (instance) {
        instance.destroy();
        instance = null;
    }
}
/**
 * 创建提示弹层
 * @exportName show
 * @param {Object} props 属性对象
 */
function _show(config) {
    open(config);
}
/**
 * 关闭提示弹层
 * @exportName hide
 */
function hide() {
    close();
}
/**
 * 创建成功提示弹层
 * @exportName success
 * @param {Object} props 属性对象
 */
function _success(config) {
    open(config, 'success');
}
/**
 * 创建警告提示弹层
 * @exportName warning
 * @param {Object} props 属性对象
 */
function _warning(config) {
    open(config, 'warning');
}
/**
 * 创建错误提示弹层
 * @exportName error
 * @param {Object} props 属性对象
 */
function _error(config) {
    open(config, 'error');
}
/**
 * 创建帮助提示弹层
 * @exportName help
 * @param {Object} props 属性对象
 */
function _help(config) {
    open(config, 'help');
}
/**
 * 创建加载中提示弹层
 * @exportName loading
 * @param {Object} props 属性对象
 */
function _loading(config) {
    open(config, 'loading');
}
/**
 * 创建通知提示弹层
 * @exportName notice
 * @param {Object} props 属性对象
 */
function _notice(config) {
    open(config, 'notice');
}
exports.default = {
    show: _show,
    hide: hide,
    success: _success,
    warning: _warning,
    error: _error,
    help: _help,
    loading: _loading,
    notice: _notice
};
var withContext = function withContext(WrappedComponent) {
    var HOC = function HOC(props) {
        return react_1.default.createElement(config_provider_1.default.Consumer, null, function (contextConfig) {
            return react_1.default.createElement(WrappedComponent, tslib_1.__assign({}, props, { contextMessage: {
                    show: function show(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return _show(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    },
                    hide: hide,
                    success: function success(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return _success(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    },
                    warning: function warning(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return _warning(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    },
                    error: function error(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return _error(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    },
                    help: function help(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return _help(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    },
                    loading: function loading(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return _loading(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    },
                    notice: function notice(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return _notice(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    }
                } }));
        });
    };
    return HOC;
};
exports.withContext = withContext;

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var config_provider_1 = __webpack_require__(5);
var animate_1 = __webpack_require__(17);
var message_1 = __webpack_require__(92);
var util_1 = __webpack_require__(4);
var _config = {
    top: 8,
    maxCount: 0,
    duration: 3000
};
var MessageWrapper = function MessageWrapper(props) {
    // eslint-disable-next-line
    var _a = props.prefix,
        prefix = _a === void 0 ? 'next-' : _a,
        _b = props.dataSource,
        dataSource = _b === void 0 ? [] : _b;
    var _c = tslib_1.__read((0, react_1.useState)(), 2),
        forceUpdate = _c[1];
    dataSource.forEach(function (i) {
        if (!i.timer) {
            i.timer = setTimeout(function () {
                var idx = dataSource.indexOf(i);
                if (idx > -1) {
                    var item = dataSource[idx];
                    typeof item.onClose === 'function' && item.onClose();
                    dataSource.splice(idx, 1);
                    forceUpdate({});
                }
            }, i.duration);
        }
    });
    return react_1.default.createElement("div", { className: "".concat(prefix, "message-wrapper-v2"), style: { top: _config.top } }, react_1.default.createElement(animate_1.default, { animationAppear: true, animation: {
            appear: 'pulse',
            enter: 'pulse',
            leave: "".concat(prefix, "message-fade-leave")
        }, singleMode: false }, dataSource.map(function (i) {
        var key = i.key,
            className = i.className,
            type = i.type,
            title = i.title,
            content = i.content,
            style = i.style,
            others = tslib_1.__rest(i, ["key", "className", "type", "title", "content", "style"]);
        return react_1.default.createElement("div", { className: "".concat(prefix, "message-list"), key: key }, react_1.default.createElement(message_1.default, tslib_1.__assign({}, others, { className: className, prefix: prefix, visible: true, type: type, shape: "toast", title: title, style: style }), content));
    })));
};
var ConfigedMessages = config_provider_1.default.config(MessageWrapper);
var messageRootNode;
var messageList = [];
var createMessage = function createMessage(props) {
    var _a = props.key,
        key = _a === void 0 ? (0, util_1.guid)('message-') : _a,
        others = tslib_1.__rest(props, ["key"]);
    if (!messageRootNode) {
        messageRootNode = document.createElement('div');
        document.body.appendChild(messageRootNode);
    }
    var maxCount = _config.maxCount,
        duration = _config.duration;
    var item = tslib_1.__assign({ key: key, duration: duration }, others);
    messageList.push(item);
    if (maxCount && messageList.length > maxCount) {
        messageList.shift();
    }
    react_dom_1.default.render(react_1.default.createElement(config_provider_1.default, tslib_1.__assign({}, config_provider_1.default.getContext()), react_1.default.createElement(ConfigedMessages, { dataSource: messageList })), messageRootNode);
    return {
        key: key,
        close: function close() {
            if (item.timer) {
                clearTimeout(item.timer);
            }
            var idx = messageList.indexOf(item);
            if (idx > -1) {
                typeof item.onClose === 'function' && item.onClose();
                messageList.splice(idx, 1);
                react_dom_1.default.render(react_1.default.createElement(config_provider_1.default, tslib_1.__assign({}, config_provider_1.default.getContext()), react_1.default.createElement(ConfigedMessages, { dataSource: messageList })), messageRootNode);
            }
        }
    };
};
function close(key) {
    if (key) {
        var index = messageList.findIndex(function (item) {
            return item.key === key;
        });
        messageList.splice(index, 1);
    } else {
        messageList = [];
    }
    if (messageRootNode) {
        react_dom_1.default.render(react_1.default.createElement(config_provider_1.default, tslib_1.__assign({}, config_provider_1.default.getContext()), react_1.default.createElement(ConfigedMessages, { dataSource: messageList })), messageRootNode);
    }
}
function handleConfig(config, type) {
    var newConfig = {};
    if (typeof config === 'string' || react_1.default.isValidElement(config)) {
        newConfig.title = config;
    } else if (util_1.obj.typeOf(config) === 'Object') {
        newConfig = tslib_1.__assign({}, config);
    }
    if (type) {
        newConfig.type = type;
    }
    return newConfig;
}
function open(type) {
    return function (config) {
        config = handleConfig(config, type);
        return createMessage(config);
    };
}
function destory() {
    if (!messageRootNode) return;
    if (messageRootNode) {
        react_dom_1.default.unmountComponentAtNode(messageRootNode);
        messageRootNode.parentNode.removeChild(messageRootNode);
        messageRootNode = null;
    }
}
exports.default = {
    open: open(),
    success: open('success'),
    warning: open('warning'),
    error: open('error'),
    help: open('help'),
    loading: open('loading'),
    notice: open('notice'),
    close: close,
    destory: destory,
    config: function config() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!react_1.useState) {
            util_1.log.warning('need react version > 16.8.0');
            return;
        }
        return Object.assign.apply(Object, tslib_1.__spreadArray([_config], tslib_1.__read(args), false));
    }
};

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var config_provider_1 = __webpack_require__(5);
var drawer_1 = __webpack_require__(336);
var drawer_v2_1 = __webpack_require__(169);
var inner_1 = __webpack_require__(93);
var show_1 = __webpack_require__(337);
var Drawer = /** @class */function (_super) {
    tslib_1.__extends(Drawer, _super);
    function Drawer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Drawer.prototype.render = function () {
        var _a = this.props,
            v2 = _a.v2,
            others = tslib_1.__rest(_a, ["v2"]);
        if (v2) {
            return react_1.default.createElement(drawer_v2_1.default, tslib_1.__assign({}, others));
        } else {
            return react_1.default.createElement(drawer_1.default, tslib_1.__assign({}, others));
        }
    };
    return Drawer;
}(react_1.default.Component);
Drawer.Inner = inner_1.default;
Drawer.show = show_1.show;
Drawer.withContext = show_1.withContext;
exports.default = config_provider_1.default.config(Drawer);

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var prop_types_1 = __webpack_require__(2);
var react_1 = __webpack_require__(1);
var overlay_1 = __webpack_require__(12);
var inner_1 = __webpack_require__(93);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var noop = function noop() {};
var Popup = overlay_1.default.Popup;
var pickOthers = util_1.obj.pickOthers;
/**
 * Drawer
 * @description 继承 Overlay.Popup 的 API，除非特别说明
 * */
var Drawer = /** @class */function (_super) {
    tslib_1.__extends(Drawer, _super);
    function Drawer() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.getAlign = function (placement) {
            var align;
            switch (placement) {
                case 'top':
                    align = 'tl tl';
                    break;
                case 'bottom':
                    align = 'bl bl';
                    break;
                case 'left':
                    align = 'tl tl';
                    break;
                case 'right':
                default:
                    align = 'tr tr';
                    break;
            }
            return align;
        };
        _this.getAnimation = function (placement) {
            if ('animation' in _this.props) {
                return _this.props.animation;
            }
            var animation;
            switch (placement) {
                case 'top':
                    animation = {
                        in: 'slideInDown',
                        out: 'slideOutUp'
                    };
                    break;
                case 'bottom':
                    animation = {
                        in: 'slideInUp',
                        out: 'slideOutDown'
                    };
                    break;
                case 'left':
                    animation = {
                        in: 'slideInLeft',
                        out: 'slideOutLeft'
                    };
                    break;
                case 'right':
                default:
                    animation = {
                        in: 'slideInRight',
                        out: 'slideOutRight'
                    };
                    break;
            }
            return animation;
        };
        _this.getOverlayRef = function (ref) {
            _this.overlay = ref;
        };
        _this.mapcloseableToConfig = function (closeable) {
            return ['esc', 'close', 'mask'].reduce(function (ret, option) {
                var key = option.charAt(0).toUpperCase() + option.substr(1);
                var value = typeof closeable === 'boolean' ? closeable : closeable.split(',').indexOf(option) > -1;
                if (option === 'esc' || option === 'mask') {
                    ret["canCloseBy".concat(key)] = value;
                } else {
                    ret["canCloseBy".concat(key, "Click")] = value;
                }
                return ret;
            }, {});
        };
        _this.handleVisibleChange = function (visible, reason, e) {
            var _a = _this.props,
                onClose = _a.onClose,
                onVisibleChange = _a.onVisibleChange;
            if (visible === false) {
                onClose && onClose(reason, e);
            }
            onVisibleChange && onVisibleChange(visible, reason, e);
        };
        return _this;
    }
    Drawer.prototype.renderInner = function (closeable) {
        var _a = this.props,
            prefix = _a.prefix,
            className = _a.className,
            children = _a.children,
            title = _a.title,
            onClose = _a.onClose,
            locale = _a.locale,
            headerStyle = _a.headerStyle,
            bodyStyle = _a.bodyStyle,
            placement = _a.placement,
            rtl = _a.rtl;
        var others = pickOthers(Object.keys(Drawer.propTypes), this.props);
        return react_1.default.createElement(inner_1.default, tslib_1.__assign({ prefix: prefix, title: title, className: className, locale: locale, closeable: closeable, rtl: rtl, headerStyle: headerStyle, bodyStyle: bodyStyle, placement: placement, onClose: onClose.bind(this, 'closeClick') }, others), children);
    };
    Drawer.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            style = _a.style,
            width = _a.width,
            height = _a.height,
            trigger = _a.trigger,
            triggerType = _a.triggerType,
            animation = _a.animation,
            hasMask = _a.hasMask,
            visible = _a.visible,
            placement = _a.placement,
            onClose = _a.onClose,
            onVisibleChange = _a.onVisibleChange,
            closeable = _a.closeable,
            closeMode = _a.closeMode,
            rtl = _a.rtl,
            popupContainer = _a.popupContainer,
            others = tslib_1.__rest(_a, ["prefix", "style", "width", "height", "trigger", "triggerType", "animation", "hasMask", "visible", "placement", "onClose", "onVisibleChange", "closeable", "closeMode", "rtl", "popupContainer"]);
        var newStyle = tslib_1.__assign({ width: width, height: height }, style);
        var newCloseable = 'closeMode' in this.props ? Array.isArray(closeMode) ? closeMode.join(',') : closeMode : closeable;
        var _b = this.mapcloseableToConfig(newCloseable),
            canCloseByCloseClick = _b.canCloseByCloseClick,
            closeConfig = tslib_1.__rest(_b, ["canCloseByCloseClick"]);
        var newPopupProps = tslib_1.__assign(tslib_1.__assign({ prefix: prefix, visible: visible, trigger: trigger, triggerType: triggerType, onVisibleChange: this.handleVisibleChange, animation: this.getAnimation(placement), hasMask: hasMask, align: this.getAlign(placement) }, closeConfig), { canCloseByOutSideClick: false, disableScroll: true, ref: this.getOverlayRef, rtl: rtl, target: 'viewport', style: newStyle, needAdjust: false, container: popupContainer });
        var inner = this.renderInner(canCloseByCloseClick);
        return react_1.default.createElement(Popup, tslib_1.__assign({}, newPopupProps, others), inner);
    };
    Drawer.displayName = 'Drawer';
    Drawer.propTypes = tslib_1.__assign(tslib_1.__assign({}, Popup.propTypes || {}), { prefix: prop_types_1.default.string, pure: prop_types_1.default.bool, rtl: prop_types_1.default.bool,
        // 不建议使用trigger
        trigger: prop_types_1.default.element, triggerType: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
        /**
         * 宽度，仅在 placement是 left right 的时候生效
         */
        width: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        /**
         * 高度，仅在 placement是 top bottom 的时候生效
         */
        height: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        /**
         * [废弃]同closeMode, 控制对话框关闭的方式，值可以为字符串或者布尔值，其中字符串是由以下值组成：
         * **close** 表示点击关闭按钮可以关闭对话框
         * **mask** 表示点击遮罩区域可以关闭对话框
         * **esc** 表示按下 esc 键可以关闭对话框
         * 如 'close' 或 'close,esc,mask'
         * 如果设置为 true，则以上关闭方式全部生效
         * 如果设置为 false，则以上关闭方式全部失效
         */
        closeable: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.bool]),
        /**
         * 隐藏时是否保留子节点，不销毁
         */
        cache: prop_types_1.default.bool,
        /**
         * [推荐]控制对话框关闭的方式，值可以为字符串或者数组，其中字符串、数组均为以下值的枚举：
         * **close** 表示点击关闭按钮可以关闭对话框
         * **mask** 表示点击遮罩区域可以关闭对话框
         * **esc** 表示按下 esc 键可以关闭对话框
         * 如 'close' 或 ['close','esc','mask'], []
         * @version 1.21
         */
        closeMode: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.oneOf(['close', 'mask', 'esc'])), prop_types_1.default.oneOf(['close', 'mask', 'esc'])]),
        /**
         * 对话框关闭时触发的回调函数
         * @param {String} trigger 关闭触发行为的描述字符串
         * @param {Object} event 关闭时事件对象
         */
        onClose: prop_types_1.default.func,
        /**
         * [v2废弃]对话框打开后的回调函数
         */
        afterOpen: prop_types_1.default.func,
        /**
         * 位于页面的位置
         */
        placement: prop_types_1.default.oneOf(['top', 'right', 'bottom', 'left']),
        /**
         * 标题
         */
        title: prop_types_1.default.node,
        /**
         * header上的样式
         */
        headerStyle: prop_types_1.default.object,
        /**
         * body上的样式
         */
        bodyStyle: prop_types_1.default.object,
        /**
         * 是否显示
         */
        visible: prop_types_1.default.bool,
        /**
         * 是否显示遮罩
         */
        hasMask: prop_types_1.default.bool,
        // 受控模式下(没有 trigger 的时候)，只会在关闭时触发，相当于onClose
        onVisibleChange: prop_types_1.default.func,
        /**
         * 显示隐藏时动画的播放方式，支持 { in: 'enter-class', out: 'leave-class' } 的对象参数，如果设置为 false，则不播放动画。 请参考 Animate 组件的文档获取可用的动画名
         * @default { in: 'expandInDown', out: 'expandOutUp' }
         */
        animation: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.bool]), locale: prop_types_1.default.object,
        // for ConfigProvider
        popupContainer: prop_types_1.default.any,
        /**
         * 开启 v2
         */
        v2: prop_types_1.default.bool,
        /**
         * [v2] 弹窗关闭后的回调
         */
        afterClose: prop_types_1.default.func });
    Drawer.defaultProps = {
        prefix: 'next-',
        triggerType: 'click',
        trigger: null,
        closeable: true,
        onClose: noop,
        hasMask: true,
        placement: 'right',
        locale: zh_cn_1.default.Drawer
    };
    return Drawer;
}(react_1.Component);
exports.default = Drawer;

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.withContext = exports.show = void 0;
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var drawer_v2_1 = __webpack_require__(169);
var Modal = /** @class */function (_super) {
    tslib_1.__extends(Modal, _super);
    function Modal() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.state = {
            visible: true,
            loading: false
        };
        _this.close = function () {
            _this.setState({
                visible: false
            });
        };
        return _this;
    }
    Modal.prototype.render = function () {
        var _a = this.props,
            visible = _a.visible,
            content = _a.content,
            others = tslib_1.__rest(_a, ["visible", "content"]);
        return react_1.default.createElement(drawer_v2_1.default, tslib_1.__assign({}, others, { visible: this.state.visible }), content);
    };
    return Modal;
}(react_1.default.Component);
var ConfigModal = config_provider_1.default.config(Modal, { componentName: 'Drawer' });
/**
 * 创建对话框
 * @exportName show
 * @param {Object} config 配置项
 * @returns {Object} 包含有 hide 方法，可用来关闭对话框
 */
var show = function show(config) {
    if (config === void 0) {
        config = {};
    }
    var container = document.createElement('div');
    var unmount = function unmount() {
        if (config.afterClose) {
            config.afterClose();
        }
        react_dom_1.default.unmountComponentAtNode(container);
        container.parentNode.removeChild(container);
    };
    document.body.appendChild(container);
    var newContext = config.contextConfig;
    if (!newContext) newContext = config_provider_1.default.getContext();
    var instance, myRef;
    var handleClose = function handleClose() {
        var inc = instance && instance.getInstance();
        inc && inc.close();
        if (config.onClose) {
            config.onClose();
        }
    };
    react_dom_1.default.render(react_1.default.createElement(config_provider_1.default, tslib_1.__assign({}, newContext), react_1.default.createElement(ConfigModal, tslib_1.__assign({}, config, { onClose: handleClose, afterClose: unmount, ref: function ref(_ref) {
            myRef = _ref;
        } }))), container, function () {
        instance = myRef;
    });
    return {
        hide: handleClose
    };
};
exports.show = show;
var withContext = function withContext(WrappedComponent) {
    var HOC = function HOC(props) {
        return react_1.default.createElement(config_provider_1.default.Consumer, null, function (contextConfig) {
            return react_1.default.createElement(WrappedComponent, tslib_1.__assign({}, props, { contextDialog: {
                    show: function show(config) {
                        if (config === void 0) {
                            config = {};
                        }
                        return (0, exports.show)(tslib_1.__assign(tslib_1.__assign({}, config), { contextConfig: contextConfig }));
                    }
                } }));
        });
    };
    return HOC;
};
exports.withContext = withContext;

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(23);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(__webpack_require__(94));
var _slicedToArray2 = _interopRequireDefault(__webpack_require__(340));
var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(95));
var _typeof2 = _interopRequireDefault(__webpack_require__(33));
var _defineProperty2 = _interopRequireDefault(__webpack_require__(96));
var _extends2 = _interopRequireDefault(__webpack_require__(59));
var _classCallCheck2 = _interopRequireDefault(__webpack_require__(172));
var _createClass2 = _interopRequireDefault(__webpack_require__(173));
var _validate2 = _interopRequireDefault(__webpack_require__(347));
var _utils = __webpack_require__(356);
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var initMeta = {
  state: '',
  valueName: 'value',
  trigger: 'onChange',
  inputValues: []
};
var Field = /*#__PURE__*/function () {
  function Field(com) {
    var _this2 = this;
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2.default)(this, Field);
    if (!com) {
      (0, _utils.warning)('`this` is missing in `Field`, you should use like `new Field(this)`');
    }
    this.com = com;
    this.fieldsMeta = {};
    this.cachedBind = {};
    this.instance = {};
    this.instanceCount = {};
    this.reRenders = {};
    this.listeners = {};
    // holds constructor values. Used for setting field defaults on init if no other value or initValue is passed.
    // Also used caching values when using `parseName: true` before a field is initialized
    this.values = (0, _extends2.default)({}, options.values);
    this.processErrorMessage = options.processErrorMessage;
    this.afterValidateRerender = options.afterValidateRerender;
    this.options = (0, _extends2.default)({
      parseName: false,
      forceUpdate: false,
      scrollToFirstError: true,
      first: false,
      onChange: function onChange() {},
      autoUnmount: true,
      autoValidate: true
    }, options);
    ['init', 'getValue', 'getValues', 'setValue', 'setValues', 'getError', 'getErrors', 'setError', 'setErrors', 'validateCallback', 'validatePromise', 'getState', 'reset', 'resetToDefault', 'remove', 'spliceArray', 'addArrayValue', 'deleteArrayValue', 'getNames'].forEach(function (m) {
      _this2[m] = _this2[m].bind(_this2);
    });
  }
  (0, _createClass2.default)(Field, [{
    key: "setOptions",
    value: function setOptions(options) {
      (0, _extends2.default)(this.options, options);
    }

    /**
     * Controlled Component
     * @param {String} name
     * @param {Object} fieldOption
     * @returns {Object} {value, onChange}
     */
  }, {
    key: "init",
    value: function init(name) {
      var _this3 = this;
      var fieldOption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var rprops = arguments.length > 2 ? arguments[2] : undefined;
      var id = fieldOption.id,
        initValue = fieldOption.initValue,
        _fieldOption$valueNam = fieldOption.valueName,
        valueName = _fieldOption$valueNam === void 0 ? 'value' : _fieldOption$valueNam,
        _fieldOption$trigger = fieldOption.trigger,
        trigger = _fieldOption$trigger === void 0 ? 'onChange' : _fieldOption$trigger,
        _fieldOption$rules = fieldOption.rules,
        rules = _fieldOption$rules === void 0 ? [] : _fieldOption$rules,
        _fieldOption$props = fieldOption.props,
        props = _fieldOption$props === void 0 ? {} : _fieldOption$props,
        _fieldOption$getValue = fieldOption.getValueFromEvent,
        getValueFromEvent = _fieldOption$getValue === void 0 ? null : _fieldOption$getValue,
        _fieldOption$getValue2 = fieldOption.getValueFormatter,
        getValueFormatter = _fieldOption$getValue2 === void 0 ? getValueFromEvent : _fieldOption$getValue2,
        setValueFormatter = fieldOption.setValueFormatter,
        _fieldOption$autoVali = fieldOption.autoValidate,
        autoValidate = _fieldOption$autoVali === void 0 ? true : _fieldOption$autoVali,
        reRender = fieldOption.reRender;
      var parseName = this.options.parseName;
      if (getValueFromEvent) {
        (0, _utils.warning)('`getValueFromEvent` has been deprecated in `Field`, use `getValueFormatter` instead of it');
      }
      var originalProps = (0, _extends2.default)({}, props, rprops);
      var defaultValueName = "default".concat(valueName[0].toUpperCase()).concat(valueName.slice(1));
      var defaultValue;
      if (typeof initValue !== 'undefined') {
        defaultValue = initValue;
      } else if (typeof originalProps[defaultValueName] !== 'undefined') {
        // here use typeof, in case of defaultValue={0}
        defaultValue = originalProps[defaultValueName];
      }

      // get field from this.fieldsMeta or new one
      var field = this._getInitMeta(name);
      (0, _extends2.default)(field, {
        valueName: valueName,
        initValue: defaultValue,
        disabled: 'disabled' in originalProps ? originalProps.disabled : false,
        getValueFormatter: getValueFormatter,
        setValueFormatter: setValueFormatter,
        rules: (0, _utils.cloneToRuleArr)(rules),
        ref: originalProps.ref
      });
      var oldValue = field.value;

      // Controlled Component, should always equal props.value
      if (valueName in originalProps) {
        var originalValue = originalProps[valueName];

        // When rerendering set the values from props.value
        if (parseName) {
          // when parseName is true, field should not store value locally. To prevent sync issues
          if (!('value' in field)) {
            this._proxyFieldValue(field);
          }
        } else {
          this.values[name] = originalValue;
        }
        field.value = originalValue;
      }

      /**
       * first init field (value not in field)
       * should get field.value from this.values or defaultValue
       */
      if (!('value' in field)) {
        if (parseName) {
          var cachedValue = (0, _utils.getIn)(this.values, name);
          if (typeof cachedValue !== 'undefined') {
            oldValue = cachedValue;
          }
          var _initValue = typeof cachedValue !== 'undefined' ? cachedValue : defaultValue;
          // when parseName is true, field should not store value locally. To prevent sync issues
          this._proxyFieldValue(field);
          field.value = _initValue;
        } else {
          var _cachedValue = this.values[name];
          if (typeof _cachedValue !== 'undefined') {
            field.value = _cachedValue;
            oldValue = _cachedValue;
          } else if (typeof defaultValue !== 'undefined') {
            // should be same with parseName, but compatible with old versions
            field.value = defaultValue;
            this.values[name] = field.value;
          }
        }
      }

      // field value init end
      var newValue = field.value;
      this._triggerFieldChange(name, newValue, oldValue, 'init');

      // Component props
      var inputProps = (0, _defineProperty2.default)({
        'data-meta': 'Field',
        id: id || name,
        ref: this._getCacheBind(name, "".concat(name, "__ref"), this._saveRef)
      }, valueName, setValueFormatter ? setValueFormatter(field.value, field.inputValues) : field.value);
      var rulesMap = {};
      if (this.options.autoValidate && autoValidate !== false) {
        // trigger map in rules,
        rulesMap = (0, _utils.mapValidateRules)(field.rules, trigger);

        // step1 : validate hooks
        var _loop = function _loop(action) {
          // skip default trigger, which will trigger in step2
          if (action === trigger) {
            return 1; // continue
          }
          var actionRule = rulesMap[action];
          inputProps[action] = function () {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            _this3._callNativePropsEvent.apply(_this3, [action, originalProps].concat(args));
            _this3._validate(name, actionRule, action);
          };
        };
        for (var action in rulesMap) {
          if (_loop(action)) continue;
        }
      }

      // step2: onChange(trigger=onChange by default) hack
      inputProps[trigger] = function () {
        var oldValue = _this3.getValue(name);
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        _this3._updateFieldValue.apply(_this3, [name].concat(args));
        var newValue = _this3.getValue(name);
        _this3._triggerFieldChange(name, newValue, oldValue, 'change');

        // clear validate error
        _this3._resetError(name);
        _this3._callNativePropsEvent.apply(_this3, [trigger, originalProps].concat(args));
        // call global onChange
        _this3.options.onChange(name, field.value);

        // validate while onChange
        var rule = rulesMap[trigger];
        rule && _this3._validate(name, rule, trigger);
        _this3._reRender(name, trigger);
      };

      // step3: save reRender function
      if (reRender && typeof reRender === 'function') {
        this.reRenders[name] = reRender;
      }
      delete originalProps[defaultValueName];
      return (0, _extends2.default)({}, originalProps, inputProps);
    }

    /**
     * call native event from props.onXx
     * eg: props.onChange props.onBlur props.onFocus
     */
  }, {
    key: "_callNativePropsEvent",
    value: function _callNativePropsEvent(action, props) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        args[_key3 - 2] = arguments[_key3];
      }
      action in props && typeof props[action] === 'function' && props[action].apply(props, args);
    }
  }, {
    key: "_getInitMeta",
    value: function _getInitMeta(name) {
      if (!(name in this.fieldsMeta)) {
        this.fieldsMeta[name] = (0, _extends2.default)({
          name: name
        }, initMeta);
      }
      return this.fieldsMeta[name];
    }
  }, {
    key: "_proxyFieldValue",
    value: function _proxyFieldValue(field) {
      var _this = this;
      Object.defineProperty(field, 'value', {
        configurable: true,
        enumerable: true,
        get: function get() {
          return (0, _utils.getIn)(_this.values, this.name);
        },
        set: function set(v) {
          // 此处this解释同上
          _this.values = (0, _utils.setIn)(_this.values, this.name, v);
          return true;
        }
      });
    }

    /**
     * update field.value and validate
     */
  }, {
    key: "_updateFieldValue",
    value: function _updateFieldValue(name) {
      for (var _len4 = arguments.length, others = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        others[_key4 - 1] = arguments[_key4];
      }
      var e = others[0];
      var field = this._get(name);
      if (!field) {
        return;
      }
      field.value = field.getValueFormatter ? field.getValueFormatter.apply(this, others) : (0, _utils.getValueFromEvent)(e);
      field.inputValues = others;
      if (this.options.parseName) {
        this.values = (0, _utils.setIn)(this.values, name, field.value);
      } else {
        this.values[name] = field.value;
      }
    }

    /**
     * ref must always be the same function, or if not it will be triggerd every time.
     * @param {String} name name of component
     * @param {String} action key to find ref
     * @param {Function} fn saveRef
     */
  }, {
    key: "_getCacheBind",
    value: function _getCacheBind(name, action, fn) {
      var cache = this.cachedBind[name] = this.cachedBind[name] || {};
      if (!cache[action]) {
        cache[action] = fn.bind(this, name);
      }
      return cache[action];
    }
  }, {
    key: "_setCache",
    value: function _setCache(name, action, hander) {
      var cache = this.cachedBind[name] = this.cachedBind[name] || {};
      cache[action] = hander;
    }
  }, {
    key: "_getCache",
    value: function _getCache(name, action) {
      var cache = this.cachedBind[name] || {};
      return cache[action];
    }

    /**
     * NOTE: saveRef is async function. it will be called after render
     * @param {String} name name of component
     * @param {Function} component ref
     */
  }, {
    key: "_saveRef",
    value: function _saveRef(name, component) {
      var key = "".concat(name, "_field");
      var autoUnmount = this.options.autoUnmount;
      if (!component && autoUnmount) {
        // more than one component, do nothing
        this.instanceCount[name] && this.instanceCount[name]--;
        if (this.instanceCount[name] > 0) {
          return;
        }

        // component with same name (eg: type ? <A name="n"/>:<B name="n"/>)
        // while type changed, B will render before A unmount. so we should cached value for B
        // step: render -> B mount -> 1. _saveRef(A, null) -> 2. _saveRef(B, ref) -> render
        // 1. _saveRef(A, null)
        var cache = this.fieldsMeta[name];
        if (cache) {
          if (this.options.parseName) {
            // 若parseName模式下，因为value为getter、setter，所以将当前值记录到_value内
            cache._value = cache.value;
          }
          this._setCache(name, key, cache);
        }

        // after destroy, delete data
        delete this.instance[name];
        delete this.reRenders[name];
        var oldValue = this.getValue(name);
        this.remove(name);
        var newValue = this.getValue(name);
        this._triggerFieldChange(name, newValue, oldValue, 'unmount');
        return;
      }

      // 2. _saveRef(B, ref) (eg: same name but different compoent may be here)
      if (autoUnmount && !this.fieldsMeta[name] && this._getCache(name, key)) {
        var _cache = this._getCache(name, key);
        this.fieldsMeta[name] = _cache;
        // 若parseName模式，则使用_value作为值设置到values内
        this.setValue(name, this.options.parseName ? _cache._value : _cache.value, false, false);
        this.options.parseName && '_value' in _cache && delete _cache._value;
      }

      // only one time here
      var field = this._get(name);
      if (field) {
        //When the autoUnmount is false, the component uninstallation needs to clear the verification information to avoid blocking the validation.
        if (!component && !autoUnmount) {
          field.state = '';
          delete field.errors;
          delete field.rules;
          delete field.rulesMap;
        }
        var ref = field.ref;
        if (ref) {
          if (typeof ref === 'string') {
            throw new Error("can not set string ref for ".concat(name));
          } else if (typeof ref === 'function') {
            ref(component);
          } else if ((0, _typeof2.default)(ref) === 'object' && 'current' in ref) {
            // while ref = React.createRef() ref={ current: null}
            ref.current = component;
          }
        }

        // mount
        if (autoUnmount && component) {
          var cnt = this.instanceCount[name];
          if (!cnt) {
            cnt = 0;
          }
          this.instanceCount[name] = cnt + 1;
        }
        this.instance[name] = component;
      }
    }

    /**
     * validate one Component
     * @param {String} name name of Component
     * @param {Array} rule
     * @param {String} trigger onChange/onBlur/onItemClick/...
     */
  }, {
    key: "_validate",
    value: function _validate(name, rule, trigger) {
      var _this4 = this;
      var field = this._get(name);
      if (!field) {
        return;
      }
      var value = field.value;
      field.state = 'loading';
      var validate = this._getCache(name, trigger);
      if (validate && typeof validate.abort === 'function') {
        validate.abort();
      }
      validate = new _validate2.default((0, _defineProperty2.default)({}, name, rule), {
        messages: this.options.messages
      });
      this._setCache(name, trigger, validate);
      validate.validate((0, _defineProperty2.default)({}, name, value), function (errors) {
        var newErrors, newState;
        if (errors && errors.length) {
          newErrors = (0, _utils.getErrorStrs)(errors, _this4.processErrorMessage);
          newState = 'error';
        } else {
          newErrors = [];
          newState = 'success';
        }
        var reRender = false;
        // only status or errors changed, Rerender
        if (newState !== field.state || !field.errors || newErrors.length !== field.errors.length || newErrors.find(function (e, idx) {
          return e !== field.errors[idx];
        })) {
          reRender = true;
        }
        field.errors = newErrors;
        field.state = newState;
        reRender && _this4._reRender(name, 'validate');
      });
    }
  }, {
    key: "getValue",
    value: function getValue(name) {
      if (this.options.parseName) {
        return (0, _utils.getIn)(this.values, name);
      }
      return this.values[name];
    }

    /**
     * 1. get values by names.
     * 2. If no names passed, return shallow copy of `field.values`
     * @param {Array} names
     */
  }, {
    key: "getValues",
    value: function getValues(names) {
      var _this5 = this;
      var allValues = {};
      if (names && names.length) {
        names.forEach(function (name) {
          allValues[name] = _this5.getValue(name);
        });
      } else {
        (0, _extends2.default)(allValues, this.values);
      }
      return allValues;
    }
  }, {
    key: "setValue",
    value: function setValue(name, value) {
      var reRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var triggerChange = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var oldValue = this.getValue(name);
      if (name in this.fieldsMeta) {
        this.fieldsMeta[name].value = value;
      }
      if (this.options.parseName) {
        this.values = (0, _utils.setIn)(this.values, name, value);
      } else {
        this.values[name] = value;
      }
      var newValue = this.getValue(name);
      if (triggerChange) {
        this._triggerFieldChange(name, newValue, oldValue, 'setValue');
      }
      reRender && this._reRender(name, 'setValue');
    }
  }, {
    key: "setValues",
    value: function setValues() {
      var _this6 = this;
      var fieldsValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var reRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (!this.options.parseName) {
        Object.keys(fieldsValue).forEach(function (name) {
          _this6.setValue(name, fieldsValue[name], false, true);
        });
      } else {
        // NOTE: this is a shallow merge
        // Ex. we have two values a.b.c=1 ; a.b.d=2, and use setValues({a:{b:{c:3}}}) , then because of shallow merge a.b.d will be lost, we will get only {a:{b:{c:3}}}
        // fieldsMeta[name].value is proxy from this.values[name] when parseName is true, so there is no need to assign value to fieldMeta
        // shallow merge
        var newValues = (0, _extends2.default)({}, this.values, fieldsValue);
        var fields = this.getNames();
        var allOldFieldValues = this.getValues(fields);
        // record all old field values, exclude items overwritten by fieldsValue
        var oldFieldValues = fields.filter(function (name) {
          return !(0, _utils.isOverwritten)(fieldsValue, name);
        }).map(function (name) {
          return {
            name: name,
            value: _this6.fieldsMeta[name].value
          };
        });
        // assign lost field value to newValues
        oldFieldValues.forEach(function (_ref) {
          var name = _ref.name,
            value = _ref.value;
          if (!(0, _utils.hasIn)(newValues, name)) {
            newValues = (0, _utils.setIn)(newValues, name, value);
          }
        });
        // store the new values
        this.values = newValues;

        // trigger changes after update
        var _iterator = _createForOfIteratorHelper(fields),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var name = _step.value;
            this._triggerFieldChange(name, this.getValue(name), allOldFieldValues[name], 'setValue');
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      reRender && this._reRender();
    }
  }, {
    key: "setError",
    value: function setError(name, errors) {
      var err = Array.isArray(errors) ? errors : errors ? [errors] : [];
      if (name in this.fieldsMeta) {
        this.fieldsMeta[name].errors = err;
      } else {
        this.fieldsMeta[name] = {
          errors: err
        };
      }
      if (this.fieldsMeta[name].errors && this.fieldsMeta[name].errors.length > 0) {
        this.fieldsMeta[name].state = 'error';
      } else {
        this.fieldsMeta[name].state = '';
      }
      this._reRender(name, 'setError');
    }
  }, {
    key: "setErrors",
    value: function setErrors() {
      var _this7 = this;
      var fieldsErrors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      Object.keys(fieldsErrors).forEach(function (name) {
        _this7.setError(name, fieldsErrors[name]);
      });
    }
  }, {
    key: "getError",
    value: function getError(name) {
      var field = this._get(name);
      if (field && field.errors && field.errors.length) {
        return field.errors;
      }
      return null;
    }
  }, {
    key: "getErrors",
    value: function getErrors(names) {
      var _this8 = this;
      var fields = names || this.getNames();
      var allErrors = {};
      fields.forEach(function (f) {
        allErrors[f] = _this8.getError(f);
      });
      return allErrors;
    }
  }, {
    key: "getState",
    value: function getState(name) {
      var field = this._get(name);
      if (field && field.state) {
        return field.state;
      }
      return '';
    }

    /**
     * Get errors using `getErrors` and format to match the structure of errors returned in field.validate
     * @param {Array} fieldNames
     * @return {Object || null} map of inputs and their errors
     */
  }, {
    key: "formatGetErrors",
    value: function formatGetErrors(fieldNames) {
      var errors = this.getErrors(fieldNames);
      var formattedErrors = null;
      for (var field in errors) {
        if (errors.hasOwnProperty(field) && errors[field]) {
          var errorsObj = errors[field];
          if (!formattedErrors) {
            formattedErrors = {};
          }
          formattedErrors[field] = {
            errors: errorsObj
          };
        }
      }
      return formattedErrors;
    }

    /**
     * validate by trigger
     * @param {Array} ns names
     * @param {Function} cb callback after validate
     */
  }, {
    key: "validateCallback",
    value: function validateCallback(ns, cb) {
      var _this9 = this;
      var _getParams = (0, _utils.getParams)(ns, cb),
        names = _getParams.names,
        callback = _getParams.callback;
      var fieldNames = names || this.getNames();
      var descriptor = {};
      var values = {};
      var hasRule = false;
      for (var i = 0; i < fieldNames.length; i++) {
        var name = fieldNames[i];
        var field = this._get(name);
        if (!field) {
          continue;
        }
        if (field.rules && field.rules.length) {
          descriptor[name] = field.rules;
          values[name] = this.getValue(name);
          hasRule = true;

          // clear error
          field.errors = [];
          field.state = '';
        }
      }
      if (!hasRule) {
        var errors = this.formatGetErrors(fieldNames);
        callback && callback(errors, this.getValues(names ? fieldNames : []));
        return;
      }
      var validate = new _validate2.default(descriptor, {
        first: this.options.first,
        messages: this.options.messages
      });
      validate.validate(values, function (errors) {
        var errorsGroup = null;
        if (errors && errors.length) {
          errorsGroup = {};
          errors.forEach(function (e) {
            var fieldName = e.field;
            if (!errorsGroup[fieldName]) {
              errorsGroup[fieldName] = {
                errors: []
              };
            }
            var fieldErrors = errorsGroup[fieldName].errors;
            fieldErrors.push(e.message);
          });
        }
        if (errorsGroup) {
          // update error in every Field
          Object.keys(errorsGroup).forEach(function (i) {
            var field = _this9._get(i);
            if (field) {
              field.errors = (0, _utils.getErrorStrs)(errorsGroup[i].errors, _this9.processErrorMessage);
              field.state = 'error';
            }
          });
        }
        var formattedGetErrors = _this9.formatGetErrors(fieldNames);
        if (formattedGetErrors) {
          errorsGroup = (0, _extends2.default)({}, formattedGetErrors, errorsGroup);
        }

        // update to success which has no error
        for (var _i = 0; _i < fieldNames.length; _i++) {
          var _name = fieldNames[_i];
          var _field = _this9._get(_name);
          if (_field && _field.rules && !(errorsGroup && _name in errorsGroup)) {
            _field.state = 'success';
          }
        }

        // eslint-disable-next-line callback-return
        callback && callback(errorsGroup, _this9.getValues(names ? fieldNames : []));
        _this9._reRender(names, 'validate');
        if (typeof _this9.afterValidateRerender === 'function') {
          _this9.afterValidateRerender({
            errorsGroup: errorsGroup,
            options: _this9.options,
            instance: _this9.instance
          });
        }
      });
    }

    /**
     * validate by trigger - Promise version
     * NOTES:
     * - `afterValidateRerender` is not called in `validatePromise`. The rerender is called just before this function
     *      returns a promise, so use the returned promise to call any after rerender logic.
     *
     * @param {Array} ns names
     * @param {Function} cb (Optional) callback after validate, must return a promise or a value
     *                  - ({errors, values}) => Promise({errors, values}) | {errors, values}
     * @returns {Promise} - resolves with {errors, values}
     */
  }, {
    key: "validatePromise",
    value: function () {
      var _validatePromise = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(ns, cb) {
        var _getParams2, names, callback, fieldNames, descriptor, values, hasRule, i, name, field, _errors, validate, results, errors, errorsGroup, callbackResults;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _getParams2 = (0, _utils.getParams)(ns, cb), names = _getParams2.names, callback = _getParams2.callback;
              fieldNames = names || this.getNames();
              descriptor = {};
              values = {};
              hasRule = false;
              i = 0;
            case 6:
              if (!(i < fieldNames.length)) {
                _context.next = 15;
                break;
              }
              name = fieldNames[i];
              field = this._get(name);
              if (field) {
                _context.next = 11;
                break;
              }
              return _context.abrupt("continue", 12);
            case 11:
              if (field.rules && field.rules.length) {
                descriptor[name] = field.rules;
                values[name] = this.getValue(name);
                hasRule = true;

                // clear error
                field.errors = [];
                field.state = '';
              }
            case 12:
              i++;
              _context.next = 6;
              break;
            case 15:
              if (hasRule) {
                _context.next = 22;
                break;
              }
              _errors = this.formatGetErrors(fieldNames);
              if (!callback) {
                _context.next = 21;
                break;
              }
              return _context.abrupt("return", callback({
                errors: _errors,
                values: this.getValues(names ? fieldNames : [])
              }));
            case 21:
              return _context.abrupt("return", {
                errors: _errors,
                values: this.getValues(names ? fieldNames : [])
              });
            case 22:
              validate = new _validate2.default(descriptor, {
                first: this.options.first,
                messages: this.options.messages
              });
              _context.next = 25;
              return validate.validatePromise(values);
            case 25:
              results = _context.sent;
              errors = results && results.errors || [];
              errorsGroup = this._getErrorsGroup({
                errors: errors,
                fieldNames: fieldNames
              });
              callbackResults = {
                errors: errorsGroup,
                values: this.getValues(names ? fieldNames : [])
              };
              _context.prev = 29;
              if (!callback) {
                _context.next = 34;
                break;
              }
              _context.next = 33;
              return callback(callbackResults);
            case 33:
              callbackResults = _context.sent;
            case 34:
              _context.next = 39;
              break;
            case 36:
              _context.prev = 36;
              _context.t0 = _context["catch"](29);
              return _context.abrupt("return", _context.t0);
            case 39:
              this._reRender(names, 'validate');
              return _context.abrupt("return", callbackResults);
            case 41:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[29, 36]]);
      }));
      function validatePromise(_x, _x2) {
        return _validatePromise.apply(this, arguments);
      }
      return validatePromise;
    }()
  }, {
    key: "_getErrorsGroup",
    value: function _getErrorsGroup(_ref2) {
      var _this10 = this;
      var errors = _ref2.errors,
        fieldNames = _ref2.fieldNames;
      var errorsGroup = null;
      if (errors && errors.length) {
        errorsGroup = {};
        errors.forEach(function (e) {
          var fieldName = e.field;
          if (!errorsGroup[fieldName]) {
            errorsGroup[fieldName] = {
              errors: []
            };
          }
          var fieldErrors = errorsGroup[fieldName].errors;
          fieldErrors.push(e.message);
        });
      }
      if (errorsGroup) {
        // update error in every Field
        Object.keys(errorsGroup).forEach(function (i) {
          var field = _this10._get(i);
          if (field) {
            field.errors = (0, _utils.getErrorStrs)(errorsGroup[i].errors, _this10.processErrorMessage);
            field.state = 'error';
          }
        });
      }
      var formattedGetErrors = this.formatGetErrors(fieldNames);
      if (formattedGetErrors) {
        errorsGroup = (0, _extends2.default)({}, formattedGetErrors, errorsGroup);
      }

      // update to success which has no error
      for (var i = 0; i < fieldNames.length; i++) {
        var name = fieldNames[i];
        var field = this._get(name);
        if (field && field.rules && !(errorsGroup && name in errorsGroup)) {
          field.state = 'success';
        }
      }
      return errorsGroup;
    }
  }, {
    key: "_reset",
    value: function _reset(ns, backToDefault) {
      var _this11 = this;
      if (typeof ns === 'string') {
        ns = [ns];
      }
      var changed = false;
      var names = ns || Object.keys(this.fieldsMeta);
      var oldValues = this.getValues(names);
      if (!ns) {
        this.values = {};
      }
      names.forEach(function (name) {
        var field = _this11._get(name);
        if (field) {
          changed = true;
          field.value = backToDefault ? field.initValue : undefined;
          field.state = '';
          delete field.errors;
          delete field.rules;
          delete field.rulesMap;
          if (_this11.options.parseName) {
            _this11.values = (0, _utils.setIn)(_this11.values, name, field.value);
          } else {
            _this11.values[name] = field.value;
          }
        }
        _this11._triggerFieldChange(name, _this11.getValue(name), oldValues[name], 'reset');
      });
      if (changed) {
        this._reRender(names, 'reset');
      }
    }
  }, {
    key: "reset",
    value: function reset(ns) {
      this._reset(ns, false);
    }
  }, {
    key: "resetToDefault",
    value: function resetToDefault(ns) {
      this._reset(ns, true);
    }
  }, {
    key: "getNames",
    value: function getNames() {
      var fieldsMeta = this.fieldsMeta;
      return Object.keys(fieldsMeta).filter(function () {
        return true;
      });
    }
  }, {
    key: "remove",
    value: function remove(ns) {
      var _this12 = this;
      if (typeof ns === 'string') {
        ns = [ns];
      }
      if (!ns) {
        this.values = {};
      }
      var names = ns || Object.keys(this.fieldsMeta);
      names.forEach(function (name) {
        if (name in _this12.fieldsMeta) {
          delete _this12.fieldsMeta[name];
        }
        if (_this12.options.parseName) {
          _this12.values = (0, _utils.deleteIn)(_this12.values, name);
        } else {
          delete _this12.values[name];
        }
      });
    }
  }, {
    key: "addArrayValue",
    value: function addArrayValue(key, index) {
      for (var _len5 = arguments.length, argv = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
        argv[_key5 - 2] = arguments[_key5];
      }
      return this._spliceArrayValue.apply(this, [key, index, 0].concat(argv));
    }
  }, {
    key: "deleteArrayValue",
    value: function deleteArrayValue(key, index) {
      var howmany = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      return this._spliceArrayValue(key, index, howmany);
    }

    /**
     * splice array
     * @param {String} key
     * @param {Number} startIndex
     * @param {Number} howmany
     * @param {Array} argv
     * @param {*} value
     */
  }, {
    key: "_spliceArrayValue",
    value: function _spliceArrayValue(key, index, howmany) {
      var _this13 = this;
      for (var _len6 = arguments.length, argv = new Array(_len6 > 3 ? _len6 - 3 : 0), _key6 = 3; _key6 < _len6; _key6++) {
        argv[_key6 - 3] = arguments[_key6];
      }
      var argc = argv.length;
      var offset = howmany - argc; // how the reset fieldMeta move
      var startIndex = index + howmany; // 计算起点

      /**
       * eg: call _spliceArrayValue('key', 1) to delete 'key.1':
       *   case 1: names=['key.0', 'key.1']; delete 'key.1';
       *   case 2: names=['key.0', 'key.1', 'key.2']; key.1= key.2; delete key.2;
       *   case 3: names=['key.0.name', 'key.0.email', 'key.1.name', 'key.1.email'], should delete 'key.1.name', 'key.1.email'
       * eg: call _spliceArrayValue('key', 1, item) to add 'key.1':
       *   case 1: names=['key.0']; add 'key.1' = item;
       *   case 2: names=['key.0', 'key.1']; key.2= key.1; delete key.1; add key.1 = item;
       */
      var listMap = {}; // eg: {1:[{from: 'key.2.name', to: 'key.1.name'}, {from: 'key.2.email', to: 'key.1.email'}]}
      var replacedReg = /\$/g;
      // 替换特殊字符$
      var replacedKey = key.replace(replacedReg, '\\$&');
      var keyReg = new RegExp("^(".concat(replacedKey, ".)(\\d+)"));
      var replaceArgv = [];
      var names = this.getNames();
      var willChangeNames = [];

      // logic of offset fix begin
      names.forEach(function (n) {
        var ret = keyReg.exec(n);
        if (ret) {
          var idx = parseInt(ret[2]); // get index of 'key.0.name'

          if (idx >= startIndex) {
            var l = listMap[idx];
            var item = {
              from: n,
              to: n.replace(keyReg, function (match, p1) {
                return "".concat(p1).concat(idx - offset);
              })
            };
            willChangeNames.push(item.from);
            if (names.includes(item.to)) {
              willChangeNames.push(item.to);
            }
            if (!l) {
              listMap[idx] = [item];
            } else {
              l.push(item);
            }
          }

          // in case of offsetList.length = 0, eg: delete last element
          if (offset > 0 && idx >= index && idx < index + howmany) {
            replaceArgv.push(n);
          }
        }
      });
      var oldValues = this.getValues(willChangeNames);

      // sort with index eg: [{index:1, list: [{from: 'key.2.name', to: 'key.1.name'}]}, {index:2, list: [...]}]
      var offsetList = Object.keys(listMap).map(function (i) {
        return {
          index: Number(i),
          list: listMap[i]
        };
      }).sort(function (a, b) {
        return offset > 0 ? a.index - b.index : b.index - a.index;
      });
      offsetList.forEach(function (l) {
        var list = l.list;
        list.forEach(function (i) {
          _this13.fieldsMeta[i.to] = _this13.fieldsMeta[i.from];
          // 移位后，同步调整name
          _this13.fieldsMeta[i.to].name = i.to;
        });
      });

      // delete copy data
      if (offsetList.length > 0) {
        var removeList = offsetList.slice(offsetList.length - (offset < 0 ? -offset : offset), offsetList.length);
        removeList.forEach(function (item) {
          item.list.forEach(function (i) {
            delete _this13.fieldsMeta[i.from];
          });
        });
      } else {
        // will get from this.values while rerender
        replaceArgv.forEach(function (i) {
          delete _this13.fieldsMeta[i];
        });
      }
      var p = this.getValue(key);
      if (p) {
        p.splice.apply(p, [index, howmany].concat(argv));
      }
      for (var _i2 = 0, _willChangeNames = willChangeNames; _i2 < _willChangeNames.length; _i2++) {
        var name = _willChangeNames[_i2];
        this._triggerFieldChange(name, this.getValue(name), oldValues[name], 'setValue');
      }
      this._reRender();
    }

    /**
     * splice in a Array [deprecated]
     * @param {String} keyMatch like name.{index}
     * @param {Number} startIndex index
     */
  }, {
    key: "spliceArray",
    value: function spliceArray(keyMatch, startIndex, howmany) {
      var _this14 = this;
      if (keyMatch.match(/{index}$/) === -1) {
        (0, _utils.warning)('key should match /{index}$/');
        return;
      }

      // regex to match field names in the same target array
      var reg = keyMatch.replace('{index}', '(\\d+)');
      var keyReg = new RegExp("^".concat(reg));
      var listMap = {};
      /**
       * keyMatch='key.{index}'
       * case 1: names=['key.0', 'key.1'], should delete 'key.1'
       * case 2: names=['key.0.name', 'key.0.email', 'key.1.name', 'key.1.email'], should delete 'key.1.name', 'key.1.email'
       */
      var names = this.getNames();
      var willChangeNames = [];
      names.forEach(function (n) {
        // is name in the target array?
        var ret = keyReg.exec(n);
        if (ret) {
          var index = parseInt(ret[1]);
          if (index > startIndex) {
            var l = listMap[index];
            var item = {
              from: n,
              to: "".concat(keyMatch.replace('{index}', index - 1)).concat(n.replace(ret[0], ''))
            };
            willChangeNames.push(item.from);
            if (names.includes(item.to)) {
              willChangeNames.push(item.to);
            }
            if (!l) {
              listMap[index] = [item];
            } else {
              l.push(item);
            }
          }
        }
      });
      var oldValues = this.getValues(willChangeNames);
      var idxList = Object.keys(listMap).map(function (i) {
        return {
          index: Number(i),
          list: listMap[i]
        };
      }).sort(function (a, b) {
        return a.index < b.index;
      });

      // should be continuous array
      if (idxList.length > 0 && idxList[0].index === startIndex + 1) {
        idxList.forEach(function (l) {
          var list = l.list;
          list.forEach(function (i) {
            var v = _this14.getValue(i.from); // get index value
            _this14.setValue(i.to, v, false, false); // set value to index - 1
          });
        });

        var lastIdxList = idxList[idxList.length - 1];
        lastIdxList.list.forEach(function (i) {
          _this14.remove(i.from);
        });
        var parentName = keyMatch.replace('.{index}', '');
        parentName = parentName.replace('[{index}]', '');
        var parent = this.getValue(parentName);
        if (parent) {
          // if parseName=true then parent is an Array object but does not know an element was removed
          // this manually decrements the array length
          parent.length--;
        }
      }
      for (var _i3 = 0, _willChangeNames2 = willChangeNames; _i3 < _willChangeNames2.length; _i3++) {
        var name = _willChangeNames2[_i3];
        this._triggerFieldChange(name, this.getValue(name), oldValues[name], 'setValue');
      }
    }
  }, {
    key: "_resetError",
    value: function _resetError(name) {
      var field = this._get(name);
      if (field) {
        delete field.errors; //清空错误
        field.state = '';
      }
    }

    //trigger rerender
  }, {
    key: "_reRender",
    value: function _reRender(name, action) {
      var _this15 = this;
      // 指定了字段列表且字段存在对应的自定义渲染函数
      if (name) {
        var names = Array.isArray(name) ? name : [name];
        if (names.length && names.every(function (n) {
          return _this15.reRenders[n];
        })) {
          names.forEach(function (n) {
            var reRender = _this15.reRenders[n];
            reRender(action);
          });
          return;
        }
      }
      if (this.com) {
        if (!this.options.forceUpdate && this.com.setState) {
          this.com.setState({});
        } else if (this.com.forceUpdate) {
          this.com.forceUpdate(); //forceUpdate 对性能有较大的影响，成指数上升
        }
      }
    }
  }, {
    key: "_get",
    value: function _get(name) {
      return name in this.fieldsMeta ? this.fieldsMeta[name] : null;
    }
  }, {
    key: "get",
    value: function get(name) {
      if (name) {
        return this._get(name);
      } else {
        return this.fieldsMeta;
      }
    }

    /**
     *
     * @param {string} name
     * @param {*} value
     * @param {*} oldValue
     * @param {'init' | 'change' | 'setValue' | 'unmount' | 'reset'} triggerType
     */
  }, {
    key: "_triggerFieldChange",
    value: function _triggerFieldChange(name, value, oldValue, triggerType) {
      // same value should not trigger change
      if (Object.is(value, oldValue)) {
        return;
      }
      var listenerSet = this.listeners[name];
      if (!(listenerSet !== null && listenerSet !== void 0 && listenerSet.size)) {
        return;
      }
      var _iterator2 = _createForOfIteratorHelper(listenerSet),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var callback = _step2.value;
          callback(name, value, oldValue, triggerType);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    /**
     * 监听字段值变化
     * @param {string[]} names 监听的name列表
     * @param {Function} callback 变化回调
     * @returns {Function} 解除监听回调
     */
  }, {
    key: "watch",
    value: function watch(names, callback) {
      var _this16 = this;
      var _iterator3 = _createForOfIteratorHelper(names),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var name = _step3.value;
          if (!this.listeners[name]) {
            this.listeners[name] = new Set();
          }
          var set = this.listeners[name];
          set.add(callback);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return function () {
        var _iterator4 = _createForOfIteratorHelper(names),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var name = _step4.value;
            if (_this16.listeners[name]) {
              _this16.listeners[name].delete(callback);
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      };
    }
  }], [{
    key: "create",
    value: function create(com) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return new this(com, options);
    }
  }, {
    key: "getUseField",
    value: function getUseField(_ref3) {
      var _this17 = this;
      var useState = _ref3.useState,
        useMemo = _ref3.useMemo;
      return function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var _useState = useState(),
          _useState2 = (0, _slicedToArray2.default)(_useState, 2),
          setState = _useState2[1];
        var field = useMemo(function () {
          return _this17.create({
            setState: setState
          }, options);
        }, [setState]);
        return field;
      };
    }
  }]);
  return Field;
}();
var _default = exports.default = Field;

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(33)["default"];
function _regeneratorRuntime() {
  "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return e;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function define(t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function value(t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw new Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(_typeof(e) + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function stop() {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw new Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function complete(t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function finish(t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    "catch": function _catch(t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(341);
var iterableToArrayLimit = __webpack_require__(342);
var unsupportedIterableToArray = __webpack_require__(343);
var nonIterableRest = __webpack_require__(345);
function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}
module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 341 */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 342 */
/***/ (function(module, exports) {

function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(344);
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}
module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 344 */
/***/ (function(module, exports) {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 345 */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(33)["default"];
function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(23);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(__webpack_require__(94));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(95));

var _defineProperty2 = _interopRequireDefault(__webpack_require__(96));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(172));

var _createClass2 = _interopRequireDefault(__webpack_require__(173));

var _util = __webpack_require__(34);

var _messages2 = _interopRequireDefault(__webpack_require__(348));

var _validator = __webpack_require__(349);

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function noop() {}

function serializeRules(source, rules) {
  // serialize rules
  var arr;
  var value;
  var series = {};
  var names = Object.keys(rules);
  names.forEach(function (name) {
    arr = rules[name];
    value = source[name];

    if (!Array.isArray(arr)) {
      arr = [arr];
    }

    arr.forEach(function (rule) {
      rule.validator = (0, _validator.getValidationMethod)(rule);
      rule.field = name;

      if (!rule.validator) {
        return;
      }

      series[name] = series[name] || [];
      series[name].push({
        rule: rule,
        value: value,
        source: source,
        field: name
      });
    });
  });
  return series;
}

var Schema = /*#__PURE__*/function () {
  function Schema(rules) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2.default)(this, Schema);
    this._rules = rules;
    this._options = _objectSpread(_objectSpread({}, options), {}, {
      messages: _objectSpread(_objectSpread({}, _messages2.default), options.messages)
    });
    this.complete = [];
  }

  (0, _createClass2.default)(Schema, [{
    key: "abort",
    value: function abort() {
      for (var i = 0; i < this.complete.length; i++) {
        this.complete[i] = noop;
      }
    }
  }, {
    key: "messages",
    value: function messages(_messages) {
      this._options.messages = Object.assign({}, this._options.messages, _messages);
    }
    /**
     *
     * @param {Object} source - map of field names and values to use in validation
     * @param {Function} callback - OPTIONAL - callback to run after all
     * @returns {null | Promise}
     *          - { null } - if using callbacks
     *          - { Promise }
     *              - { errors: null } - if no rules or no errors
     *              - { errors: Array, fields: Object } - errors from validation and fields that have errors
     */

  }, {
    key: "validate",
    value: function validate(source, callback) {
      var _this = this;

      if (!callback) {
        return this.validatePromise(source);
      }

      if (!this._rules || Object.keys(this._rules).length === 0) {
        if (callback) {
          callback(null);
        }

        return;
      }

      var series = serializeRules(source, this._rules);

      if (Object.keys(series).length === 0) {
        callback(null);
      } // callback function for all rules return


      function complete(results) {
        var i;
        var field;
        var errors = [];
        var fields = {};

        function add(e) {
          if (Array.isArray(e)) {
            errors = errors.concat(e);
          } else {
            errors.push(e);
          }
        }

        for (i = 0; i < results.length; i++) {
          add(results[i]);
        }

        if (!errors.length) {
          errors = null;
          fields = null;
        } else {
          for (i = 0; i < errors.length; i++) {
            field = errors[i].field;
            fields[field] = fields[field] || [];
            fields[field].push(errors[i]);
          }
        }

        callback(errors, fields);
      }

      this.complete.push(complete);
      var idx = this.complete.length; // async validate

      (0, _util.asyncMap)(series, this._options, function (data, doIt) {
        var rule = data.rule;
        rule.field = data.field;

        function cb(e) {
          var errors = e; // fix e=/""/null/undefiend.
          // ignore e=true/false;

          if (typeof errors !== 'boolean' && !errors) {
            errors = [];
          }

          if (!Array.isArray(errors)) {
            errors = [errors];
          } // 自定义错误


          if (errors.length && rule.message) {
            errors = [].concat(rule.message);
          }

          errors = errors.map((0, _util.complementError)(rule));
          doIt(errors);
        }

        var res = rule.validator(rule, data.value, cb, _this._options);

        if (res && res.then) {
          res.then(function () {
            return cb();
          }, function (e) {
            return cb(e);
          });
        }
      }, function (results) {
        _this.complete[idx - 1](results);
      });
    }
    /**
     *
     * @param {Object} source - map of field names and values to use in validation
     * @returns {Promise}
     *          - { errors: null } if no rules or no errors
     *          - { errors: Array, fields: Object } - errors from validation and fields that have errors
     */

  }, {
    key: "validatePromise",
    value: function () {
      var _validatePromise = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(source) {
        var _this2 = this;

        var series, results;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(!this._rules || Object.keys(this._rules).length === 0)) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", Promise.resolve({
                  errors: null
                }));

              case 2:
                series = serializeRules(source, this._rules);

                if (!(Object.keys(series).length === 0)) {
                  _context2.next = 5;
                  break;
                }

                return _context2.abrupt("return", Promise.resolve({
                  errors: null
                }));

              case 5:
                _context2.next = 7;
                return (0, _util.asyncMapPromise)(series, this._options, /*#__PURE__*/function () {
                  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(data) {
                    var rule, errors;
                    return _regenerator.default.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            rule = data.rule;
                            rule.field = data.field;
                            _context.prev = 2;
                            _context.next = 5;
                            return rule.validator(rule, data.value, null, _this2._options);

                          case 5:
                            errors = _context.sent;
                            _context.next = 11;
                            break;

                          case 8:
                            _context.prev = 8;
                            _context.t0 = _context["catch"](2);
                            errors = _context.t0;

                          case 11:
                            if (!errors) {
                              _context.next = 17;
                              break;
                            }

                            if (!Array.isArray(errors)) {
                              errors = [errors];
                            } // 自定义错误


                            if (errors.length && rule.message) {
                              errors = [].concat(rule.message);
                            }

                            return _context.abrupt("return", errors.map((0, _util.complementError)(rule)));

                          case 17:
                            return _context.abrupt("return", []);

                          case 18:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, null, [[2, 8]]);
                  }));

                  return function (_x2) {
                    return _ref.apply(this, arguments);
                  };
                }());

              case 7:
                results = _context2.sent;
                return _context2.abrupt("return", (0, _util.processErrorResults)(results));

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function validatePromise(_x) {
        return _validatePromise.apply(this, arguments);
      }

      return validatePromise;
    }()
  }]);
  return Schema;
}();

var _default = Schema;
exports.default = _default;

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  default: '%s 校验失败',
  required: '%s 是必填字段',
  format: {
    number: '%s 不是合法的数字',
    email: '%s 不是合法的 email 地址',
    url: '%s 不是合法的 URL 地址',
    tel: '%s 不是合法的电话号码'
  },
  number: {
    length: '%s 长度必须是 %s',
    min: '%s 字段数值不得小于 %s',
    max: '%s 字段数值不得大于 %s',
    minLength: '%s 字段字符长度不得少于 %s',
    maxLength: '%s 字段字符长度不得超过 %s'
  },
  string: {
    length: '%s 长度必须是 %s',
    min: '%s 字段数值不得小于 %s',
    max: '%s 字段数值不得大于 %s',
    minLength: '%s 字段字符长度不得少于 %s',
    maxLength: '%s 字段字符长度不得超过 %s'
  },
  array: {
    length: '%s 个数必须是 %s',
    minLength: '%s 个数不得少于 %s',
    maxLength: '%s 个数不得超过 %s'
  },
  pattern: '%s 字段数值 %s 不匹配正则 %s'
};
exports.default = _default;

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(23);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateFunc = validateFunc;
exports.getValidationMethod = getValidationMethod;

var _rules = _interopRequireDefault(__webpack_require__(350));

/* eslint-disable callback-return */

/**
 * {required, format} => format; {required} => required
 * If a promise is wanted from the validator, either return a promise from the callback,
 *      or do not pass a callback
 *
 * @param  {function} validator [description]
 * @param  {string} ruleType  [description]
 * @return {function}           [description]
 */
function validateFunc(validator, ruleType) {
  return function (rule, value, cb, options) {
    var errors = []; // 如果是非required校验

    if (ruleType !== 'required') {
      var _errors = [];

      _rules.default.required(rule, value, _errors, options); // 空数据


      if (_errors.length > 0) {
        if ('required' in rule && rule.required) {
          if (cb) {
            return cb(_errors);
          } else {
            return Promise.reject(_errors);
          }
        } else if (cb) {
          return cb([]); //空数据，并且没有require要求，则忽略
        } else {
          return Promise.resolve(null);
        }
      }
    }

    validator(rule, value, errors, options);

    if (cb) {
      return cb(errors);
    }

    if (Promise) {
      return Promise.resolve(errors);
    }
  };
}
/**
 * {required, format} => format; {required} => required
 * @param  {object} rule [description]
 * @return {function}      [description]
 */


function getValidationMethod(rule) {
  if (typeof rule.validator === 'function') {
    return rule.validator;
  }

  var keys = Object.keys(rule); //required和其他校验规则共存
  //{required, format} {required, unknown}

  for (var i = 0; i < keys.length; i++) {
    var ruleType = keys[i];

    if (ruleType === 'required') {
      continue;
    }

    if (ruleType in _rules.default) {
      return validateFunc(_rules.default[ruleType], ruleType);
    }
  } // 有其他位置参数


  if ('required' in rule && rule.required) {
    return validateFunc(_rules.default.required, 'required');
  }

  return null;
}

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(23);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _required = _interopRequireDefault(__webpack_require__(351));

var _format = _interopRequireDefault(__webpack_require__(352));

var _size = _interopRequireDefault(__webpack_require__(353));

var _length = _interopRequireDefault(__webpack_require__(354));

var _pattern = _interopRequireDefault(__webpack_require__(355));

var _default = {
  required: _required.default,
  format: _format.default,
  min: _size.default,
  max: _size.default,
  minLength: _length.default,
  maxLength: _length.default,
  length: _length.default,
  pattern: _pattern.default
};
exports.default = _default;

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(47);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var util = _interopRequireWildcard(__webpack_require__(34));

/**
 *  Rule for validating required fields.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */
function required(rule, value, errors, options) {
  if (value === undefined || value === null || value === '' || value.length === 0) {
    errors.push(util.format(options.messages.required, rule.aliasName || rule.field));
  }
}

var _default = required;
exports.default = _default;

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(47);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var util = _interopRequireWildcard(__webpack_require__(34));

var pattern = {
  email: /\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/,
  url: new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$", 'i'),
  number: /\d*/,
  tel: /^(1\d{10})$|(((400)-(\d{3})-(\d{4}))|^((\d{7,8})|(\d{3,4})-(\d{7,8})|(\d{7,8})-(\d{1,4}))$)$|^([ ]?)$/
};
var types = {
  number: function number(value) {
    if (isNaN(value)) {
      return false;
    }

    return typeof value === 'number' || typeof value === 'string' && !!value.match(pattern.number);
  },
  email: function email(value) {
    return typeof value === 'string' && !!value.match(pattern.email) && value.length < 255;
  },
  url: function url(value) {
    return typeof value === 'string' && !!value.match(pattern.url);
  },
  tel: function tel(value) {
    return typeof value === 'string' && !!value.match(pattern.tel);
  }
};
/**
 *  Rule for validating the type of a value.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */

function format(rule, value, errors, options) {
  var custom = ['email', 'number', 'url', 'tel'];
  var ruleType = rule.format;

  if (custom.indexOf(ruleType) > -1 && !types[ruleType](value)) {
    errors.push(util.format(options.messages.format[ruleType], rule.aliasName || rule.field, rule.format));
  }
}

var _default = format;
exports.default = _default;

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(47);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var util = _interopRequireWildcard(__webpack_require__(34));

/**
 *  Rule for validating minimum and maximum allowed values.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */
function size(rule, value, errors, options) {
  var key = null;
  var isNum = typeof value === 'number';
  var isStr = typeof value === 'string';

  if (isNum) {
    key = 'number';
  } else if (isStr) {
    key = 'string';
  }

  if (!key) {
    return false;
  } // TODO: 2.x change to typeof rule.min === 'number' || typeof rule.max === 'number'


  if (typeof rule.min !== 'undefined' || typeof rule.max !== 'undefined') {
    var val = value;
    var max = Number(rule.max);
    var min = Number(rule.min);

    if (isStr) {
      val = Number(val);
    }

    if (val < min) {
      errors.push(util.format(options.messages[key].min, rule.aliasName || rule.field, rule.min));
    } else if (val > max) {
      errors.push(util.format(options.messages[key].max, rule.aliasName || rule.field, rule.max));
    }
  }
}

var _default = size;
exports.default = _default;

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(47);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var util = _interopRequireWildcard(__webpack_require__(34));

/**
 *  Rule for validating minimum and maximum allowed values.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */
function length(rule, value, errors, options) {
  var key = null;
  var isNum = typeof value === 'number';
  var isStr = typeof value === 'string';
  var isArr = Array.isArray(value);

  if (isNum) {
    key = 'number';
  } else if (isStr) {
    key = 'string';
  } else if (isArr) {
    key = 'array';
  }

  if (!key) {
    return false;
  }

  var val = value;
  var length = Number(rule.length);
  var maxLength = Number(rule.maxLength);
  var minLength = Number(rule.minLength);

  if (minLength || maxLength || length) {
    if (isNum) {
      val = "".concat(val);
    }

    val = val.length;

    if (length && val !== rule.length) {
      errors.push(util.format(options.messages[key].length, rule.aliasName || rule.field, rule.length));
    } else if (val < minLength) {
      errors.push(util.format(options.messages[key].minLength, rule.aliasName || rule.field, rule.minLength));
    } else if (val > maxLength) {
      errors.push(util.format(options.messages[key].maxLength, rule.aliasName || rule.field, rule.maxLength));
    }
  }
}

var _default = length;
exports.default = _default;

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(47);

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var util = _interopRequireWildcard(__webpack_require__(34));

/**
 *  Rule for validating a regular expression pattern.
 *
 *  @param rule The validation rule.
 *  @param value The value of the field on the source object.
 *  @param errors An array of errors that this rule may add
 *  validation errors to.
 *  @param options The validation options.
 *  @param options.messages The validation messages.
 */
function pattern(rule, value, errors, options) {
  if (rule.pattern) {
    if (rule.pattern instanceof RegExp) {
      if (!rule.pattern.test(value)) {
        errors.push(util.format(options.messages.pattern, rule.aliasName || rule.field, value, rule.pattern));
      }
    } else if (typeof rule.pattern === 'string') {
      var _pattern = new RegExp(rule.pattern);

      if (!_pattern.test(value)) {
        errors.push(util.format(options.messages.pattern, rule.aliasName || rule.field, value, rule.pattern));
      }
    }
  }
}

var _default = pattern;
exports.default = _default;

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _interopRequireDefault = __webpack_require__(23);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloneToRuleArr = cloneToRuleArr;
exports.deleteIn = deleteIn;
exports.getErrorStrs = getErrorStrs;
exports.getIn = getIn;
exports.getParams = getParams;
exports.getValueFromEvent = getValueFromEvent;
exports.hasIn = hasIn;
exports.isOverwritten = isOverwritten;
exports.mapValidateRules = mapValidateRules;
exports.setIn = setIn;
exports.splitNameToPath = splitNameToPath;
exports.warning = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(96));
var _extends3 = _interopRequireDefault(__webpack_require__(59));
var _typeof2 = _interopRequireDefault(__webpack_require__(33));
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function splitNameToPath(name) {
  return typeof name === 'string' && name ? name.replace(/\[/, '.').replace(/\]/, '').split('.') : '';
}
function hasIn(state, name) {
  if (!state) {
    return state;
  }
  var path = splitNameToPath(name);
  var length = path.length;
  if (!length) {
    return false;
  }
  var result = state;
  for (var i = 0; i < length; ++i) {
    // parent is not object
    if ((0, _typeof2.default)(result) !== 'object' || result === null) {
      return false;
    }
    // has no property
    var thisName = path[i];
    if (!(thisName in result)) {
      return false;
    }
    // pass on
    result = result[thisName];
  }
  return true;
}
function getIn(state, name) {
  if (!state) {
    return state;
  }
  var path = splitNameToPath(name);
  var length = path.length;
  if (!length) {
    return undefined;
  }
  var result = state;
  for (var i = 0; i < length; ++i) {
    // parent is not object
    if ((0, _typeof2.default)(result) !== 'object' || result === null) {
      return undefined;
    }
    result = result[path[i]];
  }
  return result;
}
var setInWithPath = function setInWithPath(state, value, path, pathIndex) {
  if (pathIndex >= path.length) {
    return value;
  }
  var first = path[pathIndex];
  var next = setInWithPath(state && state[first], value, path, pathIndex + 1);
  if (!state) {
    var initialized = isNaN(first) ? {} : [];
    initialized[first] = next;
    return initialized;
  }
  if (Array.isArray(state)) {
    var copy = [].concat(state);
    copy[first] = next;
    return copy;
  }
  return (0, _extends3.default)({}, state, (0, _defineProperty2.default)({}, first, next));
};
function setIn(state, name, value) {
  return setInWithPath(state, value, typeof name === 'string' ? name.replace(/\[/, '.').replace(/\]/, '').split('.') : '', 0);
}
function deleteIn(state, name) {
  if (!state) {
    return;
  }
  var path = typeof name === 'string' ? name.replace(/\[/, '.').replace(/\]/, '').split('.') : '';
  var length = path.length;
  if (!length) {
    return state;
  }
  var result = state;
  for (var i = 0; i < length && !!result; ++i) {
    if (i === length - 1) {
      delete result[path[i]];
    } else {
      result = result[path[i]];
    }
  }
  return state;
}
function getErrorStrs(errors, processErrorMessage) {
  if (errors) {
    return errors.map(function (e) {
      var message = typeof e.message !== 'undefined' ? e.message : e;
      if (typeof processErrorMessage === 'function') {
        return processErrorMessage(message);
      }
      return message;
    });
  }
  return errors;
}
function getParams(ns, cb) {
  var names = typeof ns === 'string' ? [ns] : ns;
  var callback = cb;
  if (cb === undefined && typeof names === 'function') {
    callback = names;
    names = undefined;
  }
  return {
    names: names,
    callback: callback
  };
}

/**
 * name是否被覆写
 * e.g. { a: { b: 1 } } and 'a.b', should return true
 * e.g. { a: { b: 1 } } and 'a.b.c', should return true
 * e.g. { a: { b: 1 } } and 'a.b2', should return false
 * e.g. { a: { b: 1 } } and 'a2', should return false
 * e.g. { a: { b: [0, 1] } } and 'a.b[0]' return true
 * e.g. { a: { b: [0, 1] } } and 'a.b[5]' return true (miss index means overwritten in array)
 * @param {object} values 写入对象
 * @param {string} name 字段key
 */
function isOverwritten(values, name) {
  if (!values || (0, _typeof2.default)(values) !== 'object' || !name || typeof name !== 'string') {
    return false;
  }
  var paths = splitNameToPath(name);
  var obj = values;
  var _iterator = _createForOfIteratorHelper(paths),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var path = _step.value;
      if (path in obj) {
        var pathValue = obj[path];
        // 任意一层path值不是对象了，则代表被覆盖
        if (!pathValue || (0, _typeof2.default)(pathValue) !== 'object') {
          return true;
        } else {
          obj = pathValue;
        }
      } else {
        // 数组的index已经移除，则代表被覆写
        if (Array.isArray(obj)) {
          return true;
        }
        return false;
      }
    }
    // 代表 name in values，则返回 true
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return true;
}

/**
 * 从组件事件中获取数据
 * @param e Event或者value
 * @returns value
 */
function getValueFromEvent(e) {
  // support custom element
  if (!e || !e.target || !e.preventDefault) {
    return e;
  }
  var target = e.target;
  if (target.type === 'checkbox') {
    return target.checked;
  } else if (target.type === 'radio') {
    //兼容原生radioGroup
    if (target.value) {
      return target.value;
    } else {
      return target.checked;
    }
  }
  return target.value;
}
function validateMap(rulesMap, rule, defaultTrigger) {
  var nrule = (0, _extends3.default)({}, rule);
  if (!nrule.trigger) {
    nrule.trigger = [defaultTrigger];
  }
  if (typeof nrule.trigger === 'string') {
    nrule.trigger = [nrule.trigger];
  }
  for (var i = 0; i < nrule.trigger.length; i++) {
    var trigger = nrule.trigger[i];
    if (trigger in rulesMap) {
      rulesMap[trigger].push(nrule);
    } else {
      rulesMap[trigger] = [nrule];
    }
  }
  delete nrule.trigger;
}

/**
 * 提取rule里面的trigger并且做映射
 * @param  {Array} rules   规则
 * @param  {String} defaultTrigger 默认触发
 * @return {Object} {onChange:rule1, onBlur: rule2}
 */
function mapValidateRules(rules, defaultTrigger) {
  var rulesMap = {};
  rules.forEach(function (rule) {
    validateMap(rulesMap, rule, defaultTrigger);
  });
  return rulesMap;
}
var warn = function warn() {};
if (typeof process !== 'undefined' && process.env && "production" !== 'production' && typeof window !== 'undefined' && typeof document !== 'undefined') {
  warn = function warn() {
    /* eslint-disable no-console */
    if (typeof console !== 'undefined' && console.error) {
      var _console;
      (_console = console).error.apply(_console, arguments);
    }
  };
}
var warning = exports.warning = warn;
function cloneToRuleArr(rules) {
  if (!rules) {
    return [];
  }
  var rulesArr = Array.isArray(rules) ? rules : [rules];
  // 后续会修改rule对象，这里做浅复制以避免对传入对象的修改
  return rulesArr.map(function (rule) {
    return _objectSpread({}, rule);
  });
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(357)))

/***/ }),
/* 357 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.scrollToFirstError = exports.cloneAndAddKey = void 0;
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
function cloneAndAddKey(element) {
    if (element && (0, react_1.isValidElement)(element)) {
        var key = element.key || 'error';
        return (0, react_1.cloneElement)(element, { key: key });
    }
    return element;
}
exports.cloneAndAddKey = cloneAndAddKey;
function scrollToFirstError(_a) {
    var errorsGroup = _a.errorsGroup,
        options = _a.options,
        instance = _a.instance;
    if (errorsGroup && options.scrollToFirstError) {
        var firstNode = void 0;
        var firstTop = void 0;
        for (var i in errorsGroup) {
            if (errorsGroup.hasOwnProperty(i)) {
                var node = react_dom_1.default.findDOMNode(instance[i]);
                if (!node) {
                    return;
                }
                var top_1 = node.offsetTop;
                if (firstTop === undefined || firstTop > top_1) {
                    firstTop = top_1;
                    firstNode = node;
                }
            }
        }
        if (firstNode) {
            if (typeof options.scrollToFirstError === 'number' && window && typeof window.scrollTo === 'function') {
                var offsetLeft = document && document.body && document.body.offsetLeft ? document.body.offsetLeft : 0;
                window.scrollTo(offsetLeft, firstTop + options.scrollToFirstError);
            } else if (firstNode.scrollIntoViewIfNeeded) {
                firstNode.scrollIntoViewIfNeeded(true);
            }
        }
    }
}
exports.scrollToFirstError = scrollToFirstError;

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var form_1 = __webpack_require__(360);
var item_1 = __webpack_require__(363);
var submit_1 = __webpack_require__(367);
var reset_1 = __webpack_require__(368);
var error_1 = __webpack_require__(177);
form_1.default.Item = config_provider_1.default.config(item_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('validateStatus' in props) {
            deprecated('validateStatus', 'validateState', 'Form.Item');
            var validateStatus = props.validateStatus,
                others = tslib_1.__rest(props, ["validateStatus"]);
            props = tslib_1.__assign({ validateState: validateStatus }, others);
        }
        return props;
    }
});
form_1.default.Submit = submit_1.default;
form_1.default.Reset = reset_1.default;
form_1.default.Error = error_1.default;
exports.default = config_provider_1.default.config(form_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('direction' in props) {
            deprecated('direction', 'inline', 'Form');
            var direction = props.direction,
                others = tslib_1.__rest(props, ["direction"]);
            if (direction === 'hoz') {
                props = tslib_1.__assign({ inline: true }, others);
            }
        }
        return props;
    }
});

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var util_1 = __webpack_require__(4);
var field_1 = __webpack_require__(170);
var responsive_grid_1 = __webpack_require__(97);
function pickerDefined(obj) {
    var newObj = {};
    Object.keys(obj).forEach(function (i) {
        if (typeof obj[i] !== 'undefined') {
            newObj[i] = obj[i];
        }
    });
    return newObj;
}
function preventDefault(e) {
    e.preventDefault();
}
var getNewChildren = function getNewChildren(children, props) {
    var size = props.size,
        device = props.device,
        labelAlign = props.labelAlign,
        labelTextAlign = props.labelTextAlign,
        labelCol = props.labelCol,
        wrapperCol = props.wrapperCol,
        responsive = props.responsive,
        colon = props.colon;
    return react_1.default.Children.map(children, function (child) {
        if (util_1.obj.isReactFragment(child)) {
            return getNewChildren(child.props.children, props);
        }
        if (child && ['function', 'object'].indexOf((0, _typeof3.default)(child.type)) > -1 && child.type._typeMark === 'form_item') {
            var childrenProps = {
                labelCol: child.props.labelCol ? child.props.labelCol : labelCol,
                wrapperCol: child.props.wrapperCol ? child.props.wrapperCol : wrapperCol,
                labelAlign: child.props.labelAlign ? child.props.labelAlign : device === 'phone' ? 'top' : labelAlign,
                labelTextAlign: child.props.labelTextAlign ? child.props.labelTextAlign : labelTextAlign,
                colon: 'colon' in child.props ? child.props.colon : colon,
                size: child.props.size ? child.props.size : size,
                responsive: responsive
            };
            return react_1.default.cloneElement(child, pickerDefined(childrenProps));
        }
        return child;
    });
};
/** Form */
var Form = /** @class */function (_super) {
    tslib_1.__extends(Form, _super);
    function Form(props) {
        var _this = _super.call(this, props) || this;
        _this.onChange = function (name, value) {
            _this.props.onChange(_this._formField.getValues(), {
                name: name,
                value: value,
                field: _this._formField
            });
        };
        _this._formField = null;
        if (props.field !== false) {
            var options = tslib_1.__assign(tslib_1.__assign({}, props.fieldOptions), { onChange: _this.onChange });
            if (props.field) {
                _this._formField = props.field;
                var onChange = _this._formField.options.onChange;
                options.onChange = util_1.func.makeChain(onChange, _this.onChange);
                _this._formField.setOptions && _this._formField.setOptions(options);
            } else {
                if ('value' in props) {
                    options.values = props.value;
                }
                _this._formField = new field_1.default(_this, options);
            }
            if (props.locale && props.locale.Validate) {
                _this._formField.setOptions({ messages: props.locale.Validate });
            }
            props.saveField(_this._formField);
        }
        return _this;
    }
    Form.prototype.getChildContext = function () {
        return {
            _formField: this.props.field ? this.props.field : this._formField,
            _formSize: this.props.size,
            _formDisabled: this.props.disabled,
            _formPreview: this.props.isPreview,
            _formFullWidth: this.props.fullWidth,
            _formLabelForErrorMessage: this.props.useLabelForErrorMessage,
            _formMarginToDisplayHelp: this.props.preferMarginToDisplayHelp
        };
    };
    Form.prototype.componentDidUpdate = function (prevProps) {
        var props = this.props;
        if (this._formField) {
            if ('value' in props && props.value !== prevProps.value) {
                this._formField.setValues(props.value);
            }
            if ('error' in props && props.error !== prevProps.error) {
                this._formField.setValues(props.error);
            }
        }
    };
    Form.prototype.render = function () {
        var _a;
        var _b = this.props,
            className = _b.className,
            inline = _b.inline,
            size = _b.size,
            device = _b.device,
            labelAlign = _b.labelAlign,
            labelTextAlign = _b.labelTextAlign,
            onSubmit = _b.onSubmit,
            children = _b.children,
            labelCol = _b.labelCol,
            wrapperCol = _b.wrapperCol,
            style = _b.style,
            prefix = _b.prefix,
            rtl = _b.rtl,
            isPreview = _b.isPreview,
            Tag = _b.component,
            responsive = _b.responsive,
            gap = _b.gap,
            colon = _b.colon;
        var formClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "form")] = true, _a["".concat(prefix, "inline")] = inline, _a["".concat(prefix).concat(size)] = size, _a["".concat(prefix, "form-responsive-grid")] = responsive, _a["".concat(prefix, "form-preview")] = isPreview, _a[className] = !!className, _a));
        var newChildren = getNewChildren(children, this.props);
        return react_1.default.createElement(Tag, tslib_1.__assign({ role: "grid" }, util_1.obj.pickOthers(Form.propTypes, this.props), { className: formClassName, style: style, dir: rtl ? 'rtl' : undefined, onSubmit: onSubmit }), responsive ? react_1.default.createElement(responsive_grid_1.default, { gap: gap }, newChildren) : newChildren);
    };
    Form.propTypes = {
        /**
         * 样式前缀
         */
        prefix: prop_types_1.default.string,
        /**
         * 内联表单
         */
        inline: prop_types_1.default.bool,
        /**
         * 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。
         * @enumdesc 大, 中, 小
         */
        size: prop_types_1.default.oneOf(['large', 'medium', 'small']),
        /**
         * 单个 Item 中表单类组件宽度是否是100%
         */
        fullWidth: prop_types_1.default.bool,
        /**
         * 标签的位置, 如果不设置 labelCol 和 wrapperCol 那么默认是标签在上
         * @enumdesc 上, 左, 内
         */
        labelAlign: prop_types_1.default.oneOf(['top', 'left', 'inset']),
        /**
         * 标签的左右对齐方式
         * @enumdesc 左, 右
         */
        labelTextAlign: prop_types_1.default.oneOf(['left', 'right']),
        /**
         * field 实例, 传 false 会禁用 field
         */
        field: prop_types_1.default.any,
        /**
         * 保存 Form 自动生成的 field 对象
         */
        saveField: prop_types_1.default.func,
        /**
         * 控制第一级 Item 的 labelCol
         */
        labelCol: prop_types_1.default.object,
        /**
         * 控制第一级 Item 的 wrapperCol
         */
        wrapperCol: prop_types_1.default.object,
        /**
         * form内有 `htmlType="submit"` 的元素的时候会触发
         */
        onSubmit: prop_types_1.default.func,
        /**
         * 子元素
         */
        children: prop_types_1.default.any,
        /**
         * 扩展class
         */
        className: prop_types_1.default.string,
        /**
         * 自定义内联样式
         */
        style: prop_types_1.default.object,
        /**
         * 表单数值
         */
        value: prop_types_1.default.object,
        /**
         * 表单变化回调
         * @param {Object} values 表单数据
         * @param {Object} item 详细
         * @param {String} item.name 变化的组件名
         * @param {String} item.value 变化的数据
         * @param {Object} item.field field 实例
         */
        onChange: prop_types_1.default.func,
        /**
         * 设置标签类型
         */
        component: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.func]),
        fieldOptions: prop_types_1.default.object,
        rtl: prop_types_1.default.bool,
        /**
         * 预设屏幕宽度
         */
        device: prop_types_1.default.oneOf(['phone', 'tablet', 'desktop']),
        /**
         * 是否开启内置的响应式布局 （使用ResponsiveGrid）
         * @version 1.19
         */
        responsive: prop_types_1.default.bool,
        /**
         * 是否开启预览态
         * @version 1.19
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 是否使用 label 替换校验信息的 name 字段
         * @version 1.20
         */
        useLabelForErrorMessage: prop_types_1.default.bool,
        /**
         * 倾向使用 item 的 margin 空间来展示 help
         * @default false
         * @version 1.26.37
         */
        preferMarginToDisplayHelp: prop_types_1.default.bool,
        /**
         * 表示是否显示 label 后面的冒号
         * @version 1.22
         */
        colon: prop_types_1.default.bool,
        /**
         * 是否禁用表单
         */
        disabled: prop_types_1.default.bool,
        // 在 responsive模式下，透传给 ResponsiveGrid的， 表示 每个 cell 之间的间距， [bottom&top, right&left]
        gap: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.number), prop_types_1.default.number])
    };
    Form.defaultProps = {
        prefix: 'next-',
        onSubmit: preventDefault,
        size: 'medium',
        labelAlign: 'left',
        onChange: util_1.func.noop,
        component: 'form',
        saveField: util_1.func.noop,
        device: 'desktop',
        colon: false,
        disabled: false,
        preferMarginToDisplayHelp: false
    };
    Form.childContextTypes = {
        _formField: prop_types_1.default.object,
        _formSize: prop_types_1.default.string,
        _formDisabled: prop_types_1.default.bool,
        _formPreview: prop_types_1.default.bool,
        _formFullWidth: prop_types_1.default.bool,
        _formLabelForErrorMessage: prop_types_1.default.bool,
        _formMarginToDisplayHelp: prop_types_1.default.bool
    };
    return Form;
}(react_1.default.Component);
exports.default = Form;

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.stripObject = exports.filterUndefinedValue = void 0;
var util_1 = __webpack_require__(4);
var isPlainObject = util_1.obj.isPlainObject;
/**
 * 过滤 undefined 类型的值
 * @param  {*}  obj
 * @return {Object}
 */
function filterUndefinedValue(object) {
    if (!isPlainObject(object)) {
        return object;
    }
    var obj = {};
    Object.keys(object).forEach(function (key) {
        var value = object[key];
        if (value !== undefined) {
            obj[key] = value;
        }
    });
    return obj;
}
exports.filterUndefinedValue = filterUndefinedValue;
/**
 * 从 obj 中去除 subObj
 * @param  {*}  obj
 * @param  {*}  subObj
 * @return {Object}
 */
function stripObject(obj, subObj) {
    var newObject = {};
    Object.keys(obj).forEach(function (key) {
        if (!(key in subObj)) {
            newObject[key] = obj[key];
        }
    });
    return newObject;
}
exports.stripObject = stripObject;

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var pickOthers = util_1.obj.pickOthers;
/**
 * ResponsiveGrid.Cell
 */
var Cell = /** @class */function (_super) {
    tslib_1.__extends(Cell, _super);
    function Cell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Cell.prototype.render = function () {
        var _a = this.props,
            View = _a.component,
            children = _a.children;
        var others = pickOthers(Object.keys(Cell.propTypes), this.props);
        return react_1.default.createElement(View, tslib_1.__assign({}, others), children);
    };
    Cell._typeMark = 'responsive_grid_cell';
    Cell.propTypes = {
        device: prop_types_1.default.oneOf(['phone', 'tablet', 'desktop']),
        /**
         * 横向，占据几列
         */
        colSpan: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.object]),
        /**
         * 纵向，占据几行
         */
        rowSpan: prop_types_1.default.number,
        /**
         * 设置标签类型
         */
        component: prop_types_1.default.elementType
    };
    Cell.defaultProps = {
        component: 'div',
        device: 'desktop'
    };
    return Cell;
}(react_1.Component);
exports.default = config_provider_1.default.config(Cell);

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var grid_1 = __webpack_require__(176);
var responsive_grid_1 = __webpack_require__(97);
var util_1 = __webpack_require__(4);
var error_1 = __webpack_require__(177);
var enhance_1 = __webpack_require__(366);
var Row = grid_1.default.Row,
    Col = grid_1.default.Col;
var Cell = responsive_grid_1.default.Cell;
var isNil = util_1.obj.isNil;
/** Form.Item
 *  @description 手动传递了 wrapCol labelCol 会使用 Grid 辅助布局; labelAlign='top' 会强制禁用 Grid
 *  @order 1
 */
var Item = /** @class */function (_super) {
  tslib_1.__extends(Item, _super);
  function Item() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  /**
   * 从子元素里面提取表单组件. TODO: 2.x 中改为只获取一个元素
   */
  Item.prototype.getNames = function (children) {
    var name = this.props.name;
    var childrenList = react_1.default.Children.toArray(children);
    var nameList = childrenList.filter(function (c) {
      return c.props && ('name' in c.props || 'data-meta' in c.props);
    }).map(function (c) {
      return c.props.name || c.props.id;
    });
    if (nameList.length) {
      return nameList;
    } else if (name) {
      return [name];
    }
    return [];
  };
  Item.prototype.getHelper = function (children) {
    var _a = this.props,
        help = _a.help,
        preferMarginToDisplayHelp = _a.preferMarginToDisplayHelp;
    var _b = this.context,
        _formField = _b._formField,
        _formMarginToDisplayHelp = _b._formMarginToDisplayHelp;
    var useMargin = typeof preferMarginToDisplayHelp !== 'undefined' ? preferMarginToDisplayHelp : _formMarginToDisplayHelp;
    return react_1.default.createElement(error_1.default, { name: help === undefined ? this.getNames(children) : undefined, field: _formField, preferMarginToDisplayHelp: useMargin }, help);
  };
  Item.prototype.getState = function (children) {
    var validateState = this.props.validateState;
    if (validateState) {
      return validateState;
    }
    if (this.context._formField) {
      var getState = this.context._formField.getState;
      var names = this.getNames(children);
      if (!names.length) {
        return '';
      }
      // get first name
      return getState(names[0]);
    }
    return undefined;
  };
  Item.prototype.getSize = function () {
    return this.props.size || this.context._formSize;
  };
  Item.prototype.getDisabled = function () {
    return 'disabled' in this.props ? this.props.disabled : this.context._formDisabled;
  };
  Item.prototype.getIsPreview = function () {
    return 'isPreview' in this.props ? this.props.isPreview : this.context._formPreview;
  };
  Item.prototype.getFullWidth = function () {
    return isNil(this.props.fullWidth) ? !!this.context._formFullWidth : this.props.fullWidth;
  };
  Item.prototype.getLabelForErrorMessage = function () {
    var _a = this.props,
        errorMessageName = _a.errorMessageName,
        label = _a.label,
        useLabelForErrorMessage = _a.useLabelForErrorMessage;
    if (errorMessageName) {
      return errorMessageName;
    }
    if (!label || typeof label !== 'string') {
      return null;
    }
    var newLabel = label.replace(':', '').replace('：', '');
    var labelForErrorMessage = useLabelForErrorMessage !== undefined ? useLabelForErrorMessage : this.context._formLabelForErrorMessage;
    if (labelForErrorMessage && newLabel) {
      return newLabel;
    }
    return null;
  };
  Item.prototype.getItemLabel = function (children) {
    var _a;
    var _b = this.props,
        id = _b.id,
        required = _b.required,
        _c = _b.asterisk,
        asterisk = _c === void 0 ? required : _c,
        label = _b.label,
        labelCol = _b.labelCol,
        wrapperCol = _b.wrapperCol,
        prefix = _b.prefix,
        responsive = _b.responsive,
        labelWidth = _b.labelWidth,
        labelTextAlign = _b.labelTextAlign,
        colon = _b.colon;
    var labelAlign = this.getLabelAlign(this.props.labelAlign, this.props.device);
    if (!label) {
      return null;
    }
    var ele = react_1.default.createElement("label", { htmlFor: id || this.getNames(children)[0], required: asterisk, key: "label" }, label);
    var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "form-item-label")] = true, _a['has-colon'] = colon, _a["".concat(prefix, "left")] = labelTextAlign === 'left', _a));
    if (responsive && labelWidth && labelAlign !== 'top') {
      return react_1.default.createElement("div", { className: cls, style: { width: labelWidth } }, ele);
    }
    if ((wrapperCol || labelCol) && labelAlign !== 'top') {
      return react_1.default.createElement(Col, tslib_1.__assign({}, labelCol, { className: cls }), ele);
    }
    return react_1.default.createElement("div", { className: cls }, ele);
  };
  Item.prototype.getItemWrapper = function (children) {
    var _this = this;
    var _a = this.props,
        hasFeedback = _a.hasFeedback,
        labelCol = _a.labelCol,
        wrapperCol = _a.wrapperCol,
        extra = _a.extra,
        prefix = _a.prefix,
        renderPreview = _a.renderPreview,
        name = _a.name;
    var labelAlign = this.getLabelAlign(this.props.labelAlign, this.props.device);
    var state = this.getState(children);
    var isPreview = this.getIsPreview();
    var childrenProps = {
      size: this.getSize()
    };
    if (isPreview) {
      childrenProps.isPreview = true;
    }
    if ('renderPreview' in this.props && typeof renderPreview === 'function') {
      childrenProps.renderPreview = renderPreview;
    }
    if (state && (state === 'error' || hasFeedback)) {
      childrenProps.state = state;
    }
    if (labelAlign === 'inset') {
      childrenProps.label = this.getItemLabel(children);
    }
    if (this.getDisabled()) {
      childrenProps.disabled = true;
    }
    var labelForErrorMessage = this.getLabelForErrorMessage();
    var ele = react_1.default.Children.map(children, function (child, idx) {
      if (child && ['function', 'object'].indexOf((0, _typeof3.default)(child.type)) > -1 && child.type._typeMark !== 'form_item' && child.type._typeMark !== 'form_error') {
        var extraProps = childrenProps;
        // 自己直接使用 field.init 会在 props 上面留下 data-meta
        // name 挪到 FormItem 上面，默认把第一个元素当做 Form 组件
        if (_this.context._formField && !('data-meta' in child.props) && ('name' in child.props || name && idx === 0) //TODO：1.x 为了不BR, 2.x 中把优先级调换下，优先取 FormItem 的 name
        ) {
            var initName = 'name' in child.props && child.props.name ? child.props.name : name;
            extraProps = _this.context._formField.init(initName, tslib_1.__assign(tslib_1.__assign({}, (0, enhance_1.getFieldInitCfg)(_this.props, child.type.displayName, labelForErrorMessage)), { props: tslib_1.__assign(tslib_1.__assign({}, child.props), { ref: child.ref }) }), childrenProps);
          } else {
          extraProps = (0, _extends3.default)({}, child.props, extraProps);
        }
        return react_1.default.cloneElement(child, extraProps);
      }
      return child;
    });
    var help = this.getHelper(children);
    if ((wrapperCol || labelCol) && labelAlign !== 'top') {
      return react_1.default.createElement(Col, tslib_1.__assign({}, wrapperCol, { className: "".concat(prefix, "form-item-control"), key: "item" }), ele, " ", help, " ", extra);
    }
    return react_1.default.createElement("div", { className: "".concat(prefix, "form-item-control") }, ele, " ", help, " ", extra);
  };
  Item.prototype.getLabelAlign = function (labelAlign, device) {
    if (device === 'phone') {
      return 'top';
    }
    return labelAlign;
  };
  Item.prototype.render = function () {
    var _a;
    var _b = this.props,
        className = _b.className,
        style = _b.style,
        prefix = _b.prefix,
        wrapperCol = _b.wrapperCol,
        labelCol = _b.labelCol,
        responsive = _b.responsive,
        children = _b.children;
    var labelAlign = this.getLabelAlign(this.props.labelAlign, this.props.device);
    var childrenNode = children;
    if (typeof children === 'function' && this.context._formField) {
      childrenNode = children(this.context._formField.getValues());
    }
    var state = this.getState(childrenNode);
    var size = this.getSize();
    var fullWidth = this.getFullWidth();
    var isPreview = this.getIsPreview();
    var itemClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "form-item")] = true, _a["".concat(prefix).concat(labelAlign)] = labelAlign, _a["has-".concat(state)] = !!state, _a["".concat(prefix).concat(size)] = !!size, _a["".concat(prefix, "form-item-fullwidth")] = fullWidth, _a["".concat(className)] = !!className, _a["".concat(prefix, "form-preview")] = isPreview, _a));
    // 垂直模式并且左对齐才用到
    var Tag = responsive ? Cell : (wrapperCol || labelCol) && labelAlign !== 'top' ? Row : 'div';
    var label = labelAlign === 'inset' ? null : this.getItemLabel(childrenNode);
    return react_1.default.createElement(Tag, tslib_1.__assign({}, util_1.obj.pickOthers(Item.propTypes, this.props), { className: itemClassName, style: style }), label, this.getItemWrapper(childrenNode));
  };
  Item.propTypes = {
    /**
     * 样式前缀
     */
    prefix: prop_types_1.default.string,
    rtl: prop_types_1.default.bool,
    /**
     * label 标签的文本
     */
    label: prop_types_1.default.node,
    /**
     * label 标签布局，通 `<Col>` 组件，设置 span offset 值，如 {span: 8, offset: 16}，该项仅在垂直表单有效
     */
    labelCol: prop_types_1.default.object,
    /**
     * 需要为输入控件设置布局样式时，使用该属性，用法同 labelCol
     */
    wrapperCol: prop_types_1.default.object,
    /**
     * 自定义提示信息，如不设置，则会根据校验规则自动生成.
     */
    help: prop_types_1.default.node,
    /**
     * 字段名，默认赋值给第一个子元素
     */
    name: prop_types_1.default.string,
    /**
     * 额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。 位于错误信息后面
     */
    extra: prop_types_1.default.node,
    /**
     * 校验状态，如不设置，则会根据校验规则自动生成
     * @enumdesc 失败, 成功, 校验中, 警告
     */
    validateState: prop_types_1.default.oneOf(['error', 'success', 'loading', 'warning']),
    /**
     * 配合 validateState 属性使用，是否展示 success/loading 的校验状态图标, 目前只有Input支持
     */
    hasFeedback: prop_types_1.default.bool, //TODO: hasFeedback => validateStatus=[error,success,loading]
    /**
     * 自定义内联样式
     */
    style: prop_types_1.default.object,
    id: prop_types_1.default.string,
    /**
     * node 或者 function(values)
     */
    children: prop_types_1.default.oneOfType([prop_types_1.default.node, prop_types_1.default.func]),
    /**
     * 单个 Item 的 size 自定义，优先级高于 Form 的 size, 并且当组件与 Item 一起使用时，组件自身设置 size 属性无效。
     */
    size: prop_types_1.default.oneOf(['large', 'small', 'medium']),
    /**
     * 单个 Item 中表单类组件宽度是否是100%
     */
    fullWidth: prop_types_1.default.bool,
    /**
     * 标签的位置, 如果不设置 labelCol 和 wrapperCol 那么默认是标签在上
     * @enumdesc 上, 左, 内
     */
    labelAlign: prop_types_1.default.oneOf(['top', 'left', 'inset']),
    /**
     * 标签的左右对齐方式
     * @enumdesc 左, 右
     */
    labelTextAlign: prop_types_1.default.oneOf(['left', 'right']),
    /**
     * 扩展class
     */
    className: prop_types_1.default.string,
    /**
     * [表单校验] 不能为空
     */
    required: prop_types_1.default.bool,
    /**
     * required 的星号是否显示
     */
    asterisk: prop_types_1.default.bool,
    /**
     * required 自定义错误信息
     */
    requiredMessage: prop_types_1.default.string,
    /**
     * required 校验何时触发，默认值 onChange, 原生事件均可使用 onChange/onBlur/onFocus/...
     */
    requiredTrigger: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
    /**
     * [表单校验] 最小值
     */
    min: prop_types_1.default.number,
    /**
     * [表单校验] 最大值
     */
    max: prop_types_1.default.number,
    /**
     * min/max 自定义错误信息
     */
    minmaxMessage: prop_types_1.default.string,
    /**
     * min/max 校验何时触发，默认值 onChange, 原生事件均可使用 onChange/onBlur/onFocus/...
     */
    minmaxTrigger: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
    /**
     * [表单校验] 字符串最小长度 / 数组最小个数
     */
    minLength: prop_types_1.default.number,
    /**
     * [表单校验] 字符串最大长度 / 数组最大个数
     */
    maxLength: prop_types_1.default.number,
    /**
     * minLength/maxLength 自定义错误信息
     */
    minmaxLengthMessage: prop_types_1.default.string,
    /**
     * minLength/maxLength 校验何时触发，默认值 onChange, 原生事件均可使用 onChange/onBlur/onFocus/...
     */
    minmaxLengthTrigger: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
    /**
     * [表单校验] 字符串精确长度 / 数组精确个数
     */
    length: prop_types_1.default.number,
    /**
     * length 自定义错误信息
     */
    lengthMessage: prop_types_1.default.string,
    /**
     * length 校验何时触发，默认值 onChange, 原生事件均可使用 onChange/onBlur/onFocus/...
     */
    lengthTrigger: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
    /**
     * 正则校验
     */
    pattern: prop_types_1.default.any,
    /**
     * pattern 自定义错误信息
     */
    patternMessage: prop_types_1.default.string,
    /**
     * pattern 校验何时触发，默认值 onChange, 原生事件均可使用 onChange/onBlur/onFocus/...
     */
    patternTrigger: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
    /**
     * [表单校验] 四种常用的 pattern
     */
    format: prop_types_1.default.oneOf(['number', 'email', 'url', 'tel']),
    /**
     * format 自定义错误信息
     */
    formatMessage: prop_types_1.default.string,
    /**
     * format 校验何时触发，默认值 onChange, 原生事件均可使用 onChange/onBlur/onFocus/...
     */
    formatTrigger: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
    /**
     * [表单校验] 自定义校验函数
     */
    validator: prop_types_1.default.func,
    /**
     * validator 校验何时触发，默认值 onChange, 原生事件均可使用 onChange/onBlur/onFocus/...
     */
    validatorTrigger: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
    /**
     * 是否修改数据时自动触发校验
     */
    autoValidate: prop_types_1.default.bool,
    /**
     * 预设屏幕宽度
     */
    device: prop_types_1.default.oneOf(['phone', 'tablet', 'desktop']),
    responsive: prop_types_1.default.bool,
    /**
     * 在响应式布局模式下，表单项占多少列
     */
    colSpan: prop_types_1.default.number,
    /**
     * 在响应式布局下，且label在左边时，label的宽度是多少
     */
    labelWidth: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    /**
     * 是否开启预览态
     */
    isPreview: prop_types_1.default.bool,
    /**
     * 预览态模式下渲染的内容
     * @param {any} value 根据包裹的组件的 value 类型而决定
     */
    renderPreview: prop_types_1.default.func,
    /**
     * 替代校验信息的 name 字段，useLabelForErrorMessage 开启的情况下比 label 优先级高
     */
    errorMessageName: prop_types_1.default.string,
    /**
     * 是否使用 label 替换校验信息的 name 字段
     */
    useLabelForErrorMessage: prop_types_1.default.bool,
    /**
     * 倾向使用 item 的 margin 空间来展示 help
     * @default false
     * @version 1.26.37
     */
    preferMarginToDisplayHelp: prop_types_1.default.bool,
    /**
     * 表示是否显示 label 后面的冒号
     */
    colon: prop_types_1.default.bool,
    /**
     * 是否禁用表单
     */
    disabled: prop_types_1.default.bool,
    /**
     * 子元素的 value 名称
     */
    valueName: prop_types_1.default.string
  };
  Item.defaultProps = {
    prefix: 'next-',
    hasFeedback: false,
    labelWidth: 100
  };
  Item.contextTypes = {
    _formField: prop_types_1.default.object,
    _formSize: prop_types_1.default.oneOf(['large', 'small', 'medium']),
    _formDisabled: prop_types_1.default.bool,
    _formPreview: prop_types_1.default.bool,
    _formFullWidth: prop_types_1.default.bool,
    _formLabelForErrorMessage: prop_types_1.default.bool,
    _formMarginToDisplayHelp: prop_types_1.default.bool
  };
  Item._typeMark = 'form_item';
  return Item;
}(react_1.default.Component);
exports.default = Item;

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
/**
 * Grid.Row
 * @order 1
 */
var Row = /** @class */function (_super) {
    tslib_1.__extends(Row, _super);
    function Row() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Row.prototype.render = function () {
        var _a, _b, _c, _d;
        /* eslint-disable no-unused-vars */
        var _e = this.props,
            prefix = _e.prefix,
            pure = _e.pure,
            wrap = _e.wrap,
            fixed = _e.fixed,
            gutter = _e.gutter,
            fixedWidth = _e.fixedWidth,
            align = _e.align,
            justify = _e.justify,
            hidden = _e.hidden,
            className = _e.className,
            Tag = _e.component,
            children = _e.children,
            rtl = _e.rtl,
            others = tslib_1.__rest(_e, ["prefix", "pure", "wrap", "fixed", "gutter", "fixedWidth", "align", "justify", "hidden", "className", "component", "children", "rtl"]);
        /* eslint-enable no-unused-vars */
        var hiddenClassObj;
        if (hidden === true) {
            hiddenClassObj = (_a = {}, _a["".concat(prefix, "row-hidden")] = true, _a);
        } else if (typeof hidden === 'string') {
            hiddenClassObj = (_b = {}, _b["".concat(prefix, "row-").concat(hidden, "-hidden")] = !!hidden, _b);
        } else if (Array.isArray(hidden)) {
            hiddenClassObj = hidden.reduce(function (ret, point) {
                ret["".concat(prefix, "row-").concat(point, "-hidden")] = !!point;
                return ret;
            }, {});
        }
        var newClassName = (0, classnames_1.default)(tslib_1.__assign(tslib_1.__assign((_c = {}, _c["".concat(prefix, "row")] = true, _c["".concat(prefix, "row-wrap")] = wrap, _c["".concat(prefix, "row-fixed")] = fixed, _c["".concat(prefix, "row-fixed-").concat(fixedWidth)] = !!fixedWidth, _c["".concat(prefix, "row-justify-").concat(justify)] = !!justify, _c["".concat(prefix, "row-align-").concat(align)] = !!align, _c), hiddenClassObj), (_d = {}, _d[className] = !!className, _d)));
        var newChildren = children;
        var gutterNumber = parseInt(gutter, 10);
        if (gutterNumber !== 0) {
            var halfGutterString_1 = "".concat(gutterNumber / 2, "px");
            others.style = tslib_1.__assign({ marginLeft: "-".concat(halfGutterString_1), marginRight: "-".concat(halfGutterString_1) }, others.style || {});
            newChildren = react_1.Children.map(children, function (child) {
                if (child && child.type && typeof child.type === 'function' && child.type.isNextCol) {
                    var newChild = (0, react_1.cloneElement)(child, {
                        style: tslib_1.__assign({ paddingLeft: halfGutterString_1, paddingRight: halfGutterString_1 }, child.style || {})
                    });
                    return newChild;
                }
                return child;
            });
        }
        return react_1.default.createElement(Tag, tslib_1.__assign({ dir: rtl ? 'rtl' : 'ltr', role: "row", className: newClassName }, others), newChildren);
    };
    Row.propTypes = {
        prefix: prop_types_1.default.string,
        pure: prop_types_1.default.bool,
        rtl: prop_types_1.default.bool,
        className: prop_types_1.default.string,
        style: prop_types_1.default.object,
        /**
         * 行内容
         */
        children: prop_types_1.default.node,
        /**
         * 列间隔
         */
        gutter: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        /**
         * 列在行中宽度溢出后是否换行
         */
        wrap: prop_types_1.default.bool,
        /**
         * 行在某一断点下宽度是否保持不变（默认行宽度随视口变化而变化）
         */
        fixed: prop_types_1.default.bool,
        /**
         * 固定行的宽度为某一断点的宽度，不受视口影响而变动
         * @enumdesc 320px, 480px, 720px, 990px, 1200px, 1500px
         */
        fixedWidth: prop_types_1.default.oneOf(['xxs', 'xs', 's', 'm', 'l', 'xl']),
        /**
         * （不支持IE9浏览器）多列垂直方向对齐方式
         * @enumdesc 顶部对齐, 居中对齐, 底部对齐, 按第一行文字基线对齐, 未设置高度或设为 auto，将占满整个容器的高度
         */
        align: prop_types_1.default.oneOf(['top', 'center', 'bottom', 'baseline', 'stretch']),
        /**
         * （不支持IE9浏览器）行内具有多余空间时的布局方式
         * @enumdesc 左对齐, 居中对齐, 右对齐, 两端对齐，列之间间距相等, 每列具有相同的左右间距，行两端间距是列间距的二分之一
         */
        justify: prop_types_1.default.oneOf(['start', 'center', 'end', 'space-between', 'space-around']),
        /**
         * 行在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl'](在 xxs, xs, s, m, l, xl 断点下隐藏）
         */
        hidden: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.string, prop_types_1.default.array]),
        /**
         * 指定以何种元素渲染该节点
         * - 默认为 'div'
         */
        component: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.func])
    };
    Row.defaultProps = {
        prefix: 'next-',
        pure: false,
        fixed: false,
        gutter: 0,
        wrap: false,
        component: 'div'
    };
    return Row;
}(react_1.Component);
exports.default = Row;

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var breakPoints = ['xxs', 'xs', 's', 'm', 'l', 'xl'];
/**
 * Grid.Col
 * @order 2
 */
var Col = /** @class */function (_super) {
  tslib_1.__extends(Col, _super);
  function Col() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Col.prototype.render = function () {
    var _a, _b, _c, _d;
    var _this = this;
    /* eslint-disable no-unused-vars */
    var _e = this.props,
        prefix = _e.prefix,
        pure = _e.pure,
        span = _e.span,
        offset = _e.offset,
        fixedSpan = _e.fixedSpan,
        fixedOffset = _e.fixedOffset,
        hidden = _e.hidden,
        align = _e.align,
        xxs = _e.xxs,
        xs = _e.xs,
        s = _e.s,
        m = _e.m,
        l = _e.l,
        xl = _e.xl,
        Tag = _e.component,
        className = _e.className,
        children = _e.children,
        rtl = _e.rtl,
        others = tslib_1.__rest(_e, ["prefix", "pure", "span", "offset", "fixedSpan", "fixedOffset", "hidden", "align", "xxs", "xs", "s", "m", "l", "xl", "component", "className", "children", "rtl"]);
    /* eslint-enable no-unused-vars */
    var pointClassObj = breakPoints.reduce(function (ret, point) {
      var pointProps = {};
      if ((0, _typeof3.default)(_this.props[point]) === 'object') {
        pointProps = _this.props[point];
      } else {
        pointProps.span = _this.props[point];
      }
      ret["".concat(prefix, "col-").concat(point, "-").concat(pointProps.span)] = !!pointProps.span;
      ret["".concat(prefix, "col-").concat(point, "-offset-").concat(pointProps.offset)] = !!pointProps.offset;
      return ret;
    }, {});
    var hiddenClassObj;
    if (hidden === true) {
      hiddenClassObj = (_a = {}, _a["".concat(prefix, "col-hidden")] = true, _a);
    } else if (typeof hidden === 'string') {
      hiddenClassObj = (_b = {}, _b["".concat(prefix, "col-").concat(hidden, "-hidden")] = !!hidden, _b);
    } else if (Array.isArray(hidden)) {
      hiddenClassObj = hidden.reduce(function (ret, point) {
        ret["".concat(prefix, "col-").concat(point, "-hidden")] = !!point;
        return ret;
      }, {});
    }
    var classes = (0, classnames_1.default)(tslib_1.__assign(tslib_1.__assign(tslib_1.__assign((_c = {}, _c["".concat(prefix, "col")] = true, _c["".concat(prefix, "col-").concat(span)] = !!span, _c["".concat(prefix, "col-fixed-").concat(fixedSpan)] = !!fixedSpan, _c["".concat(prefix, "col-offset-").concat(offset)] = !!offset, _c["".concat(prefix, "col-offset-fixed-").concat(fixedOffset)] = !!fixedOffset, _c["".concat(prefix, "col-").concat(align)] = !!align, _c), pointClassObj), hiddenClassObj), (_d = {}, _d[className] = className, _d)));
    return react_1.default.createElement(Tag, tslib_1.__assign({ dir: rtl ? 'rtl' : 'ltr', role: "gridcell", className: classes }, others), children);
  };
  Col.isNextCol = true;
  Col.propTypes = {
    prefix: prop_types_1.default.string,
    pure: prop_types_1.default.bool,
    rtl: prop_types_1.default.bool,
    className: prop_types_1.default.string,
    /**
     * 列内容
     */
    children: prop_types_1.default.node,
    /**
     * 列宽度<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24
     */
    span: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    /**
     * 固定列宽度，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30
     */
    fixedSpan: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    /**
     * （不支持IE9浏览器）列偏移<br><br>**可选值**:<br>1, 2, 3, ..., 22, 23, 24
     */
    offset: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    /**
     * （不支持IE9浏览器）固定列偏移，宽度值为20 * 栅格数<br><br>**可选值**:<br>1, 2, 3, ..., 28, 29, 30
     */
    fixedOffset: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    /**
     * （不支持IE9浏览器）多列垂直方向对齐方式，可覆盖Row的align属性
     */
    align: prop_types_1.default.oneOf(['top', 'center', 'bottom', 'baseline', 'stretch']),
    /**
     * 列在不同断点下的显示与隐藏<br><br>**可选值**:<br>true(在所有断点下隐藏)<br>false(在所有断点下显示)<br>'xs'(在 xs 断点下隐藏）<br>['xxs', 'xs', 's', 'm', 'l', 'xl'](在 xxs, xs, s, m, l, xl 断点下隐藏）
     */
    hidden: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.string, prop_types_1.default.array]),
    /**
     * >=320px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象
     */
    xxs: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.object]),
    /**
     * >=480px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象
     */
    xs: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.object]),
    /**
     * >=720px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象
     */
    s: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.object]),
    /**
     * >=990px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象
     */
    m: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.object]),
    /**
     * >=1200px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象
     */
    l: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.object]),
    /**
     * >=1500px，响应式栅格，可为栅格数（span）或一个包含栅格数（span）和偏移栅格数（offset）对象
     */
    xl: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number, prop_types_1.default.object]),
    /**
     * 指定以何种元素渲染该节点，默认为 'div'
     */
    component: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.func])
  };
  Col.defaultProps = {
    prefix: 'next-',
    pure: false,
    component: 'div'
  };
  return Col;
}(react_1.Component);
exports.default = Col;

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.getFieldInitCfg = exports.getRules = void 0;
function getCfgFromProps(props, type) {
    if (type in props) {
        return props[type];
    }
    return undefined;
}
function getRule(ruleName, props) {
    var _a;
    return _a = {}, _a[ruleName] = props[ruleName], _a.message = getCfgFromProps(props, "".concat(ruleName, "Message")), _a.trigger = getCfgFromProps(props, "".concat(ruleName, "Trigger")), _a;
}
function getValueName(props, displayName) {
    if (props.valueName) {
        return props.valueName;
    }
    if (typeof displayName === 'string') {
        // Next Components are all wrappered by configProvider
        var componentName = displayName.replace(/Config\(/g, '').replace(/\)/g, '');
        if (['Switch', 'Checkbox', 'Radio'].indexOf(componentName) !== -1) {
            return 'checked';
        }
    }
    return 'value';
}
function getRules(props, labelForErrorMessage) {
    var result = [];
    // required
    if (props.required) {
        result.push(getRule('required', props));
    }
    var maxLength = Number(props.maxLength);
    var minLength = Number(props.minLength);
    if (minLength || maxLength) {
        result.push({
            minLength: minLength,
            maxLength: maxLength,
            // minLengthMessage maxLengthMessage had been deprected, please use minmaxLength. TODO: removed in 2.0
            message: getCfgFromProps(props, 'minmaxLengthMessage') || getCfgFromProps(props, 'minLengthMessage') || getCfgFromProps(props, 'maxLengthMessage'),
            trigger: getCfgFromProps(props, 'minmaxLengthTrigger') || getCfgFromProps(props, 'minLengthTrigger') || getCfgFromProps(props, 'maxLengthTrigger')
        });
    }
    // length
    if (props.length) {
        result.push(getRule('length', props));
    }
    // pattern
    if (props.pattern) {
        result.push(getRule('pattern', props));
    }
    // format
    if (['number', 'tel', 'url', 'email'].indexOf(props.format) > -1) {
        result.push(getRule('format', props));
    }
    var max = Number(props.max);
    var min = Number(props.min);
    // max min
    if (max || min) {
        result.push({
            min: min,
            max: max,
            // minMessage maxMessage had been deprected, please use minmaxLength. TODO: removed in 2.0
            message: getCfgFromProps(props, 'minmaxMessage') || getCfgFromProps(props, 'minMessage') || getCfgFromProps(props, 'maxMessage'),
            trigger: getCfgFromProps(props, 'minmaxTrigger') || getCfgFromProps(props, 'minTrigger') || getCfgFromProps(props, 'maxTrigger')
        });
    }
    if (props.validator && typeof props.validator === 'function') {
        result.push({
            validator: props.validator,
            trigger: getCfgFromProps(props, 'validatorTrigger')
        });
    }
    if (labelForErrorMessage) {
        result.forEach(function (r) {
            r.aliasName = labelForErrorMessage;
        });
    }
    return result;
}
exports.getRules = getRules;
function getFieldInitCfg(props, displayName, labelForErrorMessage) {
    return {
        valueName: getValueName(props, displayName),
        trigger: props.trigger ? props.trigger : 'onChange',
        autoValidate: props.autoValidate,
        rules: getRules(props, labelForErrorMessage)
    };
}
exports.getFieldInitCfg = getFieldInitCfg;

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var button_1 = __webpack_require__(14);
var util_1 = __webpack_require__(4);
/**
 * Form.Submit
 * @description 继承 Button API
 * @order 2
 */
var Submit = /** @class */function (_super) {
    tslib_1.__extends(Submit, _super);
    function Submit() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.handleClick = function () {
            var _a = _this.props,
                onClick = _a.onClick,
                validate = _a.validate;
            var field = _this.context._formField || _this.props.field;
            if (!field) {
                onClick();
                return;
            }
            if (validate === true) {
                field.validate(function (errors) {
                    onClick(field.getValues(), errors, field);
                });
            } else if (Array.isArray(validate)) {
                field.validate(validate, function (errors) {
                    onClick(field.getValues(), errors, field);
                });
            } else {
                onClick(field.getValues(), null, field);
            }
        };
        return _this;
    }
    Submit.prototype.render = function () {
        var children = this.props.children;
        return react_1.default.createElement(button_1.default, tslib_1.__assign({}, util_1.obj.pickOthers(Submit.propTypes, this.props), { onClick: this.handleClick }), children);
    };
    Submit.propTypes = {
        /**
         * 点击提交后触发
         * @param {Object} value 数据
         * @param {Object} errors 错误数据
         * @param {class} field 实例
         */
        onClick: prop_types_1.default.func,
        /**
         * 是否校验/需要校验的 name 数组
         */
        validate: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.array]),
        /**
         * 自定义 field (在 Form 内不需要设置)
         */
        field: prop_types_1.default.object,
        children: prop_types_1.default.node
    };
    Submit.defaultProps = {
        onClick: util_1.func.noop
    };
    Submit.contextTypes = {
        _formField: prop_types_1.default.object
    };
    return Submit;
}(react_1.default.Component);
exports.default = Submit;

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var button_1 = __webpack_require__(14);
var util_1 = __webpack_require__(4);
/**
 * Form.Reset
 * @description 继承 Button API
 * @order 3
 */
var Reset = /** @class */function (_super) {
    tslib_1.__extends(Reset, _super);
    function Reset() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.handleClick = function () {
            var _a = _this.props,
                names = _a.names,
                toDefault = _a.toDefault,
                onClick = _a.onClick;
            var field = _this.context._formField || _this.props.field;
            if (!field) {
                onClick();
                return;
            }
            if (toDefault) {
                field.resetToDefault(names);
            } else {
                field.reset(names);
            }
            onClick();
        };
        return _this;
    }
    Reset.prototype.render = function () {
        var children = this.props.children;
        return react_1.default.createElement(button_1.default, tslib_1.__assign({}, util_1.obj.pickOthers(Reset.propTypes, this.props), { onClick: this.handleClick }), children);
    };
    Reset.propTypes = {
        /**
         * 自定义重置的字段
         */
        names: prop_types_1.default.array,
        /**
         * 点击提交后触发
         */
        onClick: prop_types_1.default.func,
        /**
         * 返回默认值
         */
        toDefault: prop_types_1.default.bool,
        /**
         * 自定义 field (在 Form 内不需要设置)
         */
        field: prop_types_1.default.object,
        children: prop_types_1.default.node
    };
    Reset.defaultProps = {
        onClick: util_1.func.noop
    };
    Reset.contextTypes = {
        _formField: prop_types_1.default.object
    };
    return Reset;
}(react_1.default.Component);
exports.default = Reset;

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var button_1 = __webpack_require__(14);
var icon_1 = __webpack_require__(7);
var menu_1 = __webpack_require__(13);
var overlay_1 = __webpack_require__(12);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var Popup = overlay_1.default.Popup;
/**
 * MenuButton
 */
var MenuButton = /** @class */function (_super) {
    tslib_1.__extends(MenuButton, _super);
    function MenuButton(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.clickMenuItem = function (key) {
            var _a;
            var others = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                others[_i - 1] = arguments[_i];
            }
            var selectMode = _this.props.selectMode;
            (_a = _this.props).onItemClick.apply(_a, tslib_1.__spreadArray([key], tslib_1.__read(others), false));
            if (selectMode === 'multiple') {
                return;
            }
            _this.onPopupVisibleChange(false, 'menuSelect');
        };
        _this.selectMenu = function (keys) {
            var _a;
            var others = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                others[_i - 1] = arguments[_i];
            }
            if (!('selectedKeys' in _this.props)) {
                _this.setState({
                    selectedKeys: keys
                });
            }
            (_a = _this.props).onSelect.apply(_a, tslib_1.__spreadArray([keys], tslib_1.__read(others), false));
        };
        _this.onPopupOpen = function () {
            var button = (0, react_dom_1.findDOMNode)(_this);
            if (_this.props.autoWidth && button && _this.menu) {
                _this.menu.style.width = "".concat(button.offsetWidth, "px");
            }
        };
        _this.onPopupVisibleChange = function (visible, type) {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: visible
                });
            }
            _this.props.onVisibleChange(visible, type);
        };
        _this._menuRefHandler = function (ref) {
            _this.menu = (0, react_dom_1.findDOMNode)(ref);
            var refFn = _this.props.menuProps.ref;
            if (typeof refFn === 'function') {
                refFn(ref);
            }
        };
        _this.state = {
            selectedKeys: props.defaultSelectedKeys,
            visible: props.defaultVisible
        };
        return _this;
    }
    MenuButton.getDerivedStateFromProps = function (props) {
        var st = {};
        if ('visible' in props) {
            st.visible = props.visible;
        }
        if ('selectedKeys' in props) {
            st.selectedKeys = props.selectedKeys;
        }
        return st;
    };
    MenuButton.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            prefix = _c.prefix,
            style = _c.style,
            className = _c.className,
            label = _c.label,
            popupTriggerType = _c.popupTriggerType,
            popupContainer = _c.popupContainer,
            popupStyle = _c.popupStyle,
            popupClassName = _c.popupClassName,
            popupProps = _c.popupProps,
            followTrigger = _c.followTrigger,
            selectMode = _c.selectMode,
            menuProps = _c.menuProps,
            children = _c.children,
            others = tslib_1.__rest(_c, ["prefix", "style", "className", "label", "popupTriggerType", "popupContainer", "popupStyle", "popupClassName", "popupProps", "followTrigger", "selectMode", "menuProps", "children"]);
        var state = this.state;
        var classNames = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "menu-btn")] = true, _a["".concat(prefix, "expand")] = state.visible, _a.opened = state.visible, _a), className);
        var popupClassNames = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "menu-btn-popup")] = true, _b), popupClassName);
        var trigger = react_1.default.createElement(button_1.default, tslib_1.__assign({ style: style, className: classNames }, util_1.obj.pickOthers(MenuButton.propTypes, others)), label, " ", react_1.default.createElement(icon_1.default, { type: "arrow-down", className: "".concat(prefix, "menu-btn-arrow") }));
        return react_1.default.createElement(Popup, tslib_1.__assign({}, popupProps, { followTrigger: followTrigger, visible: state.visible, onVisibleChange: this.onPopupVisibleChange, trigger: trigger, triggerType: popupTriggerType, container: popupContainer, onOpen: this.onPopupOpen, style: popupStyle, className: popupClassNames }), react_1.default.createElement("div", { className: "".concat(prefix, "menu-btn-spacing-tb") }, react_1.default.createElement(menu_1.default, tslib_1.__assign({}, menuProps, { ref: this._menuRefHandler, selectedKeys: state.selectedKeys, selectMode: selectMode, onSelect: this.selectMenu, onItemClick: this.clickMenuItem }), children)));
    };
    MenuButton.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 按钮上的文本内容
         */
        label: prop_types_1.default.node,
        /**
         * 弹层是否与按钮宽度相同
         */
        autoWidth: prop_types_1.default.bool,
        /**
         * 弹层触发方式
         */
        popupTriggerType: prop_types_1.default.oneOf(['click', 'hover']),
        /**
         * 弹层容器
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 弹层展开状态
         */
        visible: prop_types_1.default.bool,
        /**
         * 弹层默认是否展开
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 弹层在显示和隐藏触发的事件
         */
        onVisibleChange: prop_types_1.default.func,
        /**
         * 弹层自定义样式
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 弹层自定义样式类
         */
        popupClassName: prop_types_1.default.string,
        /**
         * 弹层属性透传
         */
        popupProps: prop_types_1.default.object,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 默认激活的菜单项（用法同 Menu 非受控）
         */
        defaultSelectedKeys: prop_types_1.default.array,
        /**
         * 激活的菜单项（用法同 Menu 受控）
         */
        selectedKeys: prop_types_1.default.array,
        /**
         * 菜单的选择模式，同 Menu
         */
        selectMode: prop_types_1.default.oneOf(['single', 'multiple']),
        /**
         * 点击菜单项后的回调，同 Menu
         */
        onItemClick: prop_types_1.default.func,
        /**
         * 选择菜单后的回调，同 Menu
         */
        onSelect: prop_types_1.default.func,
        /**
         * 菜单属性透传
         */
        menuProps: prop_types_1.default.object,
        style: prop_types_1.default.object,
        className: prop_types_1.default.string,
        children: prop_types_1.default.any
    };
    MenuButton.defaultProps = {
        prefix: 'next-',
        autoWidth: true,
        popupTriggerType: 'click',
        onVisibleChange: util_1.func.noop,
        onItemClick: util_1.func.noop,
        onSelect: util_1.func.noop,
        defaultSelectedKeys: [],
        menuProps: {}
    };
    return MenuButton;
}(react_1.default.Component);
MenuButton.Item = menu_1.default.Item;
MenuButton.Group = menu_1.default.Group;
MenuButton.Divider = menu_1.default.Divider;
exports.default = config_provider_1.default.config((0, react_lifecycles_compat_1.polyfill)(MenuButton), {
    componentName: 'MenuButton'
});

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var menu_1 = __webpack_require__(13);
var nav_1 = __webpack_require__(371);
var item_1 = __webpack_require__(372);
var group_1 = __webpack_require__(373);
var sub_nav_1 = __webpack_require__(374);
var popup_item_1 = __webpack_require__(375);
nav_1.default.Item = item_1.default;
nav_1.default.Group = group_1.default;
nav_1.default.SubNav = sub_nav_1.default;
nav_1.default.PopupItem = popup_item_1.default;
nav_1.default.Divider = menu_1.default.Divider;
exports.default = nav_1.default;

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var menu_1 = __webpack_require__(13);
/**
 * Nav
 * @description 继承自 `Menu` 的能力请查看 `Menu` 文档
 */
var Nav = /** @class */function (_super) {
  tslib_1.__extends(Nav, _super);
  function Nav(props) {
    var _this = _super.call(this, props) || this;
    _this.getMenuRef = _this.getMenuRef.bind(_this);
    return _this;
  }
  Nav.prototype.getChildContext = function () {
    var _a = this.props,
        prefix = _a.prefix,
        direction = _a.direction,
        mode = _a.mode,
        iconOnly = _a.iconOnly,
        iconOnlyWidth = _a.iconOnlyWidth,
        iconTextOnly = _a.iconTextOnly,
        hasTooltip = _a.hasTooltip,
        hasArrow = _a.hasArrow;
    var isCollapse = this.context.isCollapse;
    return {
      prefix: prefix,
      mode: direction === 'hoz' ? 'popup' : mode,
      iconOnly: 'iconOnly' in this.props ? iconOnly : isCollapse,
      iconOnlyWidth: 'iconOnlyWidth' in this.props ? iconOnlyWidth : undefined,
      iconTextOnly: iconTextOnly,
      hasTooltip: hasTooltip,
      hasArrow: hasArrow
    };
  };
  Nav.prototype.getMenuRef = function (ref) {
    this.menu = ref;
  };
  Nav.prototype.render = function () {
    var _a, _b;
    // eslint-disable-next-line
    var _c = this.props,
        prefix = _c.prefix,
        className = _c.className,
        style = _c.style,
        children = _c.children,
        type = _c.type,
        direction = _c.direction,
        activeDirection = _c.activeDirection,
        mode = _c.mode,
        triggerType = _c.triggerType,
        inlineIndent = _c.inlineIndent,
        openMode = _c.openMode,
        popupAlign = _c.popupAlign,
        popupClassName = _c.popupClassName,
        iconOnly = _c.iconOnly,
        iconOnlyWidth = _c.iconOnlyWidth,
        iconTextOnly = _c.iconTextOnly,
        hasArrow = _c.hasArrow,
        hasTooltip = _c.hasTooltip,
        embeddable = _c.embeddable,
        _popupProps = _c.popupProps,
        rtl = _c.rtl,
        others = tslib_1.__rest(_c, ["prefix", "className", "style", "children", "type", "direction", "activeDirection", "mode", "triggerType", "inlineIndent", "openMode", "popupAlign", "popupClassName", "iconOnly", "iconOnlyWidth", "iconTextOnly", "hasArrow", "hasTooltip", "embeddable", "popupProps", "rtl"]);
    var isCollapse = this.context.isCollapse;
    var newIconOnly = 'iconOnly' in this.props ? iconOnly : isCollapse;
    var realActiveDirection = activeDirection;
    if (realActiveDirection && (direction === 'hoz' && (realActiveDirection === 'left' || realActiveDirection === 'right') || direction === 'ver' && (realActiveDirection === 'top' || realActiveDirection === 'bottom'))) {
      realActiveDirection = null;
    }
    if (!newIconOnly && realActiveDirection === undefined) {
      realActiveDirection = direction === 'hoz' ? 'bottom' : type === 'line' ? 'right' : 'left';
    }
    var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "nav")] = true, _a["".concat(prefix).concat(type)] = type, _a["".concat(prefix, "active")] = realActiveDirection, _a["".concat(prefix).concat(realActiveDirection)] = realActiveDirection, _a["".concat(prefix, "icon-only")] = newIconOnly, _a["".concat(prefix, "icon-only-text")] = newIconOnly && iconTextOnly, _a["".concat(prefix, "custom-icon-only-width")] = newIconOnly && 'iconOnlyWidth' in this.props, _a["".concat(prefix, "no-arrow")] = !hasArrow, _a["".concat(prefix, "nav-embeddable")] = embeddable, _a[className] = !!className, _a));
    var newStyle = newIconOnly ? tslib_1.__assign(tslib_1.__assign({}, style), { width: iconOnlyWidth || 58 }) : style;
    var props = {
      prefix: prefix,
      direction: direction,
      openMode: openMode,
      triggerType: triggerType,
      mode: direction === 'hoz' ? 'popup' : mode,
      popupAlign: direction === 'hoz' ? 'follow' : popupAlign,
      inlineIndent: newIconOnly ? 0 : inlineIndent,
      hasSelectedIcon: false,
      popupAutoWidth: true,
      selectMode: 'single',
      itemClassName: "".concat(prefix, "nav-item"),
      popupClassName: (0, classnames_1.default)((_b = {}, _b[cls.replace("".concat(prefix, "icon-only"), '').replace("".concat(prefix, "nav-embeddable"), '')] = mode === 'popup', _b["".concat(prefix, "icon-only")] = newIconOnly && mode === 'inline', _b[popupClassName] = !!popupClassName, _b)),
      popupProps: function popupProps() {
        return tslib_1.__assign({}, _popupProps);
      }
    };
    return react_1.default.createElement(menu_1.default, tslib_1.__assign({ className: cls, style: newStyle }, props, others, { ref: this.getMenuRef }), children);
  };
  Nav.propTypes = {
    prefix: prop_types_1.default.string,
    pure: prop_types_1.default.bool,
    rtl: prop_types_1.default.bool,
    className: prop_types_1.default.string,
    style: prop_types_1.default.object,
    /**
     * 导航项和子导航
     */
    children: prop_types_1.default.node,
    /**
     * 导航类型
     * @enumdesc 普通, 主要, 次要, 线形
     */
    type: prop_types_1.default.oneOf(['normal', 'primary', 'secondary', 'line']),
    /**
     * 导航布局
     * @enumdesc 水平, 垂直
     */
    direction: prop_types_1.default.oneOf(['hoz', 'ver']),
    /**
     * 横向导航条 items 和 footer 的对齐方向，在 direction 设置为 'hoz' 并且 header 存在时生效
     */
    hozAlign: prop_types_1.default.oneOf(['left', 'right']),
    /**
     * 设置组件选中状态的 active 边方向
     * @enumdesc 无, 上, 下, 左, 右
     * @default 当 direction 为 'hoz' 时，默认值为 'bottom'，当 direction 为 'ver' 时，默认值为 'left'
     */
    activeDirection: prop_types_1.default.oneOf([null, 'top', 'bottom', 'left', 'right']),
    /**
     * 子导航打开的模式（水平导航只支持弹出）
     * @eumdesc 行内, 弹出
     */
    mode: prop_types_1.default.oneOf(['inline', 'popup']),
    /**
     * 子导航打开的触发方式
     */
    triggerType: prop_types_1.default.oneOf(['click', 'hover']),
    /**
     * 内联子导航缩进距离
     */
    inlineIndent: prop_types_1.default.number,
    /**
     * 首次渲染展开所有的子导航，只在 mode 设置为 'inline' 以及 openMode 设置为 'multiple' 下生效
     */
    defaultOpenAll: prop_types_1.default.bool,
    /**
     * 内联子导航的展开模式，同时可以展开一个同级子导航还是多个同级子导航，该属性仅在 mode 为 inline 时生效
     * @eumdesc 一个, 多个
     */
    openMode: prop_types_1.default.oneOf(['single', 'multiple']),
    /**
     * 当前选中导航项的 key 值
     */
    selectedKeys: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
    /**
     * 初始选中导航项的 key 值
     */
    defaultSelectedKeys: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.array]),
    /**
     * 选中或取消选中导航项触发的回调函数
     * @param {Array} selectedKeys 选中的所有导航项的 key
     * @param {Object} item 选中或取消选中的导航项
     * @param {Object} extra 额外参数
     * @param {Boolean} extra.select 是否是选中
     * @param {Array} extra.key 导航项的 key
     * @param {Object} extra.label 导航项的文本
     * @param {Array} extra.keyPath 导航项 key 的路径
     */
    onSelect: prop_types_1.default.func,
    /**
     * 弹出子导航的对齐方式（水平导航只支持 follow ）
     * @eumdesc Item 顶端对齐, Nav 顶端对齐
     */
    popupAlign: prop_types_1.default.oneOf(['follow', 'outside']),
    /**
     * 弹出子导航的自定义类名
     */
    popupClassName: prop_types_1.default.string,
    /**
     * 是否只显示图标
     */
    iconOnly: prop_types_1.default.bool,
    /**
     * iconOnly 模式下的宽度（仅在 iconOnly=true 时生效） 如果传入了iconOnlyWidth，那么会隐藏文本，例如 Nav.Item 的 label
     */
    iconOnlyWidth: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    /**
     * iconOnly模式下是否展示文字（仅在 iconOnly=true 时生效）
     */
    iconTextOnly: prop_types_1.default.bool,
    /**
     * 是否显示右侧的箭头（仅在 iconOnly=true 时生效）
     */
    hasArrow: prop_types_1.default.bool,
    /**
     * 是否有 ToolTips （仅在 iconOnly=true 时生效）
     */
    hasTooltip: prop_types_1.default.bool,
    /**
     * 自定义导航头部
     */
    header: prop_types_1.default.node,
    /**
     * 自定义导航尾部
     */
    footer: prop_types_1.default.node,
    /**
     * 是否开启嵌入式模式，一般用于Layout的布局中，开启后没有默认背景、外层border、box-shadow，可以配合`<Nav style={{lineHeight: '100px'}}>` 自定义高度
     * @version 1.18
     */
    embeddable: prop_types_1.default.bool,
    popupProps: prop_types_1.default.object
  };
  Nav.defaultProps = {
    prefix: 'next-',
    pure: false,
    type: 'normal',
    direction: 'ver',
    hozAlign: 'left',
    mode: 'inline',
    triggerType: 'click',
    inlineIndent: 20,
    defaultOpenAll: false,
    openMode: 'multiple',
    defaultSelectedKeys: [],
    popupAlign: 'follow',
    hasTooltip: false,
    embeddable: false,
    hasArrow: true,
    popupProps: {}
  };
  Nav.childContextTypes = {
    prefix: prop_types_1.default.string,
    mode: prop_types_1.default.string,
    iconOnly: prop_types_1.default.bool,
    iconOnlyWidth: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
    iconTextOnly: prop_types_1.default.bool,
    hasTooltip: prop_types_1.default.bool,
    hasArrow: prop_types_1.default.bool
  };
  Nav.contextTypes = {
    isCollapse: prop_types_1.default.bool
  };
  return Nav;
}(react_1.Component);
exports.default = config_provider_1.default.config(Nav);

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var menu_1 = __webpack_require__(13);
var icon_1 = __webpack_require__(7);
var balloon_1 = __webpack_require__(56);
var Tooltip = balloon_1.default.Tooltip;
/**
 * Nav.Item
 * @description 继承自 `Menu.Item` 的能力请查看 `Menu.Item` 文档
 */
var Item = /** @class */function (_super) {
    tslib_1.__extends(Item, _super);
    function Item() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Item.prototype.render = function () {
        var _a;
        var _b = this.context,
            prefix = _b.prefix,
            iconOnly = _b.iconOnly,
            iconOnlyWidth = _b.iconOnlyWidth,
            hasTooltip = _b.hasTooltip,
            iconTextOnly = _b.iconTextOnly;
        var _c = this.props,
            icon = _c.icon,
            children = _c.children,
            className = _c.className,
            others = tslib_1.__rest(_c, ["icon", "children", "className"]);
        var iconEl = typeof icon === 'string' ? react_1.default.createElement(icon_1.default, { className: "".concat(prefix, "nav-icon"), type: icon }) : icon;
        var title;
        if (typeof children === 'string') {
            title = children;
        }
        var showChildren = !iconOnly || iconOnly && !iconOnlyWidth || iconTextOnly;
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "nav-with-title")] = iconOnly && iconTextOnly, _a[className] = !!className, _a));
        var newChildren = showChildren ? iconTextOnly ? react_1.default.createElement("span", { className: "".concat(prefix, "nav-text") }, children) : children : null;
        var item = react_1.default.createElement(menu_1.default.Item, tslib_1.__assign({ title: title, className: cls }, others), iconEl, newChildren);
        if (iconOnly && hasTooltip && others.parentMode !== 'popup') {
            return react_1.default.createElement(Tooltip, { align: "r", trigger: item }, children);
        }
        return item;
    };
    Item.menuChildType = 'item';
    Item.propTypes = {
        /**
         * 自定义图标，可以使用 Icon 的 type，也可以使用组件 `<Icon type="icon type" />`
         */
        icon: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.node]),
        /**
         * 导航内容
         */
        children: prop_types_1.default.node,
        parentMode: prop_types_1.default.oneOf(['inline', 'popup'])
    };
    Item.contextTypes = {
        prefix: prop_types_1.default.string,
        iconOnly: prop_types_1.default.bool,
        iconOnlyWidth: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        iconTextOnly: prop_types_1.default.bool,
        hasTooltip: prop_types_1.default.bool
    };
    return Item;
}(react_1.Component);
exports.default = Item;

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var menu_1 = __webpack_require__(13);
/**
 * Nav.Group
 * @description 继承自 `Menu.Group` 的能力请查看 `Menu.Group` 文档
 */
var Group = /** @class */function (_super) {
    tslib_1.__extends(Group, _super);
    function Group() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Group.prototype.render = function () {
        var _a;
        var _b = this.context,
            prefix = _b.prefix,
            iconOnly = _b.iconOnly;
        var _c = this.props,
            className = _c.className,
            children = _c.children,
            label = _c.label,
            others = tslib_1.__rest(_c, ["className", "children", "label"]);
        var newLabel = label;
        if (iconOnly) {
            // TODO: add a group icon ?
            newLabel = [react_1.default.createElement("span", { key: "label" }, label)];
        }
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "nav-group-label")] = true, _a[className] = !!className, _a));
        return react_1.default.createElement(menu_1.default.Group, tslib_1.__assign({ className: cls, label: newLabel }, others), children);
    };
    Group.menuChildType = 'group';
    Group.propTypes = {
        /**
         * 自定义类名
         */
        className: prop_types_1.default.string,
        /**
         * 标签内容
         */
        label: prop_types_1.default.node,
        /**
         * 导航项和子导航
         */
        children: prop_types_1.default.node
    };
    Group.contextTypes = {
        prefix: prop_types_1.default.string,
        iconOnly: prop_types_1.default.bool
    };
    return Group;
}(react_1.Component);
exports.default = Group;

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var menu_1 = __webpack_require__(13);
var icon_1 = __webpack_require__(7);
/**
 * Nav.SubNav
 * @description 继承自 `Menu.SubMenu` 的能力请查看 `Menu.SubMenu` 文档
 */
var SubNav = /** @class */function (_super) {
    tslib_1.__extends(SubNav, _super);
    function SubNav() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SubNav.prototype.render = function () {
        var _a;
        var _b = this.context,
            prefix = _b.prefix,
            iconOnly = _b.iconOnly,
            iconOnlyWidth = _b.iconOnlyWidth,
            hasArrow = _b.hasArrow,
            noIcon = _b.noIcon,
            mode = _b.mode;
        var _c = this.props,
            className = _c.className,
            icon = _c.icon,
            label = _c.label,
            children = _c.children,
            level = _c.level,
            others = tslib_1.__rest(_c, ["className", "icon", "label", "children", "level"]);
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "nav-sub-nav-item")] = true, _a["".concat(prefix, "nav-popup")] = mode === 'popup', _a[className] = !!className, _a));
        var iconEl = typeof icon === 'string' ? react_1.default.createElement(icon_1.default, { className: "".concat(prefix, "nav-icon"), type: icon }) : icon;
        // 这里是为 iconOnly 模式下，添加默认的展开按钮
        // 只有在 inline 模式下 或 popup模式的第一层级，才需要添加默认的按钮
        if (iconOnly && hasArrow && (mode === 'inline' || level === 1 && mode === 'popup')) {
            iconEl = react_1.default.createElement(icon_1.default, { className: "".concat(prefix, "nav-icon-only-arrow"), type: mode === 'popup' ? 'arrow-right' : 'arrow-down' });
        }
        var newLabel = [iconEl ? (0, react_1.cloneElement)(iconEl, { key: 'icon' }) : null];
        var showLabel = !iconOnly || iconOnly && !iconOnlyWidth;
        if (showLabel) {
            newLabel.push(react_1.default.createElement("span", { key: "label" }, label));
        }
        var title;
        if (typeof label === 'string') {
            title = label;
        }
        return react_1.default.createElement(menu_1.default.SubMenu, tslib_1.__assign({ className: cls, label: newLabel, level: level, title: title, noIcon: noIcon }, others), children);
    };
    SubNav.menuChildType = 'submenu';
    SubNav.propTypes = {
        /**
         * 自定义类名
         */
        className: prop_types_1.default.string,
        /**
         * 自定义图标，可以使用 Icon 的 type，也可以使用组件 `<Icon type="your type" />`
         */
        icon: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.node]),
        /**
         * 标签内容
         */
        label: prop_types_1.default.node,
        /**
         * 是否可选
         */
        selectable: prop_types_1.default.bool,
        /**
         * 导航项和子导航
         */
        children: prop_types_1.default.node,
        /**
         * 是否需要提示当前项可展开的 icon，默认是有的
         */
        noIcon: prop_types_1.default.bool
    };
    SubNav.defaultProps = {
        selectable: false
    };
    SubNav.contextTypes = {
        prefix: prop_types_1.default.string,
        mode: prop_types_1.default.string,
        iconOnly: prop_types_1.default.bool,
        iconOnlyWidth: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        hasArrow: prop_types_1.default.bool
    };
    return SubNav;
}(react_1.Component);
exports.default = SubNav;

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var menu_1 = __webpack_require__(13);
var icon_1 = __webpack_require__(7);
/**
 * Nav.PopupItem
 * @description 继承自 `Menu.PopupItem` 的能力请查看 `Menu.PopupItem` 文档
 */
var PopupItem = /** @class */function (_super) {
    tslib_1.__extends(PopupItem, _super);
    function PopupItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PopupItem.prototype.render = function () {
        var _a;
        var _b = this.context,
            prefix = _b.prefix,
            iconOnly = _b.iconOnly,
            iconOnlyWidth = _b.iconOnlyWidth,
            hasArrow = _b.hasArrow;
        var _c = this.props,
            className = _c.className,
            icon = _c.icon,
            label = _c.label,
            children = _c.children,
            others = tslib_1.__rest(_c, ["className", "icon", "label", "children"]);
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "nav-popup-item")] = true, _a[className] = !!className, _a));
        var iconEl = typeof icon === 'string' ? react_1.default.createElement(icon_1.default, { className: "".concat(prefix, "nav-icon"), type: icon }) : icon;
        if (iconOnly) {
            if (hasArrow) {
                iconEl = react_1.default.createElement(icon_1.default, { className: "".concat(prefix, "nav-icon-only-arrow"), type: "arrow-right" });
            }
        }
        var newLabel = [iconEl ? (0, react_1.cloneElement)(iconEl, { key: 'icon' }) : null];
        var showLabel = !iconOnly || iconOnly && !iconOnlyWidth;
        if (showLabel) {
            newLabel.push(react_1.default.createElement("span", { key: "label" }, label));
        }
        return react_1.default.createElement(menu_1.default.PopupItem, tslib_1.__assign({ className: cls, label: newLabel }, others), children);
    };
    PopupItem.menuChildType = 'submenu';
    PopupItem.propTypes = {
        /**
         * 自定义类名
         */
        className: prop_types_1.default.string,
        /**
         * 自定义图标，可以使用 Icon 的 type, 也可以使用组件 `<Icon type="icon type" />`
         */
        icon: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.node]),
        /**
         * 标签内容
         */
        label: prop_types_1.default.node,
        /**
         * 弹出内容
         */
        children: prop_types_1.default.node
    };
    PopupItem.contextTypes = {
        prefix: prop_types_1.default.string,
        iconOnly: prop_types_1.default.bool,
        iconOnlyWidth: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        hasArrow: prop_types_1.default.bool
    };
    return PopupItem;
}(react_1.Component);
exports.default = PopupItem;

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var config_provider_1 = __webpack_require__(5);
var number_picker_1 = __webpack_require__(377);
var util_1 = __webpack_require__(4);
exports.default = config_provider_1.default.config(number_picker_1.default, {
    transform: /* istanbul ignore next */function transform( /* istanbul ignore next */props) {
        if ('onDisabled' in props && typeof props.onDisabled === 'function') {
            util_1.log.warning('[NumberPicker]: onDisabled is deleted!');
        }
        if ('state' in props && props.state === 'success') {
            delete props.state;
        }
        return props;
    },
    exportNames: ['getInputNode']
});

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var big_js_1 = __webpack_require__(378);
var react_lifecycles_compat_1 = __webpack_require__(6);
var icon_1 = __webpack_require__(7);
var button_1 = __webpack_require__(14);
var input_1 = __webpack_require__(15);
var util_1 = __webpack_require__(4);
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
var MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -Math.pow(2, 53) + 1;
var isNil = util_1.obj.isNil;
/** NumberPicker */
var NumberPicker = /** @class */function (_super) {
    tslib_1.__extends(NumberPicker, _super);
    function NumberPicker(props) {
        var _this = _super.call(this, props) || this;
        var defaultValue = props.defaultValue,
            stringMode = props.stringMode;
        var value;
        if ('value' in props) {
            value = props.value;
        } else {
            value = defaultValue;
        }
        value = value === undefined || value === null ? '' : stringMode ? "".concat(value) : value;
        _this.state = {
            value: value,
            hasFocused: false,
            onlyDisplay: false,
            displayValue: value,
            max: stringMode ? Infinity : MAX_SAFE_INTEGER,
            min: stringMode ? -Infinity : MIN_SAFE_INTEGER
        };
        return _this;
    }
    NumberPicker.getDerivedStateFromProps = function (nextProps, prevState) {
        // 用户键入非法值后render逻辑，未触发onChange，业务组件无感知，不强制受控value
        if (prevState.onlyDisplay) {
            return {
                value: prevState.value,
                displayValue: prevState.displayValue,
                onlyDisplay: false
            };
        }
        var state = {};
        var value = nextProps.value,
            stringMode = nextProps.stringMode;
        // 一般受控render逻辑
        if ('value' in nextProps && "".concat(nextProps.value) !== "".concat(prevState.value)) {
            var newValue = value === undefined || value === null ? '' : stringMode ? "".concat(value) : value;
            state.value = newValue;
            // 因为 Number('') === 0，所以会导致value=0赋值不生效
            if (prevState.displayValue === '' || Number(prevState.displayValue) !== nextProps.value) {
                state.displayValue = newValue;
            }
        }
        // 如果是undefined或null，应该不限制最大最小值
        var min = nextProps.min,
            max = nextProps.max;
        if ('min' in nextProps && min !== prevState.min) {
            state.min = !isNil(min) ? min : stringMode ? -Infinity : MIN_SAFE_INTEGER;
        }
        if ('max' in nextProps && max !== prevState.max) {
            state.max = !isNil(max) ? max : stringMode ? Infinity : MAX_SAFE_INTEGER;
        }
        if (Object.keys(state).length) {
            return state;
        }
        return null;
    };
    NumberPicker.prototype.isGreaterThan = function (v1, v2) {
        var stringMode = this.props.stringMode;
        if (stringMode) {
            try {
                return (0, big_js_1.default)(v1).gt(v2);
            } catch (e) {
                // big.js 遇到 Infinity 和 NaN 异常回退到 Number
                return Number(v1) > Number(v2);
            }
        }
        return Number(v1) > Number(v2);
    };
    NumberPicker.prototype.correctBoundary = function (value) {
        var _a = this.state,
            max = _a.max,
            min = _a.min;
        return this.isGreaterThan(min, value) ? min : this.isGreaterThan(value, max) ? max : value;
    };
    NumberPicker.prototype.setFocus = function (status) {
        var format = this.props.format;
        // Only trigger `setState` if `format` is settled to avoid unnecessary rendering
        if (typeof format === 'function') {
            this.setState({
                hasFocused: status
            });
        }
    };
    NumberPicker.prototype.onFocus = function (e) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var onFocus = this.props.onFocus;
        this.setFocus(true);
        onFocus && onFocus.apply(void 0, tslib_1.__spreadArray([e], tslib_1.__read(args), false));
    };
    NumberPicker.prototype.onBlur = function (e) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _a = this.props,
            editable = _a.editable,
            stringMode = _a.stringMode;
        var displayValue = "".concat(this.state.displayValue);
        // 展示值合法但超出边界时，额外在Blur时触发onChange
        // 展示值非法时，回退前一个有效值
        if (editable === true && !isNaN(displayValue) && !this.withinMinMax(displayValue)) {
            var valueCorrected = this.correctValue(displayValue);
            valueCorrected = stringMode ? (0, big_js_1.default)(valueCorrected).toFixed(this.getPrecision()) : valueCorrected;
            if (this.state.value !== valueCorrected) {
                this.setValue({ value: valueCorrected, e: e });
            }
            this.setDisplayValue({ displayValue: valueCorrected });
        } else {
            this.setDisplayValue({ displayValue: this.state.value });
        }
        this.setFocus(false);
        var onBlur = this.props.onBlur;
        onBlur && onBlur.apply(void 0, tslib_1.__spreadArray([e], tslib_1.__read(args), false));
    };
    NumberPicker.prototype.withinMinMax = function (value) {
        var _a = this.state,
            max = _a.max,
            min = _a.min;
        if (isNaN(value) || this.isGreaterThan(value, max) || this.isGreaterThan(min, value)) return false;
        return true;
    };
    NumberPicker.prototype.withinMin = function (value) {
        var min = this.state.min;
        if (isNaN(value) || this.isGreaterThan(min, value)) return false;
        return true;
    };
    NumberPicker.prototype.setDisplayValue = function (_a) {
        var displayValue = _a.displayValue,
            _b = _a.onlyDisplay,
            onlyDisplay = _b === void 0 ? false : _b;
        this.setState({ displayValue: displayValue, onlyDisplay: onlyDisplay });
    };
    NumberPicker.prototype.getDisplayValue = function () {
        var _a = this.state,
            displayValue = _a.displayValue,
            hasFocused = _a.hasFocused;
        var format = this.props.format;
        return typeof format === 'function' && !hasFocused ? format(displayValue) : // 避免原生input将number类型的-0，渲染为0
        typeof displayValue === 'number' && 1 / displayValue === -Infinity ? '-0' : displayValue;
    };
    /**
     * 输入时判断是否要触发onChange
     * 正常触发: 合法数字 (eg: -0 -0. 0.1)；超出最大值
     * 不触发: 1. 非数字（eg: - ）, 2. 小于最小值(输入需要过程由小变大)
     */
    NumberPicker.prototype.shouldFireOnChange = function (value) {
        if (isNaN(value) || !this.withinMin(value)) {
            return false;
        }
        return true;
    };
    NumberPicker.prototype.onChange = function (value, e) {
        // ignore space & Compatible Chinese Input Method
        value = value.replace('。', '.').trim();
        // 过滤非数字
        value = value.replace(/[^-.\d]/g, '');
        var onlyDisplay = false;
        if (this.props.editable === true && this.shouldFireOnChange(value)) {
            var valueCorrected = this.correctValue(value);
            if (this.state.value !== valueCorrected) {
                this.setValue({ value: valueCorrected, e: e });
            }
            if (typeof this.props.max !== 'undefined' && this.isGreaterThan(value, this.state.max)) {
                value = String(valueCorrected);
            }
        } else {
            onlyDisplay = true;
        }
        // 【不应支持】如果输入为满足精度要求的纯数字，底层input.value设置为数字类型而非string
        // if (`${valueCorrected}` === value) value = valueCorrected;
        this.setDisplayValue({ displayValue: value, onlyDisplay: onlyDisplay });
    };
    NumberPicker.prototype.correctValue = function (value) {
        var val = value;
        // take care of isNaN('')=false
        if (val !== '') {
            // 精度订正：直接cut，不四舍五入
            var precisionSet = this.getPrecision();
            var precisionCurrent = value.length - value.indexOf('.') - 1;
            var dotIndex = value.indexOf('.');
            // precision === 0 should cut '.' for stringMode
            var cutPosition = precisionSet !== 0 ? dotIndex + 1 + precisionSet : dotIndex + precisionSet;
            if (dotIndex > -1 && precisionCurrent > precisionSet) val = val.substr(0, cutPosition);
            // 边界订正：
            val = this.correctBoundary(val);
            val = this.props.stringMode ? (0, big_js_1.default)(val).toFixed() : Number(val);
        }
        if (isNaN(val)) val = this.state.value;
        if ("".concat(val) !== "".concat(value)) {
            // .0* 到 .x0* 不该触发onCorrect
            if (!/\.[0-9]*0+$/g.test(value)) {
                this.props.onCorrect({
                    currentValue: val,
                    oldValue: value
                });
            }
        }
        return val;
    };
    NumberPicker.prototype.setValue = function (_a) {
        var value = _a.value,
            e = _a.e,
            triggerType = _a.triggerType;
        if (!('value' in this.props) || value === this.props.value) {
            this.setState({
                value: value
            });
        }
        this.props.onChange(isNaN(value) || value === '' ? undefined : value, tslib_1.__assign(tslib_1.__assign({}, e), { triggerType: triggerType }));
    };
    NumberPicker.prototype.getPrecision = function () {
        var stepString = this.props.step.toString();
        if (stepString.indexOf('e-') >= 0) {
            return parseInt(stepString.slice(stepString.indexOf('e-')), 10);
        }
        var precision = 0;
        if (stepString.indexOf('.') >= 0) {
            precision = stepString.length - stepString.indexOf('.') - 1;
        }
        return Math.max(precision, this.props.precision);
    };
    NumberPicker.prototype.getPrecisionFactor = function () {
        var precision = this.getPrecision();
        return Math.pow(10, precision);
    };
    NumberPicker.prototype.onKeyDown = function (e) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (e.keyCode === 38) {
            this.up(false, e);
        } else if (e.keyCode === 40) {
            this.down(false, e);
        }
        (_a = this.props).onKeyDown.apply(_a, tslib_1.__spreadArray([e], tslib_1.__read(args), false));
    };
    NumberPicker.prototype.up = function (disabled, e) {
        this.step('up', disabled, e);
    };
    NumberPicker.prototype.down = function (disabled, e) {
        this.step('down', disabled, e);
    };
    NumberPicker.prototype.step = function (type, disabled, e) {
        if (e) {
            e.preventDefault();
        }
        var onDisabled = this.props.onDisabled;
        if (disabled) {
            return onDisabled(e);
        }
        var value = this.state.value;
        // 受控下，可能强制回填非法值
        if (isNaN(value)) {
            return;
        }
        if (value === '' && !this.props.stringMode) {
            value = 0;
        }
        var val = this["".concat(type, "Step")](value);
        val = this.correctBoundary(val);
        // 受控下，显示的值应为受控value
        if (!('value' in this.props)) {
            this.setDisplayValue({ displayValue: val });
        }
        this.setValue({ value: val, e: e, triggerType: type });
    };
    NumberPicker.prototype.upStep = function (val) {
        var _a = this.props,
            step = _a.step,
            stringMode = _a.stringMode;
        var precisionFactor = this.getPrecisionFactor();
        if (typeof val === 'number' && !stringMode) {
            var result = (precisionFactor * val + precisionFactor * step) / precisionFactor;
            return this.hackChrome(result);
        }
        return (0, big_js_1.default)(val || '0').plus(step).toFixed(this.getPrecision());
    };
    NumberPicker.prototype.downStep = function (val) {
        var _a = this.props,
            step = _a.step,
            stringMode = _a.stringMode;
        var precisionFactor = this.getPrecisionFactor();
        if (typeof val === 'number' && !stringMode) {
            var result = (precisionFactor * val - precisionFactor * step) / precisionFactor;
            return this.hackChrome(result);
        }
        return (0, big_js_1.default)(val || '0').minus(step).toFixed(this.getPrecision());
    };
    /**
     * fix bug in chrome browser
     * 0.28 + 0.01 = 0.29000000000000004
     * 0.29 - 0.01 = 0.27999999999999997
     * @param {Number} value value
     */
    NumberPicker.prototype.hackChrome = function (value) {
        var precision = this.getPrecision();
        if (precision > 0) {
            return Number(Number(value).toFixed(precision));
        }
        return value;
    };
    NumberPicker.prototype.focus = function () {
        this.inputRef.getInstance().focus();
    };
    NumberPicker.prototype.saveInputRef = function (ref) {
        this.inputRef = ref;
    };
    NumberPicker.prototype.getInputNode = function () {
        return this.inputRef;
    };
    NumberPicker.prototype.handleMouseDown = function (e) {
        e.preventDefault();
    };
    NumberPicker.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            device = _c.device,
            prefix = _c.prefix,
            rtl = _c.rtl,
            disabled = _c.disabled,
            style = _c.style,
            className = _c.className,
            size = _c.size,
            autoFocus = _c.autoFocus,
            editable = _c.editable,
            state = _c.state,
            label = _c.label,
            _d = _c.upBtnProps,
            upBtnProps = _d === void 0 ? {} : _d,
            _e = _c.downBtnProps,
            downBtnProps = _e === void 0 ? {} : _e,
            innerAfter = _c.innerAfter,
            isPreview = _c.isPreview,
            renderPreview = _c.renderPreview,
            hasTrigger = _c.hasTrigger,
            alwaysShowTrigger = _c.alwaysShowTrigger;
        var _f = this.state,
            max = _f.max,
            min = _f.min;
        var type = device === 'phone' || this.props.type === 'inline' ? 'inline' : 'normal';
        var prefixCls = "".concat(prefix, "number-picker");
        var cls = (0, classnames_1.default)((_a = {}, _a[prefixCls] = true, _a["".concat(prefixCls, "-").concat(type)] = type, _a["".concat(prefix).concat(size)] = true, _a["".concat(prefixCls, "-show-trigger")] = alwaysShowTrigger, _a["".concat(prefixCls, "-no-trigger")] = !hasTrigger, _a["".concat(prefix, "disabled")] = disabled, _a[className] = className, _a));
        var upDisabled = false;
        var downDisabled = false;
        var value = this.state.value;
        if (!isNaN(value)) {
            if (!this.isGreaterThan(max, value)) {
                upDisabled = true;
            }
            if (this.isGreaterThan(min, value) || min === value) {
                downDisabled = true;
            }
        }
        var extra = null,
            innerAfterClassName = null,
            addonBefore = null,
            addonAfter = null;
        if (type === 'normal') {
            extra = react_1.default.createElement("span", { className: "".concat(prefixCls, "-handler") }, react_1.default.createElement(button_1.default, tslib_1.__assign({}, upBtnProps, { onMouseDown: this.handleMouseDown, disabled: disabled, className: "".concat(upBtnProps.className || '', " ").concat(upDisabled ? 'disabled' : ''), onClick: this.up.bind(this, upDisabled), tabIndex: -1 }), react_1.default.createElement(icon_1.default, { type: "arrow-up", className: "".concat(prefixCls, "-up-icon") })), react_1.default.createElement(button_1.default, tslib_1.__assign({}, downBtnProps, { onMouseDown: this.handleMouseDown, disabled: disabled, className: "".concat(downBtnProps.className || '', " ").concat(downDisabled ? 'disabled' : ''), onClick: this.down.bind(this, downDisabled), tabIndex: -1 }), react_1.default.createElement(icon_1.default, { type: "arrow-down", className: "".concat(prefixCls, "-down-icon") })));
        } else {
            addonBefore = react_1.default.createElement(button_1.default, tslib_1.__assign({}, downBtnProps, { size: size, disabled: disabled, className: "".concat(downBtnProps.className || '', " ").concat(downDisabled ? 'disabled' : ''), onClick: this.down.bind(this, downDisabled), tabIndex: -1 }), react_1.default.createElement(icon_1.default, { type: "minus", className: "".concat(prefixCls, "-minus-icon") }));
            addonAfter = react_1.default.createElement(button_1.default, tslib_1.__assign({}, upBtnProps, { size: size, disabled: disabled, className: "".concat(upBtnProps.className || '', " ").concat(upDisabled ? 'disabled' : ''), onClick: this.up.bind(this, upDisabled), tabIndex: -1 }), react_1.default.createElement(icon_1.default, { type: "add", className: "".concat(prefixCls, "-add-icon") }));
        }
        var others = util_1.obj.pickOthers(NumberPicker.propTypes, this.props);
        var dataAttrs = util_1.obj.pickAttrsWith(this.props, 'data-');
        var previewCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "form-preview")] = true, _b[className] = !!className, _b));
        if (isPreview) {
            if (typeof renderPreview === 'function') {
                return react_1.default.createElement("div", tslib_1.__assign({}, others, { style: style, className: previewCls }), renderPreview(this.getDisplayValue(), this.props));
            }
            return react_1.default.createElement("p", tslib_1.__assign({}, others, { style: { style: style }, className: previewCls }), this.getDisplayValue(), "\xA0", innerAfter);
        }
        return react_1.default.createElement("span", tslib_1.__assign({ className: cls, style: style, dir: rtl ? 'rtl' : undefined }, dataAttrs), react_1.default.createElement(input_1.default, tslib_1.__assign({}, others, { hasClear: false, "aria-valuemax": max, "aria-valuemin": min, state: state === 'error' ? 'error' : null, onBlur: this.onBlur.bind(this), onFocus: this.onFocus.bind(this), onKeyDown: this.onKeyDown.bind(this), autoFocus: autoFocus, readOnly: !editable, value: this.getDisplayValue(), disabled: disabled, size: size, onChange: this.onChange.bind(this), ref: this.saveInputRef.bind(this), label: label, innerAfter: innerAfter, extra: hasTrigger ? extra : null, addonBefore: addonBefore, addonAfter: addonAfter, composition: true })));
    };
    NumberPicker.propTypes = {
        /**
         * 样式前缀
         */
        prefix: prop_types_1.default.string,
        /**
         * 设置类型(当 device 为 phone 时，NumberPicker 的类型强制为 normal，不可通过 type 修改)
         * @enumdesc 普通, 内联
         */
        type: prop_types_1.default.oneOf(['normal', 'inline']),
        /**
         * 大小
         */
        size: prop_types_1.default.oneOf(['large', 'medium', 'small']),
        /**
         * 当前值
         */
        value: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        /**
         * 默认值
         */
        defaultValue: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 步长
         */
        step: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        /**
         * 保留小数点后位数
         */
        precision: prop_types_1.default.number,
        /**
         * 用户是否可以输入
         */
        editable: prop_types_1.default.bool,
        /**
         * 自动焦点
         */
        autoFocus: prop_types_1.default.bool,
        /**
         * 数值被改变的事件
         * @param {Number|String} value 数据
         * @param {Event} e DOM事件对象
         */
        onChange: prop_types_1.default.func,
        /**
         * 键盘按下
         * @param {Event} e DOM事件对象
         */
        onKeyDown: prop_types_1.default.func,
        /**
         * 焦点获得
         * @param {Event} e DOM事件对象
         */
        onFocus: prop_types_1.default.func,
        /**
         * 焦点失去
         * @param {Event} e DOM事件对象
         */
        onBlur: prop_types_1.default.func,
        /**
         * 数值订正后的回调
         * @param {Object} obj {currentValue,oldValue:String}
         */
        onCorrect: prop_types_1.default.func,
        onDisabled: prop_types_1.default.func, // 兼容0.x onDisabled
        /**
         * 最大值
         */
        max: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        /**
         * 最小值
         */
        min: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        /**
         * 自定义class
         */
        className: prop_types_1.default.string,
        /**
         * 自定义内联样式
         */
        style: prop_types_1.default.object,
        state: prop_types_1.default.oneOf(['error']),
        /**
         * 格式化当前值
         * @param {Number} value
         * @return {String|Number}
         */
        format: prop_types_1.default.func,
        /**
         * 增加按钮的props
         */
        upBtnProps: prop_types_1.default.object,
        /**
         * 减少按钮的props
         */
        downBtnProps: prop_types_1.default.object,
        /**
         * 内联 左侧label
         */
        label: prop_types_1.default.node,
        /**
         * 内联 右侧附加内容
         */
        innerAfter: prop_types_1.default.node,
        rtl: prop_types_1.default.bool,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {Number|String} value 当前值
         * @param {Object} props 传入的组件参数
         * @returns {reactNode} Element 渲染内容
         */
        renderPreview: prop_types_1.default.func,
        /**
         * 预设屏幕宽度
         */
        device: prop_types_1.default.oneOf(['phone', 'tablet', 'desktop']),
        /**
         * 是否展示点击按钮
         */
        hasTrigger: prop_types_1.default.bool,
        /**
         * 是否一直显示点击按钮(无须hover)
         */
        alwaysShowTrigger: prop_types_1.default.bool,
        /**
         * 开启大数支持，输入输出均为string类型
         * @version 1.24
         */
        stringMode: prop_types_1.default.bool
    };
    NumberPicker.defaultProps = {
        prefix: 'next-',
        // max: MAX_SAFE_INTEGER,
        // min: MIN_SAFE_INTEGER,
        type: 'normal',
        size: 'medium',
        step: 1,
        style: {},
        precision: 0,
        editable: true,
        onChange: util_1.func.noop,
        onKeyDown: util_1.func.noop,
        onBlur: util_1.func.noop,
        onCorrect: util_1.func.noop,
        onDisabled: util_1.func.noop,
        hasTrigger: true,
        alwaysShowTrigger: false,
        stringMode: false
    };
    return NumberPicker;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(NumberPicker);

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*
 *  big.js v6.2.1
 *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.
 *  Copyright (c) 2022 Michael Mclaughlin
 *  https://github.com/MikeMcl/big.js/LICENCE.md
 */
;(function (GLOBAL) {
  'use strict';
  var Big,


/************************************** EDITABLE DEFAULTS *****************************************/


    // The default values below must be integers within the stated ranges.

    /*
     * The maximum number of decimal places (DP) of the results of operations involving division:
     * div and sqrt, and pow with negative exponents.
     */
    DP = 20,            // 0 to MAX_DP

    /*
     * The rounding mode (RM) used when rounding to the above decimal places.
     *
     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)
     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)
     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)
     *  3  Away from zero.                                  (ROUND_UP)
     */
    RM = 1,             // 0, 1, 2 or 3

    // The maximum value of DP and Big.DP.
    MAX_DP = 1E6,       // 0 to 1000000

    // The maximum magnitude of the exponent argument to the pow method.
    MAX_POWER = 1E6,    // 1 to 1000000

    /*
     * The negative exponent (NE) at and beneath which toString returns exponential notation.
     * (JavaScript numbers: -7)
     * -1000000 is the minimum recommended exponent value of a Big.
     */
    NE = -7,            // 0 to -1000000

    /*
     * The positive exponent (PE) at and above which toString returns exponential notation.
     * (JavaScript numbers: 21)
     * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.
     */
    PE = 21,            // 0 to 1000000

    /*
     * When true, an error will be thrown if a primitive number is passed to the Big constructor,
     * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a
     * primitive number without a loss of precision.
     */
    STRICT = false,     // true or false


/**************************************************************************************************/


    // Error messages.
    NAME = '[big.js] ',
    INVALID = NAME + 'Invalid ',
    INVALID_DP = INVALID + 'decimal places',
    INVALID_RM = INVALID + 'rounding mode',
    DIV_BY_ZERO = NAME + 'Division by zero',

    // The shared prototype object.
    P = {},
    UNDEFINED = void 0,
    NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;


  /*
   * Create and return a Big constructor.
   */
  function _Big_() {

    /*
     * The Big constructor and exported function.
     * Create and return a new instance of a Big number object.
     *
     * n {number|string|Big} A numeric value.
     */
    function Big(n) {
      var x = this;

      // Enable constructor usage without new.
      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);

      // Duplicate.
      if (n instanceof Big) {
        x.s = n.s;
        x.e = n.e;
        x.c = n.c.slice();
      } else {
        if (typeof n !== 'string') {
          if (Big.strict === true && typeof n !== 'bigint') {
            throw TypeError(INVALID + 'value');
          }

          // Minus zero?
          n = n === 0 && 1 / n < 0 ? '-0' : String(n);
        }

        parse(x, n);
      }

      // Retain a reference to this Big constructor.
      // Shadow Big.prototype.constructor which points to Object.
      x.constructor = Big;
    }

    Big.prototype = P;
    Big.DP = DP;
    Big.RM = RM;
    Big.NE = NE;
    Big.PE = PE;
    Big.strict = STRICT;
    Big.roundDown = 0;
    Big.roundHalfUp = 1;
    Big.roundHalfEven = 2;
    Big.roundUp = 3;

    return Big;
  }


  /*
   * Parse the number or string value passed to a Big constructor.
   *
   * x {Big} A Big number instance.
   * n {number|string} A numeric value.
   */
  function parse(x, n) {
    var e, i, nl;

    if (!NUMERIC.test(n)) {
      throw Error(INVALID + 'number');
    }

    // Determine sign.
    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;

    // Decimal point?
    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');

    // Exponential form?
    if ((i = n.search(/e/i)) > 0) {

      // Determine exponent.
      if (e < 0) e = i;
      e += +n.slice(i + 1);
      n = n.substring(0, i);
    } else if (e < 0) {

      // Integer.
      e = n.length;
    }

    nl = n.length;

    // Determine leading zeros.
    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;

    if (i == nl) {

      // Zero.
      x.c = [x.e = 0];
    } else {

      // Determine trailing zeros.
      for (; nl > 0 && n.charAt(--nl) == '0';);
      x.e = e - i - 1;
      x.c = [];

      // Convert string to array of digits without leading/trailing zeros.
      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);
    }

    return x;
  }


  /*
   * Round Big x to a maximum of sd significant digits using rounding mode rm.
   *
   * x {Big} The Big to round.
   * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.
   * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   * [more] {boolean} Whether the result of division was truncated.
   */
  function round(x, sd, rm, more) {
    var xc = x.c;

    if (rm === UNDEFINED) rm = x.constructor.RM;
    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
      throw Error(INVALID_RM);
    }

    if (sd < 1) {
      more =
        rm === 3 && (more || !!xc[0]) || sd === 0 && (
        rm === 1 && xc[0] >= 5 ||
        rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))
      );

      xc.length = 1;

      if (more) {

        // 1, 0.1, 0.01, 0.001, 0.0001 etc.
        x.e = x.e - sd + 1;
        xc[0] = 1;
      } else {

        // Zero.
        xc[0] = x.e = 0;
      }
    } else if (sd < xc.length) {

      // xc[sd] is the digit after the digit that may be rounded up.
      more =
        rm === 1 && xc[sd] >= 5 ||
        rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&
          (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||
        rm === 3 && (more || !!xc[0]);

      // Remove any digits after the required precision.
      xc.length = sd;

      // Round up?
      if (more) {

        // Rounding up may mean the previous digit has to be rounded up.
        for (; ++xc[--sd] > 9;) {
          xc[sd] = 0;
          if (sd === 0) {
            ++x.e;
            xc.unshift(1);
            break;
          }
        }
      }

      // Remove trailing zeros.
      for (sd = xc.length; !xc[--sd];) xc.pop();
    }

    return x;
  }


  /*
   * Return a string representing the value of Big x in normal or exponential notation.
   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.
   */
  function stringify(x, doExponential, isNonzero) {
    var e = x.e,
      s = x.c.join(''),
      n = s.length;

    // Exponential notation?
    if (doExponential) {
      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;

    // Normal notation.
    } else if (e < 0) {
      for (; ++e;) s = '0' + s;
      s = '0.' + s;
    } else if (e > 0) {
      if (++e > n) {
        for (e -= n; e--;) s += '0';
      } else if (e < n) {
        s = s.slice(0, e) + '.' + s.slice(e);
      }
    } else if (n > 1) {
      s = s.charAt(0) + '.' + s.slice(1);
    }

    return x.s < 0 && isNonzero ? '-' + s : s;
  }


  // Prototype/instance methods


  /*
   * Return a new Big whose value is the absolute value of this Big.
   */
  P.abs = function () {
    var x = new this.constructor(this);
    x.s = 1;
    return x;
  };


  /*
   * Return 1 if the value of this Big is greater than the value of Big y,
   *       -1 if the value of this Big is less than the value of Big y, or
   *        0 if they have the same value.
   */
  P.cmp = function (y) {
    var isneg,
      x = this,
      xc = x.c,
      yc = (y = new x.constructor(y)).c,
      i = x.s,
      j = y.s,
      k = x.e,
      l = y.e;

    // Either zero?
    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;

    // Signs differ?
    if (i != j) return i;

    isneg = i < 0;

    // Compare exponents.
    if (k != l) return k > l ^ isneg ? 1 : -1;

    j = (k = xc.length) < (l = yc.length) ? k : l;

    // Compare digit by digit.
    for (i = -1; ++i < j;) {
      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
    }

    // Compare lengths.
    return k == l ? 0 : k > l ^ isneg ? 1 : -1;
  };


  /*
   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,
   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
   */
  P.div = function (y) {
    var x = this,
      Big = x.constructor,
      a = x.c,                  // dividend
      b = (y = new Big(y)).c,   // divisor
      k = x.s == y.s ? 1 : -1,
      dp = Big.DP;

    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }

    // Divisor is zero?
    if (!b[0]) {
      throw Error(DIV_BY_ZERO);
    }

    // Dividend is 0? Return +-0.
    if (!a[0]) {
      y.s = k;
      y.c = [y.e = 0];
      return y;
    }

    var bl, bt, n, cmp, ri,
      bz = b.slice(),
      ai = bl = b.length,
      al = a.length,
      r = a.slice(0, bl),   // remainder
      rl = r.length,
      q = y,                // quotient
      qc = q.c = [],
      qi = 0,
      p = dp + (q.e = x.e - y.e) + 1;    // precision of the result

    q.s = k;
    k = p < 0 ? 0 : p;

    // Create version of divisor with leading zero.
    bz.unshift(0);

    // Add zeros to make remainder as long as divisor.
    for (; rl++ < bl;) r.push(0);

    do {

      // n is how many times the divisor goes into current remainder.
      for (n = 0; n < 10; n++) {

        // Compare divisor and remainder.
        if (bl != (rl = r.length)) {
          cmp = bl > rl ? 1 : -1;
        } else {
          for (ri = -1, cmp = 0; ++ri < bl;) {
            if (b[ri] != r[ri]) {
              cmp = b[ri] > r[ri] ? 1 : -1;
              break;
            }
          }
        }

        // If divisor < remainder, subtract divisor from remainder.
        if (cmp < 0) {

          // Remainder can't be more than 1 digit longer than divisor.
          // Equalise lengths using divisor with extra leading zero?
          for (bt = rl == bl ? b : bz; rl;) {
            if (r[--rl] < bt[rl]) {
              ri = rl;
              for (; ri && !r[--ri];) r[ri] = 9;
              --r[ri];
              r[rl] += 10;
            }
            r[rl] -= bt[rl];
          }

          for (; !r[0];) r.shift();
        } else {
          break;
        }
      }

      // Add the digit n to the result array.
      qc[qi++] = cmp ? n : ++n;

      // Update the remainder.
      if (r[0] && cmp) r[rl] = a[ai] || 0;
      else r = [a[ai]];

    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);

    // Leading zero? Do not remove if result is simply zero (qi == 1).
    if (!qc[0] && qi != 1) {

      // There can't be more than one zero.
      qc.shift();
      q.e--;
      p--;
    }

    // Round?
    if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);

    return q;
  };


  /*
   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.
   */
  P.eq = function (y) {
    return this.cmp(y) === 0;
  };


  /*
   * Return true if the value of this Big is greater than the value of Big y, otherwise return
   * false.
   */
  P.gt = function (y) {
    return this.cmp(y) > 0;
  };


  /*
   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise
   * return false.
   */
  P.gte = function (y) {
    return this.cmp(y) > -1;
  };


  /*
   * Return true if the value of this Big is less than the value of Big y, otherwise return false.
   */
  P.lt = function (y) {
    return this.cmp(y) < 0;
  };


  /*
   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise
   * return false.
   */
  P.lte = function (y) {
    return this.cmp(y) < 1;
  };


  /*
   * Return a new Big whose value is the value of this Big minus the value of Big y.
   */
  P.minus = P.sub = function (y) {
    var i, j, t, xlty,
      x = this,
      Big = x.constructor,
      a = x.s,
      b = (y = new Big(y)).s;

    // Signs differ?
    if (a != b) {
      y.s = -b;
      return x.plus(y);
    }

    var xc = x.c.slice(),
      xe = x.e,
      yc = y.c,
      ye = y.e;

    // Either zero?
    if (!xc[0] || !yc[0]) {
      if (yc[0]) {
        y.s = -b;
      } else if (xc[0]) {
        y = new Big(x);
      } else {
        y.s = 1;
      }
      return y;
    }

    // Determine which is the bigger number. Prepend zeros to equalise exponents.
    if (a = xe - ye) {

      if (xlty = a < 0) {
        a = -a;
        t = xc;
      } else {
        ye = xe;
        t = yc;
      }

      t.reverse();
      for (b = a; b--;) t.push(0);
      t.reverse();
    } else {

      // Exponents equal. Check digit by digit.
      j = ((xlty = xc.length < yc.length) ? xc : yc).length;

      for (a = b = 0; b < j; b++) {
        if (xc[b] != yc[b]) {
          xlty = xc[b] < yc[b];
          break;
        }
      }
    }

    // x < y? Point xc to the array of the bigger number.
    if (xlty) {
      t = xc;
      xc = yc;
      yc = t;
      y.s = -y.s;
    }

    /*
     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
     * needs to start at yc.length.
     */
    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;

    // Subtract yc from xc.
    for (b = i; j > a;) {
      if (xc[--j] < yc[j]) {
        for (i = j; i && !xc[--i];) xc[i] = 9;
        --xc[i];
        xc[j] += 10;
      }

      xc[j] -= yc[j];
    }

    // Remove trailing zeros.
    for (; xc[--b] === 0;) xc.pop();

    // Remove leading zeros and adjust exponent accordingly.
    for (; xc[0] === 0;) {
      xc.shift();
      --ye;
    }

    if (!xc[0]) {

      // n - n = +0
      y.s = 1;

      // Result must be zero.
      xc = [ye = 0];
    }

    y.c = xc;
    y.e = ye;

    return y;
  };


  /*
   * Return a new Big whose value is the value of this Big modulo the value of Big y.
   */
  P.mod = function (y) {
    var ygtx,
      x = this,
      Big = x.constructor,
      a = x.s,
      b = (y = new Big(y)).s;

    if (!y.c[0]) {
      throw Error(DIV_BY_ZERO);
    }

    x.s = y.s = 1;
    ygtx = y.cmp(x) == 1;
    x.s = a;
    y.s = b;

    if (ygtx) return new Big(x);

    a = Big.DP;
    b = Big.RM;
    Big.DP = Big.RM = 0;
    x = x.div(y);
    Big.DP = a;
    Big.RM = b;

    return this.minus(x.times(y));
  };
  
  
  /*
   * Return a new Big whose value is the value of this Big negated.
   */
  P.neg = function () {
    var x = new this.constructor(this);
    x.s = -x.s;
    return x;
  };


  /*
   * Return a new Big whose value is the value of this Big plus the value of Big y.
   */
  P.plus = P.add = function (y) {
    var e, k, t,
      x = this,
      Big = x.constructor;

    y = new Big(y);

    // Signs differ?
    if (x.s != y.s) {
      y.s = -y.s;
      return x.minus(y);
    }

    var xe = x.e,
      xc = x.c,
      ye = y.e,
      yc = y.c;

    // Either zero?
    if (!xc[0] || !yc[0]) {
      if (!yc[0]) {
        if (xc[0]) {
          y = new Big(x);
        } else {
          y.s = x.s;
        }
      }
      return y;
    }

    xc = xc.slice();

    // Prepend zeros to equalise exponents.
    // Note: reverse faster than unshifts.
    if (e = xe - ye) {
      if (e > 0) {
        ye = xe;
        t = yc;
      } else {
        e = -e;
        t = xc;
      }

      t.reverse();
      for (; e--;) t.push(0);
      t.reverse();
    }

    // Point xc to the longer array.
    if (xc.length - yc.length < 0) {
      t = yc;
      yc = xc;
      xc = t;
    }

    e = yc.length;

    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
    for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;

    // No need to check for zero, as +x + +y != 0 && -x + -y != 0

    if (k) {
      xc.unshift(k);
      ++ye;
    }

    // Remove trailing zeros.
    for (e = xc.length; xc[--e] === 0;) xc.pop();

    y.c = xc;
    y.e = ye;

    return y;
  };


  /*
   * Return a Big whose value is the value of this Big raised to the power n.
   * If n is negative, round to a maximum of Big.DP decimal places using rounding
   * mode Big.RM.
   *
   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
   */
  P.pow = function (n) {
    var x = this,
      one = new x.constructor('1'),
      y = one,
      isneg = n < 0;

    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
      throw Error(INVALID + 'exponent');
    }

    if (isneg) n = -n;

    for (;;) {
      if (n & 1) y = y.times(x);
      n >>= 1;
      if (!n) break;
      x = x.times(x);
    }

    return isneg ? one.div(y) : y;
  };


  /*
   * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd
   * significant digits using rounding mode rm, or Big.RM if rm is not specified.
   *
   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   */
  P.prec = function (sd, rm) {
    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
      throw Error(INVALID + 'precision');
    }
    return round(new this.constructor(this), sd, rm);
  };


  /*
   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places
   * using rounding mode rm, or Big.RM if rm is not specified.
   * If dp is negative, round to an integer which is a multiple of 10**-dp.
   * If dp is not specified, round to 0 decimal places.
   *
   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   */
  P.round = function (dp, rm) {
    if (dp === UNDEFINED) dp = 0;
    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    return round(new this.constructor(this), dp + this.e + 1, rm);
  };


  /*
   * Return a new Big whose value is the square root of the value of this Big, rounded, if
   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
   */
  P.sqrt = function () {
    var r, c, t,
      x = this,
      Big = x.constructor,
      s = x.s,
      e = x.e,
      half = new Big('0.5');

    // Zero?
    if (!x.c[0]) return new Big(x);

    // Negative?
    if (s < 0) {
      throw Error(NAME + 'No square root');
    }

    // Estimate.
    s = Math.sqrt(x + '');

    // Math.sqrt underflow/overflow?
    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.
    if (s === 0 || s === 1 / 0) {
      c = x.c.join('');
      if (!(c.length + e & 1)) c += '0';
      s = Math.sqrt(c);
      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
      r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
    } else {
      r = new Big(s + '');
    }

    e = r.e + (Big.DP += 4);

    // Newton-Raphson iteration.
    do {
      t = r;
      r = half.times(t.plus(x.div(t)));
    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));

    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);
  };


  /*
   * Return a new Big whose value is the value of this Big times the value of Big y.
   */
  P.times = P.mul = function (y) {
    var c,
      x = this,
      Big = x.constructor,
      xc = x.c,
      yc = (y = new Big(y)).c,
      a = xc.length,
      b = yc.length,
      i = x.e,
      j = y.e;

    // Determine sign of result.
    y.s = x.s == y.s ? 1 : -1;

    // Return signed 0 if either 0.
    if (!xc[0] || !yc[0]) {
      y.c = [y.e = 0];
      return y;
    }

    // Initialise exponent of result as x.e + y.e.
    y.e = i + j;

    // If array xc has fewer digits than yc, swap xc and yc, and lengths.
    if (a < b) {
      c = xc;
      xc = yc;
      yc = c;
      j = a;
      a = b;
      b = j;
    }

    // Initialise coefficient array of result with zeros.
    for (c = new Array(j = a + b); j--;) c[j] = 0;

    // Multiply.

    // i is initially xc.length.
    for (i = b; i--;) {
      b = 0;

      // a is yc.length.
      for (j = a + i; j > i;) {

        // Current sum of products at this digit position, plus carry.
        b = c[j] + yc[i] * xc[j - i - 1] + b;
        c[j--] = b % 10;

        // carry
        b = b / 10 | 0;
      }

      c[j] = b;
    }

    // Increment result exponent if there is a final carry, otherwise remove leading zero.
    if (b) ++y.e;
    else c.shift();

    // Remove trailing zeros.
    for (i = c.length; !c[--i];) c.pop();
    y.c = c;

    return y;
  };


  /*
   * Return a string representing the value of this Big in exponential notation rounded to dp fixed
   * decimal places using rounding mode rm, or Big.RM if rm is not specified.
   *
   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   */
  P.toExponential = function (dp, rm) {
    var x = this,
      n = x.c[0];

    if (dp !== UNDEFINED) {
      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
        throw Error(INVALID_DP);
      }
      x = round(new x.constructor(x), ++dp, rm);
      for (; x.c.length < dp;) x.c.push(0);
    }

    return stringify(x, true, !!n);
  };


  /*
   * Return a string representing the value of this Big in normal notation rounded to dp fixed
   * decimal places using rounding mode rm, or Big.RM if rm is not specified.
   *
   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   *
   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
   */
  P.toFixed = function (dp, rm) {
    var x = this,
      n = x.c[0];

    if (dp !== UNDEFINED) {
      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
        throw Error(INVALID_DP);
      }
      x = round(new x.constructor(x), dp + x.e + 1, rm);

      // x.e may have changed if the value is rounded up.
      for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);
    }

    return stringify(x, false, !!n);
  };


  /*
   * Return a string representing the value of this Big.
   * Return exponential notation if this Big has a positive exponent equal to or greater than
   * Big.PE, or a negative exponent equal to or less than Big.NE.
   * Omit the sign for negative zero.
   */
  P.toJSON = P.toString = function () {
    var x = this,
      Big = x.constructor;
    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);
  };


  /*
   * Return the value of this Big as a primitve number.
   */
  P.toNumber = function () {
    var n = Number(stringify(this, true, true));
    if (this.constructor.strict === true && !this.eq(n.toString())) {
      throw Error(NAME + 'Imprecise conversion');
    }
    return n;
  };


  /*
   * Return a string representing the value of this Big rounded to sd significant digits using
   * rounding mode rm, or Big.RM if rm is not specified.
   * Use exponential notation if sd is less than the number of digits necessary to represent
   * the integer part of the value in normal notation.
   *
   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
   */
  P.toPrecision = function (sd, rm) {
    var x = this,
      Big = x.constructor,
      n = x.c[0];

    if (sd !== UNDEFINED) {
      if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
        throw Error(INVALID + 'precision');
      }
      x = round(new Big(x), sd, rm);
      for (; x.c.length < sd;) x.c.push(0);
    }

    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);
  };


  /*
   * Return a string representing the value of this Big.
   * Return exponential notation if this Big has a positive exponent equal to or greater than
   * Big.PE, or a negative exponent equal to or less than Big.NE.
   * Include the sign for negative zero.
   */
  P.valueOf = function () {
    var x = this,
      Big = x.constructor;
    if (Big.strict === true) {
      throw Error(NAME + 'valueOf disallowed');
    }
    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);
  };


  // Export


  Big = _Big_();

  Big['default'] = Big.Big = Big;

  //AMD.
  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return Big; }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

  // Node and other CommonJS-like environments that support module.exports.
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = Big;

  //Browser.
  } else {
    GLOBAL.Big = Big;
  }
})(this);


/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var pagination_1 = __webpack_require__(380);
exports.default = pagination_1.default;

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var icon_1 = __webpack_require__(7);
var button_1 = __webpack_require__(14);
var input_1 = __webpack_require__(15);
var select_1 = __webpack_require__(24);
var util_1 = __webpack_require__(4);
var zh_cn_1 = __webpack_require__(9);
var Option = select_1.default.Option;
var noop = function noop() {};
function correctCurrent(currentPage, total, currentPageSize) {
    var totalPage = getTotalPage(total, currentPageSize);
    return currentPage > totalPage ? totalPage : currentPage;
}
function getTotalPage(total, currentPageSize) {
    var totalPage = Math.ceil(total / currentPageSize);
    return totalPage <= 0 ? 1 : totalPage;
}
/**
 * Pagination
 */
var Pagination = /** @class */function (_super) {
    tslib_1.__extends(Pagination, _super);
    function Pagination(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.handleJump = function (e) {
            var total = _this.props.total;
            var _a = _this.state,
                current = _a.current,
                currentPageSize = _a.currentPageSize,
                inputValue = _a.inputValue;
            var totalPage = getTotalPage(total, currentPageSize);
            var value = parseInt(inputValue, 10);
            if (isNaN(value)) {
                value = '';
            } else if (value < 1) {
                value = 1;
            } else if (value > totalPage) {
                value = totalPage;
            }
            if (value && value !== current) {
                _this.onPageItemClick(value, e);
            }
            _this.setState({
                inputValue: ''
            });
        };
        _this.state = {
            current: props.defaultCurrent || 1,
            currentPageSize: 0,
            inputValue: ''
        };
        return _this;
    }
    Pagination.getDerivedStateFromProps = function (props, state) {
        var current = props.current,
            total = props.total,
            pageSize = props.pageSize;
        var st = {};
        var newCurrent = correctCurrent(current || state.current, total, pageSize);
        if (state.current !== newCurrent) {
            st.current = newCurrent;
        }
        if (state.currentPageSize !== pageSize) {
            st.currentPageSize = pageSize;
        }
        return st;
    };
    Pagination.prototype.onPageItemClick = function (page, e) {
        if (!('current' in this.props)) {
            this.setState({
                current: page
            });
        }
        this.props.onChange(page, e);
    };
    Pagination.prototype.onInputChange = function (value) {
        this.setState({
            inputValue: value
        });
    };
    Pagination.prototype.onSelectSize = function (pageSize) {
        var newState = {
            currentPageSize: pageSize
        };
        var totalPage = getTotalPage(this.props.total, pageSize);
        if (this.state.current > totalPage) {
            newState.current = totalPage;
        }
        this.setState(newState);
        this.props.onPageSizeChange(pageSize);
    };
    Pagination.prototype.renderPageTotal = function () {
        var _a = this.props,
            prefix = _a.prefix,
            total = _a.total,
            totalRender = _a.totalRender;
        var _b = this.state,
            currentPageSize = _b.currentPageSize,
            current = _b.current;
        var range = [(current - 1) * currentPageSize + 1, current * currentPageSize];
        return react_1.default.createElement("div", { className: "".concat(prefix, "pagination-total") }, totalRender(total, range));
    };
    Pagination.prototype.renderPageItem = function (index) {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            size = _b.size,
            link = _b.link,
            pageNumberRender = _b.pageNumberRender,
            total = _b.total,
            pageSize = _b.pageSize,
            locale = _b.locale;
        var current = this.state.current;
        var totalPage = getTotalPage(total, pageSize);
        var isCurrent = parseInt(index, 10) === current;
        var props = {
            size: size,
            className: (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "pagination-item")] = true, _a["".concat(prefix, "current")] = isCurrent, _a)),
            onClick: isCurrent ? noop : this.onPageItemClick.bind(this, index)
        };
        if (link) {
            props.component = 'a';
            props.href = link.replace('{page}', index);
        }
        return react_1.default.createElement(button_1.default, tslib_1.__assign({ "aria-label": util_1.str.template(locale.total, {
                current: index,
                total: totalPage
            }) }, props, { key: index }), pageNumberRender(index));
    };
    Pagination.prototype.renderPageFirst = function (current) {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            size = _b.size,
            shape = _b.shape,
            locale = _b.locale;
        var isFirst = current <= 1;
        var props = {
            disabled: isFirst,
            size: size,
            className: (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "pagination-item")] = true, _a["".concat(prefix, "prev")] = true, _a)),
            onClick: this.onPageItemClick.bind(this, current - 1)
        };
        var icon = react_1.default.createElement(icon_1.default, { type: "arrow-left", className: "".concat(prefix, "pagination-icon-prev") });
        return react_1.default.createElement(button_1.default, tslib_1.__assign({}, props, { "aria-label": util_1.str.template(locale.labelPrev, { current: current }) }), icon, shape === 'arrow-only' || shape === 'arrow-prev-only' || shape === 'no-border' ? '' : locale.prev);
    };
    Pagination.prototype.renderPageLast = function (current, totalPage) {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            size = _b.size,
            shape = _b.shape,
            locale = _b.locale;
        var isLast = current >= totalPage;
        var props = {
            disabled: isLast,
            size: size,
            className: (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "pagination-item")] = true, _a["".concat(prefix, "next")] = true, _a)),
            onClick: this.onPageItemClick.bind(this, current + 1)
        };
        var icon = react_1.default.createElement(icon_1.default, { type: "arrow-right", className: "".concat(prefix, "pagination-icon-next") });
        return react_1.default.createElement(button_1.default, tslib_1.__assign({}, props, { "aria-label": util_1.str.template(locale.labelNext, { current: current }) }), shape === 'arrow-only' || shape === 'no-border' ? '' : locale.next, icon);
    };
    Pagination.prototype.renderPageEllipsis = function (idx) {
        var prefix = this.props.prefix;
        return react_1.default.createElement(icon_1.default, { className: "".concat(prefix, "pagination-ellipsis ").concat(prefix, "pagination-icon-ellipsis"), type: "ellipsis", key: "ellipsis-".concat(idx) });
    };
    Pagination.prototype.renderPageJump = function () {
        var _this = this;
        var _a = this.props,
            prefix = _a.prefix,
            size = _a.size,
            locale = _a.locale;
        var inputValue = this.state.inputValue;
        /* eslint-disable react/jsx-key */
        return [react_1.default.createElement("span", { className: "".concat(prefix, "pagination-jump-text") }, locale.goTo), react_1.default.createElement(input_1.default, { className: "".concat(prefix, "pagination-jump-input"), type: "text", "aria-label": locale.inputAriaLabel, size: size, value: inputValue, onChange: this.onInputChange.bind(this), onKeyDown: function onKeyDown(e) {
                if (e.keyCode === util_1.KEYCODE.ENTER) {
                    _this.handleJump(e);
                }
            } }), react_1.default.createElement("span", { className: "".concat(prefix, "pagination-jump-text") }, locale.page), react_1.default.createElement(button_1.default, { className: "".concat(prefix, "pagination-jump-go"), size: size, onClick: this.handleJump }, locale.go)];
        /* eslint-enable react/jsx-key */
    };
    Pagination.prototype.renderPageDisplay = function (current, totalPage) {
        var _a = this.props,
            prefix = _a.prefix,
            pageNumberRender = _a.pageNumberRender;
        return react_1.default.createElement("span", { className: "".concat(prefix, "pagination-display") }, react_1.default.createElement("em", null, pageNumberRender(current)), "/", pageNumberRender(totalPage));
    };
    Pagination.prototype.renderPageList = function (current, totalPage) {
        var _a = this.props,
            prefix = _a.prefix,
            pageShowCount = _a.pageShowCount;
        var pages = [];
        if (totalPage <= pageShowCount) {
            for (var i = 1; i <= totalPage; i++) {
                pages.push(this.renderPageItem(i));
            }
        } else {
            // 除去第一页，最后一页以及当前页，剩下的页数
            var othersCount = pageShowCount - 3;
            var halfCount = parseInt(othersCount / 2, 10);
            var start = void 0,
                end = void 0;
            pages.push(this.renderPageItem(1));
            start = current - halfCount;
            end = current + halfCount;
            if (start <= 1) {
                start = 2;
                end = start + othersCount;
            }
            if (start > 2) {
                pages.push(this.renderPageEllipsis(1));
            }
            if (end >= totalPage - 1) {
                end = totalPage - 1;
                start = totalPage - 1 - othersCount;
            }
            for (var j = start; j <= end; j++) {
                pages.push(this.renderPageItem(j));
            }
            if (end < totalPage - 1) {
                pages.push(this.renderPageEllipsis(2));
            }
            pages.push(this.renderPageItem(totalPage));
        }
        return react_1.default.createElement("div", { className: "".concat(prefix, "pagination-list") }, pages);
    };
    Pagination.prototype.renderPageSizeSelector = function () {
        var _a = this.props,
            prefix = _a.prefix,
            pageSizeSelector = _a.pageSizeSelector,
            locale = _a.locale;
        var pageSizeSpan = react_1.default.createElement("span", { className: "".concat(prefix, "pagination-size-selector-title") }, locale.pageSize);
        switch (pageSizeSelector) {
            case 'filter':
                return react_1.default.createElement("div", { className: "".concat(prefix, "pagination-size-selector") }, pageSizeSpan, this.renderPageSizeFilter());
            case 'dropdown':
                return react_1.default.createElement("div", { className: "".concat(prefix, "pagination-size-selector") }, pageSizeSpan, this.renderPageSizeDropdown());
            default:
                return null;
        }
    };
    Pagination.prototype.renderPageSizeFilter = function () {
        var _this = this;
        var _a = this.props,
            prefix = _a.prefix,
            size = _a.size,
            pageSizeList = _a.pageSizeList;
        var currentPageSize = this.state.currentPageSize;
        return react_1.default.createElement("div", { className: "".concat(prefix, "pagination-size-selector-filter") }, pageSizeList.map(function (item, index) {
            var _a;
            var label;
            var pageSize;
            if (item.value) {
                // {label: '', value: 5}
                label = item.label;
                pageSize = item.value;
            } else {
                // number
                label = pageSize = item;
            }
            var classes = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "pagination-size-selector-btn")] = true, _a["".concat(prefix, "current")] = pageSize === currentPageSize, _a));
            return react_1.default.createElement(button_1.default, { key: index, text: true, size: size, className: classes, onClick: pageSize !== currentPageSize ? _this.onSelectSize.bind(_this, pageSize) : null }, label);
        }));
    };
    Pagination.prototype.renderPageSizeDropdown = function () {
        var _a = this.props,
            prefix = _a.prefix,
            size = _a.size,
            pageSizeList = _a.pageSizeList,
            locale = _a.locale,
            popupProps = _a.popupProps,
            selectProps = _a.selectProps;
        var currentPageSize = this.state.currentPageSize;
        return react_1.default.createElement(select_1.default, tslib_1.__assign({ className: "".concat(prefix, "pagination-size-selector-dropdown"), popupClassName: "".concat(prefix, "pagination-size-selector-popup"), popupProps: popupProps, "aria-label": locale.selectAriaLabel, autoWidth: false, size: size, value: currentPageSize, onChange: this.onSelectSize.bind(this) }, selectProps), pageSizeList.map(function (item, index) {
            var label;
            var pageSize;
            if (item.value) {
                // {label: '', value: 5}
                label = item.label;
                pageSize = item.value;
            } else {
                // number
                label = pageSize = item;
            }
            return react_1.default.createElement(Option, { key: index, value: pageSize }, label);
        }));
    };
    Pagination.prototype.render = function () {
        var _a;
        var _this = this;
        /* eslint-disable no-unused-vars */
        var _b = this.props,
            prefix = _b.prefix,
            pure = _b.pure,
            rtl = _b.rtl,
            device = _b.device,
            paginationType = _b.type,
            size = _b.size,
            shape = _b.shape,
            className = _b.className,
            total = _b.total,
            totalRender = _b.totalRender,
            pageSize = _b.pageSize,
            pageSizeSelector = _b.pageSizeSelector,
            pageSizeList = _b.pageSizeList,
            pageSizePosition = _b.pageSizePosition,
            useFloatLayout = _b.useFloatLayout,
            onPageSizeChange = _b.onPageSizeChange,
            hideOnlyOnePage = _b.hideOnlyOnePage,
            showJump = _b.showJump,
            locale = _b.locale,
            current = _b.current,
            defaultCurrent = _b.defaultCurrent,
            pageShowCount = _b.pageShowCount,
            pageNumberRender = _b.pageNumberRender,
            link = _b.link,
            onChange = _b.onChange,
            popupProps = _b.popupProps,
            selectProps = _b.selectProps,
            others = tslib_1.__rest(_b, ["prefix", "pure", "rtl", "device", "type", "size", "shape", "className", "total", "totalRender", "pageSize", "pageSizeSelector", "pageSizeList", "pageSizePosition", "useFloatLayout", "onPageSizeChange", "hideOnlyOnePage", "showJump", "locale", "current", "defaultCurrent", "pageShowCount", "pageNumberRender", "link", "onChange", "popupProps", "selectProps"]);
        /* eslint-enable */
        var _c = this.state,
            currentPage = _c.current,
            currentPageSize = _c.currentPageSize;
        var totalPage = getTotalPage(total, currentPageSize);
        var pageFirst = this.renderPageFirst(currentPage);
        var pageLast = this.renderPageLast(currentPage, totalPage);
        var sizeSelector = this.renderPageSizeSelector();
        var isStart = pageSizePosition === 'start';
        var type = paginationType;
        if (device === 'phone' && type === 'normal') {
            type = 'simple';
        }
        var classes = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "pagination")] = true, _a["".concat(prefix).concat(size)] = size, _a["".concat(prefix).concat(type)] = type, _a["".concat(prefix).concat(shape)] = shape, _a["".concat(prefix, "start")] = !!pageSizeSelector && isStart && useFloatLayout, _a["".concat(prefix, "end")] = !!pageSizeSelector && !isStart && useFloatLayout, _a["".concat(prefix, "hide")] = totalPage <= 1 && hideOnlyOnePage, _a[className] = !!className, _a));
        if (rtl) {
            others.dir = 'rtl';
        }
        var buildComponent = function buildComponent() {
            var coms = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                coms[_i] = arguments[_i];
            }
            return react_1.default.createElement("div", tslib_1.__assign({ className: classes }, util_1.obj.pickOthers(Object.keys(Pagination.propTypes), others)), isStart && sizeSelector, totalRender ? _this.renderPageTotal() : null, react_1.default.createElement("div", { className: "".concat(prefix, "pagination-pages") }, coms.map(function (com, index) {
                return com && react_1.default.cloneElement(com, { key: index });
            })), !isStart && sizeSelector);
        };
        switch (type) {
            case 'mini':
                return buildComponent(pageFirst, pageLast);
            case 'simple':
                {
                    var pageDisplay = this.renderPageDisplay(currentPage, totalPage);
                    return buildComponent(pageFirst, pageDisplay, pageLast);
                }
            case 'normal':
                {
                    var pageList = this.renderPageList(currentPage, totalPage);
                    var pageDisplay = showJump && total > pageSize * pageShowCount ? this.renderPageDisplay(currentPage, totalPage) : null;
                    var pageJump = showJump && total > pageSize * pageShowCount ? this.renderPageJump(currentPage, totalPage) : null;
                    return buildComponent.apply(void 0, tslib_1.__spreadArray([pageFirst, pageList, pageLast, pageDisplay], tslib_1.__read(pageJump), false));
                }
            default:
                return null;
        }
    };
    Pagination.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, pure: prop_types_1.default.bool, rtl: prop_types_1.default.bool, device: prop_types_1.default.oneOf(['desktop', 'tablet', 'phone']), className: prop_types_1.default.string,
        /**
         * 自定义国际化文案对象
         */
        locale: prop_types_1.default.object,
        /**
         * 分页组件类型
         */
        type: prop_types_1.default.oneOf(['normal', 'simple', 'mini']),
        /**
         * 前进后退按钮样式
         */
        shape: prop_types_1.default.oneOf(['normal', 'arrow-only', 'arrow-prev-only', 'no-border']),
        /**
         * 分页组件大小
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        /**
         * （受控）当前页码
         */
        current: prop_types_1.default.number,
        /**
         * （非受控）初始页码
         */
        defaultCurrent: prop_types_1.default.number,
        /**
         * 页码发生改变时的回调函数
         * @param {Number} current 改变后的页码数
         * @param {Object} e 点击事件对象
         */
        onChange: prop_types_1.default.func,
        /**
         * 总记录数
         */
        total: prop_types_1.default.number,
        /**
         * 总数的渲染函数
         * @param {Number} total 总数
         * @param {Array} range 当前数据在总数中的区间
         */
        totalRender: prop_types_1.default.func,
        /**
         * 页码显示的数量，更多的使用...代替
         */
        pageShowCount: prop_types_1.default.number,
        /**
         * 一页中的记录数
         */
        pageSize: prop_types_1.default.number,
        /**
         * 每页显示选择器类型
         */
        pageSizeSelector: prop_types_1.default.oneOf([false, 'filter', 'dropdown']),
        /**
         * 每页显示选择器可选值
         */
        pageSizeList: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.number), prop_types_1.default.arrayOf(prop_types_1.default.shape({
            label: prop_types_1.default.string,
            value: prop_types_1.default.number
        }))]),
        /**
         * 自定义页码渲染函数，函数作用于页码button以及当前页/总页数的数字渲染
         * @param {Number} index 分页的页码，从1开始
         * @return {ReactNode} 返回渲染结果
         */
        pageNumberRender: prop_types_1.default.func,
        /**
         * 每页显示选择器在组件中的位置
         */
        pageSizePosition: prop_types_1.default.oneOf(['start', 'end']),
        /**
         * 存在每页显示选择器时是否使用浮动布局
         */
        useFloatLayout: prop_types_1.default.bool,
        /**
         * 每页显示记录数量改变时的回调函数
         * @param {Number} pageSize 改变后的每页显示记录数
         */
        onPageSizeChange: prop_types_1.default.func,
        /**
         * 当分页数为1时，是否隐藏分页器
         */
        hideOnlyOnePage: prop_types_1.default.bool,
        /**
         * type 设置为 normal 时，在页码数超过5页后，会显示跳转输入框与按钮，当设置 showJump 为 false 时，不再显示该跳转区域
         */
        showJump: prop_types_1.default.bool,
        /**
         * 设置页码按钮的跳转链接，它的值为一个包含 {page} 的模版字符串，如：https://www.taobao.com/{page}
         */
        link: prop_types_1.default.string,
        /**
         * 弹层组件属性，透传给Popup
         */
        popupProps: prop_types_1.default.object, selectProps: prop_types_1.default.object });
    Pagination.defaultProps = {
        prefix: 'next-',
        pure: false,
        rtl: false,
        locale: zh_cn_1.default.Pagination,
        type: 'normal',
        shape: 'normal',
        size: 'medium',
        defaultCurrent: 1,
        onChange: noop,
        pageSize: 10,
        pageSizeSelector: false,
        pageSizeList: [5, 10, 20],
        pageSizePosition: 'start',
        onPageSizeChange: noop,
        useFloatLayout: false,
        total: 100,
        pageShowCount: 5,
        hideOnlyOnePage: false,
        showJump: true,
        pageNumberRender: function pageNumberRender(index) {
            return index;
        }
    };
    return Pagination;
}(react_1.Component);
exports.default = config_provider_1.default.config((0, react_lifecycles_compat_1.polyfill)(Pagination));

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var React = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
var classNames = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
/** Paragraph */
var Paragraph = /** @class */function (_super) {
    tslib_1.__extends(Paragraph, _super);
    function Paragraph(props) {
        var _this = _super.call(this, props) || this;
        util_1.log.warning('[Paragraph] is deprecated, please use Typography.Paragraph instead!');
        return _this;
    }
    Paragraph.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            className = _a.className,
            type = _a.type,
            size = _a.size,
            rtl = _a.rtl,
            others = tslib_1.__rest(_a, ["prefix", "className", "type", "size", "rtl"]);
        var cls = classNames("".concat(prefix, "paragraph"), type === 'short' ? "".concat(prefix, "paragraph-short") : "".concat(prefix, "paragraph-long"), size === 'small' ? "".concat(prefix, "paragraph-small") : "".concat(prefix, "paragraph-medium"), className);
        if (rtl) {
            others.dir = 'rtl';
        }
        return React.createElement("div", tslib_1.__assign({}, others, { className: cls }), this.props.children);
    };
    Paragraph.propTypes = {
        prefix: PropTypes.string,
        /**
         * 额外的样式名 会附加到 root dom 上
         */
        className: PropTypes.string,
        /**
         * 什么方式展示段落
         * - 'long' :  展示所有文本
         * - 'short' : 展示三行以内（非强制）
         */
        type: PropTypes.oneOf(['long', 'short']),
        /**
         * 组件大小。
         * - 'medium' : 中号
         * - 'short' : 小号
         */
        size: PropTypes.oneOf(['medium', 'small']),
        rtl: PropTypes.bool
    };
    Paragraph.defaultProps = {
        prefix: 'next-',
        type: 'long',
        size: 'medium'
    };
    return Paragraph;
}(React.Component);
exports.default = config_provider_1.default.config(Paragraph);

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var progress_line_1 = __webpack_require__(383);
var progress_circle_1 = __webpack_require__(384);
/**
 * Progress
 */
var Progress = /** @class */function (_super) {
  tslib_1.__extends(Progress, _super);
  function Progress() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Progress.prototype.render = function () {
    var _a = this.props,
        shape = _a.shape,
        hasBorder = _a.hasBorder,
        others = tslib_1.__rest(_a, ["shape", "hasBorder"]);
    return shape === 'circle' ? react_1.default.createElement(progress_circle_1.default, tslib_1.__assign({}, others)) : react_1.default.createElement(progress_line_1.default, tslib_1.__assign({}, others, { hasBorder: hasBorder }));
  };
  Progress.propTypes = {
    prefix: prop_types_1.default.string,
    /**
     * 形态
     */
    shape: prop_types_1.default.oneOf(['circle', 'line']),
    /**
     * 尺寸
     */
    size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
    /**
     * 所占百分比
     */
    percent: prop_types_1.default.number,
    /**
     * 进度状态, 显示优先级: color > progressive > state
     */
    state: prop_types_1.default.oneOf(['normal', 'success', 'error']),
    /**
     * 是否为色彩阶段变化模式, 显示优先级: color > progressive > state
     */
    progressive: prop_types_1.default.bool,
    /**
     * 是否添加 Border（只适用于 Line Progress)
     */
    hasBorder: prop_types_1.default.bool,
    /**
     * 文本渲染函数
     * @param {Number} percent 当前的进度信息
     * @param {Object} option 额外的参数
     * @property {Boolean} option.rtl 是否在rtl 模式下渲染
     * @return {ReactNode} 返回文本节点
     */
    textRender: prop_types_1.default.func,
    /**
     * 进度条颜色, 显示优先级: color > progressive > state
     */
    color: prop_types_1.default.string,
    /**
     * 背景色
     */
    backgroundColor: prop_types_1.default.string,
    rtl: prop_types_1.default.bool
  };
  Progress.defaultProps = {
    prefix: 'next-',
    shape: 'line',
    state: 'normal',
    size: 'medium',
    percent: 0,
    progressive: false,
    hasBorder: false,
    textRender: function textRender(percent) {
      return "".concat(Math.floor(percent), "%");
    }
  };
  Progress.contextTypes = {
    prefix: prop_types_1.default.string
  };
  return Progress;
}(react_1.Component);
exports.default = Progress;

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var Line = /** @class */function (_super) {
    tslib_1.__extends(Line, _super);
    function Line() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Line.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            prefix = _c.prefix,
            size = _c.size,
            state = _c.state,
            color = _c.color,
            percent = _c.percent,
            progressive = _c.progressive,
            hasBorder = _c.hasBorder,
            textRender = _c.textRender,
            className = _c.className,
            rtl = _c.rtl,
            backgroundColor = _c.backgroundColor,
            others = tslib_1.__rest(_c, ["prefix", "size", "state", "color", "percent", "progressive", "hasBorder", "textRender", "className", "rtl", "backgroundColor"]);
        var suffixText = textRender(percent, { rtl: rtl });
        var wrapCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "progress-line")] = true, _a["".concat(prefix, "progress-line-show-info")] = suffixText, _a["".concat(prefix, "progress-line-show-border")] = hasBorder, _a["".concat(prefix + size)] = size, _a[className] = className, _a));
        var lineCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "progress-line-overlay")] = true, _b["".concat(prefix, "progress-line-overlay-").concat(state)] = !color && !progressive && state, _b["".concat(prefix, "progress-line-overlay-started")] = !color && progressive && percent <= 30, _b["".concat(prefix, "progress-line-overlay-middle")] = !color && progressive && percent > 30 && percent < 80, _b["".concat(prefix, "progress-line-overlay-finishing")] = !color && progressive && percent >= 80, _b));
        var lineStyle = {
            width: "".concat(percent > 100 ? 100 : percent < 0 ? 0 : percent, "%"),
            backgroundColor: color
        };
        var underlayStyle = { backgroundColor: backgroundColor };
        return react_1.default.createElement("div", tslib_1.__assign({ dir: rtl ? 'rtl' : undefined, role: "progressbar", "aria-valuenow": percent, "aria-valuemin": "0", "aria-valuemax": "100", className: wrapCls }, others), react_1.default.createElement("div", { className: "".concat(prefix, "progress-line-container") }, react_1.default.createElement("div", { className: "".concat(prefix, "progress-line-underlay"), style: underlayStyle }, react_1.default.createElement("div", { className: lineCls, style: lineStyle }))), suffixText ? react_1.default.createElement("div", { className: "".concat(prefix, "progress-line-text") }, suffixText) : null);
    };
    Line.propTypes = {
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        percent: prop_types_1.default.number,
        state: prop_types_1.default.oneOf(['normal', 'success', 'error']),
        progressive: prop_types_1.default.bool,
        hasBorder: prop_types_1.default.bool,
        textRender: prop_types_1.default.func,
        color: prop_types_1.default.string,
        backgroundColor: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        prefix: prop_types_1.default.string,
        className: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.object])
    };
    return Line;
}(react_1.default.PureComponent);
exports.default = Line;

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var VIEWBOX_WIDTH = 100; // width of viewBox
var HALF_VIEWBOX_WIDTH = VIEWBOX_WIDTH / 2;
var DEFAULT_STROKE_WIDTH = 8;
var viewBox = "0 0 ".concat(VIEWBOX_WIDTH, " ").concat(VIEWBOX_WIDTH);
var Circle = /** @class */function (_super) {
    tslib_1.__extends(Circle, _super);
    function Circle(props) {
        var _this = _super.call(this, props) || this;
        _this._underlayRefHandler = function (ref) {
            _this.underlay = ref;
        };
        _this._overlayRefHandler = function (ref) {
            _this.overlay = ref;
        };
        _this.state = {
            underlayStrokeWidth: DEFAULT_STROKE_WIDTH,
            overlayStrokeWidth: DEFAULT_STROKE_WIDTH
        };
        return _this;
    }
    Circle.prototype.componentDidMount = function () {
        if (this.underlay && this.overlay) {
            // eslint-disable-next-line
            this.setState({
                underlayStrokeWidth: this._getCssValue(this.underlay, 'stroke-width') || DEFAULT_STROKE_WIDTH,
                overlayStrokeWidth: this._getCssValue(this.overlay, 'stroke-width') || DEFAULT_STROKE_WIDTH
            });
        }
    };
    Circle.prototype._getCssValue = function (dom, name) {
        var css = window.getComputedStyle(dom).getPropertyValue(name);
        var regExp = /(\d*)px/g;
        var result = regExp.exec(css);
        return Array.isArray(result) ? Number(result[1]) : 0;
    };
    Circle.prototype._computeOverlayStrokeDashOffset = function () {
        var _a = this.state,
            underlayStrokeWidth = _a.underlayStrokeWidth,
            overlayStrokeWidth = _a.overlayStrokeWidth;
        var overlayRadius = HALF_VIEWBOX_WIDTH - overlayStrokeWidth / 2 - (underlayStrokeWidth - overlayStrokeWidth) / 2;
        var overlayLen = Math.PI * 2 * overlayRadius;
        return (VIEWBOX_WIDTH - this.props.percent) / VIEWBOX_WIDTH * overlayLen;
    };
    Circle.prototype._getPath = function (radius) {
        return "M ".concat(HALF_VIEWBOX_WIDTH, ",").concat(HALF_VIEWBOX_WIDTH, " m 0,-").concat(radius, " a ").concat(radius, ",").concat(radius, " 0 1 1 0,").concat(2 * radius, " a ").concat(radius, ",").concat(radius, " 0 1 1 0,-").concat(2 * radius);
    };
    Circle.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            prefix = _c.prefix,
            size = _c.size,
            state = _c.state,
            percent = _c.percent,
            className = _c.className,
            textRender = _c.textRender,
            progressive = _c.progressive,
            color = _c.color,
            backgroundColor = _c.backgroundColor,
            rtl = _c.rtl,
            others = tslib_1.__rest(_c, ["prefix", "size", "state", "percent", "className", "textRender", "progressive", "color", "backgroundColor", "rtl"]);
        var _d = this.state,
            underlayStrokeWidth = _d.underlayStrokeWidth,
            overlayStrokeWidth = _d.overlayStrokeWidth;
        // underlay path
        var underlayRadius = HALF_VIEWBOX_WIDTH - underlayStrokeWidth / 2;
        var underlayPath = this._getPath(underlayRadius);
        // overlay path (为居中，减去相对于underlay的宽度)
        var overlayRadius = HALF_VIEWBOX_WIDTH - overlayStrokeWidth / 2 - (underlayStrokeWidth - overlayStrokeWidth) / 2;
        var overlayPath = this._getPath(overlayRadius);
        var overlayLen = Math.PI * 2 * overlayRadius;
        var overlayStrokeDasharray = "".concat(overlayLen, "px ").concat(overlayLen, "px");
        var overlayStrokeDashoffset = "".concat(this._computeOverlayStrokeDashOffset(), "px");
        var suffixText = textRender(percent, { rtl: rtl });
        var wrapCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "progress-circle")] = true, _a["".concat(prefix, "progress-circle-show-info")] = suffixText, _a["".concat(prefix + size)] = size, _a[className] = className, _a));
        var pathCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "progress-circle-overlay")] = true, _b["".concat(prefix, "progress-circle-overlay-").concat(state)] = !color && !progressive && state, _b["".concat(prefix, "progress-circle-overlay-started")] = !color && progressive && percent <= 30, _b["".concat(prefix, "progress-circle-overlay-middle")] = !color && progressive && percent > 30 && percent < 80, _b["".concat(prefix, "progress-circle-overlay-finishing")] = !color && progressive && percent >= 80, _b));
        var underlayStyle = { stroke: backgroundColor };
        return react_1.default.createElement("div", tslib_1.__assign({ className: wrapCls, dir: rtl ? 'rtl' : undefined, role: "progressbar", "aria-valuenow": percent, "aria-valuemin": "0", "aria-valuemax": "100" }, others), react_1.default.createElement("svg", { className: "".concat(prefix, "progress-circle-container"), viewBox: viewBox }, react_1.default.createElement("path", { className: "".concat(prefix, "progress-circle-underlay"), d: underlayPath, fillOpacity: "0", ref: this._underlayRefHandler, style: underlayStyle }), react_1.default.createElement("path", { className: pathCls, d: overlayPath, fillOpacity: "0", strokeDasharray: overlayStrokeDasharray, strokeDashoffset: overlayStrokeDashoffset, ref: this._overlayRefHandler, stroke: color })), suffixText ? react_1.default.createElement("div", { className: "".concat(prefix, "progress-circle-text") }, suffixText) : null);
    };
    Circle.propTypes = {
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        percent: prop_types_1.default.number,
        state: prop_types_1.default.oneOf(['normal', 'success', 'error']),
        progressive: prop_types_1.default.bool,
        textRender: prop_types_1.default.func,
        prefix: prop_types_1.default.string,
        className: prop_types_1.default.string,
        color: prop_types_1.default.string,
        backgroundColor: prop_types_1.default.string,
        rtl: prop_types_1.default.bool
    };
    return Circle;
}(react_1.Component);
exports.default = Circle;

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var range_1 = __webpack_require__(386);
exports.default = config_provider_1.default.config(range_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('hasTips' in props) {
            deprecated('hasTips', 'hasTip', 'Range');
            var hasTips = props.hasTips,
                others = tslib_1.__rest(props, ["hasTips"]);
            props = tslib_1.__assign({ hasTip: hasTips }, others);
        }
        if ('tipFormatter' in props) {
            deprecated('tipFormatter', 'tipRender', 'Range');
            var tipFormatter = props.tipFormatter,
                others = tslib_1.__rest(props, ["tipFormatter"]);
            props = tslib_1.__assign({ tipRender: tipFormatter }, others);
        }
        return props;
    }
});

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var classnames_1 = __webpack_require__(3);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var util_1 = __webpack_require__(4);
var balloon_1 = __webpack_require__(56);
var utils_1 = __webpack_require__(35);
var scale_1 = __webpack_require__(387);
var track_1 = __webpack_require__(388);
var selected_1 = __webpack_require__(389);
var mark_1 = __webpack_require__(390);
var slider_1 = __webpack_require__(391);
var fixedSlider_1 = __webpack_require__(392);
var Tooltip = balloon_1.default.Tooltip;
var noop = util_1.func.noop,
    bindCtx = util_1.func.bindCtx;
var pickOthers = util_1.obj.pickOthers;
function _isMultiple(slider, isFixedWidth) {
    return isFixedWidth || slider === 'double';
}
function LowerSlider(props) {
    var hasTip = props.hasTip,
        value = props.value,
        tipRender = props.tipRender,
        slider = props.slider,
        tooltipVisible = props.tooltipVisible,
        onTooltipVisibleChange = props.onTooltipVisibleChange,
        tooltipAnimation = props.tooltipAnimation;
    if (_isMultiple(slider)) {
        return hasTip ? react_1.default.createElement(Tooltip, { popupContainer: function popupContainer(target) {
                return target.parentNode;
            }, popupProps: {
                visible: tooltipVisible,
                onVisibleChange: onTooltipVisibleChange,
                animation: tooltipAnimation,
                needAdjust: false
            }, trigger: (0, slider_1.default)(tslib_1.__assign(tslib_1.__assign({}, props), { value: value[0] })), align: "t" }, tipRender("".concat(value[0]))) : (0, slider_1.default)(tslib_1.__assign(tslib_1.__assign({}, props), { value: value[0] }));
    }
    return null;
}
LowerSlider.propTypes = {
    hasTip: prop_types_1.default.bool,
    tooltipVisible: prop_types_1.default.bool,
    onTooltipVisibleChange: prop_types_1.default.func,
    tooltipAnimation: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.object]),
    value: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.arrayOf(prop_types_1.default.number)]),
    tipRender: prop_types_1.default.func,
    slider: prop_types_1.default.oneOf(['single', 'double'])
};
function UpperSlider(props) {
    var newprop = (0, _extends3.default)({}, props);
    var hasTip = newprop.hasTip,
        value = newprop.value,
        tipRender = newprop.tipRender,
        slider = newprop.slider,
        tooltipVisible = newprop.tooltipVisible,
        onTooltipVisibleChange = newprop.onTooltipVisibleChange,
        tooltipAnimation = newprop.tooltipAnimation;
    if (_isMultiple(slider)) {
        delete newprop.onKeyDown;
        return hasTip ? react_1.default.createElement(Tooltip, { popupContainer: function popupContainer(target) {
                return target.parentNode;
            }, popupProps: {
                visible: tooltipVisible,
                onVisibleChange: onTooltipVisibleChange,
                animation: tooltipAnimation,
                needAdjust: false
            }, trigger: (0, slider_1.default)(tslib_1.__assign(tslib_1.__assign({}, newprop), { value: value[1] })), align: "t" }, tipRender(value[1])) : (0, slider_1.default)(tslib_1.__assign(tslib_1.__assign({}, newprop), { value: value[1] }));
    }
    return hasTip ? react_1.default.createElement(Tooltip, { popupContainer: function popupContainer(target) {
            return target.parentNode;
        }, popupProps: {
            visible: tooltipVisible,
            onVisibleChange: onTooltipVisibleChange,
            animation: tooltipAnimation,
            needAdjust: false
        }, animation: {
            in: 'fadeInUp',
            out: 'fadeOutDown'
        }, trigger: (0, slider_1.default)(newprop), align: "t" }, tipRender(value)) : (0, slider_1.default)(newprop);
}
UpperSlider.propTypes = {
    hasTip: prop_types_1.default.bool,
    tooltipVisible: prop_types_1.default.bool,
    onTooltipVisibleChange: prop_types_1.default.func,
    tooltipAnimation: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.object]),
    value: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.arrayOf(prop_types_1.default.number)]),
    tipRender: prop_types_1.default.func,
    slider: prop_types_1.default.oneOf(['single', 'double'])
};
function pauseEvent(e) {
    e.stopPropagation();
    e.preventDefault();
}
/** Range */
var Range = /** @class */function (_super) {
    tslib_1.__extends(Range, _super);
    function Range(props) {
        var _this = _super.call(this, props) || this;
        var min = props.min;
        var initialValue = _isMultiple(props.slider) ? [min, min] : min;
        var defaultValue = 'defaultValue' in props ? props.defaultValue : initialValue;
        var value = props.value !== undefined ? props.value : defaultValue;
        _this.state = {
            value: value,
            tempValue: value,
            hasMovingClass: false,
            lowerTooltipVisible: false,
            upperTooltipVisible: false,
            tooltipAnimation: true
        };
        bindCtx(_this, ['handleLowerTooltipVisibleChange', 'handleUpperTooltipVisibleChange', 'onKeyDown']);
        return _this;
    }
    Range.getDerivedStateFromProps = function (props, state) {
        if ('value' in props) {
            var min = props.min,
                slider = props.slider,
                value = props.value;
            var hasMovingClass = state.hasMovingClass;
            var newState = {
                value: value
            };
            if (value === undefined) {
                newState.value = _isMultiple(slider) ? [min, min] : min;
            }
            if (!hasMovingClass) {
                newState.tempValue = newState.value;
            }
            return newState;
        }
        return null;
    };
    Range.prototype._marksToScales = function (marks) {
        var result = [];
        if (Object.prototype.toString.call(marks) === '[object Object]') {
            for (var key in marks) {
                if (Object.hasOwnProperty.call(marks, key)) {
                    result.push(parseInt(key));
                }
            }
        } else {
            result = marks;
        }
        return result;
    };
    Range.prototype._calcScales = function () {
        var _a = this.props,
            min = _a.min,
            max = _a.max,
            marks = _a.marks;
        var scales = this._marksToScales(marks);
        if (scales !== false) {
            if (Array.isArray(scales)) {
                return scales;
            } else {
                var pace = (max - min) / scales;
                var result = [];
                result.push(min);
                for (var i = 1; i < scales; i++) {
                    result.push(min + i * pace);
                }
                result.push(max);
                return result;
            }
        } else {
            return [];
        }
    };
    Range.prototype._calcMarks = function () {
        var _a = this.props,
            min = _a.min,
            max = _a.max,
            marks = _a.marks;
        var result = {};
        if (Array.isArray(marks)) {
            marks.forEach(function (m) {
                result[m] = m.toString();
            });
        } else if (typeof marks === 'number') {
            var pace = (max - min) / marks;
            result[min] = min;
            for (var i = 1; i < marks; i++) {
                var mark = min + i * pace;
                var precision = (0, utils_1.getPrecision)(mark);
                if (precision > 2) {
                    precision = 2;
                }
                mark = mark.toFixed(precision);
                result[mark] = mark;
            }
            result[max] = max;
        } else {
            result = marks;
        }
        return result;
    };
    Range.prototype._onMouseDown = function (e) {
        if (e.button === 0) {
            this._start(e.pageX);
            this._addDocumentMouseEvents();
            pauseEvent(e);
        }
    };
    Range.prototype._onTouchStart = function (e) {
        this._start(e.targetTouches[0].pageX);
        this._addDocumentTouchEvents();
        e.stopPropagation(); // preventDefault() will be ignored: https://www.chromestatus.com/features/5093566007214080
    };
    Range.prototype.onKeyDown = function (e) {
        if (this.props.disabled) return;
        if (e.keyCode === util_1.KEYCODE.LEFT_ARROW || e.keyCode === util_1.KEYCODE.RIGHT_ARROW) {
            e.stopPropagation();
            e.preventDefault();
            var newValue = void 0;
            if (e.keyCode === util_1.KEYCODE.LEFT_ARROW) {
                newValue = this.state.value - this.props.step;
            } else {
                newValue = this.state.value + this.props.step;
            }
            if (newValue > this.props.max) {
                newValue = this.props.max;
            }
            if (newValue < this.props.min) {
                newValue = this.props.min;
            }
            if (newValue !== this.state.value) {
                this.setState({
                    value: newValue
                });
                this.props.onChange(newValue);
            }
        }
    };
    Range.prototype._start = function (position) {
        this.setState({
            hasMovingClass: true
        });
        var tempValue = this.state.tempValue;
        var range = this.dom;
        var start = util_1.dom.getOffset(range).left;
        // used in unit test
        var width = range.clientWidth;
        if (!width) {
            if (range.style.width) {
                var index = range.style.width.indexOf('px');
                if (index !== -1) {
                    width = Number(range.style.width.slice(0, index));
                }
            }
        }
        this._moving = {
            start: start,
            end: start + width,
            startValue: tempValue
        };
        // change on start
        this._onProcess(position, true);
    };
    Range.prototype._end = function () {
        var startValue = this._moving.startValue;
        var _a = this.state,
            tempValue = _a.tempValue,
            value = _a.value;
        this._moving = null;
        this._removeDocumentEvents();
        this.setState({
            hasMovingClass: false,
            lowerTooltipVisible: false,
            upperTooltipVisible: false,
            tooltipAnimation: true
        });
        if (!(0, utils_1.isEqual)(tempValue, startValue)) {
            // Not Controlled
            if (!('value' in this.props)) {
                this.setState({
                    value: tempValue
                });
            } else {
                this.setState({
                    // tooltipVisible: false,
                    tempValue: value,
                    value: value
                });
            }
            this.props.onChange(tempValue);
        }
    };
    Range.prototype._move = function (e) {
        var position = e.type === 'mousemove' ? e.pageX : e.targetTouches[0].pageX;
        this._onProcess(position);
    };
    Range.prototype._onProcess = function (position, start) {
        var tempValue = this.state.tempValue;
        var current = this._positionToCurrent(position); //current 为当前click的value
        if (this.isFixedWidth) {
            if (start) {
                this.lastPosition = current;
            }
        } else if (start) {
            this.lastPosition = current;
            if (_isMultiple(this.props.slider)) {
                this._moving.dragging = (0, utils_1.getDragging)(current, tempValue);
            } else {
                this._moving.dragging = 'upper';
            }
            this.setState({
                lowerTooltipVisible: this._moving.dragging === 'lower',
                upperTooltipVisible: this._moving.dragging === 'upper',
                tooltipAnimation: false
            });
        } else if (this.oldDragging === 'lower' && this._moving.dragging === 'upper') {
            this.setState({
                upperTooltipVisible: true,
                lowerTooltipVisible: false
            });
        } else if (this.oldDragging === 'upper' && this._moving.dragging === 'lower') {
            this.setState({
                upperTooltipVisible: false,
                lowerTooltipVisible: true
            });
        }
        this.oldDragging = this._moving.dragging;
        var nextValue = this._currentToValue(current, tempValue, this.lastPosition, this.isFixedWidth); //计算range的新value,可能是数组,可能是单个值
        this.lastPosition = current;
        if (!(0, utils_1.isEqual)(nextValue, tempValue)) {
            this.setState({
                tempValue: nextValue
            });
            this.props.onProcess(nextValue);
        }
    };
    Range.prototype._addDocumentMouseEvents = function () {
        this._onMouseMoveListener = util_1.events.on(document, 'mousemove', this._move.bind(this));
        this._onMouseUpListener = util_1.events.on(document, 'mouseup', this._end.bind(this));
    };
    Range.prototype._addDocumentTouchEvents = function () {
        this._onTouchMoveListener = util_1.events.on(document, 'touchmove', this._move.bind(this));
        this._onTouchEndListener = util_1.events.on(document, 'touchend', this._end.bind(this));
    };
    Range.prototype._removeDocumentEvents = function () {
        if (this._onMouseMoveListener) {
            this._onMouseMoveListener.off();
            this._onMouseMoveListener = null;
        }
        if (this._onMouseUpListener) {
            this._onMouseUpListener.off();
            this._onMouseUpListener = null;
        }
        if (this._onTouchMoveListener) {
            this._onTouchMoveListener.off();
            this._onTouchMoveListener = null;
        }
        if (this._onTouchEndListener) {
            this._onTouchEndListener.off();
            this._onTouchEndListener = null;
        }
    };
    // position => current (value type)
    Range.prototype._positionToCurrent = function (position) {
        var _a = this._moving,
            start = _a.start,
            end = _a.end;
        var _b = this.props,
            step = _b.step,
            min = _b.min,
            max = _b.max,
            rtl = _b.rtl;
        if (position < start) {
            position = start;
        } else if (position > end) {
            position = end;
        }
        var percent = (0, utils_1.getPercent)(start, end, position);
        percent = rtl ? 100 - percent : percent;
        // reset by step
        var newValue = parseFloat((Math.round(percent / 100 * (max - min) / step) * step).toFixed((0, utils_1.getPrecision)(step)));
        var currentValue = (min + newValue).toFixed((0, utils_1.getPrecision)(step));
        return Number(currentValue);
    };
    Range.prototype._currentToValue = function (current, preValue, lastPosition, isFixedWidth) {
        var dragging = this._moving.dragging;
        var _a = this.props,
            min = _a.min,
            max = _a.max;
        if (!_isMultiple(this.props.slider, isFixedWidth)) {
            return current;
        } else {
            var result = void 0;
            var precision = (0, utils_1.getPrecision)(this.props.step);
            var diff = current - lastPosition;
            var newLeft = +(+preValue[0] + diff).toFixed(precision);
            var newRight = +(+preValue[1] + diff).toFixed(precision);
            var newMaxLeft = +(max - preValue[1] + preValue[0]).toFixed(precision);
            var newMinRight = +(min + preValue[1] - preValue[0]).toFixed(precision);
            if (isFixedWidth) {
                if (newLeft < min) {
                    result = [min, newMinRight];
                } else if (newRight > max) {
                    result = [newMaxLeft, max];
                } else {
                    result = [newLeft, newRight];
                }
            } else if (dragging === 'lower') {
                if (current > preValue[1]) {
                    result = [preValue[1], current];
                    this._moving.dragging = 'upper';
                } else {
                    result = [current, preValue[1]];
                }
            } else if (dragging === 'upper') {
                if (current < preValue[0]) {
                    result = [current, preValue[0]];
                    this._moving.dragging = 'lower';
                } else {
                    result = [preValue[0], current];
                }
            }
            return result;
        }
    };
    Range.prototype.handleLowerTooltipVisibleChange = function (visible) {
        if (this.state.hasMovingClass) {
            return;
        }
        this.setState({
            lowerTooltipVisible: visible
        });
    };
    Range.prototype.handleUpperTooltipVisibleChange = function (visible) {
        if (this.state.hasMovingClass) {
            return;
        }
        this.setState({
            upperTooltipVisible: visible
        });
    };
    Range.prototype.render = function () {
        var _a;
        var _this = this;
        var value = this._moving ? this.state.tempValue : this.state.value;
        var _b = this.props,
            prefix = _b.prefix,
            min = _b.min,
            max = _b.max,
            disabled = _b.disabled,
            style = _b.style,
            id = _b.id,
            slider = _b.slider,
            reverse = _b.reverse,
            className = _b.className,
            marks = _b.marks,
            marksPosition = _b.marksPosition,
            hasTip = _b.hasTip,
            tipRender = _b.tipRender,
            fixedWidth = _b.fixedWidth,
            defaultValue = _b.defaultValue,
            tooltipVisible = _b.tooltipVisible,
            rtl = _b.rtl,
            isPreview = _b.isPreview,
            renderPreview = _b.renderPreview;
        var others = pickOthers(Object.keys(Range.propTypes), this.props);
        var classes = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "range")] = true, _a.disabled = disabled, _a[className] = className, _a));
        if (Array.isArray(value)) {
            value.forEach(function (item, index) {
                if (item > max) {
                    value[index] = max;
                }
            });
        } else if (value > max) {
            value = max;
        }
        var commonProps = {
            prefix: prefix,
            min: min,
            max: max,
            value: value,
            reverse: reverse,
            slider: slider,
            hasTip: hasTip,
            tipRender: tipRender,
            marksPosition: marksPosition,
            tooltipVisible: tooltipVisible,
            hasMovingClass: this.state.hasMovingClass,
            disabled: disabled,
            rtl: rtl
        };
        this.isFixedWidth = fixedWidth && (value ? Array.isArray(value) : defaultValue ? Array.isArray(defaultValue) : false);
        if (isPreview) {
            var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
            if ('renderPreview' in this.props) {
                return react_1.default.createElement("div", tslib_1.__assign({ id: id, dir: rtl ? 'rtl' : 'ltr' }, others, { className: previewCls }), renderPreview(value, this.props));
            }
            return react_1.default.createElement("p", tslib_1.__assign({ id: id, dir: rtl ? 'rtl' : 'ltr' }, others, { className: previewCls }), Array.isArray(value) ? value.join('~') : value);
        }
        return react_1.default.createElement("div", tslib_1.__assign({ ref: function ref(dom) {
                _this.dom = dom;
            } }, others, { style: style, className: classes, id: id, dir: rtl ? 'rtl' : 'ltr', onMouseDown: disabled ? noop : this._onMouseDown.bind(this), onTouchStart: disabled ? noop : this._onTouchStart.bind(this) }), marks !== false && marksPosition === 'above' ? react_1.default.createElement(mark_1.default, tslib_1.__assign({}, commonProps, { marks: this._calcMarks() })) : null, react_1.default.createElement("div", { className: "".concat(prefix, "range-inner") }, react_1.default.createElement(scale_1.default, tslib_1.__assign({}, commonProps, { scales: this._calcScales() })), react_1.default.createElement(track_1.default, tslib_1.__assign({}, commonProps)), this.isFixedWidth ? react_1.default.createElement(fixedSlider_1.default, tslib_1.__assign({}, commonProps)) : react_1.default.createElement("div", null, react_1.default.createElement(selected_1.default, tslib_1.__assign({}, commonProps)), react_1.default.createElement(LowerSlider, tslib_1.__assign({}, commonProps, { hasMovingClass: this.state.hasMovingClass && this._moving && this._moving.dragging === 'lower', tooltipVisible: tooltipVisible || this.state.lowerTooltipVisible, onTooltipVisibleChange: this.handleLowerTooltipVisibleChange, tooltipAnimation: this.state.tooltipAnimation ? {
                in: 'expandInUp',
                out: 'expandOutDown'
            } : false })), react_1.default.createElement(UpperSlider, tslib_1.__assign({}, commonProps, { onKeyDown: this.onKeyDown, hasMovingClass: this.state.hasMovingClass && this._moving && this._moving.dragging === 'upper', tooltipVisible: tooltipVisible || this.state.upperTooltipVisible, onTooltipVisibleChange: this.handleUpperTooltipVisibleChange, tooltipAnimation: this.state.tooltipAnimation ? {
                in: 'expandInUp',
                out: 'expandOutDown'
            } : false })))), marks !== false && marksPosition === 'below' ? react_1.default.createElement(mark_1.default, tslib_1.__assign({}, commonProps, { marks: this._calcMarks() })) : null);
    };
    Range.contextTypes = {
        prefix: prop_types_1.default.string
    };
    Range.propTypes = {
        /**
         * 样式类名的品牌前缀
         */
        prefix: prop_types_1.default.string,
        /**
         * 自定义类名
         */
        className: prop_types_1.default.string,
        /**
         * 自定义内敛样式
         */
        style: prop_types_1.default.object,
        /**
         * 滑块个数
         * @enumdesc 单个, 两个
         */
        slider: prop_types_1.default.oneOf(['single', 'double']),
        /**
         * 最小值
         */
        min: prop_types_1.default.number,
        /**
         * 最大值
         */
        max: prop_types_1.default.number,
        /**
         * 步长，取值必须大于 0，并且可被 (max - min) 整除。
         */
        step: prop_types_1.default.number,
        /**
         * 设置当前取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`
         */
        value: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.arrayOf(prop_types_1.default.number)]),
        tempValue: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.arrayOf(prop_types_1.default.number)]),
        /**
         * 设置初始取值。当 `slider` 为 `single` 时，使用 `Number`，否则用 `[Number, Number]`
         */
        defaultValue: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.arrayOf(prop_types_1.default.number)]),
        /**
         * 刻度数值显示逻辑（false 代表不显示，array 枚举显示的值，number 代表按 number 平分，object 表示按 key 划分，value 值显示）
         */
        marks: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.number, prop_types_1.default.arrayOf(prop_types_1.default.number), prop_types_1.default.object]),
        /**
         * marks显示在上方('above')or下方('below')
         */
        marksPosition: prop_types_1.default.oneOf(['above', 'below']),
        /**
         * 值为 `true` 时，滑块为禁用状态
         */
        disabled: prop_types_1.default.bool,
        /**
         * 当 Range 的值发生改变后，会触发 onChange 事件，并把改变后的值作为参数传入, 如果设置了value, 要配合此函数做受控使用
         * @param {String/number} value
         */
        onChange: prop_types_1.default.func,
        /**
         * 滑块拖动的时候触发的事件,不建议在这里setState, 一般情况下不需要用, 滑动时有特殊需求时使用
         * @param {String/number} value
         */
        onProcess: prop_types_1.default.func,
        /**
         * 是否显示 tip
         */
        hasTip: prop_types_1.default.bool,
        /**
         * 自定义 tip 显示内容
         * @param {Number|String} value 值
         * @return {ReactNode} 显示内容
         */
        tipRender: prop_types_1.default.func,
        id: prop_types_1.default.string,
        /**
         * 选中态反转
         */
        reverse: prop_types_1.default.bool,
        /**
         * 是否pure render
         */
        pure: prop_types_1.default.bool,
        /**
         * 是否为拖动线段类型,默认slider为double, defaultValue必传且指定区间
         */
        fixedWidth: prop_types_1.default.bool,
        /**
         * tooltip是否默认展示
         */
        tooltipVisible: prop_types_1.default.bool,
        /**
         * 是否已rtl模式展示
         */
        rtl: prop_types_1.default.bool,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {number} value 评分值
         */
        renderPreview: prop_types_1.default.func
    };
    Range.defaultProps = {
        prefix: 'next-',
        slider: 'single',
        min: 0,
        max: 100,
        step: 1,
        marks: false,
        disabled: false,
        fixedWidth: false,
        tooltipVisible: false,
        hasTip: true,
        onChange: noop,
        onProcess: noop,
        tipRender: function tipRender(value) {
            return value;
        },
        reverse: false,
        pure: false,
        marksPosition: 'above',
        rtl: false,
        isPreview: false
    };
    return Range;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Range);

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var classnames_1 = __webpack_require__(3);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var utils_1 = __webpack_require__(35);
var Scale = /** @class */function (_super) {
    tslib_1.__extends(Scale, _super);
    function Scale() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Scale.prototype._renderItems = function () {
        var _a = this.props,
            min = _a.min,
            max = _a.max,
            value = _a.value,
            prefix = _a.prefix,
            scales = _a.scales,
            rtl = _a.rtl;
        var items = [];
        scales.forEach(function (scale, i) {
            var _a;
            var classes = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "range-scale-item")] = true, _a.activated = (0, utils_1.inRange)(scale, value, min), _a));
            var style;
            if (rtl) {
                style = {
                    right: "".concat((0, utils_1.getPercent)(min, max, scale), "%"),
                    left: 'auto'
                };
            } else {
                style = {
                    left: "".concat((0, utils_1.getPercent)(min, max, scale), "%"),
                    right: 'auto'
                };
            }
            items.push(
            // "key" is for https://fb.me/react-warning-keys
            react_1.default.createElement("span", { className: classes, style: style, key: i }));
        });
        return items;
    };
    Scale.prototype.render = function () {
        var _a;
        var prefix = this.props.prefix;
        var classes = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "range-scale")] = true, _a));
        var items = this._renderItems();
        return react_1.default.createElement("div", { className: classes }, items);
    };
    Scale.propTypes = {
        min: prop_types_1.default.number,
        max: prop_types_1.default.number,
        value: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.arrayOf(prop_types_1.default.number)]),
        prefix: prop_types_1.default.string,
        scales: prop_types_1.default.arrayOf(prop_types_1.default.number),
        rtl: prop_types_1.default.bool
    };
    Scale.defaultProps = {
        prefix: 'next-',
        min: 0,
        max: 100,
        value: 0,
        rtl: false
    };
    return Scale;
}(react_1.default.Component);
exports.default = Scale;

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var classnames_1 = __webpack_require__(3);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var Track = function Track(_a) {
    var _b;
    var prefix = _a.prefix;
    var classes = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "range-track")] = true, _b));
    return react_1.default.createElement("div", { className: classes });
};
Track.propTypes = {
    prefix: prop_types_1.default.string
};
Track.defaultProps = {
    prefix: 'next-'
};
exports.default = Track;

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var classnames_1 = __webpack_require__(3);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var utils_1 = __webpack_require__(35);
var Selected = /** @class */function (_super) {
    tslib_1.__extends(Selected, _super);
    function Selected() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Selected.prototype._getStyle = function () {
        var _a = this.props,
            min = _a.min,
            max = _a.max,
            reverse = _a.reverse,
            rtl = _a.rtl;
        var value = this.props.value;
        if (!Array.isArray(value)) {
            value = [min, value];
        }
        var width = (value[1] - value[0]) * 100 / (max - min);
        var style;
        if (!rtl && !reverse) {
            // normal select
            style = {
                width: "".concat(width, "%"),
                left: "".concat((0, utils_1.getPercent)(min, max, value[0]), "%")
            };
        } else if (rtl && !reverse) {
            // select in rtl mode
            style = {
                width: "".concat(width, "%"),
                left: "".concat((0, utils_1.getPercent)(min, max, max + min - value[1]), "%")
            };
        } else if (!rtl && reverse) {
            // select in reverse mode
            style = {
                width: "".concat(100 - width, "%"),
                left: "".concat((0, utils_1.getPercent)(min, max, value[0]) + width, "%")
            };
        } else {
            // select in rtl & reverse mode
            style = {
                width: "".concat(100 - width, "%"),
                left: "".concat((0, utils_1.getPercent)(min, max, value[0]), "%")
            };
        }
        return style;
    };
    Selected.prototype._getStyleLeft = function () {
        var _a = this.props,
            min = _a.min,
            max = _a.max,
            rtl = _a.rtl;
        var value = this.props.value;
        if (!Array.isArray(value)) {
            value = [min, value];
        }
        var style = {
            width: "".concat((0, utils_1.getPercent)(min, max, value[0]), "%"),
            left: 0
        };
        if (rtl) {
            style.width = "".concat(100 - (0, utils_1.getPercent)(min, max, value[1]), "%");
        }
        return style;
    };
    Selected.prototype._getStyleRight = function () {
        var _a = this.props,
            min = _a.min,
            max = _a.max,
            rtl = _a.rtl;
        var value = this.props.value;
        if (!Array.isArray(value)) {
            value = [min, value];
        }
        var width = (value[1] - value[0]) * 100 / (max - min);
        var style = {
            width: "".concat(100 - (0, utils_1.getPercent)(min, max, value[0]) - width, "%"),
            left: "".concat((0, utils_1.getPercent)(min, max, value[0]) + width, "%")
        };
        if (rtl) {
            style = {
                width: "".concat((0, utils_1.getPercent)(min, max, value[0]), "%"),
                left: "".concat(100 - (0, utils_1.getPercent)(min, max, value[0]), "%")
            };
        }
        return style;
    };
    Selected.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            slider = _b.slider,
            reverse = _b.reverse,
            rtl = _b.rtl;
        var classes = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "range-selected")] = true, _a));
        var SeletedComps = react_1.default.createElement("div", { className: classes, style: this._getStyle() });
        if (slider === 'double' && reverse) {
            SeletedComps = react_1.default.createElement("div", null, react_1.default.createElement("div", { className: classes, style: this._getStyleLeft() }), react_1.default.createElement("div", { className: classes, style: this._getStyleRight() }));
        }
        return SeletedComps;
    };
    Selected.propTypes = {
        min: prop_types_1.default.number,
        max: prop_types_1.default.number,
        slider: prop_types_1.default.string,
        value: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.arrayOf(prop_types_1.default.number)]),
        prefix: prop_types_1.default.string,
        reverse: prop_types_1.default.bool,
        rtl: prop_types_1.default.bool
    };
    Selected.defaultProps = {
        prefix: 'next-',
        slider: 'single',
        min: 0,
        max: 100,
        value: 0,
        reverse: false,
        rtl: false
    };
    return Selected;
}(react_1.default.Component);
exports.default = Selected;

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var classnames_1 = __webpack_require__(3);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var utils_1 = __webpack_require__(35);
var Mark = /** @class */function (_super) {
    tslib_1.__extends(Mark, _super);
    function Mark() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Mark.prototype._renderItems = function () {
        var _a = this.props,
            min = _a.min,
            max = _a.max,
            value = _a.value,
            prefix = _a.prefix,
            marks = _a.marks,
            rtl = _a.rtl;
        var items = [];
        Object.keys(marks).forEach(function (mark, i) {
            var _a;
            var classes = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "range-mark-text")] = true, _a.activated = (0, utils_1.inRange)(mark, value, min), _a));
            var style;
            if (rtl) {
                style = {
                    right: "".concat((0, utils_1.getPercent)(min, max, mark), "%"),
                    left: 'auto'
                };
            } else {
                style = {
                    left: "".concat((0, utils_1.getPercent)(min, max, mark), "%"),
                    right: 'auto'
                };
            }
            items.push(
            // "key" is for https://fb.me/react-warning-keys
            react_1.default.createElement("span", { className: classes, style: style, key: i }, marks[mark]));
        });
        return items;
    };
    Mark.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            marksPosition = _b.marksPosition;
        var className = marksPosition === 'above' ? "".concat(prefix, "range-mark-above") : "".concat(prefix, "range-mark-below");
        var classes = (0, classnames_1.default)(className, (_a = {}, _a["".concat(prefix, "range-mark")] = true, _a));
        var items = this._renderItems();
        return react_1.default.createElement("div", { className: classes }, items);
    };
    Mark.propTypes = {
        min: prop_types_1.default.number,
        max: prop_types_1.default.number,
        value: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.arrayOf(prop_types_1.default.number)]),
        prefix: prop_types_1.default.string,
        marks: prop_types_1.default.object,
        marksPosition: prop_types_1.default.string,
        rtl: prop_types_1.default.bool
    };
    Mark.defaultProps = {
        prefix: 'next-',
        min: 0,
        max: 100,
        value: 0,
        marksPosition: '',
        rtl: false
    };
    return Mark;
}(react_1.default.Component);
exports.default = Mark;

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var classnames_1 = __webpack_require__(3);
var prop_types_1 = __webpack_require__(2);
var utils_1 = __webpack_require__(35);
function _getProps(min, max, value, rtl) {
    return {
        style: {
            left: rtl ? "".concat(100 - (0, utils_1.getPercent)(min, max, value), "%") : "".concat((0, utils_1.getPercent)(min, max, value), "%"),
            zIndex: 100
        },
        'aria-valuenow': value,
        'aria-valuetext': value,
        'aria-valuemin': min,
        'aria-valuemax': max
    };
}
function Slider(_a) {
    var _b;
    var prefix = _a.prefix,
        hasMovingClass = _a.hasMovingClass,
        min = _a.min,
        max = _a.max,
        value = _a.value,
        onKeyDown = _a.onKeyDown,
        rtl = _a.rtl;
    var classes = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "range-slider")] = true, _b["".concat(prefix, "range-slider-moving")] = hasMovingClass, _b));
    return react_1.default.createElement("div", tslib_1.__assign({ className: classes, onKeyDown: onKeyDown, role: "slider", tabIndex: 0 }, _getProps(min, max, value, rtl)), react_1.default.createElement("div", { className: "".concat(prefix, "range-slider-inner") }));
}
Slider.propTypes = {
    min: prop_types_1.default.number,
    max: prop_types_1.default.number,
    value: prop_types_1.default.number,
    prefix: prop_types_1.default.string,
    hasMovingClass: prop_types_1.default.bool,
    rtl: prop_types_1.default.bool
};
Slider.defaultProps = {
    prefix: 'next-',
    min: 0,
    max: 100,
    value: 0,
    hasMovingClass: false,
    rtl: false
};
exports.default = Slider;

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var util_1 = __webpack_require__(4);
var balloon_1 = __webpack_require__(56);
var utils_1 = __webpack_require__(35);
var Tooltip = balloon_1.default.Tooltip;
var noop = util_1.func.noop;
function _getStyle(min, max, value, rtl) {
    if (rtl) {
        return {
            left: "".concat((0, utils_1.getPercent)(min, max, max + min - value[1]), "%"),
            right: "".concat((0, utils_1.getPercent)(min, max, value[0]), "%")
        };
    }
    return {
        left: "".concat((0, utils_1.getPercent)(min, max, value[0]), "%"),
        right: "".concat(100 - (0, utils_1.getPercent)(min, max, value[1]), "%")
    };
}
function sliderFrag(props) {
    var prefix = props.prefix,
        min = props.min,
        max = props.max,
        value = props.value,
        disabled = props.disabled,
        onMouseEnter = props.onMouseEnter,
        onMouseLeave = props.onMouseLeave,
        onMouseDown = props.onMouseDown,
        rtl = props.rtl;
    var activeClass = !disabled && props.hasMovingClass ? "".concat(prefix, "range-active") : '';
    return react_1.default.createElement("div", { className: "".concat(prefix, "range-frag ").concat(activeClass), style: _getStyle(min, max, value, rtl), onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, onMouseDown: onMouseDown }, react_1.default.createElement("div", { className: "".concat(prefix, "range-selected") }), react_1.default.createElement("div", { className: "".concat(prefix, "range-slider") }, react_1.default.createElement("div", { className: "".concat(prefix, "range-slider-inner") })), react_1.default.createElement("div", { className: "".concat(prefix, "range-slider") }, react_1.default.createElement("div", { className: "".concat(prefix, "range-slider-inner") })));
}
sliderFrag.propTypes = {
    prefix: prop_types_1.default.string,
    min: prop_types_1.default.number,
    max: prop_types_1.default.number,
    hasMovingClass: prop_types_1.default.bool,
    onMouseEnter: prop_types_1.default.func,
    onMouseLeave: prop_types_1.default.func,
    onMouseDown: prop_types_1.default.func,
    value: prop_types_1.default.arrayOf(prop_types_1.default.number),
    disabled: prop_types_1.default.bool,
    rtl: prop_types_1.default.bool
};
var FixedSlider = /** @class */function (_super) {
    tslib_1.__extends(FixedSlider, _super);
    function FixedSlider(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            hasMovingClass: false,
            onTooltipVisibleChange: false,
            tooltipAnimation: true
        };
        return _this;
    }
    FixedSlider.prototype._onMouseEnter = function () {
        if (!(this.keyState === 'down')) {
            this.keyState = 'enter';
        }
        this.setState({
            hasMovingClass: true
        });
    };
    FixedSlider.prototype._onMouseLeave = function () {
        if (this.keyState === 'enter') {
            this.setState({
                hasMovingClass: false
            });
        }
    };
    FixedSlider.prototype._onMouseDown = function () {
        this.keyState = 'down';
        this.setState({
            hasMovingClass: true
        });
        this._addDocumentEvents();
    };
    FixedSlider.prototype._onMouseUp = function () {
        if (this.keyState === 'down') {
            this.keyState = '';
            this._removeDocumentEvents();
            this.setState({
                hasMovingClass: false
            });
        }
    };
    FixedSlider.prototype._addDocumentEvents = function () {
        this._onMouseUpListener = util_1.events.on(document, 'mouseup', this._onMouseUp.bind(this));
    };
    FixedSlider.prototype._removeDocumentEvents = function () {
        if (this._onMouseUpListener) {
            this._onMouseUpListener.off();
            this._onMouseUpListener = null;
        }
    };
    FixedSlider.prototype.render = function () {
        var _a = this.props,
            hasTip = _a.hasTip,
            value = _a.value,
            tipRender = _a.tipRender,
            tooltipVisible = _a.tooltipVisible,
            hasMovingClass = _a.hasMovingClass;
        var addedProps = {
            hasMovingClass: hasMovingClass || this.state.hasMovingClass,
            onMouseEnter: this._onMouseEnter.bind(this),
            onMouseLeave: this._onMouseLeave.bind(this),
            onMouseDown: this._onMouseDown.bind(this)
        };
        return hasTip ? react_1.default.createElement(Tooltip, { popupContainer: function popupContainer(target) {
                return target.parentNode;
            }, popupProps: {
                visible: tooltipVisible || hasMovingClass,
                animation: this.state.tooltipAnimation ? { in: 'expandInUp', out: 'expandOutDown' } : false
            }, trigger: sliderFrag(tslib_1.__assign(tslib_1.__assign({}, this.props), addedProps)), align: "t" }, tipRender("".concat(value[0], "-").concat(value[1]))) : sliderFrag(tslib_1.__assign(tslib_1.__assign({}, this.props), addedProps));
    };
    FixedSlider.propTypes = {
        hasTip: prop_types_1.default.bool,
        tooltipVisible: prop_types_1.default.bool,
        onTooltipVisibleChange: prop_types_1.default.func,
        tooltipAnimation: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.object]),
        value: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.arrayOf(prop_types_1.default.number)]),
        tipRender: prop_types_1.default.func,
        disabled: prop_types_1.default.bool,
        hasMovingClass: prop_types_1.default.bool,
        rtl: prop_types_1.default.bool
    };
    FixedSlider.defaultProps = {
        disabled: false,
        hasTip: true,
        onChange: noop,
        onProcess: noop,
        tipRender: function tipRender(value) {
            return value;
        },
        reverse: false,
        rtl: false
    };
    return FixedSlider;
}(react_1.default.Component);
exports.default = FixedSlider;

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var rating_1 = __webpack_require__(394);
exports.default = config_provider_1.default.config(rating_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('type' in props) {
            deprecated('type', 'showGrade', 'Rating');
            var type = props.type,
                others = tslib_1.__rest(props, ["type"]);
            props = tslib_1.__assign({ showGrade: type === 'grade' }, others);
        }
        var disabled = props.disabled,
            readOnly = props.readOnly;
        props.disabled = disabled || readOnly;
        return props;
    }
});

/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
var zh_cn_1 = __webpack_require__(9);
var noop = util_1.func.noop,
    bindCtx = util_1.func.bindCtx;
var ENTER = util_1.KEYCODE.ENTER,
    LEFT = util_1.KEYCODE.LEFT,
    UP = util_1.KEYCODE.UP,
    RIGHT = util_1.KEYCODE.RIGHT,
    DOWN = util_1.KEYCODE.DOWN;
var supportKeys = [ENTER, LEFT, UP, RIGHT, DOWN];
// 评分组件的大小与icon的大小映射关系
var ICON_SIZE_MAP = {
    small: 'xs',
    medium: 'small',
    large: 'medium'
};
/** Rating */
var Rating = /** @class */function (_super) {
    tslib_1.__extends(Rating, _super);
    function Rating(props) {
        var _this = _super.call(this, props) || this;
        _this.saveRef = function (ref, i) {
            _this["refs-rating-icon-".concat(i)] = ref;
        };
        _this.state = {
            value: 'value' in props ? props.value : props.defaultValue,
            hoverValue: 0,
            cleanedValue: null,
            iconSpace: 0,
            iconSize: 0,
            clicked: false // 标记组件是否被点击过
        };
        _this.timer = null;
        bindCtx(_this, ['handleClick', 'handleHover', 'handleLeave', 'onKeyDown']);
        return _this;
    }
    Rating.currentValue = function (min, max, hoverValue, stateValue) {
        var value = hoverValue ? hoverValue : stateValue;
        value = value >= max ? max : value;
        value = value <= min ? min : value;
        return value || 0;
    };
    Rating.getDerivedStateFromProps = function (nextProps, prevState) {
        var state = {};
        if ('value' in nextProps) {
            state.value = nextProps.value || 0;
        }
        if ('disabled' in nextProps || 'readOnly' in nextProps || 'isPreview' in nextProps || 'renderPreview' in nextProps) {
            state.disabled = nextProps.disabled || nextProps.readOnly || nextProps.isPreview && !('renderPreview' in nextProps);
        }
        return state;
    };
    Rating.prototype.componentDidMount = function () {
        this.getRenderResult();
    };
    Rating.prototype.componentWillUnmount = function () {
        this.clearTimer();
    };
    // 清除延时
    Rating.prototype.clearTimer = function () {
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
    };
    Rating.prototype.getRenderResult = function () {
        var count = this.props.count;
        var _a = this.state,
            iconSpace = _a.iconSpace,
            iconSize = _a.iconSize;
        var icon = this['refs-rating-icon-0'];
        if (icon && this.underlayNode) {
            var newIconSize = icon.offsetWidth;
            var newIconSpace = (this.underlayNode.offsetWidth - count * newIconSize) / (count + 1);
            if (newIconSize !== iconSize || newIconSpace !== iconSpace) {
                this.setState({
                    iconSpace: newIconSpace,
                    iconSize: newIconSize
                });
            }
        }
    };
    Rating.prototype.getValue = function (e) {
        // 如定位不准，优先纠正定位
        this.getRenderResult();
        var _a = this.props,
            allowHalf = _a.allowHalf,
            count = _a.count,
            rtl = _a.rtl;
        var _b = this.state,
            iconSpace = _b.iconSpace,
            iconSize = _b.iconSize;
        var pos = e.pageX - this.underlayNode.getBoundingClientRect().left;
        var fullNum = Math.floor(pos / (iconSpace + iconSize));
        var surplusNum = (pos - fullNum * (iconSpace + iconSize) - iconSpace) / iconSize;
        var value = Number(fullNum) + Number(surplusNum.toFixed(1));
        if (value >= count) {
            value = count;
        } else if (allowHalf) {
            var floorValue = Math.floor(value);
            if (rtl) {
                value = value - 0.5 >= floorValue ? floorValue + 1.5 : floorValue + 1;
            } else {
                value = value - 0.5 >= floorValue ? floorValue + 1 : floorValue + 0.5;
            }
        } else {
            value = Math.floor(value) + 1;
        }
        return rtl ? count - value + 1 : value;
    };
    Rating.prototype.handleHover = function (e) {
        var _this = this;
        if (this.state.disabled) {
            return;
        }
        var value = this.getValue(e);
        var onHoverChange = this.props.onHoverChange;
        var cleanedValue = this.state.cleanedValue;
        if (cleanedValue !== value) {
            this.clearTimer();
            this.timer = setTimeout(function () {
                _this.setState({ hoverValue: value, cleanedValue: null }, function () {
                    onHoverChange(value);
                });
            }, 0);
        }
    };
    Rating.prototype.handleLeave = function () {
        var onHoverChange = this.props.onHoverChange;
        if (this.state.disabled) {
            return;
        }
        this.clearTimer();
        this.setState({
            hoverValue: 0,
            cleanedValue: null
        });
        onHoverChange(undefined);
    };
    Rating.prototype.onKeyDown = function (e) {
        if (this.state.disabled) {
            return;
        }
        var _a = this.props,
            onKeyDown = _a.onKeyDown,
            count = _a.count;
        var disabled = this.state.disabled;
        if (disabled || supportKeys.indexOf(e.keyCode) < 0) {
            return !onKeyDown || onKeyDown(e);
        }
        var _b = this.state,
            hoverValue = _b.hoverValue,
            value = _b.value;
        var changingValue = hoverValue;
        if (changingValue === 0) {
            changingValue = value;
        }
        switch (e.keyCode) {
            case DOWN:
            case RIGHT:
                if (changingValue < count) {
                    changingValue += 1;
                } else {
                    changingValue = 1;
                }
                this.handleChecked(changingValue);
                break;
            case UP:
            case LEFT:
                if (changingValue > 1) {
                    changingValue -= 1;
                } else {
                    changingValue = count;
                }
                this.handleChecked(changingValue);
                break;
            case ENTER:
                this.props.onChange(changingValue);
                this.setState({
                    value: changingValue,
                    hoverValue: changingValue
                });
                break;
        }
        return !onKeyDown || onKeyDown(e);
    };
    Rating.prototype.handleChecked = function (index) {
        if (this.state.disabled) {
            return;
        }
        this.setState({ hoverValue: index });
    };
    Rating.prototype.handleClick = function (e) {
        var _this = this;
        if (this.state.disabled) {
            return;
        }
        var allowClear = this.props.allowClear;
        var value = this.state.value;
        var newValue = this.getValue(e);
        var isReset = false;
        if (allowClear) {
            isReset = newValue === value;
        }
        this.handleLeave();
        if (newValue < 0) {
            return;
        }
        if (!('value' in this.props)) {
            this.setState({ value: isReset ? 0 : newValue, clicked: true });
        }
        if (newValue !== value || isReset) {
            this.props.onChange(isReset ? 0 : newValue);
        }
        setTimeout(function () {
            _this.setState({ clicked: false });
        }, 100);
        this.setState({
            cleanedValue: isReset ? newValue : null
        });
    };
    Rating.prototype.getOverlayWidth = function () {
        var _a = this.state,
            hoverValue = _a.hoverValue,
            iconSpace = _a.iconSpace,
            iconSize = _a.iconSize;
        if (!iconSpace || !iconSize) {
            return 'auto';
        }
        var value = Rating.currentValue(0, this.props.count, hoverValue, this.state.value);
        var floorValue = Math.floor(value);
        return iconSize * value + (floorValue + 1) * iconSpace;
    };
    Rating.prototype.getInfoLeft = function () {
        var _a = this.state,
            value = _a.value,
            hoverValue = _a.hoverValue,
            iconSpace = _a.iconSpace,
            iconSize = _a.iconSize;
        var infoValue = hoverValue || value;
        var ceilValue = Math.ceil(infoValue);
        return iconSize * (ceilValue - 1) + ceilValue * iconSpace;
    };
    Rating.prototype.render = function () {
        var _a, _b, _c;
        var _this = this;
        var _d = this.props,
            id = _d.id,
            prefix = _d.prefix,
            className = _d.className,
            showGrade = _d.showGrade,
            count = _d.count,
            size = _d.size,
            iconType = _d.iconType,
            strokeMode = _d.strokeMode,
            readAs = _d.readAs,
            rtl = _d.rtl,
            isPreview = _d.isPreview,
            renderPreview = _d.renderPreview,
            locale = _d.locale;
        var disabled = this.state.disabled;
        var others = util_1.obj.pickOthers(Rating.propTypes, this.props);
        var _e = this.state,
            hoverValue = _e.hoverValue,
            clicked = _e.clicked;
        var underlay = [],
            overlay = [];
        var enableA11y = !!id;
        // 获得Value
        var value = Rating.currentValue(0, count, hoverValue, this.state.value);
        // icon的sizeMap
        var sizeMap = ICON_SIZE_MAP[size];
        var _loop_1 = function _loop_1(i) {
            var _f;
            var isCurrent = Math.ceil(value - 1) === i;
            var iconCls = (0, classnames_1.default)((_f = {
                hover: hoverValue > 0 && isCurrent,
                clicked: clicked && isCurrent
            }, _f["".concat(prefix, "rating-symbol-icon")] = !iconType, _f));
            var iconNode = iconType ? react_1.default.createElement(icon_1.default, { type: iconType, size: sizeMap, className: iconCls }) : react_1.default.createElement(icon_1.default, { type: "favorites-filling", size: sizeMap, className: iconCls });
            var saveRefs = function saveRefs(ref) {
                _this.saveRef(ref, i);
            };
            underlay.push(react_1.default.createElement("span", { ref: saveRefs, key: "underlay-".concat(i), className: "".concat(prefix, "rating-icon") }, iconNode));
            if (enableA11y) {
                overlay.push(react_1.default.createElement("input", { id: "".concat(id, "-").concat(prefix, "star").concat(i + 1), key: "input-".concat(i), className: "".concat(prefix, "sr-only"), "aria-checked": i + 1 === parseInt(hoverValue), checked: i + 1 === parseInt(hoverValue), onChange: this_1.handleChecked.bind(this_1, i + 1), type: "radio", name: "rating" }));
            }
            overlay.push(react_1.default.createElement("label", { key: "overlay-".concat(i), htmlFor: enableA11y ? "".concat(id, "-").concat(prefix, "star").concat(i + 1) : null, className: "".concat(prefix, "rating-icon") }, iconNode, enableA11y ? react_1.default.createElement("span", { className: "".concat(prefix, "sr-only") }, readAs(i + 1)) : null));
        };
        var this_1 = this;
        for (var i = 0; i < count; i++) {
            _loop_1(i);
        }
        var ratingCls = (0, classnames_1.default)(["".concat(prefix, "rating"), "".concat(prefix, "rating-").concat(size)], (_a = {}, _a["".concat(prefix, "rating-grade-low")] = value <= count * 0.4, _a["".concat(prefix, "rating-grade-high")] = value > count * 0.4, _a["".concat(prefix, "rating-stroke-mode")] = strokeMode, _a.hover = hoverValue > 0, _a), className);
        var baseCls = (0, classnames_1.default)("".concat(prefix, "rating-base"), (_b = {}, _b["".concat(prefix, "rating-base-disabled")] = disabled, _b));
        var previewCls = (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "form-preview")] = true, _c[className] = !!className, _c));
        var overlayStyle = {
            width: this.getOverlayWidth()
        };
        var infoStyle = {
            left: this.getInfoLeft(),
            display: hoverValue ? 'block' : 'none'
        };
        var finalProps = disabled ? {} : {
            onClick: this.handleClick,
            onMouseOver: this.handleHover,
            onMouseMove: this.handleHover,
            onMouseLeave: this.handleLeave
        };
        if (rtl) {
            others.dir = 'rtl';
        }
        if (isPreview && 'renderPreview' in this.props) {
            return react_1.default.createElement("div", tslib_1.__assign({ id: id }, others, { className: previewCls }), renderPreview(value, this.props));
        }
        return react_1.default.createElement("div", tslib_1.__assign({ id: id }, others, { className: ratingCls, onKeyDown: this.onKeyDown, tabIndex: "0", role: "group", "aria-label": locale.description }), react_1.default.createElement("div", tslib_1.__assign({ className: baseCls }, finalProps), react_1.default.createElement("div", { className: "".concat(prefix, "rating-underlay"), ref: function ref(n) {
                return _this.underlayNode = n;
            }, "aria-hidden": true }, underlay), react_1.default.createElement("div", { className: "".concat(prefix, "rating-overlay"), style: overlayStyle, onClick: function onClick(e) {
                return e.preventDefault();
            } }, overlay)), showGrade ? react_1.default.createElement("div", { className: "".concat(prefix, "rating-info"), style: infoStyle }, readAs(value)) : null);
    };
    Rating.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 默认值
         */
        defaultValue: prop_types_1.default.number,
        /**
         * 值
         */
        value: prop_types_1.default.number,
        /**
         * 评分的总数
         */
        count: prop_types_1.default.number,
        /**
         * 是否显示 grade
         */
        showGrade: prop_types_1.default.bool,
        /**
         * 尺寸
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        /**
         * 是否允许半星评分
         */
        allowHalf: prop_types_1.default.bool,
        /**
         * 是否允许再次点击后清除
         */
        allowClear: prop_types_1.default.bool,
        /**
         * 用户点击评分时触发的回调
         * @param {Number} value 评分值
         */
        onChange: prop_types_1.default.func,
        /**
         * 用户hover评分时触发的回调
         * @param {Number} value 评分值
         */
        onHoverChange: prop_types_1.default.func,
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 评分文案生成方法，传入id支持无障碍时，读屏软件可读
         */
        readAs: prop_types_1.default.func,
        // 实验属性: 自定义评分icon
        iconType: prop_types_1.default.string,
        // 实验属性: 开启 `-webkit-text-stroke` 显示边框颜色，在IE中无效
        strokeMode: prop_types_1.default.bool,
        className: prop_types_1.default.string,
        id: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        /**
         * 自定义国际化文案对象
         */
        locale: prop_types_1.default.object,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {number} value 评分值
         */
        renderPreview: prop_types_1.default.func,
        /**
         * 是否为只读态，效果上同 disabeld
         */
        readOnly: prop_types_1.default.bool
    };
    Rating.defaultProps = {
        prefix: 'next-',
        size: 'medium',
        disabled: false,
        readOnly: false,
        isPreview: false,
        count: 5,
        showGrade: false,
        defaultValue: 0,
        readAs: function readAs(val) {
            return val;
        },
        allowHalf: false,
        allowClear: false,
        onChange: noop,
        onHoverChange: noop,
        locale: zh_cn_1.default.Rating
    };
    return Rating;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Rating);

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var input_1 = __webpack_require__(15);
var select_1 = __webpack_require__(24);
var button_1 = __webpack_require__(14);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
var zh_cn_1 = __webpack_require__(9);
var Group = input_1.default.Group;
var AutoComplete = select_1.default.AutoComplete;
var noop = util_1.func.noop;
/**
 * Search
 * @description 输入框部分继承 Select.AutoComplete 的能力，可以直接用AutoComplete 的 api
 */
var Search = /** @class */function (_super) {
    tslib_1.__extends(Search, _super);
    function Search(props) {
        var _this = _super.call(this, props) || this;
        _this.onChange = function (value, type) {
            var _a;
            var argv = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                argv[_i - 2] = arguments[_i];
            }
            if (_this.props.disabled) {
                return;
            }
            if (!('value' in _this.props)) {
                _this.setState({ value: value });
            }
            (_a = _this.props).onChange.apply(_a, tslib_1.__spreadArray([value, type], tslib_1.__read(argv), false));
            if (type === 'enter') {
                // 先记录，保留原先的执行顺序
                var highlightKey = _this.highlightKey;
                // 重置
                _this.highlightKey = '';
                // 若有匹配项，执行onSearch
                if (highlightKey) {
                    _this.props.onSearch(value, _this.state.filterValue);
                }
            }
        };
        _this.onPressEnter = function () {
            // 有匹配项情况，enter会触发 onChange，由那里执行onSearch
            if (_this.highlightKey) {
                return;
            }
            _this.onSearch();
        };
        _this.onSearch = function () {
            if (_this.props.disabled) {
                return;
            }
            _this.props.onSearch(_this.state.value, _this.state.filterValue);
        };
        _this.onFilterChange = function (filterValue) {
            if (!('filterValue' in _this.props)) {
                _this.setState({ filterValue: filterValue });
            }
            _this.props.onFilterChange(filterValue);
        };
        _this.onToggleHighlightItem = function (highlightKey) {
            var _a;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            _this.highlightKey = highlightKey;
            (_a = _this.props).onToggleHighlightItem.apply(_a, tslib_1.__spreadArray([highlightKey], tslib_1.__read(args), false));
        };
        _this.onKeyDown = function (e) {
            if (_this.props.disabled) {
                return;
            }
            if (e.keyCode !== util_1.KEYCODE.ENTER) {
                return;
            }
            _this.onSearch();
        };
        _this.saveInputRef = function (ref) {
            if (ref && ref.getInstance()) {
                _this.inputRef = ref.getInstance();
            }
        };
        var value = 'value' in props ? props.value : props.defaultValue;
        var filterValue = 'filterValue' in props ? props.filterValue : props.defaultFilterValue;
        _this.state = {
            value: typeof value === 'undefined' ? '' : value,
            filterValue: filterValue,
            ifFocus: false
        };
        _this.highlightKey = null;
        _this.handleBlur = _this.handleBlur.bind(_this);
        _this.handleFocus = _this.handleFocus.bind(_this);
        return _this;
    }
    Search.getDerivedStateFromProps = function (nextProps, prevState) {
        var nextState = {};
        if ('value' in nextProps && nextProps.value !== prevState.value) {
            var value = nextProps.value;
            nextState.value = value === undefined || value === null ? '' : nextProps.value;
        }
        if ('filterValue' in nextProps && nextProps.filterValue !== prevState.filterValue) {
            var filterValue = nextProps.filterValue;
            nextState.filterValue = filterValue === undefined ? '' : filterValue;
        }
        if (Object.keys(nextState).length > 0) {
            return nextState;
        }
        return null;
    };
    Search.prototype.focus = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        (_a = this.inputRef).focus.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(args), false));
    };
    Search.prototype.handleFocus = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.setState({
            ifFocus: true
        });
        this.props.onFocus && (_a = this.props).onFocus.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(args), false));
    };
    Search.prototype.handleBlur = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.setState({
            ifFocus: false
        });
        this.props.onBlur && (_a = this.props).onBlur.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(args), false));
    };
    Search.prototype.render = function () {
        var _a, _b, _c;
        var _d = this.props,
            shape = _d.shape,
            filter = _d.filter,
            hasIcon = _d.hasIcon,
            disabled = _d.disabled,
            placeholder = _d.placeholder,
            type = _d.type,
            className = _d.className,
            style = _d.style,
            size = _d.size,
            prefix = _d.prefix,
            searchText = _d.searchText,
            dataSource = _d.dataSource,
            filterProps = _d.filterProps,
            buttonProps = _d.buttonProps,
            fillProps = _d.fillProps,
            popupContent = _d.popupContent,
            followTrigger = _d.followTrigger,
            hasClear = _d.hasClear,
            visible = _d.visible,
            locale = _d.locale,
            rtl = _d.rtl,
            icons = _d.icons,
            autoHighlightFirstItem = _d.autoHighlightFirstItem,
            others = tslib_1.__rest(_d, ["shape", "filter", "hasIcon", "disabled", "placeholder", "type", "className", "style", "size", "prefix", "searchText", "dataSource", "filterProps", "buttonProps", "fillProps", "popupContent", "followTrigger", "hasClear", "visible", "locale", "rtl", "icons", "autoHighlightFirstItem"]);
        var ifFocus = this.state.ifFocus;
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "search")] = true, _a["".concat(prefix, "search-").concat(shape)] = true, _a["".concat(prefix).concat(type)] = type, _a["".concat(prefix).concat(size)] = size, _a["".concat(prefix, "disabled")] = !!disabled, _a["".concat(prefix, "search-focus")] = ifFocus, _a[className] = !!className, _a));
        var searchIcon = null,
            filterSelect = null,
            searchBtn = null,
            iconsSearch = icons.search;
        if (!(0, react_1.isValidElement)(icons.search) && icons.search) {
            iconsSearch = react_1.default.createElement("span", null, icons.search);
        }
        if (shape === 'simple') {
            var cls_1 = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "search-icon")] = true, _b[buttonProps.className] = !!buttonProps.className, _b["".concat(prefix, "search-symbol-icon")] = !iconsSearch, _b));
            hasIcon && (searchIcon = react_1.default.cloneElement(iconsSearch || react_1.default.createElement(icon_1.default, { type: "search" }), tslib_1.__assign(tslib_1.__assign({ role: 'button', 'aria-disabled': disabled, 'aria-label': locale.buttonText }, buttonProps), { className: cls_1, onClick: this.onSearch, onKeyDown: this.onKeyDown })));
        } else {
            var cls_2 = (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "search-btn")] = true, _c[buttonProps.className] = !!buttonProps.className, _c));
            searchBtn = react_1.default.createElement(button_1.default, tslib_1.__assign({ tabIndex: "0", "aria-disabled": disabled, "aria-label": locale.buttonText, className: cls_2, disabled: disabled }, buttonProps, { onClick: this.onSearch, onKeyDown: this.onKeyDown }), hasIcon ? iconsSearch || react_1.default.createElement(icon_1.default, { type: "search", className: "".concat(prefix, "search-symbol-icon") }) : null, searchText ? react_1.default.createElement("span", { className: "".concat(prefix, "search-btn-text") }, searchText) : null);
        }
        if (filter.length > 0) {
            filterSelect = react_1.default.createElement(select_1.default, tslib_1.__assign({}, filterProps, { followTrigger: followTrigger, hasBorder: false, dataSource: filter, size: size, disabled: disabled, value: this.state.filterValue, onChange: this.onFilterChange }));
        }
        var othersAttributes = util_1.obj.pickOthers(Search.propTypes, others);
        if (visible !== undefined) {
            // 受控属性 visible 不能直接写在组件上
            othersAttributes.visible = Boolean(visible);
        }
        var dataAttr = util_1.obj.pickAttrsWith(others, 'data-');
        var left = react_1.default.createElement(Group, { addonBefore: filterSelect, className: "".concat(prefix, "search-left"), addonBeforeClassName: "".concat(prefix, "search-left-addon") }, react_1.default.createElement(AutoComplete, tslib_1.__assign({ "aria-label": locale.buttonText }, othersAttributes, { followTrigger: followTrigger, role: "searchbox", hasClear: hasClear, className: "".concat(prefix, "search-input"), size: size, fillProps: fillProps, placeholder: placeholder, dataSource: dataSource, innerAfter: searchIcon, onPressEnter: this.onPressEnter, value: this.state.value, onChange: this.onChange, onToggleHighlightItem: this.onToggleHighlightItem, autoHighlightFirstItem: autoHighlightFirstItem, popupContent: popupContent, disabled: disabled, ref: this.saveInputRef, onFocus: this.handleFocus, onBlur: this.handleBlur })));
        return react_1.default.createElement("span", tslib_1.__assign({ className: cls, style: style }, dataAttr, { dir: rtl ? 'rtl' : undefined }), searchBtn ? react_1.default.createElement(Group, { addonAfter: searchBtn }, left) : left);
    };
    Search.propTypes = {
        /**
         * 样式前缀
         */
        prefix: prop_types_1.default.string,
        /**
         * 形状
         */
        shape: prop_types_1.default.oneOf(['normal', 'simple']),
        /**
         * 类型 shape=normal: primary/secondary; shape=simple: normal/dark;
         */
        type: prop_types_1.default.oneOf(['primary', 'secondary', 'normal', 'dark']),
        /**
         * 大小
         * @enumdesc '大', '小'
         */
        size: prop_types_1.default.oneOf(['large', 'medium']),
        /**
         * 搜索框默认值
         */
        defaultValue: prop_types_1.default.string,
        /**
         * 搜索框数值
         */
        value: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        /**
         * 输入关键字时的回掉
         * @param {Object} value 输入值
         */
        onChange: prop_types_1.default.func,
        /**
         * 点击搜索按钮触发的回调
         * @param {String} value 输入值
         * @param {String} filterValue 选项值
         */
        onSearch: prop_types_1.default.func,
        /**
         * 选择器默认值
         */
        defaultFilterValue: prop_types_1.default.string,
        /**
         * 填充到输入框里的值的 key ，默认是value
         */
        fillProps: prop_types_1.default.string,
        /**
         * 选择器
         */
        filter: prop_types_1.default.array,
        /**
         * 选择器值
         */
        filterValue: prop_types_1.default.string,
        /**
         * 选择器发生变化时回调
         * @param {Object} filter value
         */
        onFilterChange: prop_types_1.default.func,
        /**
         * 搜索框下拉联想列表
         */
        dataSource: prop_types_1.default.array,
        /**
         * 默认提示
         */
        placeholder: prop_types_1.default.string,
        /**
         * button 的内容
         */
        searchText: prop_types_1.default.node,
        /**
         * 自定义样式
         */
        style: prop_types_1.default.object,
        /**
         * 样式名称
         */
        className: prop_types_1.default.string,
        /**
         * 选择器的props
         */
        filterProps: prop_types_1.default.object,
        /**
         * 按钮的额外属性
         */
        buttonProps: prop_types_1.default.object,
        /**
         * 自定义渲染的的下拉框
         */
        popupContent: prop_types_1.default.node,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 自定义渲染的的下拉框
         */
        visible: prop_types_1.default.bool,
        /**
         * 是否显示清除按钮
         */
        hasClear: prop_types_1.default.bool,
        /**
         * 是否显示搜索按钮
         */
        hasIcon: prop_types_1.default.bool,
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        locale: prop_types_1.default.object,
        rtl: prop_types_1.default.bool,
        /**
         * 可配置的icons，包括 search 等
         */
        icons: prop_types_1.default.object,
        /**
         * 是否自动高亮第一个元素
         */
        autoHighlightFirstItem: prop_types_1.default.bool,
        /**
         * 上下箭头切换选项的回调
         */
        onToggleHighlightItem: prop_types_1.default.func
    };
    Search.defaultProps = {
        prefix: 'next-',
        shape: 'normal',
        type: 'normal',
        size: 'medium',
        hasIcon: true,
        filter: [],
        locale: zh_cn_1.default.Search,
        buttonProps: {},
        onChange: noop,
        onSearch: noop,
        onFilterChange: noop,
        onToggleHighlightItem: noop,
        hasClear: false,
        disabled: false,
        icons: {},
        autoHighlightFirstItem: true
    };
    return Search;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Search);

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var shell_1 = __webpack_require__(397);
var base_1 = __webpack_require__(399);
var config_provider_1 = __webpack_require__(5);
var Shell = (0, shell_1.default)({
    componentName: 'Shell'
});
['Branding', 'Navigation', 'Action', 'MultiTask', 'LocalNavigation', 'AppBar', 'Content', 'Footer', 'Ancillary', 'ToolDock', 'ToolDockItem'].forEach(function (key) {
    Shell[key] = (0, base_1.default)({
        componentName: key
    });
});
Shell.Page = config_provider_1.default.config((0, shell_1.default)({
    componentName: 'Page'
}));
exports.default = config_provider_1.default.config(Shell, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('Component' in props) {
            deprecated('Component', 'component', 'Shell');
            var Component = props.Component,
                component = props.component,
                others = tslib_1.__rest(props, ["Component", "component"]);
            if ('component' in props) {
                props = tslib_1.__assign({ component: component }, others);
            } else {
                props = tslib_1.__assign({ component: Component }, others);
            }
        }
        return props;
    }
});

/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var classnames_1 = __webpack_require__(3);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var config_provider_1 = __webpack_require__(5);
var affix_1 = __webpack_require__(67);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(398);
/**
 * Shell
 */
function ShellBase(props) {
    var componentName = props.componentName;
    var Shell = /** @class */function (_super) {
        tslib_1.__extends(Shell, _super);
        function Shell(props) {
            var _this = _super.call(this, props) || this;
            _this.checkAsideFixed = function () {
                var fixedHeader = _this.props.fixedHeader;
                if (!fixedHeader) {
                    return;
                }
                var headerHeight;
                if (_this.headerRef && (_this.navigationFixed || _this.toolDockFixed)) {
                    headerHeight = util_1.dom.getStyle(_this.headerRef, 'height');
                }
                if (_this.navigationFixed) {
                    var style = {};
                    style.marginLeft = util_1.dom.getStyle(_this.navRef, 'width');
                    util_1.dom.addClass(_this.navRef, 'fixed');
                    headerHeight && util_1.dom.setStyle(_this.navRef, { top: headerHeight });
                    util_1.dom.setStyle(_this.localNavRef || _this.submainRef, style);
                }
                if (_this.toolDockFixed) {
                    var style = {};
                    style.marginRight = util_1.dom.getStyle(_this.toolDockRef, 'width');
                    util_1.dom.addClass(_this.toolDockRef, 'fixed');
                    headerHeight && util_1.dom.setStyle(_this.toolDockRef, { top: headerHeight });
                    util_1.dom.setStyle(_this.localNavRef || _this.submainRef, style);
                }
            };
            _this.setChildCollapse = function (child, mark) {
                var _a = _this.state,
                    device = _a.device,
                    collapseMap = _a.collapseMap,
                    controll = _a.controll;
                var collapse = child.props.collapse;
                var deviceMap = (0, util_2.getCollapseMap)(device);
                var props = {};
                // 非受控模式
                if ((0, util_2.isBoolean)(collapse) === false) {
                    props.collapse = controll ? collapseMap[mark] : deviceMap[mark];
                    // props.collapse = collapseMap[mark];
                }
                if (device !== 'phone' && mark === 'Navigation') {
                    props.miniable = true;
                }
                return react_1.default.cloneElement(child, props);
            };
            _this.toggleAside = function (mark, props, e) {
                var _a;
                var _b = _this.state,
                    device = _b.device,
                    collapseMap = _b.collapseMap;
                var deviceMap = (0, util_2.getCollapseMap)(device);
                var current = props.collapse;
                var newCollapseMap = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, deviceMap), collapseMap), (_a = {}, _a[mark] = !current, _a));
                _this.setState({
                    controll: true,
                    collapseMap: newCollapseMap
                });
                if (props && typeof props.onCollapseChange === 'function') {
                    props.onCollapseChange(newCollapseMap[mark]);
                }
                var children = _this.props.children;
                var com;
                if (mark === 'Navigation') {
                    com = children.filter(function (child) {
                        return child && child.type._typeMark.replace('Shell_', '') === mark && child.props.direction !== 'hoz';
                    }).pop();
                } else {
                    com = children.filter(function (child) {
                        return child && child.type._typeMark.replace('Shell_', '') === mark;
                    }).pop();
                }
                var _c = com.props.triggerProps,
                    triggerProps = _c === void 0 ? {} : _c;
                if (typeof triggerProps.onClick === 'function') {
                    triggerProps.onClick(e, _this.state.collapseMap[mark]);
                }
            };
            _this.toggleNavigation = function (e) {
                var mark = 'Navigation';
                var props = _this.layout[mark].props;
                if ('keyCode' in e && e.keyCode !== util_1.KEYCODE.ENTER) {
                    return;
                }
                _this.toggleAside(mark, props, e);
            };
            _this.toggleLocalNavigation = function (e) {
                var mark = 'LocalNavigation';
                var props = _this.layout[mark].props;
                if ('keyCode' in e && e.keyCode !== util_1.KEYCODE.ENTER) {
                    return;
                }
                _this.toggleAside(mark, props, e);
            };
            _this.toggleAncillary = function (e) {
                var mark = 'Ancillary';
                var props = _this.layout[mark].props;
                if ('keyCode' in e && e.keyCode !== util_1.KEYCODE.ENTER) {
                    return;
                }
                _this.toggleAside(mark, props, e);
            };
            _this.toggleToolDock = function (e) {
                var mark = 'ToolDock';
                var props = _this.layout[mark].props;
                if ('keyCode' in e && e.keyCode !== util_1.KEYCODE.ENTER) {
                    return;
                }
                _this.toggleAside(mark, props, e);
            };
            _this.saveHeaderRef = function (ref) {
                _this.headerRef = ref;
            };
            _this.saveLocalNavRef = function (ref) {
                _this.localNavRef = ref;
            };
            _this.saveNavRef = function (ref) {
                _this.navRef = ref;
            };
            _this.saveSubmainRef = function (ref) {
                _this.submainRef = ref;
            };
            _this.saveToolDockRef = function (ref) {
                _this.toolDockRef = ref;
            };
            _this.renderShell = function (props) {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                var prefix = props.prefix,
                    children = props.children,
                    className = props.className,
                    type = props.type,
                    fixedHeader = props.fixedHeader,
                    others = tslib_1.__rest(props, ["prefix", "children", "className", "type", "fixedHeader"]);
                var device = _this.state.device;
                var layout = {};
                layout.header = {};
                var hasToolDock = false,
                    needNavigationTrigger = false,
                    needDockTrigger = false;
                react_1.default.Children.map(children, function (child) {
                    if (child && typeof child.type === 'function') {
                        var mark = child.type._typeMark.replace('Shell_', '');
                        switch (mark) {
                            case 'Branding':
                            case 'Action':
                                layout.header[mark] = child;
                                break;
                            case 'MultiTask':
                                layout.taskHeader = child;
                                break;
                            case 'LocalNavigation':
                                if (!layout[mark]) {
                                    layout[mark] = [];
                                }
                                layout[mark] = _this.setChildCollapse(child, mark);
                                break;
                            case 'Ancillary':
                                if (!layout[mark]) {
                                    layout[mark] = [];
                                }
                                layout[mark] = _this.setChildCollapse(child, mark);
                                break;
                            case 'ToolDock':
                                hasToolDock = true;
                                if (!layout[mark]) {
                                    layout[mark] = [];
                                }
                                _this.toolDockFixed = child.props.fixed;
                                var childT = _this.setChildCollapse(child, mark);
                                layout[mark] = childT;
                                break;
                            case 'AppBar':
                            case 'Content':
                            case 'Footer':
                                layout.content || (layout.content = []);
                                layout.content.push(child);
                                break;
                            case 'Page':
                                layout.page || (layout.page = []);
                                layout.page = child;
                                break;
                            case 'Navigation':
                                if (child.props.direction === 'hoz') {
                                    layout.header[mark] = child;
                                } else {
                                    if (!layout[mark]) {
                                        layout[mark] = [];
                                    }
                                    needNavigationTrigger = true;
                                    _this.navigationFixed = child.props.fixed;
                                    var childN = _this.setChildCollapse(child, mark);
                                    layout[mark] = childN;
                                }
                                break;
                            default:
                                break;
                        }
                    }
                });
                var headerCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "shell-header")] = true, _a["".concat(prefix, "shell-fixed-header")] = fixedHeader, _a));
                var mainCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "shell-main")] = true, _b));
                var pageCls = (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "shell-page")] = true, _c));
                var submainCls = (0, classnames_1.default)((_d = {}, _d["".concat(prefix, "shell-sub-main")] = true, _d));
                var asideCls = (0, classnames_1.default)((_e = {}, _e["".concat(prefix, "shell-aside")] = true, _e));
                var toolDockCls = (0, classnames_1.default)((_f = {}, _f["".concat(prefix, "aside-tooldock")] = true, _f));
                var navigationCls = (0, classnames_1.default)((_g = {}, _g["".concat(prefix, "aside-navigation")] = true, _g["".concat(prefix, "shell-collapse")] = layout.Navigation && layout.Navigation.props.collapse, _g));
                if (hasToolDock) {
                    if (device === 'phone') {
                        needDockTrigger = true;
                    }
                }
                // 如果存在垂直模式的 Navigation, 则需要在 Branding 上出现 trigger
                if (needNavigationTrigger) {
                    var branding = layout.header.Branding;
                    var _m = layout.Navigation.props,
                        trigger = _m.trigger,
                        collapse = _m.collapse;
                    if ('trigger' in layout.Navigation.props) {
                        trigger = trigger && react_1.default.cloneElement(trigger, {
                            onClick: _this.toggleNavigation,
                            'aria-expanded': !collapse
                        }) || trigger;
                    } else {
                        trigger = react_1.default.createElement("div", { key: "nav-trigger", role: "button", tabIndex: 0, "aria-expanded": !collapse, "aria-label": 'toggle', className: "nav-trigger", onClick: _this.toggleNavigation, onKeyDown: _this.toggleNavigation }, collapse ? react_1.default.createElement(icon_1.default, { size: "small", type: "toggle-right" }) : react_1.default.createElement(icon_1.default, { size: "small", type: "toggle-left" }));
                    }
                    if (!branding) {
                        trigger && (layout.header.Branding = trigger);
                    } else {
                        layout.header.Branding = react_1.default.cloneElement(branding, {}, [trigger, branding.props.children]);
                    }
                }
                // 如果存在 toolDock, 则需要在 Action 上出现 trigger
                if (needDockTrigger) {
                    var action = layout.header.Action;
                    var _o = layout.ToolDock.props,
                        trigger = _o.trigger,
                        collapse = _o.collapse;
                    if ('trigger' in layout.ToolDock.props) {
                        trigger = trigger && react_1.default.cloneElement(trigger, {
                            onClick: _this.toggleToolDock,
                            'aria-expanded': !collapse
                        }) || trigger;
                    } else {
                        trigger = react_1.default.createElement("div", { key: "dock-trigger", tabIndex: 0, role: "button", "aria-expanded": !collapse, "aria-label": 'toggle', className: "dock-trigger", onClick: _this.toggleToolDock, onKeyDown: _this.toggleToolDock }, react_1.default.createElement(icon_1.default, { size: "small", type: "add" }));
                    }
                    if (!action) {
                        layout.header.Action = trigger;
                    } else {
                        layout.header.Action = react_1.default.cloneElement(action, {}, [action.props.children, trigger]);
                    }
                }
                var headerDom = [],
                    contentArr = [],
                    innerArr = [],
                    taskHeaderDom = null;
                if (layout.taskHeader) {
                    var taskHeaderCls = (0, classnames_1.default)((_h = {}, _h["".concat(prefix, "shell-task-header")] = true, _h));
                    taskHeaderDom = react_1.default.createElement("section", { key: "task-header", className: taskHeaderCls }, layout.taskHeader);
                }
                // 按照dom结构，innerArr 包括 LocalNavigation content Ancillary
                if (layout.LocalNavigation) {
                    var _p = layout.LocalNavigation.props,
                        trigger = _p.trigger,
                        collapse = _p.collapse;
                    if ('trigger' in layout.LocalNavigation.props) {
                        trigger = trigger && react_1.default.cloneElement(trigger, {
                            onClick: _this.toggleLocalNavigation,
                            'aria-expanded': !collapse
                        }) || trigger;
                    } else {
                        trigger = react_1.default.createElement("div", { key: "local-nav-trigger", role: "button", tabIndex: 0, "aria-expanded": !collapse, "aria-label": 'toggle', className: "local-nav-trigger aside-trigger", onClick: _this.toggleLocalNavigation, onKeyDown: _this.toggleLocalNavigation }, collapse ? react_1.default.createElement(icon_1.default, { size: "small", type: "arrow-right" }) : react_1.default.createElement(icon_1.default, { size: "small", type: "arrow-left" }));
                    }
                    var localNavCls = (0, classnames_1.default)(asideCls, (_j = {}, _j["".concat(prefix, "aside-localnavigation")] = true, _j));
                    innerArr.push(react_1.default.createElement("aside", { key: "localnavigation", className: localNavCls, ref: _this.saveLocalNavRef }, react_1.default.cloneElement(layout.LocalNavigation, {}, [react_1.default.createElement("div", { key: "wrapper", className: "".concat(prefix, "shell-content-wrapper") }, layout.LocalNavigation.props.children), trigger])));
                }
                if (layout.content) {
                    innerArr.push(react_1.default.createElement("section", { key: "submain", className: submainCls, ref: _this.saveSubmainRef }, layout.content));
                }
                if (layout.Ancillary) {
                    var _q = layout.Ancillary.props,
                        trigger = _q.trigger,
                        collapse = _q.collapse;
                    if ('trigger' in layout.Ancillary.props) {
                        trigger = trigger && react_1.default.cloneElement(trigger, {
                            onClick: _this.toggleAncillary,
                            'aria-expanded': !collapse
                        }) || trigger;
                    } else {
                        trigger = react_1.default.createElement("div", { key: "ancillary-trigger", role: "button", tabIndex: 0, "aria-expanded": !collapse, "aria-label": 'toggle', className: "ancillary-trigger aside-trigger", onClick: _this.toggleAncillary, onKeyDown: _this.toggleAncillary }, collapse ? react_1.default.createElement(icon_1.default, { size: "small", type: "arrow-left" }) : react_1.default.createElement(icon_1.default, { size: "small", type: "arrow-right" }));
                    }
                    var ancillaryCls = (0, classnames_1.default)(asideCls, (_k = {}, _k["".concat(prefix, "aside-ancillary")] = true, _k));
                    innerArr.push(react_1.default.createElement("aside", { key: "ancillary", className: ancillaryCls }, react_1.default.cloneElement(layout.Ancillary, {}, [react_1.default.createElement("div", { key: "wrapper", className: "".concat(prefix, "shell-content-wrapper") }, layout.Ancillary.props.children), trigger])));
                }
                // 按照dom结构, arr 包括 header Navigation ToolDock 和 innerArr
                if (Object.keys(layout.header).length > 0) {
                    var dom_1 = react_1.default.createElement("header", { key: "header", className: headerCls, ref: _this.saveHeaderRef }, layout.header.Branding, layout.header.Navigation, layout.header.Action);
                    if (fixedHeader && util_1.env.ieVersion) {
                        headerDom = react_1.default.createElement(affix_1.default, { style: { zIndex: 9 } }, dom_1);
                    } else {
                        headerDom = dom_1;
                    }
                }
                layout.Navigation && contentArr.push(react_1.default.createElement("aside", { key: "navigation", className: navigationCls, ref: _this.saveNavRef }, react_1.default.cloneElement(layout.Navigation, {
                    className: (0, classnames_1.default)(asideCls, layout.Navigation.props.className)
                })));
                // const contentArea = innerArr.length > 0
                //     ? <section key="main" className={mainCls}>{innerArr}</section>
                //     : layout.page;
                // contentArr.push(contentArea);
                contentArr = contentArr.concat(innerArr.length > 0 ? innerArr : [react_1.default.createElement("section", { key: "page", ref: _this.saveSubmainRef, className: submainCls }, layout.page)]);
                layout.ToolDock && contentArr.push(react_1.default.createElement("aside", { key: "tooldock", className: toolDockCls, ref: _this.saveToolDockRef }, react_1.default.cloneElement(layout.ToolDock, {
                    className: (0, classnames_1.default)(asideCls, layout.ToolDock.props.className),
                    key: 'tooldock'
                })));
                var cls = (0, classnames_1.default)((_l = {}, _l["".concat(prefix, "shell")] = true, _l["".concat(prefix, "shell-").concat(device)] = true, _l["".concat(prefix, "shell-").concat(type)] = true, _l[className] = !!className, _l));
                if (componentName === 'Page') {
                    return react_1.default.createElement("section", { className: pageCls }, children);
                }
                _this.layout = layout;
                return react_1.default.createElement("section", tslib_1.__assign({ className: cls }, others), headerDom, taskHeaderDom, react_1.default.createElement("section", { className: mainCls }, contentArr));
            };
            var deviceMap = (0, util_2.getCollapseMap)(props.device);
            _this.layout = {};
            _this.state = {
                controll: false,
                collapseMap: deviceMap,
                device: props.device
            };
            return _this;
        }
        Shell.getDerivedStateFromProps = function (nextProps, prevState) {
            var device = prevState.device;
            if (nextProps.device !== device) {
                var deviceMap = (0, util_2.getCollapseMap)(nextProps.device);
                return {
                    controll: false,
                    collapseMap: deviceMap,
                    device: nextProps.device
                };
            }
            return {};
        };
        Shell.prototype.componentDidMount = function () {
            this.checkAsideFixed();
        };
        Shell.prototype.componentDidUpdate = function (prevProps) {
            var _this = this;
            if (prevProps.device !== this.props.device) {
                var deviceMapBefore_1 = (0, util_2.getCollapseMap)(prevProps.device);
                var deviceMapAfter_1 = (0, util_2.getCollapseMap)(this.props.device);
                Object.keys(deviceMapAfter_1).forEach(function (block) {
                    var props = (_this.layout[block] || {}).props;
                    if (deviceMapBefore_1[block] !== deviceMapAfter_1[block]) {
                        if (props && typeof props.onCollapseChange === 'function') {
                            props.onCollapseChange(deviceMapAfter_1[block]);
                        }
                    }
                });
            }
            setTimeout(function () {
                // 如果左侧边栏固定
                _this.checkAsideFixed();
            }, 201);
        };
        Shell.prototype.render = function () {
            return this.renderShell(this.props);
        };
        Shell.displayName = componentName;
        Shell._typeMark = componentName;
        Shell.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string,
            /**
             * 设备类型
             * @enumdesc 手机, 平板, PC电脑
             */
            device: prop_types_1.default.oneOf(['phone', 'tablet', 'desktop']),
            /**
             * 设备类型
             * @enumdesc 浅色, 深色, 主题色
             */
            type: prop_types_1.default.oneOf(['light', 'dark', 'brand']),
            /**
             * 是否固定 header, 用sticky实现，IE下降级为Affix
             */
            fixedHeader: prop_types_1.default.bool });
        Shell.defaultProps = {
            prefix: 'next-',
            device: 'desktop',
            type: 'light',
            fixedHeader: false
        };
        return Shell;
    }(react_1.Component);
    return (0, react_lifecycles_compat_1.polyfill)(Shell);
}
exports.default = ShellBase;

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.getCollapseMap = exports.isBoolean = void 0;
/**
 * 判断是否为布尔类型
 * @param  {any} val 例：'str' / undefined / null / true / false / 0
 * @return {bool}     例： false / false / false / true / false / false
 */
function isBoolean(val) {
    return typeof val === 'boolean';
}
exports.isBoolean = isBoolean;
function getCollapseMap(device) {
    // by default all of them are collapsed
    var origin = {
        Navigation: true,
        LocalNavigation: true,
        Ancillary: true,
        ToolDock: true
    };
    var map = [];
    switch (device) {
        case 'phone':
            break;
        case 'pad':
        case 'tablet':
            map = ['ToolDock'];
            break;
        case 'desktop':
            map = ['Navigation', 'LocalNavigation', 'Ancillary', 'ToolDock'];
            break;
        default:
            break;
    }
    Object.keys(origin).forEach(function (key) {
        if (map.indexOf(key) > -1) {
            origin[key] = false;
        }
    });
    return origin;
}
exports.getCollapseMap = getCollapseMap;

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var classnames_1 = __webpack_require__(3);
var prop_types_1 = __webpack_require__(2);
var config_provider_1 = __webpack_require__(5);
function Base(props) {
    var componentName = props.componentName;
    var Shell = /** @class */function (_super) {
        tslib_1.__extends(Shell, _super);
        function Shell() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Shell.prototype.getChildContext = function () {
            var collapse = this.props.collapse;
            return {
                isCollapse: collapse
            };
        };
        Shell.prototype.render = function () {
            var _a;
            var _b = this.props,
                prefix = _b.prefix,
                className = _b.className,
                miniable = _b.miniable,
                device = _b.device,
                direction = _b.direction,
                children = _b.children,
                collapse = _b.collapse,
                triggerProps = _b.triggerProps,
                onCollapseChange = _b.onCollapseChange,
                component = _b.component,
                align = _b.align,
                fixed = _b.fixed,
                others = tslib_1.__rest(_b, ["prefix", "className", "miniable", "device", "direction", "children", "collapse", "triggerProps", "onCollapseChange", "component", "align", "fixed"]);
            var Tag = component;
            var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "shell-").concat(componentName.toLowerCase())] = true, _a["".concat(prefix, "shell-collapse")] = !!collapse, _a["".concat(prefix, "shell-mini")] = miniable, _a["".concat(prefix, "shell-nav-").concat(align)] = componentName === 'Navigation' && direction === 'hoz' && align, _a[className] = !!className, _a));
            var newChildren = children;
            if (componentName === 'Content') {
                newChildren = react_1.default.createElement("div", { className: "".concat(prefix, "shell-content-inner") }, children);
            }
            if (componentName === 'Page') {
                return children;
            }
            return react_1.default.createElement(Tag, tslib_1.__assign({ className: cls }, others), newChildren);
        };
        Shell.displayName = componentName;
        Shell._typeMark = "Shell_".concat(componentName);
        Shell.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, collapse: prop_types_1.default.bool, miniable: prop_types_1.default.bool, component: prop_types_1.default.string, trigger: prop_types_1.default.node, triggerProps: prop_types_1.default.object, direction: prop_types_1.default.oneOf(['hoz', 'ver']), align: prop_types_1.default.oneOf(['left', 'right', 'center']),
            /**
             * 弹层显示或隐藏时触发的回调函数
             * @param {Boolean} collapse 弹层是否显示
             */
            onCollapseChange: prop_types_1.default.func,
            /**
             * 是否固定，仅对 Shell.Navigation Shell.ToolDock 生效，且需要在在 Shell fixedHeader时生效
             */
            fixed: prop_types_1.default.bool });
        Shell.defaultProps = {
            prefix: 'next-',
            component: 'div',
            onCollapseChange: function onCollapseChange() {},
            fixed: false
        };
        Shell.childContextTypes = {
            isCollapse: prop_types_1.default.bool
        };
        return Shell;
    }(react_1.Component);
    return config_provider_1.default.config(Shell);
}
exports.default = Base;

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var slider_1 = __webpack_require__(401);
exports.default = config_provider_1.default.config(slider_1.default, {
    exportNames: ['resize'],
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('fade' in props) {
            deprecated('fade', 'animation', 'Slider');
            var fade = props.fade,
                others = tslib_1.__rest(props, ["fade"]);
            if (fade) {
                props = tslib_1.__assign({ animation: 'fade' }, others);
            } else {
                props = others;
            }
        }
        if ('arrowPos' in props) {
            if (props.arrowPos === 'inline') {
                deprecated('arrowPos=inline', 'arrowPosition=inner', 'Slider');
                props.arrowPos = 'inner';
            } else {
                deprecated('arrowPos', 'arrowPosition', 'Slider');
            }
            var arrowPos = props.arrowPos,
                others = tslib_1.__rest(props, ["arrowPos"]);
            props = tslib_1.__assign({ arrowPosition: arrowPos }, others);
        }
        ['arrowDirection', 'dotsDirection', 'slideDirection'].forEach(function (propName) {
            if (props[propName] === 'horizontal') {
                deprecated("".concat(propName, "=horizontal"), "".concat(propName, "=hoz"), 'Slider');
                props[propName] = 'hoz';
            } else if (props[propName] === 'vertical') {
                deprecated("".concat(propName, "=vertical"), "".concat(propName, "=ver"), 'Slider');
                props[propName] = 'ver';
            }
        });
        if ('initialSlide' in props) {
            deprecated('initialSlide', 'defaultActiveIndex', 'Slider');
            var initialSlide = props.initialSlide,
                others = tslib_1.__rest(props, ["initialSlide"]);
            props = tslib_1.__assign({ defaultActiveIndex: initialSlide }, others);
        }
        if ('slickGoTo' in props) {
            deprecated('slickGoTo', 'activeIndex', 'Slider');
            var slickGoTo = props.slickGoTo,
                others = tslib_1.__rest(props, ["slickGoTo"]);
            props = tslib_1.__assign({ activeIndex: slickGoTo }, others);
        }
        if ('afterChange' in props) {
            deprecated('afterChange', 'onChange', 'Slider');
            var afterChange = props.afterChange,
                others = tslib_1.__rest(props, ["afterChange"]);
            props = tslib_1.__assign({ onChange: afterChange }, others);
        }
        if ('beforeChange' in props) {
            deprecated('beforeChange', 'onBeforeChange', 'Slider');
            var beforeChange = props.beforeChange,
                others = tslib_1.__rest(props, ["beforeChange"]);
            props = tslib_1.__assign({ onBeforeChange: beforeChange }, others);
        }
        return props;
    }
});

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var classnames_1 = __webpack_require__(3);
var prop_types_1 = __webpack_require__(2);
var util_1 = __webpack_require__(4);
var inner_slider_1 = __webpack_require__(402);
var config_provider_1 = __webpack_require__(5);
/**
 * Slider
 */
var Slider = /** @class */function (_super) {
  tslib_1.__extends(Slider, _super);
  function Slider() {
    var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
    _this.resize = function () {
      // export api
      _this.innerSlider.onWindowResized();
    };
    return _this;
  }
  Slider.prototype.render = function () {
    var _this = this;
    var _a = this.props,
        prefix = _a.prefix,
        arrowPosition = _a.arrowPosition,
        slideDirection = _a.slideDirection,
        style = _a.style,
        className = _a.className,
        children = _a.children;
    var globalProps = {};
    Object.keys(config_provider_1.default.propTypes).forEach(function (key) {
      globalProps[key] = _this.props[key];
    });
    var sliderProps = util_1.obj.pickOthers(['className', 'style', 'slideDirection'], this.props);
    var slideCount = react_1.default.Children.count(children);
    if (slideCount === 0) {
      // 没有 item 时不显示 slider
      return null;
    } else if (slideCount === 1) {
      // 单个 item 时不显示箭头和控制器
      sliderProps.arrows = false;
      sliderProps.autoplay = false;
      sliderProps.draggable = false;
    }
    var clazz = (0, classnames_1.default)(["".concat(prefix, "slick"), "".concat(prefix, "slick-").concat(arrowPosition), "".concat(prefix, "slick-").concat(slideDirection)], className);
    if (slideDirection === 'ver') {
      // 向下传递时使用 vertical 属性
      sliderProps.vertical = true;
      sliderProps.verticalSwiping = true;
    }
    return react_1.default.createElement(config_provider_1.default, tslib_1.__assign({}, globalProps, { rtl: false }), react_1.default.createElement("div", tslib_1.__assign({ dir: "ltr", className: clazz, style: style }, util_1.obj.pickOthers(tslib_1.__assign(tslib_1.__assign({}, Slider.propTypes), inner_slider_1.default.propTypes), sliderProps)), react_1.default.createElement(inner_slider_1.default, tslib_1.__assign({ ref: function ref(InnerSlider) {
        return _this.innerSlider = InnerSlider;
      } }, sliderProps))));
  };
  Slider.propTypes = {
    prefix: prop_types_1.default.string,
    rtl: prop_types_1.default.bool,
    /**
     * 自定义传入的样式
     */
    className: prop_types_1.default.any,
    /**
     * 是否使用自适应高度
     */
    adaptiveHeight: prop_types_1.default.bool,
    /**
     * 动效类型，默认是'slide'
     */
    animation: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.bool]),
    /**
     * 是否显示箭头
     */
    arrows: prop_types_1.default.bool,
    /**
     * 导航箭头大小 可选值: 'medium', 'large'
     */
    arrowSize: prop_types_1.default.oneOf(['medium', 'large']),
    /**
     * 导航箭头位置 可选值: 'inner', 'outer'
     */
    arrowPosition: prop_types_1.default.oneOf(['inner', 'outer']),
    /**
     * 导航箭头的方向 可选值: 'hoz', 'ver'
     */
    arrowDirection: prop_types_1.default.oneOf(['hoz', 'ver']),
    /**
     * 是否自动播放
     */
    autoplay: prop_types_1.default.bool,
    /**
     * 自动播放的速度
     */
    autoplaySpeed: prop_types_1.default.number,
    /**
     * 向后箭头
     */
    nextArrow: prop_types_1.default.element,
    /**
     * 向前箭头
     */
    prevArrow: prop_types_1.default.element,
    /**
     * 是否启用居中模式
     */
    centerMode: prop_types_1.default.bool,
    /**
     * 是否显示导航锚点
     */
    dots: prop_types_1.default.bool,
    /**
     * 导航锚点位置
     */
    dotsDirection: prop_types_1.default.oneOf(['hoz', 'ver']),
    dotsClass: prop_types_1.default.string,
    /**
     * 自定义导航锚点
     */
    dotsRender: prop_types_1.default.func,
    /**
     * 是否可拖拽
     */
    draggable: prop_types_1.default.bool,
    /**
     * 是否使用无穷循环模式
     */
    infinite: prop_types_1.default.bool,
    /**
     * 初始被激活的轮播图
     */
    defaultActiveIndex: prop_types_1.default.number,
    /**
     * 是否启用懒加载
     */
    lazyLoad: prop_types_1.default.bool,
    slide: prop_types_1.default.string,
    /**
     * 轮播方向
     */
    slideDirection: prop_types_1.default.oneOf(['hoz', 'ver']),
    /**
     * 同时展示的图片数量
     */
    slidesToShow: prop_types_1.default.number,
    /**
     * 同时滑动的图片数量
     */
    slidesToScroll: prop_types_1.default.number,
    /**
     * 轮播速度
     */
    speed: prop_types_1.default.number,
    /**
     * 跳转到指定的轮播图（受控）
     */
    activeIndex: prop_types_1.default.number,
    /**
     * 锚点导航触发方式
     */
    triggerType: prop_types_1.default.oneOf(['click', 'hover']),
    /**
     * 轮播切换的回调函数
     * @param {Number} index 幻灯片的索引
     */
    onChange: prop_types_1.default.func,
    onBeforeChange: prop_types_1.default.func, // 兼容 0.x onBeforeChange
    children: prop_types_1.default.any,
    /**
     * 自定义传入的class
     */
    style: prop_types_1.default.object,
    /**
     * Side padding when in center mode (px or %); 展示部分为center，pading会产生前后预览
     */
    centerPadding: prop_types_1.default.string,
    /**
     * CSS3 Animation Easing,默认‘ease’
     */
    cssEase: prop_types_1.default.string, // used
    edgeFriction: prop_types_1.default.number, // 非无限轮播滑动到边缘时的阻力
    /**
     * 多图轮播时，点击选中后自动居中
     */
    focusOnSelect: prop_types_1.default.bool,
    pauseOnHover: prop_types_1.default.bool, // 鼠标经过时停止播放
    swipe: prop_types_1.default.bool,
    swipeToSlide: prop_types_1.default.bool,
    touchMove: prop_types_1.default.bool,
    touchThreshold: prop_types_1.default.number,
    useCSS: prop_types_1.default.bool,
    variableWidth: prop_types_1.default.bool, // used
    waitForAnimate: prop_types_1.default.bool,
    edgeEvent: prop_types_1.default.any,
    swipeEvent: prop_types_1.default.any
  };
  Slider.defaultProps = {
    prefix: 'next-',
    animation: 'slide',
    arrowSize: 'medium',
    arrowPosition: 'inner',
    vertical: false,
    verticalSwiping: false,
    dots: true,
    dotsDirection: 'hoz',
    arrows: true,
    arrowDirection: 'hoz',
    infinite: true,
    autoplay: false,
    autoplaySpeed: 3000,
    speed: 600,
    adaptiveHeight: false,
    centerMode: false,
    centerPadding: '50px', // Side padding when in center mode (px or %); 展示部分为center，pading会产生前后预览
    cssEase: 'ease',
    draggable: true,
    edgeFriction: 0.35,
    focusOnSelect: false,
    defaultActiveIndex: 0,
    lazyLoad: false,
    pauseOnHover: false,
    rtl: false,
    slide: 'div',
    slideDirection: 'hoz',
    slidesToShow: 1,
    slidesToScroll: 1,
    swipe: true,
    swipeToSlide: false, // Allow users to drag or swipe directly to a slide irrespective of slidesToScroll
    touchMove: true, // 移动端touch
    touchThreshold: 5,
    useCSS: true,
    variableWidth: false,
    waitForAnimate: true,
    onChange: function onChange() {},
    onBeforeChange: function onBeforeChange() {},
    edgeEvent: null,
    swipeEvent: null,
    nextArrow: null, // nextArrow, prevArrow are react components
    prevArrow: null,
    style: null,
    dotsRender: null,
    triggerType: 'click'
  };
  return Slider;
}(react_1.Component);
exports.default = Slider;

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends2 = __webpack_require__(11);

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var util_1 = __webpack_require__(4);
var event_handlers_1 = __webpack_require__(403);
var helpers_1 = __webpack_require__(404);
var arrow_1 = __webpack_require__(405);
var track_1 = __webpack_require__(406);
var dots_1 = __webpack_require__(407);
/**
 * Slider inner
 */
var noop = util_1.func.noop;
var InnerSlider = /** @class */function (_super) {
    tslib_1.__extends(InnerSlider, _super);
    function InnerSlider(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            animating: false,
            dragging: false,
            autoPlayTimer: null,
            currentDirection: 0,
            currentLeft: null,
            currentSlide: 'activeIndex' in props ? props.activeIndex : props.defaultActiveIndex,
            direction: 1,
            listWidth: null,
            listHeight: null,
            slideCount: null,
            slideWidth: null,
            slideHeight: null,
            slideHeightList: [],
            swipeLeft: null,
            touchObject: {
                startX: 0,
                startY: 0,
                curX: 0,
                curY: 0
            },
            lazyLoadedList: [],
            // added for react
            initialized: false,
            edgeDragged: false,
            swiped: false, // used by swipeEvent. differentites between touch and swipe.
            trackStyle: {},
            trackWidth: 0
        };
        // this.filterProps = Object.assign({}, sliderPropTypes, InnerSlider.propTypes);
        util_1.func.bindCtx(_this, ['onWindowResized', 'selectHandler', 'changeSlide', 'onInnerSliderEnter', 'onInnerSliderLeave', 'swipeStart', 'swipeMove', 'swipeEnd']);
        return _this;
    }
    InnerSlider.getDerivedStateFromProps = function (nextProps, prevState) {
        var state = {};
        var lazyLoad = nextProps.lazyLoad,
            children = nextProps.children,
            slidesToShow = nextProps.slidesToShow,
            activeIndex = nextProps.activeIndex;
        var currentSlide = prevState.currentSlide;
        var lazyLoadedList = [];
        if (children !== prevState.children) {
            state.children = children;
            state.slideCount = react_1.default.Children.count(children);
        }
        if (lazyLoad) {
            for (var i = 0, j = react_1.default.Children.count(children); i < j; i++) {
                if (i >= currentSlide && i < currentSlide + slidesToShow) {
                    lazyLoadedList.push(i);
                    var pre = i - 1 < 0 ? j - 1 : i - 1;
                    var next = i + 1 >= j ? 0 : i + 1;
                    lazyLoadedList.push(pre);
                    lazyLoadedList.push(next);
                }
            }
            if (prevState.lazyLoadedList.length === 0) {
                state.lazyLoadedList = lazyLoadedList;
            }
        }
        return state;
    };
    InnerSlider.prototype.componentDidMount = function () {
        this.hasMounted = true;
        // TODO Hack for autoplay -- Inspect Later
        this.initialize(this.props);
        this.adaptHeight();
        if (this.props.activeIndex) {
            this.slickGoTo(this.props.activeIndex);
        }
        /* istanbul ignore if  */
        if (window) {
            // To support server-side rendering
            util_1.events.on(window, 'resize', this.onWindowResized);
        }
    };
    InnerSlider.prototype.componentDidUpdate = function (prevProps, prevState) {
        var _this = this;
        if (prevProps.activeIndex !== this.props.activeIndex) {
            this.slickGoTo(this.props.activeIndex);
        } else if (prevState.currentSlide >= this.props.children.length) {
            this.update(this.props);
            this.changeSlide({
                message: 'index',
                index: this.props.children.length - this.props.slidesToShow,
                currentSlide: this.state.currentSlide
            });
        } else {
            var diffKeys_1 = [];
            Object.keys(prevProps).forEach(function (key) {
                if (key in _this.props && prevProps[key] !== _this.props[key]) {
                    diffKeys_1.push(key);
                }
            });
            // children 每次都会不同，所以不需要检测
            if (diffKeys_1.every(function (key) {
                return key === 'children' || typeof _this.props[key] === 'function';
            })) {
                // do nothing;
            } else {
                var update = !util_1.obj.shallowEqual(prevProps, this.props);
                if (update) {
                    this.update(this.props);
                }
            }
        }
        this.adaptHeight();
    };
    InnerSlider.prototype.componentWillUnmount = function () {
        if (this.animationEndCallback) {
            clearTimeout(this.animationEndCallback);
        }
        util_1.events.off(window, 'resize', this.onWindowResized);
        if (this.state.autoPlayTimer) {
            clearInterval(this.state.autoPlayTimer);
        }
    };
    InnerSlider.prototype.onWindowResized = function () {
        this.update(this.props);
        // animating state should be cleared while resizing, otherwise autoplay stops working
        this.setState({ animating: false });
        clearTimeout(this.animationEndCallback);
        delete this.animationEndCallback;
    };
    InnerSlider.prototype.slickGoTo = function (slide) {
        typeof slide === 'number' && this.changeSlide({
            message: 'index',
            index: slide,
            currentSlide: this.state.currentSlide
        });
    };
    InnerSlider.prototype.onEnterArrow = function (msg) {
        this.arrowHoverHandler(msg);
    };
    InnerSlider.prototype.onLeaveArrow = function () {
        this.arrowHoverHandler();
    };
    InnerSlider.prototype._instanceRefHandler = function (attr, ref) {
        this[attr] = ref;
    };
    InnerSlider.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            animation = _a.animation,
            arrows = _a.arrows,
            arrowSize = _a.arrowSize,
            arrowPosition = _a.arrowPosition,
            arrowDirection = _a.arrowDirection,
            dots = _a.dots,
            dotsClass = _a.dotsClass,
            cssEase = _a.cssEase,
            speed = _a.speed,
            infinite = _a.infinite,
            centerMode = _a.centerMode,
            centerPadding = _a.centerPadding,
            lazyLoad = _a.lazyLoad,
            dotsDirection = _a.dotsDirection,
            rtl = _a.rtl,
            slidesToShow = _a.slidesToShow,
            slidesToScroll = _a.slidesToScroll,
            variableWidth = _a.variableWidth,
            vertical = _a.vertical,
            verticalSwiping = _a.verticalSwiping,
            focusOnSelect = _a.focusOnSelect,
            children = _a.children,
            dotsRender = _a.dotsRender,
            triggerType = _a.triggerType;
        var _b = this.state,
            currentSlide = _b.currentSlide,
            lazyLoadedList = _b.lazyLoadedList,
            slideCount = _b.slideCount,
            slideWidth = _b.slideWidth,
            slideHeight = _b.slideHeight,
            trackStyle = _b.trackStyle,
            listHeight = _b.listHeight,
            dragging = _b.dragging;
        // TODO 需要精简一下
        var trackProps = {
            prefix: prefix,
            animation: animation,
            cssEase: cssEase,
            speed: speed,
            infinite: infinite,
            centerMode: centerMode,
            focusOnSelect: focusOnSelect ? this.selectHandler : null,
            currentSlide: currentSlide,
            lazyLoad: lazyLoad,
            lazyLoadedList: lazyLoadedList,
            rtl: rtl,
            slideWidth: slideWidth,
            slideHeight: slideHeight,
            slidesToShow: slidesToShow,
            slidesToScroll: slidesToScroll,
            slideCount: slideCount,
            trackStyle: trackStyle,
            variableWidth: variableWidth,
            vertical: vertical,
            verticalSwiping: verticalSwiping,
            triggerType: triggerType
            // clickHandler: this.changeSlide, unused
        };
        var dotsEle;
        if (dots === true && slideCount > slidesToShow) {
            var dotProps = {
                prefix: prefix,
                rtl: rtl,
                dotsClass: dotsClass,
                slideCount: slideCount,
                slidesToShow: slidesToShow,
                currentSlide: currentSlide,
                slidesToScroll: slidesToScroll,
                dotsDirection: dotsDirection,
                changeSlide: this.changeSlide,
                dotsRender: dotsRender,
                triggerType: triggerType
            };
            dotsEle = react_1.default.createElement(dots_1.default, tslib_1.__assign({}, dotProps));
        }
        var prevArrow, nextArrow;
        var arrowProps = {
            prefix: prefix,
            rtl: rtl,
            arrowSize: arrowSize,
            arrowPosition: arrowPosition,
            arrowDirection: arrowDirection,
            infinite: infinite,
            centerMode: centerMode,
            currentSlide: currentSlide,
            slideCount: slideCount,
            slidesToShow: slidesToShow,
            clickHandler: this.changeSlide
        };
        if (arrows) {
            prevArrow = react_1.default.createElement(arrow_1.default, tslib_1.__assign({}, arrowProps, { type: "prev", "aria-label": "Previous", ref: this._instanceRefHandler.bind(this, 'pArrow'), onMouseEnter: animation ? this.onEnterArrow.bind(this, 'prev') : noop, onMouseLeave: animation ? this.onLeaveArrow.bind(this, 'prev') : noop }), this.props.prevArrow);
            nextArrow = react_1.default.createElement(arrow_1.default, tslib_1.__assign({}, arrowProps, { type: "next", "aria-label": "Next", ref: this._instanceRefHandler.bind(this, 'nArrow'), onMouseEnter: animation ? this.onEnterArrow.bind(this, 'next') : noop, onMouseLeave: animation ? this.onLeaveArrow.bind(this, 'next') : noop }), this.props.nextArrow);
        }
        var verticalHeightStyle = vertical ? {
            height: listHeight
        } : null;
        var centerPaddingStyle;
        if (centerMode) {
            centerPaddingStyle = vertical ? { padding: "".concat(centerPadding, " 0px") } : { padding: "0px ".concat(centerPadding) };
        }
        return react_1.default.createElement("div", { className: "".concat(prefix, "slick-container ").concat(prefix, "slick-initialized"), onMouseEnter: this.onInnerSliderEnter, onMouseLeave: this.onInnerSliderLeave }, react_1.default.createElement("div", { ref: this._instanceRefHandler.bind(this, 'list'), className: "".concat(prefix, "slick-list"), style: tslib_1.__assign(tslib_1.__assign({}, verticalHeightStyle), centerPaddingStyle), onMouseDown: this.swipeStart, onMouseUp: this.swipeEnd, onTouchStart: this.swipeStart, onTouchEnd: this.swipeEnd, onMouseMove: dragging ? this.swipeMove : null, onMouseLeave: dragging ? this.swipeEnd : null, onTouchMove: dragging ? this.swipeMove : null, onTouchCancel: dragging ? this.swipeEnd : null }, react_1.default.createElement(track_1.default, tslib_1.__assign({ ref: this._instanceRefHandler.bind(this, 'track') }, trackProps), children)), prevArrow, nextArrow, dotsEle);
    };
    InnerSlider.propTypes = {
        prefix: prop_types_1.default.string,
        animation: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.bool]),
        arrows: prop_types_1.default.bool,
        arrowSize: prop_types_1.default.oneOf(['medium', 'large']),
        arrowPosition: prop_types_1.default.oneOf(['inner', 'outer']),
        arrowDirection: prop_types_1.default.oneOf(['hoz', 'ver']),
        centerPadding: prop_types_1.default.any,
        children: prop_types_1.default.any,
        centerMode: prop_types_1.default.bool,
        dots: prop_types_1.default.bool,
        dotsDirection: prop_types_1.default.oneOf(['hoz', 'ver']),
        dotsClass: prop_types_1.default.string,
        focusOnSelect: prop_types_1.default.bool,
        cssEase: prop_types_1.default.string,
        speed: prop_types_1.default.number,
        infinite: prop_types_1.default.bool,
        defaultActiveIndex: prop_types_1.default.number,
        rtl: prop_types_1.default.bool,
        slidesToShow: prop_types_1.default.number,
        lazyLoad: prop_types_1.default.bool,
        activeIndex: prop_types_1.default.number,
        slidesToScroll: prop_types_1.default.number,
        variableWidth: prop_types_1.default.bool,
        vertical: prop_types_1.default.bool,
        verticalSwiping: prop_types_1.default.bool,
        prevArrow: prop_types_1.default.element,
        nextArrow: prop_types_1.default.element,
        dotsRender: prop_types_1.default.func,
        triggerType: prop_types_1.default.string
    };
    InnerSlider.defaultProps = {
        prefix: 'next-',
        arrowDirection: 'hoz',
        triggerType: 'click'
    };
    return InnerSlider;
}(react_1.default.Component);
// extend prototype
(0, _extends3.default)(InnerSlider.prototype, helpers_1.default);
(0, _extends3.default)(InnerSlider.prototype, event_handlers_1.default);
exports.default = (0, react_lifecycles_compat_1.polyfill)(InnerSlider);

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_dom_1 = __webpack_require__(8);
var trackHelper_1 = __webpack_require__(179);
/* istanbul ignore next */
var EventHandlers = {
    // Event handler for previous and next
    changeSlide: function changeSlide(options) {
        var slideOffset, targetSlide;
        var unevenOffset = this.state.slideCount % this.props.slidesToScroll !== 0;
        var indexOffset = unevenOffset ? 0 : (this.state.slideCount - this.state.currentSlide) % this.props.slidesToScroll;
        if (options.message === 'previous') {
            slideOffset = indexOffset === 0 ? this.props.slidesToScroll : this.props.slidesToShow - indexOffset;
            targetSlide = this.state.currentSlide - slideOffset;
        } else if (options.message === 'next') {
            slideOffset = indexOffset === 0 ? this.props.slidesToScroll : indexOffset;
            targetSlide = this.state.currentSlide + slideOffset;
        } else if (options.message === 'dots' || options.message === 'children') {
            // Click on dots
            targetSlide = options.index * options.slidesToScroll;
            if (targetSlide === options.currentSlide) {
                return;
            }
        } else if (options.message === 'index') {
            targetSlide = options.index;
            if (targetSlide === options.currentSlide) {
                return;
            }
        }
        this.slideHandler(targetSlide);
    },
    // Accessiblity handler for previous and next
    keyHandler: function keyHandler(e) {
        //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        if (!e.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (e.keyCode === 37 && this.props.accessibility === true) {
                this.changeSlide({
                    message: this.props.rtl === true ? 'next' : 'previous'
                });
            } else if (e.keyCode === 39 && this.props.accessibility === true) {
                this.changeSlide({
                    message: this.props.rtl === true ? 'previous' : 'next'
                });
            }
        }
    },
    // Focus on selecting a slide (click handler on track)
    selectHandler: function selectHandler(options) {
        this.changeSlide(options);
    },
    swipeStart: function swipeStart(e) {
        if (this.props.swipe === false || 'ontouchend' in document && this.props.swipe === false) {
            return;
        } else if (this.props.draggable === false && e.type.indexOf('mouse') !== -1) {
            return;
        }
        var posX = e.touches !== undefined ? e.touches[0].pageX : e.clientX;
        var posY = e.touches !== undefined ? e.touches[0].pageY : e.clientY;
        this.setState({
            dragging: true,
            touchObject: {
                startX: posX,
                startY: posY,
                curX: posX,
                curY: posY
            }
        });
    },
    swipeMove: function swipeMove(e) {
        if (!this.state.dragging) {
            return;
        }
        if (this.state.animating) {
            return;
        }
        var touchObject = this.state.touchObject;
        var curLeft = (0, trackHelper_1.getTrackLeft)(tslib_1.__assign(tslib_1.__assign({ slideIndex: this.state.currentSlide, trackRef: this.refs.track }, this.props), this.state));
        touchObject.curX = e.touches ? e.touches[0].pageX : e.clientX;
        touchObject.curY = e.touches ? e.touches[0].pageY : e.clientY;
        touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curX - touchObject.startX, 2)));
        var positionOffset = (this.props.rtl === false ? 1 : -1) * (touchObject.curX > touchObject.startX ? 1 : -1);
        if (this.props.verticalSwiping === true) {
            touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(touchObject.curY - touchObject.startY, 2)));
            positionOffset = touchObject.curY > touchObject.startY ? 1 : -1;
        }
        var currentSlide = this.state.currentSlide;
        var dotCount = Math.ceil(this.state.slideCount / this.props.slidesToScroll);
        var swipeDirection = this.swipeDirection(this.state.touchObject);
        var touchSwipeLength = touchObject.swipeLength;
        if (this.props.infinite === false) {
            if (currentSlide === 0 && swipeDirection === 'right' || currentSlide + 1 >= dotCount && swipeDirection === 'left') {
                touchSwipeLength = touchObject.swipeLength * this.props.edgeFriction;
                if (this.state.edgeDragged === false && this.props.edgeEvent) {
                    this.props.edgeEvent(swipeDirection);
                    this.setState({ edgeDragged: true });
                }
            }
        }
        if (this.state.swiped === false && this.props.swipeEvent) {
            this.props.swipeEvent(swipeDirection);
            this.setState({ swiped: true });
        }
        var swipeLeft = curLeft + touchSwipeLength * positionOffset;
        this.setState({
            touchObject: touchObject,
            swipeLeft: swipeLeft,
            trackStyle: (0, trackHelper_1.getTrackCSS)(tslib_1.__assign(tslib_1.__assign({ left: swipeLeft }, this.props), this.state))
        });
        if (Math.abs(touchObject.curX - touchObject.startX) < Math.abs(touchObject.curY - touchObject.startY) * 0.8) {
            return;
        }
        if (touchObject.swipeLength > 4) {
            e.preventDefault();
        }
    },
    getNavigableIndexes: function getNavigableIndexes() {
        var max;
        var breakPoint = 0;
        var counter = 0;
        var indexes = [];
        if (!this.props.infinite) {
            max = this.state.slideCount;
        } else {
            breakPoint = this.props.slidesToShow * -1;
            counter = this.props.slidesToShow * -1;
            max = this.state.slideCount * 2;
        }
        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + this.props.slidesToScroll;
            counter += this.props.slidesToScroll <= this.props.slidesToShow ? this.props.slidesToScroll : this.props.slidesToShow;
        }
        return indexes;
    },
    checkNavigable: function checkNavigable(index) {
        var navigables = this.getNavigableIndexes();
        var prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }
        return index;
    },
    getSlideCount: function getSlideCount() {
        var _this = this;
        var centerOffset = this.props.centerMode ? this.state.slideWidth * Math.floor(this.props.slidesToShow / 2) : 0;
        if (this.props.swipeToSlide) {
            var swipedSlide_1;
            var slickList = (0, react_dom_1.findDOMNode)(this.list);
            var slides = slickList.querySelectorAll("".concat(this.props.prefix, "slick-slide"));
            Array.from(slides).every(function (slide) {
                if (!_this.props.vertical) {
                    if (slide.offsetLeft - centerOffset + (_this.getWidth(slide) || 0) / 2 > _this.state.swipeLeft * -1) {
                        swipedSlide_1 = slide;
                        return false;
                    }
                } else if (slide.offsetTop + (_this.getHeight(slide) || 0) / 2 > _this.state.swipeLeft * -1) {
                    swipedSlide_1 = slide;
                    return false;
                }
                return true;
            });
            var slidesTraversed = Math.abs(swipedSlide_1.dataset.index - this.state.currentSlide) || 1;
            return slidesTraversed;
        } else {
            return this.props.slidesToScroll;
        }
    },
    swipeEnd: function swipeEnd(e) {
        if (!this.state.dragging) {
            if (this.props.swipe) {
                e.preventDefault();
            }
            return;
        }
        var touchObject = this.state.touchObject;
        var minSwipe = this.state.listWidth / this.props.touchThreshold;
        var swipeDirection = this.swipeDirection(touchObject);
        if (this.props.verticalSwiping) {
            minSwipe = this.state.listHeight / this.props.touchThreshold;
        }
        // reset the state of touch related state variables.
        this.setState({
            dragging: false,
            edgeDragged: false,
            swiped: false,
            swipeLeft: null,
            touchObject: {}
        });
        if (!touchObject.swipeLength) {
            return;
        }
        if (touchObject.swipeLength > minSwipe) {
            e.preventDefault();
            var slideCount = void 0;
            var newSlide = void 0;
            switch (swipeDirection) {
                case 'left':
                case 'down':
                    newSlide = this.state.currentSlide + this.getSlideCount();
                    slideCount = this.props.swipeToSlide ? this.checkNavigable(newSlide) : newSlide;
                    this.setState({ currentDirection: 0 });
                    break;
                case 'right':
                case 'up':
                    newSlide = this.state.currentSlide - this.getSlideCount();
                    slideCount = this.props.swipeToSlide ? this.checkNavigable(newSlide) : newSlide;
                    this.setState({ currentDirection: 1 });
                    break;
                default:
                    slideCount = this.state.currentSlide;
            }
            this.slideHandler(slideCount);
        } else {
            // Adjust the track back to it's original position.
            var currentLeft = (0, trackHelper_1.getTrackLeft)(tslib_1.__assign(tslib_1.__assign({ slideIndex: this.state.currentSlide, trackRef: this.track }, this.props), this.state));
            this.setState({
                trackStyle: (0, trackHelper_1.getTrackAnimateCSS)(tslib_1.__assign(tslib_1.__assign({ left: currentLeft }, this.props), this.state))
            });
        }
    },
    onInnerSliderEnter: function onInnerSliderEnter() {
        if (this.props.autoplay && this.props.pauseOnHover) {
            this.pause();
        }
    },
    onInnerSliderLeave: function onInnerSliderLeave() {
        if (this.props.autoplay && this.props.pauseOnHover) {
            this.autoPlay();
        }
    }
};
exports.default = EventHandlers;

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var trackHelper_1 = __webpack_require__(179);
var helpers = {
    initialize: function initialize(props) {
        var e_1, _a;
        var _this = this;
        var slickList = react_dom_1.default.findDOMNode(this.list);
        var slideCount = react_1.default.Children.count(props.children);
        var listWidth = this.getWidth(slickList) || 0;
        var trackWidth = this.getWidth(react_dom_1.default.findDOMNode(this.track)) || 0;
        var slideWidth;
        if (!props.vertical) {
            var centerPaddingAdj = props.centerMode && parseInt(props.centerPadding) * 2;
            slideWidth = (listWidth - centerPaddingAdj) / props.slidesToShow;
        } else {
            slideWidth = listWidth;
        }
        var slideHeight = this.getHeight(slickList.querySelector('[data-index="0"]')) || 0;
        var listHeight = slideHeight * props.slidesToShow;
        var slideHeightList = [];
        var newSlickList = Array.from(slickList.querySelectorAll(".".concat(props.prefix, "slick-slide")) || []);
        try {
            for (var newSlickList_1 = tslib_1.__values(newSlickList), newSlickList_1_1 = newSlickList_1.next(); !newSlickList_1_1.done; newSlickList_1_1 = newSlickList_1.next()) {
                var item = newSlickList_1_1.value;
                var height = this.getHeight(item);
                slideHeightList.push(height);
            }
        } catch (e_1_1) {
            e_1 = { error: e_1_1 };
        } finally {
            try {
                if (newSlickList_1_1 && !newSlickList_1_1.done && (_a = newSlickList_1.return)) _a.call(newSlickList_1);
            } finally {
                if (e_1) throw e_1.error;
            }
        }
        var slidesToShow = props.slidesToShow || 1;
        var activeIndex = 'activeIndex' in props ? props.activeIndex : props.defaultActiveIndex;
        var currentSlide = props.rtl ? slideCount - 1 - (slidesToShow - 1) - activeIndex : activeIndex;
        this.setState({
            slideCount: slideCount,
            slideWidth: slideWidth,
            listWidth: listWidth,
            trackWidth: trackWidth,
            currentSlide: currentSlide,
            slideHeight: slideHeight,
            listHeight: listHeight,
            slideHeightList: slideHeightList
        }, function () {
            var targetLeft = (0, trackHelper_1.getTrackLeft)(tslib_1.__assign(tslib_1.__assign({ slideIndex: _this.state.currentSlide, trackRef: _this.track }, props), _this.state));
            // getCSS function needs previously set state
            var trackStyle = (0, trackHelper_1.getTrackCSS)(tslib_1.__assign(tslib_1.__assign({ left: targetLeft }, props), _this.state));
            _this.setState({ trackStyle: trackStyle });
            _this.autoPlay(); // once we're set up, trigger the initial autoplay.
        });
    },
    update: function update(props) {
        this.initialize(props);
    },
    getWidth: function getWidth(elem) {
        if ('clientWidth' in elem) {
            return elem.clientWidth;
        }
        return elem && elem.getBoundingClientRect().width;
    },
    getHeight: function getHeight(elem) {
        if ('clientHeight' in elem) {
            return elem.clientHeight;
        }
        return elem && elem.getBoundingClientRect().height;
    },
    adaptHeight: function adaptHeight() {
        if (this.props.adaptiveHeight) {
            var selector = "[data-index=\"".concat(this.state.currentSlide, "\"]");
            if (this.list) {
                var slickList = react_dom_1.default.findDOMNode(this.list);
                var listHeight = slickList.querySelector(selector).offsetHeight;
                slickList.style.height = "".concat(listHeight, "px");
            }
        }
    },
    canGoNext: function canGoNext(opts) {
        var canGo = true;
        if (!opts.infinite) {
            if (opts.centerMode) {
                if (opts.currentSlide >= opts.slideCount - 1) {
                    canGo = false;
                }
            } else if (opts.slideCount <= opts.slidesToShow || opts.currentSlide >= opts.slideCount - opts.slidesToShow) {
                // check if all slides are shown in slider
                canGo = false;
            }
        }
        return canGo;
    },
    slideHandler: function slideHandler(index) {
        var _this = this;
        var rtl = this.props.rtl;
        // Functionality of animateSlide and postSlide is merged into this function
        var targetSlide, currentSlide;
        var callback;
        if (this.props.waitForAnimate && this.state.animating) {
            return;
        }
        if (this.props.animation === 'fade') {
            currentSlide = this.state.currentSlide;
            // don't change slide if it's not infinite and current slide is the first or last slide'
            if (this.props.infinite === false && (index < 0 || index >= this.state.slideCount)) {
                return;
            }
            //  Shifting targetSlide back into the range
            if (index < 0) {
                targetSlide = index + this.state.slideCount;
            } else if (index >= this.state.slideCount) {
                targetSlide = index - this.state.slideCount;
            } else {
                targetSlide = index;
            }
            if (this.props.lazyLoad && this.state.lazyLoadedList.indexOf(targetSlide) < 0) {
                this.setState({
                    lazyLoadedList: this.state.lazyLoadedList.concat(targetSlide)
                });
            }
            callback = function callback() {
                _this.setState({
                    animating: false
                });
                _this.props.onChange(targetSlide);
                delete _this.animationEndCallback;
            };
            this.props.onBeforeChange(this.state.currentSlide, targetSlide);
            this.setState({
                animating: true,
                currentSlide: targetSlide
            }, function () {
                this.animationEndCallback = setTimeout(callback, this.props.speed + 20);
            });
            this.autoPlay();
            return;
        }
        targetSlide = index;
        if (rtl) {
            if (targetSlide < 0) {
                if (this.props.infinite === false) {
                    currentSlide = 0;
                } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {
                    if (targetSlide + this.props.slidesToScroll <= 0) {
                        currentSlide = this.state.slideCount + targetSlide;
                        targetSlide = this.state.slideCount - this.props.slidesToScroll;
                    } else {
                        currentSlide = targetSlide = 0;
                    }
                } else {
                    // this.state.slideCount % this.props.slidesToScroll
                    currentSlide = this.state.slideCount + targetSlide;
                }
            } else if (targetSlide >= this.state.slideCount) {
                if (this.props.infinite === false) {
                    currentSlide = this.state.slideCount - this.props.slidesToShow;
                } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {
                    currentSlide = 0;
                } else {
                    currentSlide = targetSlide - this.state.slideCount;
                }
            } else {
                currentSlide = targetSlide;
            }
        } else if (targetSlide < 0) {
            if (this.props.infinite === false) {
                currentSlide = 0;
            } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {
                currentSlide = this.state.slideCount - this.state.slideCount % this.props.slidesToScroll;
            } else {
                currentSlide = this.state.slideCount + targetSlide;
            }
        } else if (targetSlide >= this.state.slideCount) {
            if (this.props.infinite === false) {
                currentSlide = this.state.slideCount - this.props.slidesToShow;
            } else if (this.state.slideCount % this.props.slidesToScroll !== 0) {
                currentSlide = 0;
            } else {
                currentSlide = targetSlide - this.state.slideCount;
            }
        } else {
            currentSlide = targetSlide;
        }
        var targetLeft = (0, trackHelper_1.getTrackLeft)(tslib_1.__assign(tslib_1.__assign({ slideIndex: targetSlide, trackRef: this.track }, this.props), this.state));
        var currentLeft = (0, trackHelper_1.getTrackLeft)(tslib_1.__assign(tslib_1.__assign({ slideIndex: currentSlide, trackRef: this.track }, this.props), this.state));
        if (this.props.infinite === false) {
            targetLeft = currentLeft;
        }
        if (this.props.lazyLoad) {
            var loaded_1 = true;
            var slidesToLoad = [];
            var slidesLen = this.state.slideCount;
            var sliderIndex = targetSlide < 0 ? slidesLen + targetSlide : currentSlide;
            for (var i = sliderIndex; i < sliderIndex + this.props.slidesToShow; i++) {
                var k = i;
                if (rtl) {
                    k = i >= slidesLen ? slidesLen * 2 - i - 1 : slidesLen - i - 1;
                }
                var pre = k - 1 < 0 ? slidesLen - 1 : k - 1;
                var next = k + 1 >= slidesLen ? 0 : k + 1;
                this.state.lazyLoadedList.indexOf(k) < 0 && slidesToLoad.push(k);
                this.state.lazyLoadedList.indexOf(pre) < 0 && slidesToLoad.push(pre);
                this.state.lazyLoadedList.indexOf(next) < 0 && slidesToLoad.push(next);
            }
            slidesToLoad.forEach(function (i) {
                if (_this.state.lazyLoadedList.indexOf(i) < 0) {
                    loaded_1 = false;
                }
            });
            if (!loaded_1) {
                this.setState({
                    lazyLoadedList: this.state.lazyLoadedList.concat(slidesToLoad)
                });
            }
        }
        this.props.onBeforeChange(this.state.currentSlide, currentSlide);
        // Slide Transition happens here.
        // animated transition happens to target Slide and
        // non - animated transition happens to current Slide
        // If CSS transitions are false, directly go the current slide.
        /* istanbul ignore if */
        if (this.props.useCSS === false) {
            this.setState({
                currentSlide: currentSlide,
                trackStyle: (0, trackHelper_1.getTrackCSS)(tslib_1.__assign(tslib_1.__assign({ left: currentLeft }, this.props), this.state))
            }, function () {
                _this.props.onChange(currentSlide);
            });
        } else {
            var nextStateChanges_1 = {
                animating: false,
                currentSlide: currentSlide,
                trackStyle: (0, trackHelper_1.getTrackCSS)(tslib_1.__assign(tslib_1.__assign({ left: currentLeft }, this.props), this.state)),
                swipeLeft: null
            };
            callback = function callback() {
                _this.setState(nextStateChanges_1);
                _this.props.onChange(currentSlide);
                delete _this.animationEndCallback;
            };
            this.setState({
                animating: true,
                currentSlide: currentSlide,
                trackStyle: (0, trackHelper_1.getTrackAnimateCSS)(tslib_1.__assign(tslib_1.__assign({ left: targetLeft }, this.props), this.state))
            }, function () {
                this.animationEndCallback = setTimeout(callback, this.props.speed + 20);
            });
        }
        this.autoPlay();
    },
    // 鼠标悬浮在 arrow 上时作出动画反馈
    arrowHoverHandler: function arrowHoverHandler(msg) {
        var offset = 30; // slide 的位置偏移量
        var targetLeft = (0, trackHelper_1.getTrackLeft)(tslib_1.__assign(tslib_1.__assign({ slideIndex: this.state.currentSlide, trackRef: this.track }, this.props), this.state));
        var left;
        /* istanbul ignore next */
        if (msg === 'next') {
            left = targetLeft - offset;
        } else if (msg === 'prev') {
            left = targetLeft + offset;
        } else {
            left = targetLeft;
        }
        this.setState({
            trackStyle: (0, trackHelper_1.getTrackAnimateCSS)(tslib_1.__assign(tslib_1.__assign({ left: left }, this.props), this.state))
        });
    },
    swipeDirection: function swipeDirection(touchObject) {
        /* istanbul ignore next */
        var swipeAngle;
        /* istanbul ignore next */
        var xDist = touchObject.startX - touchObject.curX;
        /* istanbul ignore next */
        var yDist = touchObject.startY - touchObject.curY;
        /* istanbul ignore next */
        var r = Math.atan2(yDist, xDist);
        /* istanbul ignore next */
        swipeAngle = Math.round(r * 180 / Math.PI);
        /* istanbul ignore next */
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }
        /* istanbul ignore next */
        if (swipeAngle <= 45 && swipeAngle >= 0 || swipeAngle <= 360 && swipeAngle >= 315) {
            return this.props.rtl === false ? 'left' : 'right';
        }
        /* istanbul ignore next */
        if (swipeAngle >= 135 && swipeAngle <= 225) {
            return this.props.rtl === false ? 'right' : 'left';
        }
        /* istanbul ignore next */
        if (this.props.verticalSwiping === true) {
            if (swipeAngle >= 35 && swipeAngle <= 135) {
                return 'down';
            } else {
                return 'up';
            }
        }
        /* istanbul ignore next */
        return 'vertical';
    },
    play: function play() {
        var nextIndex;
        if (!this.hasMounted) {
            /* istanbul ignore next */
            return false;
        }
        if (this.props.rtl) {
            nextIndex = this.state.currentSlide - this.props.slidesToScroll;
        } else if (this.canGoNext(tslib_1.__assign(tslib_1.__assign({}, this.props), this.state))) {
            nextIndex = this.state.currentSlide + this.props.slidesToScroll;
        } else {
            return false;
        }
        this.slideHandler(nextIndex);
    },
    autoPlay: function autoPlay() {
        if (this.state.autoPlayTimer) {
            clearTimeout(this.state.autoPlayTimer);
        }
        if (this.props.autoplay) {
            this.setState({
                autoPlayTimer: setTimeout(this.play.bind(this), this.props.autoplaySpeed)
            });
        }
    },
    pause: function pause() {
        /* istanbul ignore next */
        if (this.state.autoPlayTimer) {
            clearTimeout(this.state.autoPlayTimer);
            this.setState({
                autoPlayTimer: null
            });
        }
    }
};
exports.default = helpers;

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
/**
 * slider arrow
 * 左右控制箭头
 */
var noop = util_1.func.noop;
var Arrow = /** @class */function (_super) {
    tslib_1.__extends(Arrow, _super);
    function Arrow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Arrow.isDisabled = function (props) {
        var infinite = props.infinite,
            type = props.type,
            centerMode = props.centerMode,
            currentSlide = props.currentSlide,
            slideCount = props.slideCount,
            slidesToShow = props.slidesToShow;
        if (infinite) {
            return false;
        }
        // 下一个 index 大于总数？？
        // if (slideCount <= slidesToShow) {
        //     return true;
        // }
        // 向前箭头：当前是第 0 个
        if (type === 'prev') {
            return currentSlide <= 0;
        }
        if (centerMode && currentSlide >= slideCount - 1) {
            // 向后箭头：居中模式，当前 index 大于最大 index
            return true;
        } else if (currentSlide >= slideCount - slidesToShow) {
            // 向后箭头：普通模式，当前 index 大于 总数 - 下一个 index ？？？
            return true;
        }
        return false;
    };
    Arrow.prototype.handleClick = function (options, e) {
        e && e.preventDefault();
        // TODO hack
        if (options.message === 'prev') {
            options.message = 'previous';
        }
        this.props.clickHandler(options, e);
    };
    Arrow.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            type = _a.type,
            arrowSize = _a.arrowSize,
            arrowPosition = _a.arrowPosition,
            arrowDirection = _a.arrowDirection,
            onMouseEnter = _a.onMouseEnter,
            onMouseLeave = _a.onMouseLeave,
            children = _a.children;
        var others = util_1.obj.pickOthers(Arrow.propTypes, this.props);
        var iconType = Arrow.ARROW_ICON_TYPES[arrowDirection][type];
        var disabled = Arrow.isDisabled(this.props);
        var arrowClazz = (0, classnames_1.default)(["".concat(prefix, "slick-arrow"), "".concat(prefix, "slick-").concat(type), arrowPosition, arrowSize, arrowDirection], { disabled: disabled });
        var arrowProps = tslib_1.__assign(tslib_1.__assign({}, others), { key: type, 'data-role': 'none', className: arrowClazz, style: { display: 'block' }, onClick: disabled ? null : this.handleClick.bind(this, { message: type }), onMouseEnter: disabled ? null : onMouseEnter, onMouseLeave: disabled ? null : onMouseLeave });
        if (children) {
            return react_1.default.cloneElement(react_1.default.Children.only(children), arrowProps);
        } else {
            return react_1.default.createElement("button", tslib_1.__assign({ type: "button", role: "button" }, arrowProps), react_1.default.createElement(icon_1.default, { type: iconType }));
        }
    };
    Arrow.propTypes = {
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        type: prop_types_1.default.oneOf(['prev', 'next']).isRequired,
        centerMode: prop_types_1.default.bool,
        currentSlide: prop_types_1.default.number,
        infinite: prop_types_1.default.bool,
        clickHandler: prop_types_1.default.func,
        slideCount: prop_types_1.default.number,
        slidesToShow: prop_types_1.default.number,
        arrow: prop_types_1.default.element,
        arrowSize: prop_types_1.default.string,
        arrowPosition: prop_types_1.default.string,
        arrowDirection: prop_types_1.default.oneOf(['hoz', 'ver']),
        onMouseEnter: prop_types_1.default.func,
        onMouseLeave: prop_types_1.default.func,
        children: prop_types_1.default.node
    };
    Arrow.defaultProps = {
        onMouseEnter: noop,
        onMouseLeave: noop
    };
    Arrow.ARROW_ICON_TYPES = {
        hoz: { prev: 'arrow-left', next: 'arrow-right' },
        ver: { prev: 'arrow-up', next: 'arrow-down' }
    };
    return Arrow;
}(react_1.Component);
exports.default = Arrow;

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var util_1 = __webpack_require__(4);
/**
 * Slider Track
 * 内容轨道
 */
var getSlideClasses = function getSlideClasses(specProps) {
    var _a;
    var prefix = specProps.prefix;
    var slickActive, slickCenter;
    var centerOffset, index;
    if (specProps.rtl) {
        index = specProps.slideCount - 1 - specProps.activeIndex;
    } else {
        index = specProps.activeIndex;
    }
    var slickCloned = index < 0 || index >= specProps.slideCount;
    if (specProps.centerMode) {
        centerOffset = Math.floor(specProps.slidesToShow / 2);
        slickCenter = (index - specProps.currentSlide) % specProps.slideCount === 0;
        if (index > specProps.currentSlide - centerOffset - 1 && index <= specProps.currentSlide + centerOffset) {
            slickActive = true;
        }
    } else {
        slickActive = specProps.currentSlide <= index && index < specProps.currentSlide + specProps.slidesToShow;
    }
    return (0, classnames_1.default)("".concat(prefix, "slick-slide"), (_a = {}, _a["".concat(prefix, "slick-active")] = slickActive, _a["".concat(prefix, "slick-center")] = slickCenter, _a["".concat(prefix, "slick-cloned")] = slickCloned, _a));
};
var getSlideStyle = function getSlideStyle(specProps) {
    var style = {};
    if (specProps.variableWidth === undefined || specProps.variableWidth === false) {
        style.width = specProps.slideWidth;
    }
    if (specProps.animation === 'fade') {
        style.position = 'relative';
        style.opacity = specProps.currentSlide === specProps.activeIndex ? 1 : 0;
        style.visibility = 'visible';
        style.transition = "opacity ".concat(specProps.speed, "ms ").concat(specProps.cssEase);
        style.WebkitTransition = "opacity ".concat(specProps.speed, "ms ").concat(specProps.cssEase);
        if (specProps.vertical) {
            style.top = -specProps.activeIndex * specProps.slideHeight;
        } else {
            style.left = -specProps.activeIndex * specProps.slideWidth;
        }
    }
    if (specProps.vertical) {
        style.width = '100%';
    }
    return style;
};
var getKey = function getKey(child, fallbackKey) {
    // key could be a zero
    return child.key === null || child.key === undefined ? fallbackKey : child.key;
};
var renderSlides = function renderSlides(specProps) {
    var key;
    var slides = [];
    var preCloneSlides = [];
    var postCloneSlides = [];
    var count = react_1.default.Children.count(specProps.children);
    var child;
    react_1.default.Children.forEach(specProps.children, function (elem, index) {
        var childOnClickOptions = {
            message: 'children',
            index: index,
            slidesToScroll: specProps.slidesToScroll,
            currentSlide: specProps.currentSlide
        };
        if (!specProps.lazyLoad | (specProps.lazyLoad && specProps.lazyLoadedList.indexOf(index) >= 0)) {
            child = elem;
        } else {
            child = elem.key ? react_1.default.createElement("div", { key: elem.key }) : react_1.default.createElement("div", null);
        }
        var childStyle = getSlideStyle(tslib_1.__assign(tslib_1.__assign({}, specProps), { activeIndex: index }));
        var slickClasses = getSlideClasses(tslib_1.__assign({ activeIndex: index }, specProps));
        var cssClasses;
        if (child.props.className) {
            cssClasses = (0, classnames_1.default)(slickClasses, child.props.className);
        } else {
            cssClasses = slickClasses;
        }
        var onClick = function onClick(e) {
            // only child === elem, it will has .props.onClick;
            child.props && child.props.onClick && elem.props.onClick(e);
            if (specProps.focusOnSelect) {
                specProps.focusOnSelect(childOnClickOptions);
            }
        };
        slides.push(react_1.default.cloneElement(child, {
            key: "original".concat(getKey(child, index)),
            'data-index': index,
            className: cssClasses,
            tabIndex: '-1',
            'aria-posinset': index,
            'aria-setsize': count,
            role: 'listitem',
            dir: specProps.rtl ? 'rtl' : 'ltr',
            // server-side render depend on elements of their own style
            style: !util_1.dom.hasDOM ? tslib_1.__assign(tslib_1.__assign({ outline: 'none' }, childStyle), child.props.style) : tslib_1.__assign(tslib_1.__assign({ outline: 'none' }, child.props.style), childStyle),
            onClick: onClick
        }));
        // variableWidth doesn't wrap properly.
        if (specProps.infinite && specProps.animation !== 'fade') {
            var infiniteCount = specProps.variableWidth ? specProps.slidesToShow + 1 : specProps.slidesToShow;
            if (index >= count - infiniteCount) {
                key = -(count - index);
                preCloneSlides.push(react_1.default.cloneElement(child, {
                    key: "precloned".concat(getKey(child, key)),
                    'data-index': key,
                    className: cssClasses,
                    style: tslib_1.__assign(tslib_1.__assign({}, child.props.style), childStyle)
                }));
            }
            if (index < infiniteCount) {
                key = count + index;
                postCloneSlides.push(react_1.default.cloneElement(child, {
                    key: "postcloned".concat(getKey(child, key)),
                    'data-index': key,
                    className: cssClasses,
                    style: tslib_1.__assign(tslib_1.__assign({}, child.props.style), childStyle)
                }));
            }
        }
    });
    // To support server-side rendering
    if (!util_1.dom.hasDOM) {
        return slides.slice(specProps.currentSlide, specProps.currentSlide + specProps.slidesToShow);
    }
    if (specProps.rtl) {
        return preCloneSlides.concat(slides, postCloneSlides).reverse();
    } else {
        return preCloneSlides.concat(slides, postCloneSlides);
    }
};
var Track = /** @class */function (_super) {
    tslib_1.__extends(Track, _super);
    function Track() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Track.prototype.render = function () {
        var slides = renderSlides(this.props);
        return react_1.default.createElement("div", { role: "list", className: "".concat(this.props.prefix, "slick-track"), style: this.props.trackStyle }, slides);
    };
    Track.propTypes = {
        prefix: prop_types_1.default.string,
        trackStyle: prop_types_1.default.object
    };
    Track.defaultProps = {
        prefix: 'next-'
    };
    return Track;
}(react_1.Component);
exports.default = Track;

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var util_1 = __webpack_require__(4);
/**
 * slider dots
 * 导航锚点
 */
var noop = util_1.func.noop;
var Dots = /** @class */function (_super) {
    tslib_1.__extends(Dots, _super);
    function Dots() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Dots.prototype.handleChangeSlide = function (options, e) {
        e.preventDefault();
        this.props.changeSlide(options);
    };
    Dots.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            slideCount = _b.slideCount,
            slidesToScroll = _b.slidesToScroll,
            currentSlide = _b.currentSlide,
            dotsClass = _b.dotsClass,
            dotsDirection = _b.dotsDirection,
            dotsRender = _b.dotsRender,
            triggerType = _b.triggerType,
            rtl = _b.rtl;
        var dotsClazz = (0, classnames_1.default)("".concat(prefix, "slick-dots"), dotsDirection, dotsClass);
        var dotCount = Math.ceil(slideCount / slidesToScroll);
        var children = [];
        for (var i = 0; i < dotCount; i++) {
            var leftBound = i * slidesToScroll;
            var rightBound = leftBound + slidesToScroll - 1;
            var itemClazz = (0, classnames_1.default)("".concat(prefix, "slick-dots-item"), {
                active: currentSlide >= leftBound && currentSlide <= rightBound
            });
            var dotOptions = {
                message: 'dots',
                index: i,
                slidesToScroll: slidesToScroll,
                currentSlide: currentSlide
            };
            // 除非设置为hover，默认使用click触发
            var handleProp = (_a = {}, _a[triggerType.toLowerCase() === 'hover' ? 'onMouseEnter' : 'onClick'] = this.handleChangeSlide.bind(this, dotOptions), _a);
            var docIndex = i;
            var currentSlideIndex = currentSlide;
            if (rtl) {
                docIndex = dotCount - 1 - i;
                currentSlideIndex = dotCount - 1 - currentSlide;
            }
            children.push(react_1.default.createElement("li", tslib_1.__assign({ key: i, className: itemClazz }, handleProp), dotsRender instanceof Function ? react_1.default.createElement("span", null, dotsRender(docIndex, currentSlideIndex)) :
            // Slider is navigated by right and left arrow buttons so the dots are not required functionality
            react_1.default.createElement("button", { tabIndex: "-1" })));
        }
        return react_1.default.createElement("ul", { className: dotsClazz, "aria-hidden": "true" }, children);
    };
    Dots.propTypes = {
        prefix: prop_types_1.default.string,
        currentSlide: prop_types_1.default.number,
        changeSlide: prop_types_1.default.func,
        dotsClass: prop_types_1.default.string,
        slideCount: prop_types_1.default.number,
        slidesToScroll: prop_types_1.default.number,
        dotsDirection: prop_types_1.default.oneOf(['hoz', 'ver']),
        dotsRender: prop_types_1.default.func,
        triggerType: prop_types_1.default.string
    };
    Dots.defaultProps = {
        changeSlide: noop
    };
    return Dots;
}(react_1.default.Component);
exports.default = Dots;

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var icon_1 = __webpack_require__(7);
var button_1 = __webpack_require__(14);
var overlay_1 = __webpack_require__(12);
var menu_1 = __webpack_require__(13);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var Popup = overlay_1.default.Popup;
/**
 * SplitButton
 */
var SplitButton = /** @class */function (_super) {
    tslib_1.__extends(SplitButton, _super);
    function SplitButton(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.selectMenuItem = function (keys) {
            var _a;
            var others = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                others[_i - 1] = arguments[_i];
            }
            if (!('selectedKeys' in _this.props)) {
                _this.setState({
                    selectedKeys: keys
                });
            }
            (_a = _this.props).onSelect.apply(_a, tslib_1.__spreadArray([keys], tslib_1.__read(others), false));
        };
        _this.clickMenuItem = function (key) {
            var _a;
            var others = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                others[_i - 1] = arguments[_i];
            }
            (_a = _this.props).onItemClick.apply(_a, tslib_1.__spreadArray([key], tslib_1.__read(others), false));
            _this.onVisibleChange(false, 'menuSelect');
        };
        _this.onPopupOpen = function () {
            if (_this.props.autoWidth && _this.wrapper && _this.menu) {
                util_1.dom.setStyle(_this.menu, {
                    width: _this.wrapper.offsetWidth
                });
            }
        };
        _this.onVisibleChange = function (visible, reason) {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: visible
                });
            }
            _this.props.onVisibleChange(visible, reason);
        };
        _this._menuRefHandler = function (ref) {
            _this.menu = (0, react_dom_1.findDOMNode)(ref);
            var refFn = _this.props.menuProps.ref;
            if (typeof refFn === 'function') {
                refFn(ref);
            }
        };
        _this._wrapperRefHandler = function (ref) {
            _this.wrapper = (0, react_dom_1.findDOMNode)(ref);
        };
        _this.state = {
            selectedKeys: props.defaultSelectedKeys,
            visible: props.defaultVisible
        };
        return _this;
    }
    SplitButton.getDerivedStateFromProps = function (props) {
        var st = {};
        if ('visible' in props) {
            st.visible = props.visible;
        }
        if ('selectedKeys' in props) {
            st.selectedKeys = props.selectedKeys;
        }
        return st;
    };
    SplitButton.prototype.componentDidMount = function () {
        // 由于定位目标是 wrapper，如果弹层默认展开，wrapper 还未渲染，didMount 后强制再渲染一次，弹层重新定位
        if (this.state.visible) {
            this.forceUpdate();
        }
    };
    SplitButton.prototype.render = function () {
        var _a, _b, _c;
        var _this = this;
        var _d = this.props,
            prefix = _d.prefix,
            label = _d.label,
            size = _d.size,
            type = _d.type,
            component = _d.component,
            ghost = _d.ghost,
            className = _d.className,
            style = _d.style,
            children = _d.children,
            triggerProps = _d.triggerProps,
            popupAlign = _d.popupAlign,
            popupTriggerType = _d.popupTriggerType,
            popupStyle = _d.popupStyle,
            popupClassName = _d.popupClassName,
            popupProps = _d.popupProps,
            popupContainer = _d.popupContainer,
            followTrigger = _d.followTrigger,
            selectMode = _d.selectMode,
            menuProps = _d.menuProps,
            leftButtonProps = _d.leftButtonProps,
            disabled = _d.disabled,
            others = tslib_1.__rest(_d, ["prefix", "label", "size", "type", "component", "ghost", "className", "style", "children", "triggerProps", "popupAlign", "popupTriggerType", "popupStyle", "popupClassName", "popupProps", "popupContainer", "followTrigger", "selectMode", "menuProps", "leftButtonProps", "disabled"]);
        var state = this.state;
        var classNames = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "split-btn")] = true, _a), className);
        var sharedBtnProps = {
            type: type,
            size: size,
            component: component,
            ghost: ghost,
            disabled: disabled
        };
        var triggerClassNames = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "split-btn-trigger")] = true, _b["".concat(prefix, "expand")] = state.visible, _b.opened = state.visible, _b));
        var iconCls = (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "split-btn-symbol-fold")] = true, _c));
        var trigger = react_1.default.createElement(button_1.default, tslib_1.__assign({}, sharedBtnProps, triggerProps, { className: triggerClassNames }), react_1.default.createElement(icon_1.default, { type: "arrow-down", className: iconCls }));
        return react_1.default.createElement(button_1.default.Group, tslib_1.__assign({}, util_1.obj.pickOthers(SplitButton.propTypes, others), { className: classNames, style: style, size: size, ref: this._wrapperRefHandler }), react_1.default.createElement(button_1.default, tslib_1.__assign({}, sharedBtnProps, leftButtonProps), label), react_1.default.createElement(Popup, tslib_1.__assign({}, popupProps, { followTrigger: followTrigger, visible: state.visible, onVisibleChange: this.onVisibleChange, trigger: trigger, triggerType: popupTriggerType, align: popupAlign, container: popupContainer, target: function target() {
                return _this.wrapper;
            }, style: popupStyle, shouldUpdatePosition: true, className: popupClassName, onOpen: this.onPopupOpen }), react_1.default.createElement("div", { className: "".concat(prefix, "split-btn-spacing-tb") }, react_1.default.createElement(menu_1.default, tslib_1.__assign({}, menuProps, { selectMode: selectMode, selectedKeys: state.selectedKeys, onSelect: this.selectMenuItem, onItemClick: this.clickMenuItem, ref: this._menuRefHandler }), children))));
    };
    SplitButton.propTypes = {
        prefix: prop_types_1.default.string,
        style: prop_types_1.default.object,
        /**
         * 按钮的类型
         */
        type: prop_types_1.default.oneOf(['normal', 'primary', 'secondary']),
        /**
         * 按钮组的尺寸
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        /**
         * 主按钮的文案
         */
        label: prop_types_1.default.node,
        /**
         * 设置标签类型
         */
        component: prop_types_1.default.oneOf(['button', 'a']),
        /**
         * 是否为幽灵按钮
         */
        ghost: prop_types_1.default.oneOf(['light', 'dark', false, true]),
        /**
         * 默认激活的菜单项（用法同 Menu 非受控）
         */
        defaultSelectedKeys: prop_types_1.default.array,
        /**
         * 激活的菜单项（用法同 Menu 受控）
         */
        selectedKeys: prop_types_1.default.array,
        /**
         * 菜单的选择模式
         */
        selectMode: prop_types_1.default.oneOf(['single', 'multiple']),
        /**
         * 选择菜单项时的回调，参考 Menu
         */
        onSelect: prop_types_1.default.func,
        /**
         * 点击菜单项时的回调，参考 Menu
         */
        onItemClick: prop_types_1.default.func,
        /**
         * 触发按钮的属性（支持 Button 的所有属性透传）
         */
        triggerProps: prop_types_1.default.object,
        /**
         * 弹层菜单的宽度是否与按钮组一致
         */
        autoWidth: prop_types_1.default.bool,
        /**
         * 弹层是否显示
         */
        visible: prop_types_1.default.bool,
        /**
         * 弹层默认是否显示
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 弹层显示状态变化时的回调函数
         * @param {Boolean} visible 弹层显示状态
         * @param {String} type 触发弹层显示或隐藏的来源 menuSelect 表示由menu触发； fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
         */
        onVisibleChange: prop_types_1.default.func,
        /**
         * 弹层的触发方式
         */
        popupTriggerType: prop_types_1.default.oneOf(['click', 'hover']),
        /**
         * 弹层对齐方式, 详情见Overlay align
         */
        popupAlign: prop_types_1.default.string,
        /**
         * 弹层自定义样式
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 弹层自定义样式类
         */
        popupClassName: prop_types_1.default.string,
        /**
         * 透传给弹层的属性
         */
        popupProps: prop_types_1.default.object,
        /**
         * 弹层容器
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 透传给 Menu 的属性
         */
        menuProps: prop_types_1.default.object,
        /**
         * 透传给 左侧按钮 的属性
         */
        leftButtonProps: prop_types_1.default.object,
        className: prop_types_1.default.string,
        children: prop_types_1.default.any
    };
    SplitButton.defaultProps = {
        prefix: 'next-',
        type: 'normal',
        size: 'medium',
        autoWidth: true,
        popupTriggerType: 'click',
        onVisibleChange: util_1.func.noop,
        onItemClick: util_1.func.noop,
        onSelect: util_1.func.noop,
        defaultSelectedKeys: [],
        menuProps: {},
        leftButtonProps: {}
    };
    return SplitButton;
}(react_1.default.Component);
SplitButton.Item = menu_1.default.Item;
SplitButton.Divider = menu_1.default.Divider;
SplitButton.Group = menu_1.default.Group;
exports.default = config_provider_1.default.config((0, react_lifecycles_compat_1.polyfill)(SplitButton));

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var step_1 = __webpack_require__(410);
var step_item_1 = __webpack_require__(411);
step_1.default.Item = step_item_1.default;
exports.default = config_provider_1.default.config(step_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('type' in props) {
            deprecated('type', 'shape', 'Step');
            var type = props.type,
                direction = props.direction,
                labelPlacement = props.labelPlacement,
                others = tslib_1.__rest(props, ["type", "direction", "labelPlacement"]);
            direction = direction === 'vertical' ? 'ver' : direction === 'horizontal' ? 'hoz' : direction;
            labelPlacement = labelPlacement === 'vertical' ? 'ver' : labelPlacement === 'horizontal' ? 'hoz' : labelPlacement;
            props = tslib_1.__assign({ shape: type, direction: direction, labelPlacement: labelPlacement }, others);
        }
        return props;
    }
});

/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_1 = __webpack_require__(1);
var react_lifecycles_compat_1 = __webpack_require__(6);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var getHeight = function getHeight(el) {
    return util_1.dom.getStyle(el, 'height');
};
var setHeight = function setHeight(el, height) {
    return util_1.dom.setStyle(el, 'height', height);
};
/** Step */
var Step = /** @class */function (_super) {
    tslib_1.__extends(Step, _super);
    function Step(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this._stepRefHandler = function (ref) {
            _this.step = ref;
        };
        _this.state = {
            parentWidth: 'auto',
            parentHeight: 'auto',
            currentfocus: 0
        };
        _this.resize = _this.resize.bind(_this);
        return _this;
    }
    Step.getDerivedStateFromProps = function (newProps) {
        if ('current' in newProps) {
            return {
                current: newProps.current
            };
        }
    };
    Step.prototype.componentDidMount = function () {
        /* istanbul ignore if */
        if (!util_1.support.flex) {
            this.resize();
            util_1.events.on(window, 'resize', this.resize);
        }
        this.adjustHeight();
    };
    Step.prototype.componentDidUpdate = function () {
        this.adjustHeight();
    };
    Step.prototype.componentWillUnmount = function () {
        /* istanbul ignore if */
        if (!util_1.support.flex) {
            util_1.events.off(window, 'resize', this.resize);
        }
    };
    Step.prototype.adjustHeight = function () {
        var _a = this.props,
            shape = _a.shape,
            direction = _a.direction,
            prefix = _a.prefix,
            labelPlacement = _a.labelPlacement;
        var step = react_dom_1.default.findDOMNode(this.step);
        if (shape !== 'arrow' && (direction === 'horizontal' || direction === 'hoz') && (labelPlacement === 'vertical' || labelPlacement === 'ver')) {
            var height = Array.prototype.slice.call(step.getElementsByClassName("".concat(prefix, "step-item"))).reduce(function (ret, re) {
                var itemHeight = getHeight(re.getElementsByClassName("".concat(prefix, "step-item-container"))[0]) + getHeight(re.getElementsByClassName("".concat(prefix, "step-item-body"))[0]);
                return Math.max(itemHeight, ret);
            }, 0);
            setHeight(step, height);
        } else {
            setHeight(step, '');
        }
    };
    Step.prototype.resize = function () {
        if (this.step) {
            this.setState({
                parentWidth: this.step.offsetWidth || 0,
                parentHeight: this.step.offsetHeight || 0
            });
        }
    };
    // set dir key for aria handle
    // handleKeyDown = e => {
    //     const { shape, children } = this.props;
    //     const { length: max } = children;
    //     let { currentfocus } = this.state;
    //     const initPosition = currentfocus;
    //     switch (e.keyCode) {
    //         case KEYCODE.RIGHT:
    //         case KEYCODE.DOWN:
    //             currentfocus++;
    //             break;
    //         case KEYCODE.LEFT:
    //         case KEYCODE.UP:
    //             currentfocus--;
    //             break;
    //         default:
    //             break;
    //     }
    //     currentfocus =
    //         currentfocus >= max ? 0 : currentfocus < 0 ? max - 1 : currentfocus;
    //     this.setState({ currentfocus }, () => {
    //         const child = this.step.children[currentfocus];
    //         if (!child) return;
    //         const focusItem =
    //             shape === 'arrow'
    //                 ? child
    //                 : child.querySelector('.next-step-item-body');
    //         focusItem && focusItem.focus();
    //     });
    //     if (initPosition !== currentfocus) {
    //         e.preventDefault();
    //     }
    // };
    Step.prototype._getValidChildren = function (children) {
        var result = [];
        react_1.default.Children.forEach(children, function (child) {
            if (react_1.default.isValidElement(child)) {
                result.push(child);
            }
        });
        return result;
    };
    Step.prototype.render = function () {
        var _a;
        var _this = this;
        // eslint-disable-next-line
        var _b = this.props,
            className = _b.className,
            current = _b.current,
            labelPlacement = _b.labelPlacement,
            shape = _b.shape,
            readOnly = _b.readOnly,
            animation = _b.animation,
            itemRender = _b.itemRender,
            rtl = _b.rtl,
            stretch = _b.stretch;
        var others = util_1.obj.pickOthers(Step.propTypes, this.props);
        var _c = this.props,
            prefix = _c.prefix,
            direction = _c.direction,
            children = _c.children;
        prefix = this.context.prefix || prefix;
        var _d = this.state,
            parentWidth = _d.parentWidth,
            parentHeight = _d.parentHeight;
        // type不同对应的direction不同
        direction = shape === 'arrow' ? 'hoz' : direction;
        // children去除null
        children = this._getValidChildren(children);
        // 修改子节点属性
        var cloneChildren = react_1.Children.map(children, function (child, index) {
            var status = index < current ? 'finish' : index === current ? 'process' : 'wait';
            return react_1.default.cloneElement(child, {
                prefix: prefix,
                key: index,
                index: index,
                total: children.length,
                status: child.props.status || status,
                shape: shape,
                direction: direction,
                labelPlacement: labelPlacement,
                parentWidth: parentWidth,
                parentHeight: parentHeight,
                readOnly: readOnly,
                animation: animation,
                tabIndex: 0,
                // tabIndex: this.state.currentfocus === index ? '0' : '-1',
                'aria-current': status === 'process' ? 'step' : null,
                itemRender: child.props.itemRender ? child.props.itemRender : itemRender, // 优先使用Item的itemRender
                onResize: function onResize() {
                    _this.step && _this.adjustHeight();
                },
                stretch: stretch
            });
        });
        var _direction = direction === 'ver' || direction === 'vertical' ? 'vertical' : 'horizontal';
        var _labelPlacement = labelPlacement === 'ver' || labelPlacement === 'vertical' ? 'vertical' : 'horizontal';
        var stepCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "step")] = true, _a["".concat(prefix, "step-").concat(shape)] = shape, _a["".concat(prefix, "step-").concat(_direction)] = _direction, _a["".concat(prefix, "step-label-").concat(_labelPlacement)] = _labelPlacement, _a[className] = className, _a));
        if (rtl) {
            others.dir = 'rtl';
        }
        // others.onKeyDown = makeChain(this.handleKeyDown, others.onKeyDown);
        return react_1.default.createElement("ol", tslib_1.__assign({}, others, { className: stepCls, ref: this._stepRefHandler }), cloneChildren);
    };
    Step.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, rtl: prop_types_1.default.bool,
        /**
         * 当前步骤
         */
        current: prop_types_1.default.number,
        /**
         * 展示方向
         */
        direction: prop_types_1.default.oneOf(['hoz', 'ver']),
        /**
         * 横向布局时( direction 为 hoz )的内容排列
         */
        labelPlacement: prop_types_1.default.oneOf(['hoz', 'ver']),
        /**
         * 类型
         */
        shape: prop_types_1.default.oneOf(['circle', 'arrow', 'dot']),
        /**
         * 是否只读模式
         */
        readOnly: prop_types_1.default.bool,
        /**
         * 是否开启动效
         */
        animation: prop_types_1.default.bool,
        /**
         * 自定义样式名
         */
        className: prop_types_1.default.string,
        /**
         * StepItem 的自定义渲染
         * @param {Number} index   节点索引
         * @param {String} status  节点状态
         * @returns {Node} 节点的渲染结果
         */
        itemRender: prop_types_1.default.func,
        /**
         * 宽度横向拉伸
         */
        stretch: prop_types_1.default.bool });
    Step.defaultProps = {
        prefix: 'next-',
        current: 0,
        direction: 'hoz',
        labelPlacement: 'ver',
        shape: 'circle',
        animation: true,
        itemRender: null,
        stretch: false
    };
    Step.contextTypes = {
        prefix: prop_types_1.default.string
    };
    return Step;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Step);

/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_dom_1 = __webpack_require__(8);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var resize_observer_polyfill_1 = __webpack_require__(49);
var icon_1 = __webpack_require__(7);
var progress_1 = __webpack_require__(99);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
/** Step.Item */
var StepItem = /** @class */function (_super) {
    tslib_1.__extends(StepItem, _super);
    function StepItem(props) {
        var _this = _super.call(this, props) || this;
        _this.onClick = function () {
            var _a = _this.props,
                index = _a.index,
                disabled = _a.disabled,
                readOnly = _a.readOnly,
                animation = _a.animation;
            if (disabled || readOnly) {
                return false;
            }
            if (animation && _this.stepNode) {
                util_1.dom.hasClass(_this.stepNode, 'clicked') ? util_1.dom.removeClass(_this.stepNode, 'clicked') : util_1.dom.addClass(_this.stepNode, 'clicked');
            }
            _this.props.onClick(index);
        };
        _this.removeClickedCls = _this.removeClickedCls.bind(_this);
        _this._refHandlerCreator = _this._refHandlerCreator.bind(_this);
        _this.resize = _this.resize.bind(_this);
        _this.ro = new resize_observer_polyfill_1.default(function () {
            var _a = _this.props,
                shape = _a.shape,
                direction = _a.direction,
                onResize = _a.onResize;
            if (!_this.body || shape === 'arrow') {
                return;
            }
            if (direction === 'vertical' || direction === 'ver') {
                _this.resize();
            } else {
                onResize && onResize();
            }
        });
        return _this;
    }
    StepItem.prototype.componentDidMount = function () {
        var _a = this.props,
            shape = _a.shape,
            direction = _a.direction,
            labelPlacement = _a.labelPlacement,
            index = _a.index,
            total = _a.total,
            stretch = _a.stretch;
        this.body && this.ro.observe(react_dom_1.default.findDOMNode(this.body));
        if (shape === 'arrow') {
            return;
        }
        if (direction === 'vertical' || direction === 'ver') {
            this.resize();
            this.forceUpdate(); // 解决Step嵌套的情况下，嵌套节点宽度为0的问题
            this.eventHandler = util_1.events.on(window, 'resize', this.resize); // 调整垂直Step
        } else if ((direction === 'horizontal' || direction === 'hoz') && (labelPlacement === 'horizontal' || labelPlacement === 'hoz') && index !== total - 1) {
            // 调整横向Content
            this.adjustTail();
        }
        if (stretch && (direction === 'horizontal' || direction === 'hoz')) {
            this.adjustItemWidth();
        }
    };
    StepItem.prototype.componentDidUpdate = function () {
        var _a;
        var _this = this;
        var _b = this.props,
            shape = _b.shape,
            direction = _b.direction,
            labelPlacement = _b.labelPlacement,
            index = _b.index,
            total = _b.total,
            rtl = _b.rtl,
            stretch = _b.stretch;
        if (shape === 'arrow') {
            return;
        }
        var resetTailStyle = function resetTailStyle() {
            util_1.dom.setStyle(_this.tail, {
                width: '',
                top: '',
                height: ''
            });
        };
        if (direction === 'vertical' || direction === 'ver') {
            this.resize();
        } else if (direction === 'horizontal' || direction === 'hoz') {
            var pos = rtl ? 'right' : 'left';
            util_1.dom.setStyle(this.body, (_a = {
                width: ''
            }, _a[pos] = '', _a));
            if (shape === 'circle' && (labelPlacement === 'horizontal' || labelPlacement === 'hoz') && index !== total - 1) {
                // 调整横向Content
                this.adjustTail();
            } else {
                resetTailStyle();
            }
            if (stretch) {
                this.adjustItemWidth();
            }
        } else if (index !== total - 1) {
            resetTailStyle();
        }
    };
    StepItem.prototype.componentWillUnmount = function () {
        this.eventHandler && this.eventHandler.off();
    };
    StepItem.prototype.adjustItemWidth = function () {
        var _a = this.props,
            index = _a.index,
            total = _a.total,
            labelPlacement = _a.labelPlacement;
        var lastNodeWidth = labelPlacement === 'horizontal' || labelPlacement === 'hoz' ? this.container.offsetWidth + this.body.offsetWidth : this.title.offsetWidth;
        var width = total - 1 !== index ? "calc((100% - ".concat(lastNodeWidth, "px)/").concat(total - 1, ")") : 'auto';
        util_1.dom.setStyle(this.step, {
            width: width
        });
    };
    StepItem.prototype.adjustTail = function () {
        var width = this.container.offsetWidth + this.title.offsetWidth;
        util_1.dom.setStyle(this.tail, {
            width: "calc(100% - ".concat(width, "px)"),
            top: "".concat(util_1.dom.getStyle(this.container, 'height') / 2, "px")
        });
    };
    StepItem.prototype.resize = function () {
        var direction = this.props.direction;
        if (direction === 'vertical' || direction === 'ver') {
            var stepWidth = util_1.dom.getStyle(this.step, 'width');
            var stepHozWhitespace = util_1.dom.getNodeHozWhitespace(this.step.parentNode);
            var stepBodyHozWhitespace = util_1.dom.getNodeHozWhitespace(this.body);
            var rtl = this.props.rtl;
            rtl ? this.body.style.right = "".concat(stepWidth, "px") : this.body.style.left = "".concat(stepWidth, "px");
            util_1.dom.setStyle(this.body, {
                width: util_1.dom.getStyle(this.step.parentNode.parentNode, 'width') - stepWidth - stepHozWhitespace - stepBodyHozWhitespace
            });
            util_1.dom.setStyle(this.tail, 'height', util_1.dom.getStyle(this.body, 'height') - util_1.dom.getStyle(this.container, 'height'));
        }
    };
    StepItem.prototype._getNode = function () {
        var _a = this.props,
            prefix = _a.prefix,
            index = _a.index,
            status = _a.status,
            icon = _a.icon,
            shape = _a.shape,
            percent = _a.percent,
            itemRender = _a.itemRender;
        var nodeElement = icon;
        if (shape === 'dot') {
            nodeElement = icon ? react_1.default.createElement(icon_1.default, { type: icon }) : react_1.default.createElement("div", { className: "".concat(prefix, "step-item-node-dot") }, " ");
        } else if (shape === 'circle' && percent) {
            nodeElement = react_1.default.createElement(progress_1.default, { shape: "circle", percent: percent, className: "".concat(prefix, "step-item-progress") });
        } else if (shape === 'circle' && !!itemRender && typeof itemRender === 'function') {
            nodeElement = null; // 如果是需要自定义节点，则不处理，返回空
        } else {
            nodeElement = react_1.default.createElement("div", { className: "".concat(prefix, "step-item-node-circle") }, icon ? react_1.default.createElement(icon_1.default, { type: icon }) : this._itemRender(index, status));
        }
        return nodeElement;
    };
    StepItem.prototype.getNode = function (args) {
        var _a = this.props,
            prefix = _a.prefix,
            itemRender = _a.itemRender,
            index = _a.index,
            status = _a.status,
            title = _a.title,
            content = _a.content,
            shape = _a.shape;
        var others = args.others,
            stepCls = args.stepCls,
            overlayCls = args.overlayCls;
        var nodeElement = this._getNode();
        var containerStyle = shape === 'dot' && { fontSize: 'initial' } || {};
        var finalNodeElement = react_1.default.createElement("div", { className: "".concat(prefix, "step-item-container"), style: containerStyle, ref: this._refHandlerCreator('container') }, react_1.default.createElement("div", { className: "".concat(prefix, "step-item-node-placeholder"), onClick: this.onClick }, react_1.default.createElement("div", { className: "".concat(prefix, "step-item-node"), ref: this._refHandlerCreator('stepNode'), onTransitionEnd: this.removeClickedCls }, nodeElement)));
        if (!nodeElement) {
            // 需要自定义子节点
            finalNodeElement = react_1.default.createElement("div", { className: "".concat(prefix, "step-item-container"), style: containerStyle, ref: this._refHandlerCreator('container') }, react_1.default.createElement("div", { className: "".concat(prefix, "step-item-node-placeholder"), onClick: this.onClick }, itemRender(index, status, title, content)));
        }
        if (shape !== 'arrow') {
            delete others.tabIndex;
            delete others['aria-current'];
        }
        return react_1.default.createElement("li", tslib_1.__assign({}, others, { style: this.getStyle(), className: stepCls, ref: this._refHandlerCreator('step') }), finalNodeElement, react_1.default.createElement("div", { className: "".concat(prefix, "step-item-body"), ref: this._refHandlerCreator('body'), tabIndex: this.props.tabIndex, "aria-current": this.props['aria-current'] }, react_1.default.createElement("div", { className: "".concat(prefix, "step-item-title"), ref: this._refHandlerCreator('title') }, title), react_1.default.createElement("div", { className: "".concat(prefix, "step-item-content") }, content)), react_1.default.createElement("div", { className: "".concat(prefix, "step-item-tail"), ref: this._refHandlerCreator('tail') }, react_1.default.createElement("div", { className: "".concat(prefix, "step-item-tail-underlay") }, react_1.default.createElement("div", { className: "".concat(prefix, "step-item-tail-overlay"), style: overlayCls }))));
    };
    StepItem.prototype.getStyle = function () {
        var _a = this.props,
            parentWidth = _a.parentWidth,
            parentHeight = _a.parentHeight,
            direction = _a.direction,
            total = _a.total,
            index = _a.index,
            shape = _a.shape;
        var width = 'auto';
        if (Number(parentWidth) && Number(parentHeight)) {
            if (!util_1.support.flex && shape === 'arrow') {
                width = Math.floor(parentWidth / total - parentHeight / 2 - parentHeight / 8);
            }
        }
        if (shape !== 'arrow' && (direction === 'horizontal' || direction === 'hoz')) {
            width = total - 1 !== index ? "".concat(Math.floor(100 / total), "%") : 'auto';
        }
        return {
            width: width
        };
    };
    StepItem.prototype.removeClickedCls = function () {
        var animation = this.props.animation;
        if (animation && this.stepNode && util_1.dom.hasClass(this.stepNode, 'clicked')) {
            util_1.dom.removeClass(this.stepNode, 'clicked');
        }
    };
    // 节点的渲染方法
    StepItem.prototype._itemRender = function (index, status) {
        var itemRender = this.props.itemRender;
        if (itemRender) {
            return itemRender(index, status);
        }
        return status === 'finish' ? react_1.default.createElement(icon_1.default, { type: "select" }) : index + 1;
    };
    StepItem.prototype._refHandlerCreator = function (refName) {
        var self = this;
        return function (ref) {
            self[refName] = ref;
        };
    };
    StepItem.prototype.render = function () {
        var _a;
        // eslint-disable-next-line
        var _b = this.props,
            prefix = _b.prefix,
            locale = _b.locale,
            className = _b.className,
            status = _b.status,
            title = _b.title,
            icon = _b.icon,
            index = _b.index,
            total = _b.total,
            shape = _b.shape,
            content = _b.content,
            direction = _b.direction,
            disabled = _b.disabled,
            onClick = _b.onClick,
            readOnly = _b.readOnly,
            animation = _b.animation,
            parentHeight = _b.parentHeight,
            itemRender = _b.itemRender,
            parentWidth = _b.parentWidth,
            labelPlacement = _b.labelPlacement,
            rtl = _b.rtl,
            onResize = _b.onResize;
        var others = util_1.obj.pickOthers(StepItem.propTypes, this.props);
        var stepCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "step-item")] = true, _a["".concat(prefix, "step-item-").concat(status)] = status, _a["".concat(prefix, "step-item-first")] = index === 0, _a["".concat(prefix, "step-item-last")] = index === total - 1, _a["".concat(prefix, "step-item-disabled")] = disabled, _a["".concat(prefix, "step-item-read-only")] = readOnly, _a[className] = className, _a));
        var overlayCls = status === 'finish' ? { width: '100%' } : null;
        var arrowElement = react_1.default.createElement("li", tslib_1.__assign({}, others, { style: this.getStyle(), className: stepCls, onClick: this.onClick }), react_1.default.createElement("div", { className: "".concat(prefix, "step-item-container") }, react_1.default.createElement("div", { className: "".concat(prefix, "step-item-title") }, title)));
        var otherElement = this.getNode({ others: others, stepCls: stepCls, overlayCls: overlayCls });
        return shape === 'arrow' ? arrowElement : otherElement;
    };
    StepItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, rtl: prop_types_1.default.bool,
        /**
         * 步骤的状态，如不传，会根据外层的 Step 的 current 属性生成，可选值为 `wait`, `process`, `finish`
         */
        status: prop_types_1.default.oneOf(['wait', 'process', 'finish']),
        /**
         * 标题
         */
        title: prop_types_1.default.node, direction: prop_types_1.default.oneOf(['hoz', 'ver']), labelPlacement: prop_types_1.default.oneOf(['hoz', 'ver']), shape: prop_types_1.default.oneOf(['circle', 'arrow', 'dot']),
        /**
         * 图标
         */
        icon: prop_types_1.default.string,
        /**
         * 内容填充, shape为 arrow 时无效
         */
        content: prop_types_1.default.node,
        /**
         * StepItem 的自定义渲染, 会覆盖父节点设置的itemRender
         * @param {Number} index   节点索引
         * @param {String} status  节点状态
         * @returns {Node} 节点的渲染结果
         */
        itemRender: prop_types_1.default.func,
        /**
         * 百分比
         */
        percent: prop_types_1.default.number, index: prop_types_1.default.number, total: prop_types_1.default.number, animation: prop_types_1.default.bool,
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool, parentWidth: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]), parentHeight: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        /**
         * 点击步骤时的回调
         * @param {Number} index 节点索引
         */
        onClick: prop_types_1.default.func,
        /**
         * 自定义样式
         */
        className: prop_types_1.default.string, readOnly: prop_types_1.default.bool, onResize: prop_types_1.default.func, stretch: prop_types_1.default.bool });
    StepItem.defaultProps = {
        shape: 'circle',
        index: 0,
        total: 1,
        onClick: function onClick() {},
        stretch: false
    };
    return StepItem;
}(react_1.Component);
exports.default = config_provider_1.default.config(StepItem);

/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var classnames_1 = __webpack_require__(3);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var util_1 = __webpack_require__(4);
var icon_1 = __webpack_require__(7);
var config_provider_1 = __webpack_require__(5);
var zh_cn_1 = __webpack_require__(9);
/** Switch*/
var Switch = /** @class */function (_super) {
    tslib_1.__extends(Switch, _super);
    function Switch(props, context) {
        var _this = _super.call(this, props, context) || this;
        var checked = props.checked || props.defaultChecked;
        _this.onChange = _this.onChange.bind(_this);
        _this.onKeyDown = _this.onKeyDown.bind(_this);
        _this.state = {
            checked: checked
        };
        return _this;
    }
    Switch.getDerivedStateFromProps = function (props, state) {
        if ('checked' in props && props.checked !== state.checked) {
            return {
                checked: !!props.checked
            };
        }
        return null;
    };
    Switch.prototype.onChange = function (ev) {
        var checked = !this.state.checked;
        if (!('checked' in this.props)) {
            this.setState({
                checked: checked
            });
        }
        this.props.onChange(checked, ev);
        this.props.onClick && this.props.onClick(ev);
    };
    Switch.prototype.onKeyDown = function (e) {
        if (e.keyCode === util_1.KEYCODE.ENTER || e.keyCode === util_1.KEYCODE.SPACE) {
            this.onChange(e);
        }
        this.props.onKeyDown && this.props.onKeyDown(e);
    };
    Switch.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            prefix = _c.prefix,
            className = _c.className,
            disabled = _c.disabled,
            readOnly = _c.readOnly,
            size = _c.size,
            loading = _c.loading,
            autoWidth = _c.autoWidth,
            checkedChildren = _c.checkedChildren,
            unCheckedChildren = _c.unCheckedChildren,
            rtl = _c.rtl,
            isPreview = _c.isPreview,
            renderPreview = _c.renderPreview,
            locale = _c.locale,
            others = tslib_1.__rest(_c, ["prefix", "className", "disabled", "readOnly", "size", "loading", "autoWidth", "checkedChildren", "unCheckedChildren", "rtl", "isPreview", "renderPreview", "locale"]);
        var checked = this.state.checked;
        var status = checked ? 'on' : 'off';
        var children = checked ? checkedChildren : unCheckedChildren;
        var _size = size;
        if (_size !== 'small' && _size !== 'medium') {
            _size = 'medium';
        }
        var classes = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "switch")] = true, _a["".concat(prefix, "switch-loading")] = loading, _a["".concat(prefix, "switch-").concat(status)] = true, _a["".concat(prefix, "switch-").concat(_size)] = true, _a["".concat(prefix, "switch-auto-width")] = autoWidth, _a[className] = className, _a));
        var attrs;
        var isDisabled = disabled || readOnly;
        if (!isDisabled) {
            attrs = {
                onClick: this.onChange,
                tabIndex: 0,
                onKeyDown: this.onKeyDown,
                disabled: false
            };
        } else {
            attrs = {
                disabled: true,
                onClick: undefined
            };
        }
        if (isPreview) {
            var previewCls = (0, classnames_1.default)(className, (_b = {}, _b["".concat(prefix, "form-preview")] = true, _b));
            if ('renderPreview' in this.props) {
                return react_1.default.createElement("div", tslib_1.__assign({ className: previewCls }, others), renderPreview(checked, this.props));
            }
            return react_1.default.createElement("p", tslib_1.__assign({ className: previewCls }, others), children || locale[status]);
        }
        return react_1.default.createElement("div", tslib_1.__assign({ role: "switch", dir: rtl ? 'rtl' : undefined, tabIndex: "0" }, others, { className: classes }, attrs, { "aria-checked": checked }), react_1.default.createElement("div", { className: "".concat(prefix, "switch-btn") }, loading && react_1.default.createElement(icon_1.default, { type: "loading", className: "".concat(prefix, "switch-inner-icon") })), react_1.default.createElement("div", { className: "".concat(prefix, "switch-children") }, children));
    };
    Switch.contextTypes = {
        prefix: prop_types_1.default.string
    };
    Switch.propTypes = {
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        pure: prop_types_1.default.bool,
        /**
         * 自定义类名
         */
        className: prop_types_1.default.string,
        /**
         * 自定义内敛样式
         */
        style: prop_types_1.default.object,
        /**
         * 打开时的内容
         */
        checkedChildren: prop_types_1.default.any,
        /**
         * 关闭时的内容
         */
        unCheckedChildren: prop_types_1.default.any,
        /**
         * 开关状态改变是触发此事件
         * @param {Boolean} checked 是否为打开状态
         * @param {Event} e DOM事件对象
         */
        onChange: prop_types_1.default.func,
        /**
         * 开关当前的值(针对受控组件)
         */
        checked: prop_types_1.default.bool,
        /**
         * 开关默认值 (针对非受控组件)
         */
        defaultChecked: prop_types_1.default.bool,
        /**
         * 表示开关被禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * loading
         */
        loading: prop_types_1.default.bool,
        /**
         * switch的尺寸
         * @enumdesc 正常大小, 缩小版大小
         */
        size: prop_types_1.default.oneOf(['medium', 'small']),
        /**
         * 鼠标点击事件
         * @param {Event} e DOM事件对象
         */
        onClick: prop_types_1.default.func,
        /**
         * 键盘按键事件
         * @param {Event} e DOM事件对象
         */
        onKeyDown: prop_types_1.default.func,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {number} value 评分值
         */
        renderPreview: prop_types_1.default.func,
        /**
         * 开启后宽度根据内容自适应
         * @version 1.23
         */
        autoWidth: prop_types_1.default.bool,
        /**
         * 国际化配置
         */
        locale: prop_types_1.default.object
    };
    Switch.defaultProps = {
        prefix: 'next-',
        size: 'medium',
        disabled: false,
        defaultChecked: false,
        isPreview: false,
        loading: false,
        readOnly: false,
        autoWidth: false,
        onChange: function onChange() {},
        locale: zh_cn_1.default.Switch
    };
    return Switch;
}(react_1.default.Component);
exports.default = config_provider_1.default.config((0, react_lifecycles_compat_1.polyfill)(Switch));

/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var tab_1 = __webpack_require__(414);
var tab_item_1 = __webpack_require__(417);
tab_1.default.Item = tab_item_1.default;
tab_1.default.TabPane = config_provider_1.default.config(tab_item_1.default, {
    transform: function transform(props, deprecated) {
        deprecated('Tab.TabPane', 'Tab.Item', 'Tab');
        return props;
    }
});
exports.default = config_provider_1.default.config(tab_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('type' in props) {
            deprecated('type', 'shape', 'Tab');
            var type = props.type,
                others = tslib_1.__rest(props, ["type"]);
            props = tslib_1.__assign({ shape: type }, others);
        }
        if ('resDirection' in props) {
            var resDirection = props.resDirection,
                others = tslib_1.__rest(props, ["resDirection"]);
            var excessMode = void 0;
            if (resDirection === 'horizontal') {
                deprecated('resDirection=horizontal', 'excessMode=slide', 'Tab');
                excessMode = 'slide';
            } else if (resDirection === 'vertical') {
                deprecated('resDirection=vertical', 'excessMode=dropdown', 'Tab');
                excessMode = 'dropdown';
            }
            props = tslib_1.__assign({ excessMode: excessMode }, others);
        }
        if ('tabBarExtraContent' in props) {
            deprecated('tabBarExtraContent', 'extra', 'Tab');
            var tabBarExtraContent = props.tabBarExtraContent,
                others = tslib_1.__rest(props, ["tabBarExtraContent"]);
            props = tslib_1.__assign({ extra: tabBarExtraContent }, others);
        }
        return props;
    }
});

/***/ }),
/* 414 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var util_1 = __webpack_require__(4);
var nav_1 = __webpack_require__(415);
var content_1 = __webpack_require__(416);
var utils_1 = __webpack_require__(180);
var zh_cn_1 = __webpack_require__(9);
var noop = function noop() {};
/** Tab */
var Tab = /** @class */function (_super) {
    tslib_1.__extends(Tab, _super);
    function Tab(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.handleTriggerEvent = function (eventType, key) {
            var _a = _this.props,
                triggerType = _a.triggerType,
                onClick = _a.onClick,
                onChange = _a.onChange;
            if (triggerType === eventType) {
                onClick(key);
                _this.setActiveKey(key);
                if (_this.state.activeKey !== key) {
                    onChange(key);
                }
            }
        };
        _this.onNavKeyDown = function (e) {
            var keyCode = e.keyCode;
            var disableKeyboard = _this.props.disableKeyboard;
            if (disableKeyboard) {
                return;
            }
            if (keyCode >= util_1.KEYCODE.LEFT && keyCode <= util_1.KEYCODE.DOWN) {
                e.preventDefault();
            }
            var newKey;
            if (keyCode === util_1.KEYCODE.RIGHT || keyCode === util_1.KEYCODE.DOWN) {
                newKey = _this.getNextActiveKey(true);
                _this.handleTriggerEvent(_this.props.triggerType, newKey);
            } else if (keyCode === util_1.KEYCODE.LEFT || keyCode === util_1.KEYCODE.UP) {
                newKey = _this.getNextActiveKey(false);
                _this.handleTriggerEvent(_this.props.triggerType, newKey);
            }
        };
        _this.state = {
            activeKey: _this.getDefaultActiveKey(props)
        };
        return _this;
    }
    Tab.getDerivedStateFromProps = function (props, state) {
        if (props.activeKey !== undefined && state.activeKey !== "".concat(props.activeKey)) {
            return {
                activeKey: "".concat(props.activeKey)
            };
        }
        return {};
    };
    Tab.prototype.componentDidUpdate = function (prevProps) {
        var preChildLen = prevProps.children && prevProps.children.length || 0;
        var curChildLen = this.props.children && this.props.children.length || 0;
        if (preChildLen !== 0 && curChildLen !== 0 && !('activeKey' in this.props) & !this.isActiveKeyExist(this.state.activeKey)) {
            var activeKey = this.getDefaultActiveKey(this.props);
            if (activeKey) {
                // eslint-disable-next-line react/no-did-update-set-state
                this.setState({
                    activeKey: activeKey
                });
            }
        }
    };
    Tab.prototype.getDefaultActiveKey = function (props) {
        var activeKey = props.activeKey === undefined ? props.defaultActiveKey : props.activeKey;
        if (activeKey === undefined) {
            react_1.default.Children.forEach(props.children, function (child, index) {
                if (activeKey !== undefined) return;
                if (react_1.default.isValidElement(child)) {
                    if (!child.props.disabled) {
                        activeKey = child.key || index;
                    }
                }
            });
        }
        return activeKey !== undefined ? "".concat(activeKey) : undefined;
    };
    Tab.prototype.getNextActiveKey = function (isNext) {
        var _this = this;
        var children = [];
        react_1.default.Children.forEach(this.props.children, function (child) {
            if (react_1.default.isValidElement(child)) {
                if (!child.props.disabled) {
                    if (isNext) {
                        children.push(child);
                    } else {
                        children.unshift(child);
                    }
                }
            }
        });
        var length = children.length;
        var key = length && children[0].key;
        children.forEach(function (child, i) {
            if (child.key === _this.state.activeKey) {
                if (i === length - 1) {
                    key = children[0].key;
                } else {
                    key = children[i + 1].key;
                }
            }
        });
        return key;
    };
    Tab.prototype.isActiveKeyExist = function (activeKey) {
        var exist = false;
        react_1.default.Children.forEach(this.props.children, function (child, index) {
            if (exist) return;
            if (react_1.default.isValidElement(child)) {
                if (!child.props.disabled) {
                    var key = child.key || index;
                    if (activeKey === "".concat(key)) {
                        exist = true;
                    }
                }
            }
        });
        return exist;
    };
    Tab.prototype.setActiveKey = function (key) {
        var activeKey = this.state.activeKey;
        // 如果 key 没变，或者受控状态下，则跳过
        if (key === activeKey || 'activeKey' in this.props) {
            return;
        }
        this.setState({
            activeKey: key
        });
    };
    Tab.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            animation = _b.animation,
            shape = _b.shape,
            size = _b.size,
            extra = _b.extra,
            excessMode = _b.excessMode,
            tabPosition = _b.tabPosition,
            tabRender = _b.tabRender,
            triggerType = _b.triggerType,
            lazyLoad = _b.lazyLoad,
            unmountInactiveTabs = _b.unmountInactiveTabs,
            popupProps = _b.popupProps,
            navStyle = _b.navStyle,
            navClassName = _b.navClassName,
            contentStyle = _b.contentStyle,
            contentClassName = _b.contentClassName,
            className = _b.className,
            onClose = _b.onClose,
            children = _b.children,
            rtl = _b.rtl,
            device = _b.device,
            locale = _b.locale,
            icons = _b.icons,
            showAdd = _b.showAdd,
            onAdd = _b.onAdd,
            addIcon = _b.addIcon,
            others = tslib_1.__rest(_b, ["prefix", "animation", "shape", "size", "extra", "excessMode", "tabPosition", "tabRender", "triggerType", "lazyLoad", "unmountInactiveTabs", "popupProps", "navStyle", "navClassName", "contentStyle", "contentClassName", "className", "onClose", "children", "rtl", "device", "locale", "icons", "showAdd", "onAdd", "addIcon"]);
        var activeKey = this.state.activeKey;
        var tabs = (0, utils_1.toArray)(children);
        var newPosition = tabPosition;
        if (rtl && ['left', 'right'].indexOf(tabPosition) >= 0) {
            newPosition = tabPosition === 'left' ? 'right' : 'left';
        }
        var classNames = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "tabs")] = true, _a["".concat(prefix, "tabs-").concat(shape)] = shape, _a["".concat(prefix, "tabs-vertical")] = shape === 'wrapped' && ['left', 'right'].indexOf(tabPosition) >= 0, _a["".concat(prefix, "tabs-scrollable")] = true, _a["".concat(prefix, "tabs-").concat(newPosition)] = shape === 'wrapped', _a["".concat(prefix + size)] = size, _a), className);
        var navProps = {
            prefix: prefix,
            rtl: rtl,
            animation: animation,
            activeKey: activeKey,
            excessMode: excessMode,
            extra: extra,
            tabs: tabs,
            tabPosition: tabPosition,
            tabRender: tabRender,
            triggerType: triggerType,
            popupProps: popupProps,
            onClose: onClose,
            onTriggerEvent: this.handleTriggerEvent,
            onKeyDown: this.onNavKeyDown,
            style: navStyle,
            className: navClassName,
            locale: locale,
            icons: icons,
            showAdd: showAdd,
            addIcon: addIcon,
            onAdd: onAdd
        };
        var contentProps = {
            prefix: prefix,
            activeKey: activeKey,
            lazyLoad: lazyLoad,
            unmountInactiveTabs: unmountInactiveTabs,
            style: contentStyle,
            className: contentClassName
        };
        var tabChildren = [react_1.default.createElement(nav_1.default, tslib_1.__assign({ key: "tab-nav" }, navProps)), react_1.default.createElement(content_1.default, tslib_1.__assign({ key: "tab-content" }, contentProps), tabs)];
        if (tabPosition === 'bottom') {
            tabChildren.reverse();
        }
        return react_1.default.createElement("div", tslib_1.__assign({ dir: rtl ? 'rtl' : undefined, className: classNames }, util_1.obj.pickOthers(Tab.propTypes, others)), tabChildren);
    };
    Tab.propTypes = {
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        device: prop_types_1.default.oneOf(['tablet', 'desktop', 'phone']),
        /**
         * 被激活的选项卡的 key, 赋值则tab为受控组件, 用户无法切换
         */
        activeKey: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        /**
         * 初始化时被激活的选项卡的 key
         */
        defaultActiveKey: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        /**
         * 外观形态
         */
        shape: prop_types_1.default.oneOf(['pure', 'wrapped', 'text', 'capsule']),
        /**
         * 是否开启动效
         */
        animation: prop_types_1.default.bool,
        /**
         * 选项卡过多时的滑动模式
         */
        excessMode: prop_types_1.default.oneOf(['slide', 'dropdown']),
        /**
         * 导航选项卡的位置，只适用于包裹型（wrapped）选项卡
         */
        tabPosition: prop_types_1.default.oneOf(['top', 'bottom', 'left', 'right']),
        /**
         * 尺寸
         */
        size: prop_types_1.default.oneOf(['small', 'medium']),
        /**
         * 激活选项卡的触发方式
         */
        triggerType: prop_types_1.default.oneOf(['hover', 'click']),
        /**
         * 是否延迟加载 TabItem 的内容, 默认开启, 即不提前渲染
         */
        lazyLoad: prop_types_1.default.bool,
        /**
         * 是否自动卸载未处于激活状态的选项卡
         */
        unmountInactiveTabs: prop_types_1.default.bool,
        /**
         * 导航条的自定义样式
         */
        navStyle: prop_types_1.default.object,
        /**
         * 导航条的自定义样式类
         */
        navClassName: prop_types_1.default.string,
        /**
         * 内容区容器的自定义样式
         */
        contentStyle: prop_types_1.default.object,
        /**
         * 内容区容器的自定义样式类
         */
        contentClassName: prop_types_1.default.string,
        /**
         * 导航栏附加内容
         */
        extra: prop_types_1.default.node,
        /**
         * 禁止键盘事件，设置后无法通过键盘的上下左右按键，切换当前选中的tab
         */
        disableKeyboard: prop_types_1.default.bool,
        /**
         * 点击单个选项卡时触发的回调
         */
        onClick: prop_types_1.default.func,
        /**
         * 选项卡发生切换时的事件回调
         * @param {String|Number} key 改变后的 key
         */
        onChange: prop_types_1.default.func,
        /**
         * 选项卡被关闭时的事件回调
         * @param {String|Number} key   关闭的选项卡的 key
         */
        onClose: prop_types_1.default.func,
        /**
         * 自定义选项卡模板渲染函数
         * @param {String} key 当前 Tab.Item 的 key 值
         * @param {Object} props 传给 Tab.Item 的所有属性键值对
         * @return {ReactNode} 返回自定义组件
         */
        tabRender: prop_types_1.default.func,
        /**
         * 弹层属性透传, 只有当 excessMode 为 dropdown 时生效
         */
        popupProps: prop_types_1.default.object,
        children: prop_types_1.default.any,
        className: prop_types_1.default.string,
        locale: prop_types_1.default.object,
        /**
         * 自定义组件内 icon
         */
        icons: prop_types_1.default.shape({
            prev: prop_types_1.default.oneOfType([prop_types_1.default.node, prop_types_1.default.string]),
            next: prop_types_1.default.oneOfType([prop_types_1.default.node, prop_types_1.default.string]),
            dropdown: prop_types_1.default.oneOfType([prop_types_1.default.node, prop_types_1.default.string])
        }),
        /**
         * 新增按钮
         */
        showAdd: prop_types_1.default.bool,
        /**
         * 新增的事件回调
         */
        onAdd: prop_types_1.default.func,
        /**
         * 自定义添加按钮
         */
        addIcon: prop_types_1.default.node
    };
    Tab.defaultProps = {
        prefix: 'next-',
        shape: 'pure',
        size: 'medium',
        animation: true,
        tabPosition: 'top',
        excessMode: 'slide',
        triggerType: 'click',
        lazyLoad: true,
        unmountInactiveTabs: false,
        disableKeyboard: false,
        onClick: noop,
        onChange: noop,
        onClose: noop,
        locale: zh_cn_1.default.Tab,
        icons: {}
    };
    return Tab;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Tab);

/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var icon_1 = __webpack_require__(7);
var overlay_1 = __webpack_require__(12);
var menu_1 = __webpack_require__(13);
var button_1 = __webpack_require__(14);
var animate_1 = __webpack_require__(17);
var util_1 = __webpack_require__(4);
var utils_1 = __webpack_require__(180);
var floatRight = { float: 'right', zIndex: 1 };
var floatLeft = { float: 'left', zIndex: 1 };
var iconTypeMap = {
    dropdown: 'arrow-down',
    prev: 'arrow-left',
    next: 'arrow-right'
};
var Popup = overlay_1.default.Popup;
var Nav = /** @class */function (_super) {
    tslib_1.__extends(Nav, _super);
    function Nav(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.removeTab = function (key, e) {
            e && e.stopPropagation(); // stop bubble, so that it won't trigger upstream listener
            _this.props.onClose(key);
        };
        _this.debounceSetSideBtn = function () {
            clearTimeout(_this.slideTimer);
            _this.slideTimer = setTimeout(function () {
                _this.setSlideBtn();
            }, 100);
        };
        _this.onScroll = function () {
            // 每次滚动时更新btn状态
            _this.debounceSetSideBtn();
        };
        _this.onCloseKeyDown = function (key, e) {
            if (e.keyCode === util_1.KEYCODE.ENTER) {
                e.stopPropagation();
                e.preventDefault();
                _this.props.onClose(key);
            }
        };
        _this.defaultTabTemplateRender = function (key, _a) {
            var title = _a.title,
                closeable = _a.closeable;
            var _b = _this.props,
                locale = _b.locale,
                prefix = _b.prefix;
            var tail = closeable ? react_1.default.createElement(icon_1.default, { "aria-label": locale.closeAriaLabel, type: "close", tabIndex: "0", onKeyDown: function onKeyDown(e) {
                    return _this.onCloseKeyDown(key, e);
                }, onClick: function onClick(e) {
                    return _this.removeTab(key, e);
                }, className: "".concat(prefix, "tabs-tab-close") }) : null;
            return react_1.default.createElement("div", { className: "".concat(prefix, "tabs-tab-inner") }, title, tail);
        };
        _this.scrollToActiveTab = function () {
            if (_this.activeTab && ['slide', 'dropdown'].includes(_this.props.excessMode)) {
                var activeTabWH = (0, utils_1.getOffsetWH)(_this.activeTab);
                var wrapperWH = (0, utils_1.getOffsetWH)(_this.wrapper);
                var activeTabOffset = (0, utils_1.getOffsetLT)(_this.activeTab);
                var wrapperOffset = (0, utils_1.getOffsetLT)(_this.wrapper);
                var target = _this.offset;
                if (activeTabOffset + activeTabWH > wrapperOffset + wrapperWH + 1 || activeTabOffset < wrapperOffset) {
                    _this.setOffset(_this.offset + wrapperOffset - activeTabOffset, true, true);
                    return;
                }
                _this.setOffset(target, true, true);
            }
        };
        _this.onPrevClick = function () {
            var wrapperWH = (0, utils_1.getOffsetWH)(_this.wrapper);
            _this.setOffset(_this.offset + wrapperWH, true, false);
        };
        _this.onNextClick = function () {
            var wrapperWH = (0, utils_1.getOffsetWH)(_this.wrapper);
            _this.setOffset(_this.offset - wrapperWH, true, false);
        };
        _this.onSelectMenuItem = function (keys) {
            var _a = _this.props,
                onTriggerEvent = _a.onTriggerEvent,
                triggerType = _a.triggerType;
            onTriggerEvent(triggerType, keys[0]);
        };
        _this.onWindowResized = function () {
            if (_this.updateTimer) {
                clearTimeout(_this.updateTimer);
            }
            _this.updateTimer = setTimeout(function () {
                _this.setSlideBtn();
                _this.getDropdownItems(_this.props);
            }, 100);
        };
        _this.navRefHandler = function (ref) {
            _this.nav = (0, react_dom_1.findDOMNode)(ref);
        };
        _this.wrapperRefHandler = function (ref) {
            _this.wrapper = ref;
        };
        _this.scrollerRefHandler = function (ref) {
            _this.scroller = ref;
        };
        _this.navbarRefHandler = function (ref) {
            _this.navbar = ref;
        };
        _this.activeTabRefHandler = function (ref) {
            _this.activeTab = ref;
        };
        _this.prevBtnHandler = function (ref) {
            _this.prevBtn = (0, react_dom_1.findDOMNode)(ref);
        };
        _this.nextBtnHandler = function (ref) {
            _this.nextBtn = (0, react_dom_1.findDOMNode)(ref);
        };
        _this.state = {
            showBtn: false,
            dropdownTabs: []
        };
        return _this;
    }
    Object.defineProperty(Nav.prototype, "offset", {
        /**
         * 实时获取滚动位置
         */
        get: function get() {
            var scroller = this.scroller;
            if (!scroller) {
                return 0;
            }
            var scrollLeft = scroller.scrollLeft;
            return scrollLeft > 0 ? -scrollLeft : scrollLeft;
        },
        enumerable: false,
        configurable: true
    });
    Nav.prototype.componentDidMount = function () {
        if (!this.props.animation) {
            this.initialSettings();
        }
        util_1.events.on(window, 'resize', this.onWindowResized);
    };
    Nav.prototype.componentDidUpdate = function (prevProps) {
        var _this = this;
        // 此处通过延时处理，屏蔽动画带来的定位不准确问题（由于要支持ie9，因此无法使用transitionend）
        clearTimeout(this.scrollTimer);
        this.scrollTimer = setTimeout(function () {
            _this.scrollToActiveTab();
            _this.setSlideBtn();
        }, 410); // transition-duration is set to be .4s, wait for the transition finishes before re-calc
        // 更改tabs后如果有dropdown属性，应该重新执行getDropdownItems函数更新dropdown数据
        if (this.props.excessMode === 'dropdown') {
            if (!(0, utils_1.tabsArrayShallowEqual)(this.props.tabs, prevProps.tabs)) {
                this.getDropdownItems(this.props);
            }
        }
    };
    Nav.prototype.componentWillUnmount = function () {
        util_1.events.off(window, 'resize', this.onWindowResized);
    };
    Nav.prototype.initialSettings = function () {
        this.setSlideBtn();
        this.getDropdownItems(this.props);
    };
    /**
     * The key method about move
     * @param {number} target position to slide to
     * @param {bool} checkSlideBtn need to check the slide button status or not
     * @param {bool} setActive need to check the active status or not
     */
    Nav.prototype.setOffset = function (target, checkSlideBtn, setActive) {
        if (checkSlideBtn === void 0) {
            checkSlideBtn = true;
        }
        if (setActive === void 0) {
            setActive = true;
        }
        var _a = this.props,
            tabPosition = _a.tabPosition,
            rtl = _a.rtl;
        var navWH = (0, utils_1.getOffsetWH)(this.nav, tabPosition);
        var wrapperWH = (0, utils_1.getOffsetWH)(this.wrapper);
        // target should not be great than 0, i.e. should not over slide to left-most
        target = target >= 0 ? 0 : target;
        // when need to slide, should not slide to exceed right-most
        target = target <= wrapperWH - navWH && wrapperWH - navWH < 0 ? wrapperWH - navWH : target;
        var relativeOffset = target - this.offset;
        if (this.activeTab && this.props.excessMode === 'slide' && setActive) {
            var activeTabWH = (0, utils_1.getOffsetWH)(this.activeTab);
            var activeTabOffset = (0, utils_1.getOffsetLT)(this.activeTab) + relativeOffset;
            var wrapperOffset = (0, utils_1.getOffsetLT)(this.wrapper);
            target = this._adjustTarget({
                wrapperOffset: wrapperOffset,
                wrapperWH: wrapperWH,
                activeTabWH: activeTabWH,
                activeTabOffset: activeTabOffset,
                rtl: rtl,
                target: target
            });
        }
        var scaleRate = 1;
        if (this.nav && this.nav.offsetWidth) {
            scaleRate = (0, utils_1.getOffsetWH)(this.nav) / this.nav.offsetWidth;
        }
        var _ov = target / scaleRate;
        var offsetValue = isNaN(_ov) ? target : _ov;
        if (this.offset !== target && this.nav) {
            var divScroll = this.nav.parentElement;
            if (tabPosition === 'left' || tabPosition === 'right') {
                divScroll.scrollTo({ top: -offsetValue, left: 0, behavior: 'smooth' });
            } else if (!this.props.rtl) {
                divScroll.scrollTo({ top: 0, left: -offsetValue, behavior: 'smooth' });
            } else {
                divScroll.scrollTo({ top: 0, left: offsetValue, behavior: 'smooth' });
            }
            if (checkSlideBtn) {
                this.setSlideBtn();
            }
        }
    };
    Nav.prototype._adjustTarget = function (_a) {
        var wrapperOffset = _a.wrapperOffset,
            wrapperWH = _a.wrapperWH,
            activeTabWH = _a.activeTabWH,
            activeTabOffset = _a.activeTabOffset,
            rtl = _a.rtl,
            target = _a.target;
        if (
        // active tab covers wrapper right edge
        wrapperOffset + wrapperWH < activeTabOffset + activeTabWH && activeTabOffset < wrapperOffset + wrapperWH) {
            if (rtl) {
                target += activeTabOffset + activeTabWH - (wrapperOffset + wrapperWH); // Move more to make active tab totally in visible zone
            } else {
                target -= activeTabOffset + activeTabWH - (wrapperOffset + wrapperWH) + 1;
            }
            return target;
        }
        if (
        // active tab covers wrapper left edge
        wrapperOffset < activeTabOffset + activeTabWH && activeTabOffset < wrapperOffset) {
            if (rtl) {
                target -= wrapperOffset - activeTabOffset + 1;
            } else {
                target += wrapperOffset - activeTabOffset;
            }
            return target;
        }
        return target;
    };
    Nav.prototype._setBtnStyle = function (prev, next) {
        if (this.prevBtn && this.nextBtn) {
            var cls = 'disabled';
            this.prevBtn.disabled = !prev;
            this.nextBtn.disabled = !next;
            if (prev) {
                util_1.dom.removeClass(this.prevBtn, cls);
            } else {
                util_1.dom.addClass(this.prevBtn, cls);
            }
            if (next) {
                util_1.dom.removeClass(this.nextBtn, cls);
            } else {
                util_1.dom.addClass(this.nextBtn, cls);
            }
        }
    };
    Nav.prototype.setSlideBtn = function () {
        var tabPosition = this.props.tabPosition;
        // TEMP: 这里会受 Animate 影响，re-render 过程中 this.nav 实际上指向的是上次的 tabList 元素，建议暂时关闭 animation 解决
        var navWH = (0, utils_1.getOffsetWH)(this.nav, tabPosition);
        var wrapperWH = (0, utils_1.getOffsetWH)(this.wrapper, tabPosition);
        // 这里统一向下取整再做比较，否则会因为小数点精度问题导致无法对齐
        var minOffset = Math.floor(wrapperWH - navWH);
        var offset = Math.floor(this.offset);
        var next;
        var prev;
        if (minOffset >= 0 || navWH <= wrapperWH) {
            next = false;
            prev = false;
            this.setOffset(0, false); // no need to check slide again since this call is invoked from inside setSlideBtn
        } else if (offset < 0 && offset <= minOffset) {
            prev = true;
            next = false;
        } else if (offset >= 0) {
            prev = false;
            next = true;
        } else {
            prev = true;
            next = true;
        }
        if ((prev || next) !== this.state.showBtn) {
            this.setState({
                showBtn: prev || next
            });
        } else {
            this._setBtnStyle(prev, next);
        }
    };
    Nav.prototype.getDropdownItems = function (_a) {
        var excessMode = _a.excessMode,
            tabs = _a.tabs;
        if (excessMode !== 'dropdown') {
            return;
        }
        var wrapperWidth = this.wrapper.offsetWidth;
        var childNodes = this.nav.childNodes;
        var index;
        var tabsWidth = 0;
        for (index = 0; index < tabs.length; index++) {
            tabsWidth += childNodes[index].offsetWidth;
            if (tabsWidth > wrapperWidth) {
                break;
            }
        }
        if (index === tabs.length) {
            this.setState({
                dropdownTabs: []
            });
        } else {
            this.setState({
                dropdownTabs: tabs
            });
        }
    };
    Nav.prototype.renderTabList = function (props, hideAdd) {
        var _this = this;
        var prefix = props.prefix,
            tabs = props.tabs,
            activeKey = props.activeKey,
            tabRender = props.tabRender,
            showAdd = props.showAdd,
            onAdd = props.onAdd,
            addIcon = props.addIcon;
        var tabTemplateFn = tabRender || this.defaultTabTemplateRender;
        var rst = [];
        react_1.default.Children.forEach(tabs, function (child) {
            var _a;
            var _b = child.props,
                disabled = _b.disabled,
                className = _b.className,
                onClick = _b.onClick,
                onMouseEnter = _b.onMouseEnter,
                onMouseLeave = _b.onMouseLeave,
                style = _b.style;
            var active = activeKey === child.key;
            var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "tabs-tab")] = true, _a.disabled = disabled, _a.active = active, _a), className);
            var events = {};
            if (!disabled) {
                events = {
                    onClick: _this.onNavItemClick.bind(_this, child.key, onClick),
                    onMouseEnter: _this.onNavItemMouseEnter.bind(_this, child.key, onMouseEnter),
                    onMouseLeave: _this.onNavItemMouseLeave.bind(_this, child.key, onMouseLeave)
                };
            }
            var dataProps = util_1.obj.pickAttrsWith(child.props, 'data-');
            rst.push(react_1.default.createElement("li", tslib_1.__assign({}, dataProps, { role: "tab", key: child.key, ref: active ? _this.activeTabRefHandler : null, "aria-hidden": disabled ? 'true' : 'false', "aria-selected": active ? 'true' : 'false', tabIndex: active ? 0 : -1, className: cls, style: style }, events), tabTemplateFn(child.key, child.props)));
        });
        if (!hideAdd && showAdd) {
            rst.push(react_1.default.createElement("li", { role: "button", className: "".concat(prefix, "tabs-tab ").concat(prefix, "tabs-add"), onClick: onAdd, key: "add" }, react_1.default.createElement("div", { className: "".concat(prefix, "tabs-tab-inner") }, addIcon ? addIcon : react_1.default.createElement(icon_1.default, { type: "add" }))));
        }
        return rst;
    };
    Nav.prototype.onNavItemClick = function (key, callback, e) {
        this.props.onTriggerEvent(utils_1.triggerEvents.CLICK, key);
        if (callback) {
            return callback(key, e);
        }
    };
    Nav.prototype.onNavItemMouseEnter = function (key, callback, e) {
        this.props.onTriggerEvent(utils_1.triggerEvents.HOVER, key);
        if (callback) {
            return callback(key, e);
        }
    };
    Nav.prototype.onNavItemMouseLeave = function (key, callback, e) {
        if (callback) {
            return callback(key, e);
        }
    };
    Nav.prototype.getIcon = function (type) {
        var _a = this.props,
            prefix = _a.prefix,
            icons = _a.icons,
            rtl = _a.rtl;
        var iconType = iconTypeMap[type];
        var icon = react_1.default.createElement(icon_1.default, { type: iconType, rtl: rtl, className: "".concat(prefix, "tab-icon-").concat(type) });
        if (icons[type]) {
            icon = typeof icons[type] === 'string' ? react_1.default.createElement(icon_1.default, { rtl: rtl, type: icons[type] }) : icons[type];
        }
        return icon;
    };
    Nav.prototype.renderDropdownTabs = function (tabs) {
        var _this = this;
        if (tabs === void 0) {
            tabs = [];
        }
        if (!tabs.length) {
            return null;
        }
        var _a = this.props,
            prefix = _a.prefix,
            activeKey = _a.activeKey,
            triggerType = _a.triggerType,
            popupProps = _a.popupProps,
            rtl = _a.rtl;
        var dropdownIcon = this.getIcon('dropdown');
        var trigger = react_1.default.createElement("button", { className: "".concat(prefix, "tabs-btn-down") }, dropdownIcon);
        return react_1.default.createElement(Popup, tslib_1.__assign({ key: "down", rtl: rtl, triggerType: triggerType, trigger: trigger, container: function container(target) {
                return target.parentNode;
            }, className: "".concat(prefix, "tabs-bar-popup") }, popupProps), react_1.default.createElement(menu_1.default, { rtl: rtl, selectedKeys: [activeKey], onSelect: this.onSelectMenuItem, selectMode: "single" }, tabs.map(function (tab) {
            var _a = tab.props,
                disabled = _a.disabled,
                onClick = _a.onClick,
                onMouseEnter = _a.onMouseEnter,
                onMouseLeave = _a.onMouseLeave;
            var events = {};
            if (!disabled) {
                events = {
                    onClick: _this.onNavItemClick.bind(_this, tab.key, onClick),
                    onMouseEnter: _this.onNavItemMouseEnter.bind(_this, tab.key, onMouseEnter),
                    onMouseLeave: _this.onNavItemMouseLeave.bind(_this, tab.key, onMouseLeave)
                };
            }
            return react_1.default.createElement(menu_1.default.Item, tslib_1.__assign({ key: tab.key }, events), tab.props.title);
        })));
    };
    Nav.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            prefix = _c.prefix,
            tabPosition = _c.tabPosition,
            excessMode = _c.excessMode,
            extra = _c.extra,
            onKeyDown = _c.onKeyDown,
            animation = _c.animation,
            style = _c.style,
            className = _c.className,
            showAdd = _c.showAdd,
            onAdd = _c.onAdd,
            addIcon = _c.addIcon,
            rtl = _c.rtl;
        var state = this.state;
        var nextButton;
        var prevButton;
        var restButton;
        var showNextPrev = state.showBtn;
        if (excessMode === 'dropdown' && showNextPrev && state.dropdownTabs.length) {
            restButton = this.renderDropdownTabs(state.dropdownTabs);
            prevButton = null;
            nextButton = null;
        } else if (showNextPrev) {
            var prevIcon = this.getIcon('prev');
            prevButton = react_1.default.createElement("button", { onClick: this.onPrevClick, className: "".concat(prefix, "tabs-btn-prev"), ref: this.prevBtnHandler, type: "button", key: "prev" }, prevIcon);
            var nextIcon = this.getIcon('next');
            nextButton = react_1.default.createElement("button", { onClick: this.onNextClick, className: "".concat(prefix, "tabs-btn-next"), ref: this.nextBtnHandler, type: "button", key: "next" }, nextIcon);
            restButton = null;
        } else {
            nextButton = null;
            prevButton = null;
            restButton = null;
        }
        var containerCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "tabs-nav-container")] = true, _a["".concat(prefix, "tabs-nav-container-scrolling")] = showNextPrev, _a["".concat(prefix, "tabs-show-add")] = showAdd, _a));
        var hasExtra = restButton || prevButton || nextButton;
        var navCls = "".concat(prefix, "tabs-nav");
        var tabList = this.renderTabList(this.props, hasExtra);
        var wrapCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "tabs-nav-wrap")] = true, _b["".concat(prefix, "tabs-nav-has-add")] = showAdd, _b));
        var container = react_1.default.createElement("div", { className: containerCls, onKeyDown: onKeyDown, key: "nav-container" }, react_1.default.createElement("div", { className: "".concat(prefix, "tabs-nav-wrap"), ref: this.wrapperRefHandler }, react_1.default.createElement("div", { className: "".concat(prefix, "tabs-nav-scroll"), ref: this.scrollerRefHandler, onScroll: this.onScroll }, animation ? react_1.default.createElement(animate_1.default, { role: "tablist", "aria-multiselectable": false, component: "ul", className: navCls, animation: navCls, singleMode: false, ref: this.navRefHandler, afterAppear: this.initialSettings.bind(this) }, tabList) : react_1.default.createElement("ul", { role: "tablist", className: "".concat(navCls, " ").concat(prefix, "disable-animation"), ref: this.navRefHandler }, tabList))), showAdd && hasExtra ? react_1.default.createElement("div", { className: "".concat(navCls, "-operations") }, prevButton, nextButton, restButton, react_1.default.createElement("li", { className: "".concat(prefix, "tabs-tab ").concat(prefix, "tabs-add"), onClick: onAdd, key: "add" }, react_1.default.createElement("div", { className: "".concat(prefix, "tabs-tab-inner") }, addIcon ? addIcon : react_1.default.createElement(icon_1.default, { type: "add" })))) : [prevButton, nextButton, restButton]);
        var navChildren = [container];
        if (extra) {
            var extraProps = {
                className: "".concat(prefix, "tabs-nav-extra"),
                key: 'nav-extra'
            };
            if (tabPosition === 'top' || tabPosition === 'bottom') {
                var style_1 = rtl ? floatLeft : floatRight;
                navChildren.unshift(react_1.default.createElement("div", tslib_1.__assign({}, extraProps, { style: style_1 }), extra));
            } else {
                navChildren.push(react_1.default.createElement("div", tslib_1.__assign({}, extraProps), extra));
            }
        }
        var navbarCls = (0, classnames_1.default)("".concat(prefix, "tabs-bar"), className);
        return react_1.default.createElement("div", { className: navbarCls, style: style, ref: this.navbarRefHandler }, navChildren);
    };
    Nav.propTypes = {
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        animation: prop_types_1.default.bool,
        activeKey: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        excessMode: prop_types_1.default.string,
        extra: prop_types_1.default.any,
        tabs: prop_types_1.default.oneOfType([prop_types_1.default.array, prop_types_1.default.object]),
        tabPosition: prop_types_1.default.string,
        tabRender: prop_types_1.default.func,
        triggerType: prop_types_1.default.string,
        popupProps: prop_types_1.default.object,
        onTriggerEvent: prop_types_1.default.func,
        onKeyDown: prop_types_1.default.func,
        onClose: prop_types_1.default.func,
        style: prop_types_1.default.object,
        className: prop_types_1.default.string,
        locale: prop_types_1.default.object,
        icons: prop_types_1.default.object
    };
    return Nav;
}(react_1.default.Component);
exports.default = Nav;

/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var TabContent = /** @class */function (_super) {
    tslib_1.__extends(TabContent, _super);
    function TabContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TabContent.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            activeKey = _b.activeKey,
            lazyLoad = _b.lazyLoad,
            unmountInactiveTabs = _b.unmountInactiveTabs,
            children = _b.children,
            className = _b.className,
            others = tslib_1.__rest(_b, ["prefix", "activeKey", "lazyLoad", "unmountInactiveTabs", "children", "className"]);
        var formatChildren = [];
        react_1.default.Children.forEach(children, function (child) {
            /* eslint-disable eqeqeq */
            var active = activeKey == child.key;
            formatChildren.push(react_1.default.cloneElement(child, {
                prefix: prefix,
                active: active,
                lazyLoad: lazyLoad,
                unmountInactiveTabs: unmountInactiveTabs
            }));
        });
        var classNames = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "tabs-content")] = true, _a), className);
        return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: classNames }), formatChildren);
    };
    TabContent.propTypes = {
        prefix: prop_types_1.default.string,
        activeKey: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.number]),
        lazyLoad: prop_types_1.default.bool,
        children: prop_types_1.default.any
    };
    return TabContent;
}(react_1.PureComponent);
exports.default = TabContent;

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
/** Tab.Item */
var TabItem = /** @class */function (_super) {
    tslib_1.__extends(TabItem, _super);
    function TabItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TabItem.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            active = _b.active,
            lazyLoad = _b.lazyLoad,
            unmountInactiveTabs = _b.unmountInactiveTabs,
            children = _b.children;
        this._actived = this._actived || active;
        if (lazyLoad && !this._actived) {
            return null;
        }
        if (unmountInactiveTabs && !active) {
            return null;
        }
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "tabs-tabpane")] = true, _a["".concat(active ? 'active' : 'hidden')] = true, _a));
        return react_1.default.createElement("div", { role: "tabpanel", "aria-hidden": active ? 'false' : 'true', className: cls }, children);
    };
    TabItem.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 选项卡标题
         */
        title: prop_types_1.default.node,
        /**
         * 单个选项卡是否可关闭
         */
        closeable: prop_types_1.default.bool,
        /**
         * 选项卡是否被禁用
         */
        disabled: prop_types_1.default.bool,
        active: prop_types_1.default.bool,
        lazyLoad: prop_types_1.default.bool,
        unmountInactiveTabs: prop_types_1.default.bool,
        children: prop_types_1.default.any
    };
    TabItem.defaultProps = {
        prefix: 'next-',
        closeable: false
    };
    return TabItem;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(TabItem);

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var base_1 = __webpack_require__(419);
var tree_1 = __webpack_require__(424);
var fixed_1 = __webpack_require__(427);
var selection_1 = __webpack_require__(428);
var expanded_1 = __webpack_require__(429);
var virtual_1 = __webpack_require__(430);
var lock_1 = __webpack_require__(432);
var new_lock_1 = __webpack_require__(433);
var list_1 = __webpack_require__(434);
var sticky_1 = __webpack_require__(437);
var list_header_1 = __webpack_require__(189);
var list_footer_1 = __webpack_require__(190);
var util_1 = __webpack_require__(4);
var ieVersion = util_1.env.ieVersion;
var ORDER_LIST = [fixed_1.default, lock_1.default, selection_1.default, expanded_1.default, virtual_1.default, tree_1.default, list_1.default, sticky_1.default];
var Table = ORDER_LIST.reduce(function (ret, current) {
    ret = current(ret);
    return ret;
}, base_1.default);
lock_1.default._typeMark = 'lock';
expanded_1.default._typeMark = 'expanded';
fixed_1.default._typeMark = 'fixed';
var StickyLockTable = ORDER_LIST.reduce(function (ret, current) {
    var newLock = !ieVersion;
    if (current._typeMark === 'lock') {
        ret = newLock ? (0, new_lock_1.default)(ret) : (0, lock_1.default)(ret);
    } else if (current._typeMark === 'expanded') {
        ret = newLock ? (0, expanded_1.default)(ret, true) : (0, expanded_1.default)(ret);
    } else if (current._typeMark === 'fixed') {
        ret = newLock ? (0, fixed_1.default)(ret, true) : (0, fixed_1.default)(ret);
    } else {
        ret = current(ret);
    }
    return ret;
}, base_1.default);
Table.Base = base_1.default;
Table.fixed = fixed_1.default;
Table.lock = lock_1.default;
Table.selection = selection_1.default;
Table.expanded = expanded_1.default;
Table.tree = tree_1.default;
Table.virtual = virtual_1.default;
Table.list = list_1.default;
Table.sticky = sticky_1.default;
Table.GroupHeader = list_header_1.default;
Table.GroupFooter = list_footer_1.default;
Table.StickyLock = config_provider_1.default.config(StickyLockTable, {
    componentName: 'Table'
});
exports.default = config_provider_1.default.config(Table, {
    componentName: 'Table',
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        // fix https://github.com/alibaba-fusion/next/issues/4062
        if ('columns' in props && typeof props.columns !== 'undefined') {
            var columns = props.columns,
                others = tslib_1.__rest(props, ["columns"]);
            var newColumns = tslib_1.__spreadArray([], tslib_1.__read(columns), false);
            props = tslib_1.__assign({ columns: newColumns }, others);
        }
        if ('expandedRowKeys' in props) {
            deprecated('expandedRowKeys', 'openRowKeys', 'Table');
            var expandedRowKeys = props.expandedRowKeys,
                others = tslib_1.__rest(props, ["expandedRowKeys"]);
            props = tslib_1.__assign({ openRowKeys: expandedRowKeys }, others);
        }
        if ('onExpandedChange' in props) {
            deprecated('onExpandedChange', 'onRowOpen', 'Table');
            var onExpandedChange = props.onExpandedChange,
                others = tslib_1.__rest(props, ["onExpandedChange"]);
            props = tslib_1.__assign({ onRowOpen: onExpandedChange }, others);
        }
        if ('isLoading' in props) {
            deprecated('isLoading', 'loading', 'Table');
            var isLoading = props.isLoading,
                others = tslib_1.__rest(props, ["isLoading"]);
            props = tslib_1.__assign({ loading: isLoading }, others);
        }
        if ('indentSize' in props) {
            deprecated('indentSize', 'indent', 'Table');
            var indentSize = props.indentSize,
                others = tslib_1.__rest(props, ["indentSize"]);
            props = tslib_1.__assign({ indent: indentSize }, others);
        }
        if ('optimization' in props) {
            deprecated('optimization', 'pure', 'Table');
            var optimization = props.optimization,
                others = tslib_1.__rest(props, ["optimization"]);
            props = tslib_1.__assign({ pure: optimization }, others);
        }
        if ('getRowClassName' in props) {
            deprecated('getRowClassName', 'getRowProps', 'Table');
            var getRowClassName_1 = props.getRowClassName,
                getRowProps_1 = props.getRowProps,
                others = tslib_1.__rest(props, ["getRowClassName", "getRowProps"]);
            if (getRowClassName_1) {
                var newGetRowProps = function newGetRowProps() {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return tslib_1.__assign({ className: getRowClassName_1.apply(void 0, tslib_1.__spreadArray([], tslib_1.__read(args), false)) }, getRowProps_1 ? getRowProps_1.apply(void 0, tslib_1.__spreadArray([], tslib_1.__read(args), false)) : {});
                };
                props = tslib_1.__assign({ getRowProps: newGetRowProps }, others);
            } else {
                props = tslib_1.__assign({ getRowProps: getRowProps_1 }, others);
            }
        }
        if ('getRowProps' in props) {
            deprecated('getRowProps', 'rowProps', 'Table in 1.15.0');
            var getRowProps = props.getRowProps,
                others = tslib_1.__rest(props, ["getRowProps"]);
            props = tslib_1.__assign({ rowProps: getRowProps }, others);
        }
        if ('getCellProps' in props) {
            deprecated('getCellProps', 'cellProps', 'Table in 1.15.0');
            var getCellProps = props.getCellProps,
                others = tslib_1.__rest(props, ["getCellProps"]);
            props = tslib_1.__assign({ cellProps: getCellProps }, others);
        }
        return props;
    }
});

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_dom_1 = __webpack_require__(8);
var classnames_1 = __webpack_require__(3);
var shallow_element_equals_1 = __webpack_require__(100);
var react_lifecycles_compat_1 = __webpack_require__(6);
var loading_1 = __webpack_require__(98);
var config_provider_1 = __webpack_require__(5);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var body_1 = __webpack_require__(61);
var header_1 = __webpack_require__(181);
var wrapper_1 = __webpack_require__(422);
var row_1 = __webpack_require__(62);
var cell_1 = __webpack_require__(63);
var filter_1 = __webpack_require__(182);
var sort_1 = __webpack_require__(183);
var column_1 = __webpack_require__(101);
var column_group_1 = __webpack_require__(423);
var Children = react_1.default.Children,
    noop = function noop() {};
//<Table>
//    <Table.Column/>
//    <Table.ColumnGroup>
//      <Table.Column/>
//      <Table.Column/>
//    </Table.ColumnGroup>
//</Table>
/** Table */
var Table = /** @class */function (_super) {
    tslib_1.__extends(Table, _super);
    function Table(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.state = {
            sort: _this.props.sort || {}
        };
        _this.onSort = function (dataIndex, order, sort) {
            if (typeof _this.props.sort === 'undefined') {
                _this.setState({
                    sort: sort
                }, function () {
                    _this.props.onSort(dataIndex, order, sort);
                });
            } else {
                _this.props.onSort(dataIndex, order, sort);
            }
        };
        _this.onFilter = function (filterParams) {
            _this.props.onFilter(filterParams);
        };
        _this.onResizeChange = function (dataIndex, value) {
            _this.props.onResizeChange(dataIndex, value);
        };
        _this.getResizeProxyDomRef = function (resizeProxyDom) {
            if (!resizeProxyDom) {
                return _this.resizeProxyDomRef;
            }
            _this.resizeProxyDomRef = resizeProxyDom;
        };
        _this.getWrapperRef = function (wrapper) {
            if (!wrapper) {
                return _this.wrapper;
            }
            _this.wrapper = wrapper;
        };
        _this.getAffixRef = function (affixRef) {
            if (!affixRef) {
                return _this.affixRef;
            }
            _this.affixRef = affixRef;
        };
        _this.getHeaderCellRef = function (i, j, cell) {
            var cellRef = "header_cell_".concat(i, "_").concat(j);
            if (!cell) {
                return _this[cellRef];
            }
            _this[cellRef] = cell;
        };
        _this.getRowRef = function (i, row) {
            var rowRef = "row_".concat(i);
            if (!row) {
                return _this[rowRef];
            }
            _this[rowRef] = row;
        };
        _this.getCellRef = function (i, j, cell) {
            var cellRef = "cell_".concat(i, "_").concat(j);
            if (!cell) {
                return _this[cellRef];
            }
            _this[cellRef] = cell;
        };
        _this.handleColHoverClass = function (rowIndex, colIndex, isAdd) {
            var crossline = _this.props.crossline;
            var funcName = isAdd ? 'addClass' : 'removeClass';
            if (crossline) {
                _this.props.entireDataSource.forEach(function (val, index) {
                    try {
                        // in case of finding an unmounted component due to cached data
                        // need to clear refs of this.tableInc when dataSource Changed
                        // in virtual table
                        var currentCol = (0, react_dom_1.findDOMNode)(_this.getCellRef(index, colIndex));
                        currentCol && util_1.dom[funcName](currentCol, 'hovered');
                    } catch (error) {
                        return null;
                    }
                });
            }
        };
        /**
         * @param event
         * @returns {Object} { rowIndex: string; colIndex: string }
         */
        _this.findEventTarget = function (e) {
            var prefix = _this.props.prefix;
            var target = util_1.dom.getClosest(e.target, "td.".concat(prefix, "table-cell"));
            var colIndex = target && target.getAttribute('data-next-table-col');
            var rowIndex = target && target.getAttribute('data-next-table-row');
            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of this.tableInc when dataSource Changed
                // in virtual table
                var currentCol = (0, react_dom_1.findDOMNode)(_this.getCellRef(rowIndex, colIndex));
                if (currentCol === target) {
                    return {
                        colIndex: colIndex,
                        rowIndex: rowIndex
                    };
                }
            } catch (error) {
                return {};
            }
            return {};
        };
        _this.onBodyMouseOver = function (e) {
            var crossline = _this.props.crossline;
            if (!crossline) {
                return;
            }
            var _a = _this.findEventTarget(e),
                colIndex = _a.colIndex,
                rowIndex = _a.rowIndex;
            // colIndex, rowIndex are string
            if (!colIndex || !rowIndex) {
                return;
            }
            _this.handleColHoverClass(rowIndex, colIndex, true);
            _this.colIndex = colIndex;
            _this.rowIndex = rowIndex;
        };
        _this.onBodyMouseOut = function (e) {
            var crossline = _this.props.crossline;
            if (!crossline) {
                return;
            }
            var _a = _this.findEventTarget(e),
                colIndex = _a.colIndex,
                rowIndex = _a.rowIndex;
            // colIndex, rowIndex are string
            if (!colIndex || !rowIndex) {
                return;
            }
            _this.handleColHoverClass(_this.rowIndex, _this.colIndex, false);
            _this.colIndex = -1;
            _this.rowIndex = -1;
        };
        _this.addColIndex = function (children, start) {
            if (start === void 0) {
                start = 0;
            }
            children.forEach(function (child, i) {
                child.__colIndex = start + i;
            });
        };
        _this.getTableEl = function (ref) {
            _this.tableEl = ref;
        };
        var _a = _this.context,
            getTableInstance = _a.getTableInstance,
            getTableInstanceForVirtual = _a.getTableInstanceForVirtual,
            getTableInstanceForFixed = _a.getTableInstanceForFixed,
            getTableInstanceForExpand = _a.getTableInstanceForExpand;
        getTableInstance && getTableInstance(props.lockType, _this);
        getTableInstanceForFixed && getTableInstanceForFixed(props.lockType, _this);
        getTableInstanceForVirtual && getTableInstanceForVirtual(props.lockType, _this);
        getTableInstanceForExpand && getTableInstanceForExpand(_this);
        _this.notRenderCellIndex = [];
        return _this;
    }
    Table.prototype.getChildContext = function () {
        return {
            notRenderCellIndex: this.notRenderCellIndex || [],
            lockType: this.props.lockType
        };
    };
    Table.getDerivedStateFromProps = function (nextProps) {
        var state = {};
        if (typeof nextProps.sort !== 'undefined') {
            state.sort = nextProps.sort;
        }
        return state;
    };
    Table.prototype.componentDidMount = function () {
        this.notRenderCellIndex = [];
    };
    Table.prototype.shouldComponentUpdate = function (nextProps, nextState, nextContext) {
        if (nextProps.pure) {
            var isEqual = (0, shallow_element_equals_1.default)(nextProps, this.props) && util_1.obj.shallowEqual(nextState, this.state) && util_1.obj.shallowEqual(nextContext, this.context);
            return !isEqual;
        }
        return true;
    };
    Table.prototype.componentDidUpdate = function () {
        this.notRenderCellIndex = [];
    };
    Table.prototype.normalizeChildrenState = function (props) {
        var columns = props.columns;
        if (props.children) {
            columns = this.normalizeChildren(props);
        }
        return this.fetchInfoFromBinaryChildren(columns);
    };
    // 将React结构化数据提取props转换成数组
    Table.prototype.normalizeChildren = function (props) {
        var columns = props.columns;
        var getChildren = function getChildren(children) {
            var ret = [];
            Children.forEach(children, function (child) {
                if (child) {
                    var props_1 = tslib_1.__assign({}, child.props);
                    if (child.ref) {
                        props_1.ref = child.ref;
                    }
                    if (!(child && ['function', 'object'].indexOf((0, _typeof3.default)(child.type)) > -1 && (child.type._typeMark === 'column' || child.type._typeMark === 'columnGroup'))) {
                        util_1.log.warning('Use <Table.Column/>, <Table.ColumnGroup/> as child.');
                    }
                    ret.push(props_1);
                    if (child.props.children) {
                        props_1.children = getChildren(child.props.children);
                    }
                }
            });
            return ret;
        };
        if (props.children) {
            columns = getChildren(props.children);
        }
        return columns;
    };
    Table.prototype.fetchInfoFromBinaryChildren = function (children) {
        var hasGroupHeader = false;
        var flatChildren = [],
            groupChildren = [],
            getChildren = function getChildren(propsChildren, level) {
            if (propsChildren === void 0) {
                propsChildren = [];
            }
            groupChildren[level] = groupChildren[level] || [];
            propsChildren.forEach(function (child) {
                child.headerCellRowIndex = level;
                child.headerCellColIndex = groupChildren[level].length;
                if (child.children) {
                    hasGroupHeader = true;
                    getChildren(child.children, level + 1);
                } else {
                    flatChildren.push(child);
                }
                groupChildren[level].push(child);
            });
        },
            getColSpan = function getColSpan(children, colSpan) {
            colSpan = colSpan || 0;
            children.forEach(function (child) {
                if (child.children) {
                    colSpan = getColSpan(child.children, colSpan);
                } else {
                    colSpan += 1;
                }
            });
            return colSpan;
        };
        getChildren(children, 0);
        groupChildren.forEach(function (groupChild, i) {
            groupChild.forEach(function (child, j) {
                var colSpan;
                var children = child.children;
                if (children) {
                    colSpan = getColSpan(children);
                    child.colSpan = colSpan;
                    groupChildren[i][j] = child;
                }
            });
        });
        var _a = this.props,
            lockType = _a.lockType,
            lengths = _a.lengths;
        var start = lockType === 'right' ? lengths.origin - lengths.right : 0;
        this.addColIndex(flatChildren, start);
        return {
            flatChildren: flatChildren,
            groupChildren: groupChildren,
            hasGroupHeader: hasGroupHeader
        };
    };
    Table.prototype.renderColGroup = function (flatChildren) {
        var cols = flatChildren.map(function (col, index) {
            var width = col.width;
            var style = {};
            if (width) {
                style = {
                    width: width
                };
            }
            return react_1.default.createElement("col", { style: style, key: index });
        });
        return react_1.default.createElement("colgroup", { key: "table-colgroup" }, cols);
    };
    // 通过头部和扁平的结构渲染表格
    Table.prototype.renderTable = function (groupChildren, flatChildren) {
        if (flatChildren.length || !flatChildren.length && !this.props.lockType) {
            var _a = this.props,
                hasHeader = _a.hasHeader,
                components = _a.components,
                prefix = _a.prefix,
                wrapperContent = _a.wrapperContent,
                filterParams = _a.filterParams,
                locale = _a.locale,
                dataSource = _a.dataSource,
                emptyContent = _a.emptyContent,
                loading = _a.loading,
                primaryKey = _a.primaryKey,
                cellProps = _a.cellProps,
                rowProps = _a.rowProps,
                onRowClick = _a.onRowClick,
                onRowMouseEnter = _a.onRowMouseEnter,
                onRowMouseLeave = _a.onRowMouseLeave,
                expandedIndexSimulate = _a.expandedIndexSimulate,
                pure = _a.pure,
                rtl = _a.rtl,
                crossline = _a.crossline,
                sortIcons = _a.sortIcons,
                tableWidth = _a.tableWidth;
            var sort = this.state.sort;
            var _b = components.Header,
                Header = _b === void 0 ? header_1.default : _b,
                _c = components.Wrapper,
                Wrapper = _c === void 0 ? wrapper_1.default : _c,
                _d = components.Body,
                Body = _d === void 0 ? body_1.default : _d;
            var colGroup = this.renderColGroup(flatChildren);
            return [react_1.default.createElement("div", { key: "".concat(prefix, "table-column-resize-proxy"), ref: this.getResizeProxyDomRef, className: "".concat(prefix, "table-column-resize-proxy") }), react_1.default.createElement(Wrapper, { key: "".concat(prefix, "table-wrapper"), colGroup: colGroup, ref: this.getWrapperRef, prefix: prefix, tableWidth: tableWidth }, hasHeader ? react_1.default.createElement(Header, { prefix: prefix, rtl: rtl, pure: pure, affixRef: this.getAffixRef, colGroup: colGroup, className: "".concat(prefix, "table-header"), filterParams: filterParams, tableEl: this.tableEl, columns: groupChildren, locale: locale, headerCellRef: this.getHeaderCellRef, components: components, onFilter: this.onFilter, sort: sort, onResizeChange: this.onResizeChange, onSort: this.onSort, sortIcons: sortIcons, tableWidth: tableWidth, resizeProxyDomRef: this.resizeProxyDomRef }) : null, react_1.default.createElement(Body, { prefix: prefix, rtl: rtl, pure: pure, crossline: crossline, colGroup: colGroup, className: "".concat(prefix, "table-body"), components: components, loading: loading, emptyContent: emptyContent, getCellProps: cellProps, primaryKey: primaryKey, getRowProps: rowProps, columns: flatChildren, rowRef: this.getRowRef, cellRef: this.getCellRef, onRowClick: onRowClick, expandedIndexSimulate: expandedIndexSimulate, tableEl: this.tableEl, onRowMouseEnter: onRowMouseEnter, onRowMouseLeave: onRowMouseLeave, dataSource: dataSource, locale: locale, onBodyMouseOver: this.onBodyMouseOver, onBodyMouseOut: this.onBodyMouseOut, tableWidth: tableWidth }), wrapperContent)];
        } else {
            return null;
        }
    };
    Table.prototype.render = function () {
        var _a, _b;
        var ret = this.normalizeChildrenState(this.props);
        this.groupChildren = ret.groupChildren;
        this.flatChildren = ret.flatChildren;
        /* eslint-disable no-unused-vars, prefer-const */
        var table = this.renderTable(ret.groupChildren, ret.flatChildren),
            _c = this.props,
            className = _c.className,
            style = _c.style,
            hasBorder = _c.hasBorder,
            isZebra = _c.isZebra,
            loading = _c.loading,
            size = _c.size,
            hasHeader = _c.hasHeader,
            prefix = _c.prefix,
            dataSource = _c.dataSource,
            entireDataSource = _c.entireDataSource,
            onSort = _c.onSort,
            onResizeChange = _c.onResizeChange,
            onRowClick = _c.onRowClick,
            onRowMouseEnter = _c.onRowMouseEnter,
            onRowMouseLeave = _c.onRowMouseLeave,
            onFilter = _c.onFilter,
            rowProps = _c.rowProps,
            cellProps = _c.cellProps,
            scrollToRow = _c.scrollToRow,
            primaryKey = _c.primaryKey,
            components = _c.components,
            wrapperContent = _c.wrapperContent,
            lockType = _c.lockType,
            locale = _c.locale,
            expandedIndexSimulate = _c.expandedIndexSimulate,
            refs = _c.refs,
            pure = _c.pure,
            rtl = _c.rtl,
            emptyContent = _c.emptyContent,
            filterParams = _c.filterParams,
            columns = _c.columns,
            sortIcons = _c.sortIcons,
            _d = _c.loadingComponent,
            LoadingComponent = _d === void 0 ? loading_1.default : _d,
            tableLayout = _c.tableLayout,
            tableWidth = _c.tableWidth,
            ref = _c.ref,
            others = tslib_1.__rest(_c, ["className", "style", "hasBorder", "isZebra", "loading", "size", "hasHeader", "prefix", "dataSource", "entireDataSource", "onSort", "onResizeChange", "onRowClick", "onRowMouseEnter", "onRowMouseLeave", "onFilter", "rowProps", "cellProps", "scrollToRow", "primaryKey", "components", "wrapperContent", "lockType", "locale", "expandedIndexSimulate", "refs", "pure", "rtl", "emptyContent", "filterParams", "columns", "sortIcons", "loadingComponent", "tableLayout", "tableWidth", "ref"]),
            cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "table")] = true, _a["".concat(prefix, "table-").concat(size)] = size, _a["".concat(prefix, "table-layout-").concat(tableLayout)] = tableLayout, _a["".concat(prefix, "table-loading")] = loading, _a['only-bottom-border'] = !hasBorder, _a['no-header'] = !hasHeader, _a.zebra = isZebra, _a[className] = className, _a));
        if (rtl) {
            others.dir = 'rtl';
        }
        var loadingcls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "table-loading-content")] = true, _b));
        return react_1.default.createElement("div", tslib_1.__assign({ className: cls, style: style, ref: ref || this.getTableEl }, util_1.obj.pickOthers(Object.keys(Table.propTypes), others)), table, loading ? react_1.default.createElement(LoadingComponent, { className: loadingcls }) : null);
    };
    Table.Column = column_1.default;
    Table.ColumnGroup = column_group_1.default;
    Table.Header = header_1.default;
    Table.Body = body_1.default;
    Table.Wrapper = wrapper_1.default;
    Table.Row = row_1.default;
    Table.Cell = cell_1.default;
    Table.Filter = filter_1.default;
    Table.Sort = sort_1.default;
    Table.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), {
        /**
         * 样式类名的品牌前缀
         */
        prefix: prop_types_1.default.string, pure: prop_types_1.default.bool, rtl: prop_types_1.default.bool,
        /**
         * 表格元素的 table-layout 属性，设为 fixed 表示内容不会影响列的布局
         */
        tableLayout: prop_types_1.default.oneOf(['fixed', 'auto']),
        /**
         * 表格的总长度，可以这么用：设置表格总长度 、设置部分列的宽度，这样表格会按照剩余空间大小，自动其他列分配宽度
         */
        tableWidth: prop_types_1.default.number,
        /**
         * 自定义类名
         */
        className: prop_types_1.default.string,
        /**
         * 自定义内联样式
         */
        style: prop_types_1.default.object,
        /**
         * 尺寸 small为紧凑模式
         */
        size: prop_types_1.default.oneOf(['small', 'medium']),
        /**
         * 表格展示的数据源
         */
        dataSource: prop_types_1.default.array, entireDataSource: prop_types_1.default.array,
        /**
         * 点击表格每一行触发的事件
         * @param {Object} record 该行所对应的数据
         * @param {Number} index 该行所对应的序列
         * @param {Event} e DOM事件对象
         */
        onRowClick: prop_types_1.default.func,
        /**
         * 悬浮在表格每一行的时候触发的事件
         * @param {Object} record 该行所对应的数据
         * @param {Number} index 该行所对应的序列
         * @param {Event} e DOM事件对象
         */
        onRowMouseEnter: prop_types_1.default.func,
        /**
         * 离开表格每一行的时候触发的事件
         * @param {Object} record 该行所对应的数据
         * @param {Number} index 该行所对应的序列
         * @param {Event} e DOM事件对象
         */
        onRowMouseLeave: prop_types_1.default.func,
        /**
         * 点击列排序触发的事件
         * @param {String} dataIndex 指定的排序的字段
         * @param {String} order 排序对应的顺序, 有`desc`和`asc`两种
         */
        onSort: prop_types_1.default.func,
        /**
         * 点击过滤确认按钮触发的事件
         * @param {Object} filterParams 过滤的字段信息
         */
        onFilter: prop_types_1.default.func,
        /**
         * 重设列尺寸的时候触发的事件
         * @param {String} dataIndex 指定重设的字段
         * @param {Number} value 列宽变动的数值
         */
        onResizeChange: prop_types_1.default.func,
        /**
         * 设置每一行的属性，如果返回值和其他针对行操作的属性冲突则无效。
         * @param {Object} record 该行所对应的数据
         * @param {Number} index 该行所对应的序列
         * @returns {Object} 需要设置的行属性
         */
        rowProps: prop_types_1.default.func,
        /**
         * 设置单元格的属性，通过该属性可以进行合并单元格
         * @param {Number} rowIndex 该行所对应的序列
         * @param {Number} colIndex 该列所对应的序列
         * @param {String} dataIndex 该列所对应的字段名称
         * @param {Object} record 该行对应的记录
         * @returns {Object} 返回td元素的所支持的属性对象
         */
        cellProps: prop_types_1.default.func,
        /**
         * 虚拟滚动时向前保留渲染的行数
         */
        keepForwardRenderRows: prop_types_1.default.number,
        /**
         * 表格是否具有边框
         */
        hasBorder: prop_types_1.default.bool,
        /**
         * 表格是否具有头部
         */
        hasHeader: prop_types_1.default.bool,
        /**
         * 表格是否是斑马线
         */
        isZebra: prop_types_1.default.bool,
        /**
         * 表格是否在加载中
         */
        loading: prop_types_1.default.bool,
        /**
         * 自定义 Loading 组件
         * 请务必传递 props, 使用方式： loadingComponent={props => <Loading {...props}/>}
         * @param {LoadingProps} props 需要透传给组件的参数
         * @return {React.ReactNode} 展示的组件
         */
        loadingComponent: prop_types_1.default.func,
        /**
         * 当前过滤的的keys,使用此属性可以控制表格的头部的过滤选项中哪个菜单被选中,格式为 {dataIndex: {selectedKeys:[]}}
         * 示例:
         * 假设要控制dataIndex为id的列的过滤菜单中key为one的菜单项选中
         * `<Table filterParams={{id: {selectedKeys: ['one']}}}/>`
         */
        filterParams: prop_types_1.default.object,
        /**
         * 当前排序的字段,使用此属性可以控制表格的字段的排序,格式为{[dataIndex]: 'asc' | 'desc' } , 例如  {id: 'desc'}
         */
        sort: prop_types_1.default.object,
        /**
         * 自定义排序按钮，例如上下排布的: `{desc: <Icon style={{top: '6px', left: '4px'}} type={'arrow-down'} size="small" />, asc: <Icon style={{top: '-6px', left: '4px'}} type={'arrow-up'} size="small" />}`
         */
        sortIcons: prop_types_1.default.object,
        /**
         * 自定义国际化文案对象
         * @property {String} ok 过滤器中确认按钮文案
         * @property {String} reset 过滤器中重置按钮文案
         * @property {String} empty 没有数据情况下 table内的文案
         * @property {String} asc 排序升序状态下的文案
         * @property {String} desc 排序将序状态下的文案
         * @property {String} expanded 可折叠行，展开状态下的文案
         * @property {String} folded 可折叠行，折叠状态下的文案
         * @property {String} filter 过滤器文案
         * @property {String} selectAll header里全选的按钮文案
         */
        locale: prop_types_1.default.object, components: prop_types_1.default.object,
        /**
         * 等同于写子组件 Table.Column ，子组件优先级更高
         */
        columns: prop_types_1.default.array,
        /**
         * 设置数据为空的时候的表格内容展现
         */
        emptyContent: prop_types_1.default.node,
        /**
         * dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中
         */
        primaryKey: prop_types_1.default.oneOfType([prop_types_1.default.symbol, prop_types_1.default.string]), lockType: prop_types_1.default.oneOf(['left', 'right']), wrapperContent: prop_types_1.default.any, refs: prop_types_1.default.object,
        /**
         * 额外渲染行的渲染函数
         * @param {Object} record 该行所对应的数据
         * @param {Number} index 该行所对应的序列
         * @returns {Element} 渲染内容
         */
        expandedRowRender: prop_types_1.default.func,
        /**
         * 设置行是否可展开，设置 false 为不可展开
         * @param {Object} record 该行所对应的数据
         * @param {Number} index 该行所对应的序列
         * @returns {Boolean} 是否可展开
         */
        rowExpandable: prop_types_1.default.func,
        /**
         * 额外渲染行的缩进, 是个二维数组(eg:[1,1]) 分别表示左右两边的缩进
         */
        expandedRowIndent: prop_types_1.default.array,
        /**
         * 是否显示点击展开额外渲染行的+号按钮
         */
        hasExpandedRowCtrl: prop_types_1.default.bool,
        /**
         * 设置额外渲染行的属性
         * @param {Object} record 该行所对应的数据
         * @param {Number} index 该行所对应的序列
         * @returns {Object} 额外渲染行的属性
         */
        getExpandedColProps: prop_types_1.default.func,
        /**
         * 当前展开的 Expand行 或者 Tree行 , 传入此属性为受控状态，一般配合 onRowOpen 使用
         */
        openRowKeys: prop_types_1.default.array,
        /**
         * 默认情况下展开的 Expand行 或者 Tree行，非受控模式
         * @version 1.23.22
         */
        defaultOpenRowKeys: prop_types_1.default.array,
        /**
         * 在 Expand行 或者 Tree行 展开或者收起的时候触发的事件
         * @param {Array} openRowKeys 展开的渲染行的key
         * @param {String} currentRowKey 当前点击的渲染行的key
         * @param {Boolean} expanded 当前点击是展开还是收起
         * @param {Object} currentRecord 当前点击额外渲染行的记录
         */
        onRowOpen: prop_types_1.default.func, onExpandedRowClick: prop_types_1.default.func,
        /**
         * 表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条
         */
        fixedHeader: prop_types_1.default.bool,
        /**
         * 最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条
         */
        maxBodyHeight: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        /**
         * 是否启用选择模式
         * @property {Function} getProps `Function(record, index)=>Object` 获取selection的默认属性
         * @property {Function} onChange `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。
         * @property {Function} onSelect `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调
         * @property {Function} onSelectAll `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调
         * @property {Array} selectedRowKeys 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值
         * @property {String} mode 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple`
         * @property {Function} columnProps `Function()=>Object` 选择列 的props，例如锁列、对齐等，可使用`Table.Column` 的所有参数
         * @property {Function} titleProps `Function()=>Object` 选择列 表头的props，仅在 `multiple` 模式下生效
         * @property {Function} titleAddons `Function()=>Node` 选择列 表头添加的元素，在`single` `multiple` 下都生效
         */
        rowSelection: prop_types_1.default.object,
        /**
         * 表头是否是sticky
         */
        stickyHeader: prop_types_1.default.bool,
        /**
         * 距离窗口顶部达到指定偏移量后触发
         */
        offsetTop: prop_types_1.default.number,
        /**
         * affix组件的的属性
         */
        affixProps: prop_types_1.default.object,
        /**
         * 在tree模式下的缩进尺寸， 仅在isTree为true时候有效
         */
        indent: prop_types_1.default.number,
        /**
         * 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table
         */
        isTree: prop_types_1.default.bool,
        /**
         * 是否开启虚拟滚动
         */
        useVirtual: prop_types_1.default.bool, rowHeight: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.func]),
        /**
         * 滚动到第几行，需要保证行高相同。1.22.15 版本之前仅在虚拟滚动场景下生效，之后在所有情况下生效
         * @version 1.22.15
         */
        scrollToRow: prop_types_1.default.number,
        /**
         * 在内容区域滚动的时候触发的函数
         */
        onBodyScroll: prop_types_1.default.func,
        /**
         * 开启时，getExpandedColProps() / rowProps() / expandedRowRender() 的第二个参数 index (该行所对应的序列) 将按照01,2,3,4...的顺序返回，否则返回真实index(0,2,4,6... / 1,3,5,7...)
         */
        expandedIndexSimulate: prop_types_1.default.bool,
        /**
         * 在 hover 时出现十字参考轴，适用于表头比较复杂，需要做表头分类的场景。
         */
        crossline: prop_types_1.default.bool, lengths: prop_types_1.default.object });
    Table.defaultProps = {
        dataSource: [],
        onRowClick: noop,
        onRowMouseEnter: noop,
        onRowMouseLeave: noop,
        onSort: noop,
        onFilter: noop,
        onResizeChange: noop,
        size: 'medium',
        rowProps: noop,
        cellProps: noop,
        prefix: 'next-',
        hasBorder: true,
        keepForwardRenderRows: 10,
        hasHeader: true,
        isZebra: false,
        loading: false,
        expandedIndexSimulate: false,
        primaryKey: 'id',
        components: {},
        locale: zh_cn_1.default.Table,
        crossline: false
    };
    Table.childContextTypes = {
        notRenderCellIndex: prop_types_1.default.array,
        lockType: prop_types_1.default.oneOf(['left', 'right'])
    };
    Table.contextTypes = {
        getTableInstance: prop_types_1.default.func,
        getTableInstanceForFixed: prop_types_1.default.func,
        getTableInstanceForVirtual: prop_types_1.default.func,
        getTableInstanceForExpand: prop_types_1.default.func
    };
    return Table;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Table);

/***/ }),
/* 420 */
/***/ (function(module, exports) {

var hasOwnProperty = Object.prototype.hasOwnProperty;

function transformEntryEqual(a, b) {
  for (var k in a) {
    if (hasOwnProperty.call(a, k)) {
      return a[k] === b[k];
    }
  }
  return false;
}

function transformEqual(a, b) {
  if ((!a && !b) || (a === b)) {
    return true;
  }
  if (!a !== !b) {
    return false;
  }
  if (a.length !== b.length) {
    return false;
  }
  for (var i = 0; i < a.length; i++) {
    if (!transformEntryEqual(a[i], b[i])) {
      return false;
    }
  }
  return true;
}

function shallowObjectEquals(a, b) {
  var k;
  var i = 0;
  var j = 0;
  for (k in a) {
    if (hasOwnProperty.call(a, k)) {
      switch (k) {
        case 'transform':
          if (!transformEqual(a[k], b[k])) {
            return false;
          }
          break;
        case 'shadowOffset':
          if (!shallowObjectEquals(a[k], b[k])) {
            return false;
          }
          break;
        default:
          if (a[k] !== b[k]) {
            return false;
          }
          break;
      }
      i++;
    }
  }
  for (k in b) {
    if (hasOwnProperty.call(b, k)) {
      j++;
    }
  }
  return i === j;
}

function styleEqual(a, b) {
  if ((!a && !b) || (a === b)) {
    return true;
  }
  if (!a !== !b) {
    return false;
  }
  switch (typeof a) {
    case 'object':
      if (a instanceof Array) {
        for (var i = 0; i < a.length; i++) {
          if (!styleEqual(a[i], b[i])) {
            return false;
          }
        }
        return a.length === b.length;
      } else {
        return shallowObjectEquals(a, b);
      }
      break;
    case 'number':
    default:
      return a === b;
  }
}

module.exports = styleEqual;


/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var util_1 = __webpack_require__(4);
var Resize = /** @class */function (_super) {
    tslib_1.__extends(Resize, _super);
    function Resize() {
        var _this = _super.call(this) || this;
        _this.showResizeProxy = function () {
            _this.props.resizeProxyDomRef.style.cssText = "display:block;left:".concat(_this.startLeft, "px;");
        };
        _this.moveResizeProxy = function () {
            var moveLeft = _this.startLeft + _this.changedPageX;
            _this.props.resizeProxyDomRef.style.cssText = "left:".concat(moveLeft, "px;display:block;");
        };
        _this.resetResizeProxy = function () {
            // when the mouse was not moved,don't change cell width
            if (_this.asyncResizeFlag) {
                _this.props.onChange(_this.props.dataIndex, _this.changedPageX);
            }
            _this.changedPageX = 0;
            _this.tRight = 0;
            _this.asyncResizeFlag = false;
            _this.props.resizeProxyDomRef.style.cssText = "display:none;";
        };
        _this.movingLimit = function () {
            // table right limit
            var moveLeft = _this.startLeft + _this.changedPageX;
            if (moveLeft > _this.tRight) {
                moveLeft = _this.tRight;
                _this.changedPageX = _this.tRight - _this.startLeft;
            }
            // cell left limit
            if (moveLeft - _this.cellLeft < _this.cellMinWidth) {
                _this.changedPageX = _this.cellLeft + _this.cellMinWidth - _this.startLeft;
            }
            // table left limit
            if (moveLeft < 0) {
                _this.changedPageX = 0 - _this.startLeft;
            }
            if (_this.props.col.width + _this.changedPageX < _this.cellMinWidth) {
                _this.changedPageX = _this.cellMinWidth - _this.props.col.width;
            }
        };
        _this.onMouseDown = function (e) {
            var _a = _this.props.tableEl.getBoundingClientRect(),
                tableLeft = _a.left,
                tableWidth = _a.width;
            if (!_this.props.cellDomRef || !_this.props.cellDomRef.current) {
                return;
            }
            var cellDomLeft = _this.props.cellDomRef.current.getBoundingClientRect().left;
            _this.lastPageX = e.pageX;
            _this.tLeft = tableLeft;
            _this.tRight = tableWidth;
            _this.startLeft = e.pageX - tableLeft;
            _this.cellLeft = cellDomLeft - tableLeft;
            if (_this.props.asyncResizable) _this.showResizeProxy();
            util_1.events.on(document, 'mousemove', _this.onMouseMove);
            util_1.events.on(document, 'mouseup', _this.onMouseUp);
            _this.unSelect();
        };
        _this.onMouseMove = function (e) {
            var pageX = e.pageX;
            _this.changedPageX = pageX - _this.lastPageX;
            if (_this.props.rtl) {
                _this.changedPageX = -_this.changedPageX;
            }
            if (_this.props.hasLock) {
                if (!_this.props.asyncResizable) {
                    // when hasn't lock attribute, cellLeft will change
                    _this.cellLeft = _this.props.cellDomRef.current.getBoundingClientRect().left - _this.tLeft;
                }
            }
            _this.movingLimit();
            // stop at here when async
            if (_this.props.asyncResizable) {
                // asyncResizeFlag use to prevent just click without mouse move
                _this.asyncResizeFlag = true;
                _this.moveResizeProxy();
                return;
            }
            _this.props.onChange(_this.props.dataIndex, _this.changedPageX);
            _this.lastPageX = pageX;
        };
        _this.onMouseUp = function () {
            if (_this.props.asyncResizable) {
                _this.resetResizeProxy();
            }
            _this.startLeft = 0;
            _this.destory();
        };
        _this.cellMinWidth = 40;
        _this.lastPageX = 0;
        _this.tRight = 0;
        _this.tLeft = 0;
        _this.cellLeft = 0;
        _this.startLeft = 0;
        _this.changedPageX = 0;
        _this.asyncResizeFlag = false;
        return _this;
    }
    Resize.prototype.componentWillUnmount = function () {
        this.destory();
    };
    Resize.prototype.destory = function () {
        util_1.events.off(document, 'mousemove', this.onMouseMove);
        util_1.events.off(document, 'mouseup', this.onMouseUp);
        this.select();
    };
    Resize.prototype.unSelect = function () {
        util_1.dom.setStyle(document.body, {
            userSelect: 'none',
            cursor: 'ew-resize'
        });
        document.body.setAttribute('unselectable', 'on');
    };
    Resize.prototype.select = function () {
        util_1.dom.setStyle(document.body, {
            userSelect: '',
            cursor: ''
        });
        document.body.removeAttribute('unselectable');
    };
    Resize.prototype.render = function () {
        var prefix = this.props.prefix;
        return react_1.default.createElement("a", { className: "".concat(prefix, "table-resize-handler"), onMouseDown: this.onMouseDown });
    };
    Resize.propTypes = {
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        onChange: prop_types_1.default.func,
        dataIndex: prop_types_1.default.string,
        tableEl: prop_types_1.default.any,
        resizeProxyDomRef: prop_types_1.default.any,
        cellDomRef: prop_types_1.default.any,
        col: prop_types_1.default.any,
        hasLock: prop_types_1.default.bool,
        asyncResizable: prop_types_1.default.bool
    };
    Resize.defaultProps = {
        onChange: function onChange() {}
    };
    return Resize;
}(react_1.default.Component);
exports.default = Resize;

/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
/* eslint-disable react/prefer-stateless-function */
var Wrapper = /** @class */function (_super) {
    tslib_1.__extends(Wrapper, _super);
    function Wrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Wrapper.prototype.render = function () {
        var _a = this.props,
            colGroup = _a.colGroup,
            children = _a.children,
            tableWidth = _a.tableWidth,
            Tag = _a.component;
        return react_1.default.createElement(Tag, { role: "table", style: { width: tableWidth } }, colGroup, children);
    };
    Wrapper.propTypes = {
        tableWidth: prop_types_1.default.number
    };
    return Wrapper;
}(react_1.Component);
exports.default = Wrapper;
Wrapper.defaultProps = {
    component: 'table'
};
Wrapper.propTypes = {
    children: prop_types_1.default.any,
    prefix: prop_types_1.default.string,
    colGroup: prop_types_1.default.any,
    component: prop_types_1.default.string
};

/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
/**
 * Table.ColumnGroup
 * @order 1
 **/
var ColumnGroup = /** @class */function (_super) {
    tslib_1.__extends(ColumnGroup, _super);
    function ColumnGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnGroup.prototype.getChildContext = function () {
        return {
            parent: this
        };
    };
    ColumnGroup.prototype.render = function () {
        return null;
    };
    ColumnGroup.propTypes = {
        /**
         * 表头显示的内容
         */
        title: prop_types_1.default.oneOfType([prop_types_1.default.element, prop_types_1.default.node, prop_types_1.default.func])
    };
    ColumnGroup.childContextTypes = {
        parent: prop_types_1.default.any
    };
    ColumnGroup.defaultProps = {
        title: 'column-group'
    };
    ColumnGroup._typeMark = 'columnGroup';
    return ColumnGroup;
}(react_1.default.Component);
exports.default = ColumnGroup;

/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var row_1 = __webpack_require__(425);
var cell_1 = __webpack_require__(426);
var util_1 = __webpack_require__(18);
var noop = function noop() {};
function tree(BaseComponent) {
    var TreeTable = /** @class */function (_super) {
        tslib_1.__extends(TreeTable, _super);
        function TreeTable(props, context) {
            var _this = _super.call(this, props, context) || this;
            _this.onTreeNodeClick = function (record) {
                var primaryKey = _this.props.primaryKey,
                    id = record[primaryKey],
                    dataSource = _this.ds,
                    openRowKeys = tslib_1.__spreadArray([], tslib_1.__read(_this.state.openRowKeys), false),
                    index = openRowKeys.indexOf(id),
                    getChildrenKeyById = function getChildrenKeyById(id) {
                    var ret = [id];
                    var loop = function loop(data) {
                        data.forEach(function (item) {
                            ret.push(item[primaryKey]);
                            if (item.children) {
                                loop(item.children);
                            }
                        });
                    };
                    dataSource.forEach(function (item) {
                        if (item[primaryKey] === id) {
                            if (item.children) {
                                loop(item.children);
                            }
                        }
                    });
                    return ret;
                };
                if (index > -1) {
                    // 不仅要删除当前的openRowKey，还需要删除关联子节点的openRowKey
                    var ids = getChildrenKeyById(id);
                    ids.forEach(function (id) {
                        var i = openRowKeys.indexOf(id);
                        if (i > -1) {
                            openRowKeys.splice(i, 1);
                        }
                    });
                } else {
                    openRowKeys.push(id);
                }
                if (!('openRowKeys' in _this.props)) {
                    _this.setState({
                        openRowKeys: openRowKeys
                    });
                }
                _this.props.onRowOpen(openRowKeys, id, index === -1, record);
            };
            _this.state = {
                openRowKeys: props.openRowKeys || props.defaultOpenRowKeys || []
            };
            return _this;
        }
        TreeTable.prototype.getChildContext = function () {
            return {
                openTreeRowKeys: this.state.openRowKeys,
                indent: this.props.indent,
                treeStatus: this.getTreeNodeStatus(this.ds),
                onTreeNodeClick: this.onTreeNodeClick,
                isTree: this.props.isTree
            };
        };
        TreeTable.getDerivedStateFromProps = function (nextProps) {
            if ('openRowKeys' in nextProps) {
                return {
                    openRowKeys: nextProps.openRowKeys || []
                };
            }
            return null;
        };
        TreeTable.prototype.normalizeDataSource = function (dataSource) {
            var openRowKeys = this.state.openRowKeys;
            var primaryKey = this.props.primaryKey;
            var ret = [],
                loop = function loop(dataSource, level, parentId) {
                if (parentId === void 0) {
                    parentId = null;
                }
                dataSource.forEach(function (item) {
                    item.__level = level;
                    if (level === 0 || openRowKeys.indexOf(parentId) > -1) {
                        item.__hidden = false;
                    } else {
                        item.__hidden = true;
                    }
                    ret.push(item);
                    if (item.children) {
                        loop(item.children, level + 1, item[primaryKey]);
                    }
                });
            };
            loop(dataSource, 0);
            this.ds = ret;
            return ret;
        };
        TreeTable.prototype.getTreeNodeStatus = function (dataSource) {
            if (dataSource === void 0) {
                dataSource = [];
            }
            var openRowKeys = this.state.openRowKeys,
                primaryKey = this.props.primaryKey,
                ret = [];
            openRowKeys.forEach(function (openKey) {
                dataSource.forEach(function (item) {
                    if (item[primaryKey] === openKey) {
                        if (item.children) {
                            item.children.forEach(function (child) {
                                ret.push(child[primaryKey]);
                            });
                        }
                    }
                });
            });
            return ret;
        };
        TreeTable.prototype.render = function () {
            /* eslint-disable no-unused-vars, prefer-const */
            var _a = this.props,
                components = _a.components,
                isTree = _a.isTree,
                dataSource = _a.dataSource,
                indent = _a.indent,
                others = tslib_1.__rest(_a, ["components", "isTree", "dataSource", "indent"]);
            if (isTree) {
                components = tslib_1.__assign({}, components);
                if (!components.Row) {
                    components.Row = row_1.default;
                }
                if (!components.Cell) {
                    components.Cell = cell_1.default;
                }
                dataSource = this.normalizeDataSource(dataSource);
            }
            return react_1.default.createElement(BaseComponent, tslib_1.__assign({}, others, { dataSource: dataSource, components: components }));
        };
        TreeTable.TreeRow = row_1.default;
        TreeTable.TreeCell = cell_1.default;
        TreeTable.propTypes = tslib_1.__assign({
            /**
             * 默认情况下展开的树形表格，传入了此属性代表tree的展开为受控操作
             */
            openRowKeys: prop_types_1.default.array,
            /**
             * 默认情况下展开的 Expand行 或者 Tree行，非受控模式
             * @version 1.23.22
             */
            defaultOpenRowKeys: prop_types_1.default.array,
            /**
             * 点击tree展开或者关闭的时候触发的事件
             * @param {Array} openRowKeys tree模式下展开的key
             * @param {String} currentRowKey 当前点击行的key
             * @param {Boolean} opened 当前点击是展开还是收起
             * @param {Object} currentRecord 当前点击行的记录
             */
            onRowOpen: prop_types_1.default.func,
            /**
             * dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中
             */
            primaryKey: prop_types_1.default.oneOfType([prop_types_1.default.symbol, prop_types_1.default.string]),
            /**
             * 在tree模式下的缩进尺寸， 仅在isTree为true时候有效
             */
            indent: prop_types_1.default.number,
            /**
             * 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table
             */
            isTree: prop_types_1.default.bool, locale: prop_types_1.default.object }, BaseComponent.propTypes);
        TreeTable.defaultProps = tslib_1.__assign(tslib_1.__assign({}, BaseComponent.defaultProps), { primaryKey: 'id', onRowOpen: noop, components: {}, indent: 12 });
        TreeTable.childContextTypes = {
            openTreeRowKeys: prop_types_1.default.array,
            indent: prop_types_1.default.number,
            treeStatus: prop_types_1.default.array,
            onTreeNodeClick: prop_types_1.default.func,
            isTree: prop_types_1.default.bool
        };
        return TreeTable;
    }(react_1.default.Component);
    (0, util_1.statics)(TreeTable, BaseComponent);
    return (0, react_lifecycles_compat_1.polyfill)(TreeTable);
}
exports.default = tree;

/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var row_1 = __webpack_require__(184);
/* eslint-disable react/prefer-stateless-function */
var TreeRow = /** @class */function (_super) {
    tslib_1.__extends(TreeRow, _super);
    function TreeRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TreeRow.prototype.render = function () {
        var _a;
        /* eslint-disable no-unused-vars*/
        var _b = this.props,
            className = _b.className,
            record = _b.record,
            primaryKey = _b.primaryKey,
            prefix = _b.prefix,
            others = tslib_1.__rest(_b, ["className", "record", "primaryKey", "prefix"]);
        var _c = this.context,
            treeStatus = _c.treeStatus,
            openRowKeys = _c.openRowKeys;
        var cls = (0, classnames_1.default)((_a = {
            hidden: !(treeStatus.indexOf(record[primaryKey]) > -1) && record.__level !== 0
        }, _a["".concat(prefix, "table-row-level-").concat(record.__level)] = true, _a.opened = openRowKeys.indexOf(record[primaryKey]) > -1, _a[className] = className, _a));
        return react_1.default.createElement(row_1.default, tslib_1.__assign({}, others, { record: record, className: cls, primaryKey: primaryKey, prefix: prefix }));
    };
    TreeRow.propTypes = tslib_1.__assign({}, row_1.default.propTypes);
    TreeRow.defaultProps = tslib_1.__assign({}, row_1.default.defaultProps);
    TreeRow.contextTypes = {
        treeStatus: prop_types_1.default.array,
        openRowKeys: prop_types_1.default.array
    };
    return TreeRow;
}(react_1.default.Component);
exports.default = TreeRow;

/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
var cell_1 = __webpack_require__(63);
var TreeCell = /** @class */function (_super) {
    tslib_1.__extends(TreeCell, _super);
    function TreeCell() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.onTreeNodeClick = function (record, e) {
            e.stopPropagation();
            _this.context.onTreeNodeClick(record);
        };
        _this.expandedKeydown = function (record, e) {
            e.preventDefault();
            e.stopPropagation();
            if (e.keyCode === util_1.KEYCODE.ENTER) {
                _this.onTreeNodeClick(record, e);
            }
        };
        return _this;
    }
    TreeCell.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props,
            colIndex = _b.colIndex,
            record = _b.record,
            prefix = _b.prefix,
            primaryKey = _b.primaryKey,
            locale = _b.locale,
            rtl = _b.rtl,
            children = _b.children;
        var _c = this.context,
            openRowKeys = _c.openTreeRowKeys,
            indent = _c.indent,
            isTree = _c.isTree,
            rowSelection = _c.rowSelection;
        var treeArrowNodeIndex = rowSelection ? 1 : 0;
        var firstCellStyle, treeArrowNode;
        if (colIndex === treeArrowNodeIndex) {
            var treeArrowType = void 0;
            if (isTree) {
                var paddingType = rtl ? 'paddingRight' : 'paddingLeft';
                firstCellStyle = (_a = {}, _a[paddingType] = indent * (record.__level + 1), _a);
                treeArrowNode = react_1.default.createElement(icon_1.default, { size: "xs", rtl: rtl, className: "".concat(prefix, "table-tree-placeholder"), type: "arrow-right" });
                if (record.children && record.children.length) {
                    var hasExpanded = openRowKeys.indexOf(record[primaryKey]) > -1;
                    treeArrowType = hasExpanded ? 'arrow-down' : 'arrow-right';
                    treeArrowNode = react_1.default.createElement(icon_1.default, { className: "".concat(prefix, "table-tree-arrow"), type: treeArrowType, size: "xs", rtl: rtl, onClick: function onClick(e) {
                            return _this.onTreeNodeClick(record, e);
                        }, onKeyDown: function onKeyDown(e) {
                            return _this.expandedKeydown(record, e);
                        }, role: "button", tabIndex: "0", "aria-expanded": hasExpanded, "aria-label": hasExpanded ? locale.expanded : locale.folded });
                }
            }
        }
        return react_1.default.createElement(cell_1.default, tslib_1.__assign({}, this.props, { innerStyle: firstCellStyle, isIconLeft: !!treeArrowNode }), children, treeArrowNode);
    };
    TreeCell.propTypes = tslib_1.__assign({ indent: prop_types_1.default.number, locale: prop_types_1.default.object }, cell_1.default.propTypes);
    TreeCell.defaultProps = tslib_1.__assign(tslib_1.__assign({}, cell_1.default.defaultProps), { component: 'td', indent: 20 });
    TreeCell.contextTypes = {
        openTreeRowKeys: prop_types_1.default.array,
        indent: prop_types_1.default.number,
        onTreeNodeClick: prop_types_1.default.func,
        isTree: prop_types_1.default.bool,
        rowSelection: prop_types_1.default.object
    };
    return TreeCell;
}(react_1.default.Component);
exports.default = TreeCell;

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_dom_1 = __webpack_require__(8);
var classnames_1 = __webpack_require__(3);
var util_1 = __webpack_require__(4);
var header_1 = __webpack_require__(64);
var body_1 = __webpack_require__(186);
var wrapper_1 = __webpack_require__(65);
var util_2 = __webpack_require__(18);
function fixed(BaseComponent, stickyLock) {
    /** Table */
    var FixedTable = /** @class */function (_super) {
        tslib_1.__extends(FixedTable, _super);
        function FixedTable() {
            var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
            _this.state = {};
            _this.getNode = function (type, node, lockType) {
                lockType = lockType ? lockType.charAt(0).toUpperCase() + lockType.substr(1) : '';
                _this["".concat(type).concat(lockType, "Node")] = node;
            };
            _this.getTableInstance = function (type, instance) {
                type = '';
                _this["table".concat(type, "Inc")] = instance;
            };
            // for fixed header scroll left
            _this.onFixedScrollSync = function (current) {
                if (current === void 0) {
                    current = { currentTarget: {} };
                }
                var currentTarget = current.currentTarget || {},
                    headerNode = _this.headerNode,
                    bodyNode = _this.bodyNode;
                var scrollLeft = currentTarget.scrollLeft,
                    scrollWidth = currentTarget.scrollWidth,
                    clientWidth = currentTarget.clientWidth;
                var scrollToRightEnd = !(scrollLeft < scrollWidth - clientWidth);
                var _a = _this.props,
                    prefix = _a.prefix,
                    loading = _a.loading;
                if (!loading && scrollToRightEnd !== _this.scrollToRightEnd) {
                    _this.scrollToRightEnd = scrollToRightEnd;
                    var table = _this.getTableNode();
                    var leftFunc = scrollToRightEnd ? 'removeClass' : 'addClass';
                    util_1.dom[leftFunc](table, "".concat(prefix, "table-scrolling-to-right"));
                }
                // 通过定时器避免重复设置表格的左滚动距离
                if (!_this.scrollTarget || _this.scrollTarget === currentTarget) {
                    _this.scrollTarget = currentTarget;
                    window.clearTimeout(_this.timeoutId);
                    _this.timeoutId = window.setTimeout(function () {
                        _this.scrollTarget = null;
                        _this.timeoutId = undefined;
                    }, 100);
                    if (currentTarget === bodyNode) {
                        if (headerNode && scrollLeft !== headerNode.scrollLeft) {
                            headerNode.scrollLeft = scrollLeft;
                        }
                    } else if (currentTarget === headerNode) {
                        if (bodyNode && scrollLeft !== bodyNode.scrollLeft) {
                            bodyNode.scrollLeft = scrollLeft;
                        }
                    }
                }
            };
            return _this;
        }
        FixedTable.prototype.getChildContext = function () {
            return {
                fixedHeader: this.props.fixedHeader,
                maxBodyHeight: this.props.maxBodyHeight,
                getTableInstanceForFixed: this.getTableInstance,
                onFixedScrollSync: this.onFixedScrollSync,
                getNode: this.getNode
            };
        };
        FixedTable.prototype.componentDidMount = function () {
            this.adjustFixedHeaderSize();
            this.scrollToRightEnd = undefined;
            this.onFixedScrollSync({ currentTarget: this.bodyNode, target: this.bodyNode });
        };
        FixedTable.prototype.componentDidUpdate = function () {
            this.adjustFixedHeaderSize();
            this.onFixedScrollSync({ currentTarget: this.bodyNode, target: this.bodyNode });
        };
        FixedTable.prototype.getTableNode = function () {
            var table = this.tableInc;
            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of table when dataSource Changed
                // use try catch for temporary
                return (0, react_dom_1.findDOMNode)(table.tableEl);
            } catch (error) {
                return null;
            }
        };
        FixedTable.prototype.adjustFixedHeaderSize = function () {
            var _a = this.props,
                hasHeader = _a.hasHeader,
                rtl = _a.rtl,
                prefix = _a.prefix;
            var paddingName = rtl ? 'paddingLeft' : 'paddingRight';
            var marginName = rtl ? 'marginLeft' : 'marginRight';
            var body = this.bodyNode;
            var scrollBarSize = +util_1.dom.scrollbar().width || 0;
            if (hasHeader && !this.props.lockType && body) {
                var hasVerScroll = body.scrollHeight > body.clientHeight,
                    hasHozScroll = body.scrollWidth > body.clientWidth;
                var style = {};
                if (!hasVerScroll) {
                    style[paddingName] = 0;
                    style[marginName] = 0;
                }
                if (+scrollBarSize) {
                    style.marginBottom = -scrollBarSize;
                    if (hasHozScroll) {
                        style.paddingBottom = scrollBarSize;
                    } else {
                        style.paddingBottom = scrollBarSize;
                    }
                    if (hasVerScroll) {
                        style[marginName] = scrollBarSize;
                    }
                }
                util_1.dom.setStyle(this.headerNode, style);
            }
            if (hasHeader && !this.props.lockType && this.headerNode) {
                var fixer = this.headerNode.querySelector(".".concat(prefix, "table-header-fixer"));
                var height = util_1.dom.getStyle(this.headerNode, 'height');
                var paddingBottom = util_1.dom.getStyle(this.headerNode, 'paddingBottom');
                util_1.dom.setStyle(fixer, {
                    width: scrollBarSize,
                    height: height - paddingBottom
                });
            }
        };
        FixedTable.prototype.render = function () {
            var _a;
            /* eslint-disable no-unused-vars, prefer-const */
            var _b = this.props,
                components = _b.components,
                className = _b.className,
                prefix = _b.prefix,
                fixedHeader = _b.fixedHeader,
                lockType = _b.lockType,
                dataSource = _b.dataSource,
                maxBodyHeight = _b.maxBodyHeight,
                others = tslib_1.__rest(_b, ["components", "className", "prefix", "fixedHeader", "lockType", "dataSource", "maxBodyHeight"]);
            if (fixedHeader) {
                components = tslib_1.__assign({}, components);
                if (!components.Header) {
                    components.Header = header_1.default;
                }
                if (!components.Body) {
                    components.Body = body_1.default;
                }
                if (!components.Wrapper) {
                    components.Wrapper = wrapper_1.default;
                }
                className = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "table-fixed")] = true, _a["".concat(prefix, "table-wrap-empty")] = !dataSource.length, _a[className] = className, _a));
            }
            return react_1.default.createElement(BaseComponent, tslib_1.__assign({}, others, { dataSource: dataSource, lockType: lockType, components: components, className: className, prefix: prefix }));
        };
        FixedTable.FixedHeader = header_1.default;
        FixedTable.FixedBody = body_1.default;
        FixedTable.FixedWrapper = wrapper_1.default;
        FixedTable.propTypes = tslib_1.__assign({
            /**
             * 是否具有表头
             */
            hasHeader: prop_types_1.default.bool,
            /**
             * 表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条
             */
            fixedHeader: prop_types_1.default.bool,
            /**
             * 最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条
             */
            maxBodyHeight: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]) }, BaseComponent.propTypes);
        FixedTable.defaultProps = tslib_1.__assign(tslib_1.__assign({}, BaseComponent.defaultProps), { hasHeader: true, fixedHeader: false, maxBodyHeight: 200, components: {}, refs: {}, prefix: 'next-' });
        FixedTable.childContextTypes = {
            fixedHeader: prop_types_1.default.bool,
            getNode: prop_types_1.default.func,
            onFixedScrollSync: prop_types_1.default.func,
            getTableInstanceForFixed: prop_types_1.default.func,
            maxBodyHeight: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string])
        };
        return FixedTable;
    }(react_1.default.Component);
    (0, util_2.statics)(FixedTable, BaseComponent);
    return FixedTable;
}
exports.default = fixed;

/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var checkbox_1 = __webpack_require__(44);
var radio_1 = __webpack_require__(45);
var util_1 = __webpack_require__(4);
var zh_cn_1 = __webpack_require__(9);
var row_1 = __webpack_require__(184);
var column_1 = __webpack_require__(101);
var util_2 = __webpack_require__(18);
var makeChain = util_1.func.makeChain;
var unique = function unique(arr, key) {
    if (key === void 0) {
        key = 'this';
    }
    var temp = {},
        ret = [];
    arr.forEach(function (item) {
        var value;
        if (key === 'this') {
            value = item;
        } else {
            value = item[key];
        }
        if (!temp[value]) {
            ret.push(item);
            temp[value] = true;
        }
    });
    return ret;
};
function selection(BaseComponent) {
    /** Table */
    var SelectionTable = /** @class */function (_super) {
        tslib_1.__extends(SelectionTable, _super);
        function SelectionTable(props, context) {
            var _this = _super.call(this, props, context) || this;
            _this.addSelection = function (columns) {
                var _a = _this.props,
                    prefix = _a.prefix,
                    rowSelection = _a.rowSelection,
                    size = _a.size;
                var attrs = rowSelection.columnProps && rowSelection.columnProps() || {};
                if (!columns.find(function (record) {
                    return record.key === 'selection';
                })) {
                    columns.unshift(tslib_1.__assign({ key: 'selection', title: _this.renderSelectionHeader.bind(_this), cell: _this.renderSelectionBody.bind(_this), width: size === 'small' ? 34 : 50, className: "".concat(prefix, "table-selection ").concat(prefix, "table-prerow"), __normalized: true }, attrs));
                }
            };
            _this.renderSelectionHeader = function () {
                var onChange = _this.selectAllRow,
                    attrs = {},
                    _a = _this.props,
                    rowSelection = _a.rowSelection,
                    primaryKey = _a.primaryKey,
                    dataSource = _a.dataSource,
                    entireDataSource = _a.entireDataSource,
                    locale = _a.locale,
                    selectedRowKeys = _this.state.selectedRowKeys,
                    mode = rowSelection.mode ? rowSelection.mode : 'multiple';
                var checked = !!selectedRowKeys.length;
                var indeterminate = false;
                var source = entireDataSource || dataSource;
                _this.flatDataSource(source).filter(function (record, index) {
                    if (!rowSelection.getProps) {
                        return true;
                    } else {
                        return !(rowSelection.getProps(record, index) || {}).disabled;
                    }
                }).map(function (record) {
                    return record[primaryKey];
                }).forEach(function (id) {
                    if (selectedRowKeys.indexOf(id) === -1) {
                        checked = false;
                    } else {
                        indeterminate = true;
                    }
                });
                attrs.onClick = makeChain(function (e) {
                    e.stopPropagation();
                }, attrs.onClick);
                var userAttrs = rowSelection.titleProps && rowSelection.titleProps() || {};
                if (checked) {
                    indeterminate = false;
                }
                return [mode === 'multiple' ? react_1.default.createElement(checkbox_1.default, tslib_1.__assign({ key: "_total", indeterminate: indeterminate, "aria-label": locale.selectAll, checked: checked, onChange: onChange }, attrs, userAttrs)) : null, rowSelection.titleAddons && rowSelection.titleAddons()];
            };
            _this.renderSelectionBody = function (value, index, record) {
                var _a = _this.props,
                    rowSelection = _a.rowSelection,
                    primaryKey = _a.primaryKey;
                var selectedRowKeys = _this.state.selectedRowKeys;
                var mode = rowSelection.mode ? rowSelection.mode : 'multiple';
                var checked = selectedRowKeys.indexOf(record[primaryKey]) > -1;
                var onChange = _this.selectOneRow.bind(_this, index, record);
                var attrs = rowSelection.getProps ? rowSelection.getProps(record, index) || {} : {};
                attrs.onClick = makeChain(function (e) {
                    e.stopPropagation();
                }, attrs.onClick);
                return mode === 'multiple' ? react_1.default.createElement(checkbox_1.default, tslib_1.__assign({ checked: checked, onChange: onChange }, attrs)) : react_1.default.createElement(radio_1.default, tslib_1.__assign({ checked: checked, onChange: onChange }, attrs));
            };
            _this.selectAllRow = function (checked, e) {
                var ret = tslib_1.__spreadArray([], tslib_1.__read(_this.state.selectedRowKeys), false),
                    _a = _this.props,
                    rowSelection = _a.rowSelection,
                    primaryKey = _a.primaryKey,
                    dataSource = _a.dataSource,
                    entireDataSource = _a.entireDataSource,
                    selectedRowKeys = _this.state.selectedRowKeys,
                    getProps = rowSelection.getProps;
                var attrs = {},
                    records = [];
                var source = entireDataSource ? entireDataSource : dataSource;
                _this.flatDataSource(source).forEach(function (record, index) {
                    var id = record[primaryKey];
                    if (getProps) {
                        attrs = getProps(record, index) || {};
                    }
                    // 反选和全选的时候不要丢弃禁用项的选中状态
                    if (checked && (!attrs.disabled || selectedRowKeys.indexOf(id) > -1)) {
                        ret.push(id);
                        records.push(record);
                    } else if (attrs.disabled && selectedRowKeys.indexOf(id) > -1) {
                        ret.push(id);
                        records.push(record);
                    } else {
                        var i = ret.indexOf(id);
                        i > -1 && ret.splice(i, 1);
                    }
                });
                records = unique(records, primaryKey);
                if (typeof rowSelection.onSelectAll === 'function') {
                    rowSelection.onSelectAll(checked, records);
                }
                _this.triggerSelection(rowSelection, unique(ret), records);
                e.stopPropagation();
            };
            _this.state = {
                selectedRowKeys: props.rowSelection && 'selectedRowKeys' in props.rowSelection ? props.rowSelection.selectedRowKeys || [] : []
            };
            return _this;
        }
        SelectionTable.prototype.getChildContext = function () {
            return {
                rowSelection: this.props.rowSelection,
                selectedRowKeys: this.state.selectedRowKeys
            };
        };
        SelectionTable.getDerivedStateFromProps = function (nextProps) {
            if (nextProps.rowSelection && 'selectedRowKeys' in nextProps.rowSelection) {
                var selectedRowKeys = nextProps.rowSelection.selectedRowKeys || [];
                return {
                    selectedRowKeys: selectedRowKeys
                };
            }
            return null;
        };
        SelectionTable.prototype.normalizeChildren = function (children) {
            var _a = this.props,
                prefix = _a.prefix,
                rowSelection = _a.rowSelection,
                size = _a.size;
            if (rowSelection) {
                children = react_1.Children.map(children, function (child, index) {
                    return react_1.default.cloneElement(child, {
                        key: index
                    });
                });
                var attrs = rowSelection.columnProps && rowSelection.columnProps() || {};
                children.unshift(react_1.default.createElement(column_1.default, tslib_1.__assign({ key: "selection", title: this.renderSelectionHeader.bind(this), cell: this.renderSelectionBody.bind(this), width: size === 'small' ? 34 : 50, className: "".concat(prefix, "table-selection ").concat(prefix, "table-prerow"), __normalized: true }, attrs)));
                return children;
            }
            return children;
        };
        SelectionTable.prototype.selectOneRow = function (index, record, checked, e) {
            var selectedRowKeys = tslib_1.__spreadArray([], tslib_1.__read(this.state.selectedRowKeys), false),
                i;
            var _a = this.props,
                primaryKey = _a.primaryKey,
                rowSelection = _a.rowSelection,
                dataSource = _a.dataSource,
                entireDataSource = _a.entireDataSource,
                mode = rowSelection.mode ? rowSelection.mode : 'multiple',
                id = record[primaryKey];
            if (!id) {
                util_1.log.warning("Can't get value from record using given ".concat(primaryKey, " as primaryKey."));
            }
            if (mode === 'multiple') {
                if (checked) {
                    selectedRowKeys.push(id);
                } else {
                    i = selectedRowKeys.indexOf(id);
                    selectedRowKeys.splice(i, 1);
                }
            } else if (checked) {
                selectedRowKeys = [id];
            }
            var totalDS = dataSource;
            if (Array.isArray(entireDataSource) && entireDataSource.length > dataSource.length) {
                totalDS = entireDataSource;
            }
            var records = unique(totalDS.filter(function (item) {
                return selectedRowKeys.indexOf(item[primaryKey]) > -1;
            }), primaryKey);
            if (typeof rowSelection.onSelect === 'function') {
                rowSelection.onSelect(checked, record, records);
            }
            this.triggerSelection(rowSelection, selectedRowKeys, records);
            e.stopPropagation();
        };
        SelectionTable.prototype.triggerSelection = function (rowSelection, selectedRowKeys, records) {
            if (!('selectedRowKeys' in rowSelection)) {
                this.setState({
                    selectedRowKeys: selectedRowKeys
                });
            }
            if (typeof rowSelection.onChange === 'function') {
                rowSelection.onChange(selectedRowKeys, records);
            }
        };
        SelectionTable.prototype.flatDataSource = function (dataSource) {
            var ret = dataSource;
            var listHeader = this.context.listHeader;
            if (listHeader) {
                ret = [];
                var hasChildrenSelection_1 = listHeader.hasChildrenSelection,
                    hasSelection_1 = listHeader.hasSelection;
                dataSource.forEach(function (item) {
                    var children = item.children;
                    // 如果需要渲染selection才将这条记录插入到dataSource
                    // 或者没有孩子节点
                    if (hasSelection_1) {
                        ret.push(item);
                    }
                    if (children && hasChildrenSelection_1) {
                        ret = ret.concat(children);
                    }
                });
            }
            return ret;
        };
        SelectionTable.prototype.render = function () {
            /* eslint-disable prefer-const */
            var _a = this.props,
                rowSelection = _a.rowSelection,
                components = _a.components,
                children = _a.children,
                columns = _a.columns,
                others = tslib_1.__rest(_a, ["rowSelection", "components", "children", "columns"]);
            var useColumns = columns && !children;
            if (rowSelection) {
                if (useColumns) {
                    this.addSelection(columns);
                } else {
                    children = this.normalizeChildren(children || []);
                }
                components = tslib_1.__assign({}, components);
                components.Row = components.Row || row_1.default;
            }
            return react_1.default.createElement(BaseComponent, tslib_1.__assign({}, others, { columns: columns, components: components, children: children }));
        };
        SelectionTable.SelectionRow = row_1.default;
        SelectionTable.propTypes = tslib_1.__assign({
            /**
             * 是否启用选择模式
             * @property {Function} getProps `Function(record, index)=>Object` 获取selection的默认属性
             * @property {Function} onChange `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。
             * @property {Function} onSelect `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调
             * @property {Function} onSelectAll `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调
             * @property {Array} selectedRowKeys 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值
             * @property {String} mode 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple`
             * @property {Function} columnProps `Function()=>Object` 选择列 的props，例如锁列、对齐等，可使用`Table.Column` 的所有参数
             * @property {Function} titleProps `Function()=>Object` 选择列 表头的props，仅在 `multiple` 模式下生效
             */
            rowSelection: prop_types_1.default.object, primaryKey: prop_types_1.default.oneOfType([prop_types_1.default.symbol, prop_types_1.default.string]), dataSource: prop_types_1.default.array, entireDataSource: prop_types_1.default.array }, BaseComponent.propTypes);
        SelectionTable.defaultProps = tslib_1.__assign(tslib_1.__assign({}, BaseComponent.defaultProps), { locale: zh_cn_1.default.Table, primaryKey: 'id', prefix: 'next-' });
        SelectionTable.contextTypes = {
            listHeader: prop_types_1.default.any
        };
        SelectionTable.childContextTypes = {
            rowSelection: prop_types_1.default.object,
            selectedRowKeys: prop_types_1.default.array
        };
        return SelectionTable;
    }(react_1.default.Component);
    (0, util_2.statics)(SelectionTable, BaseComponent);
    return (0, react_lifecycles_compat_1.polyfill)(SelectionTable);
}
exports.default = selection;

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
var row_1 = __webpack_require__(185);
var column_1 = __webpack_require__(101);
var util_2 = __webpack_require__(18);
var noop = function noop() {};
function expanded(BaseComponent, stickyLock) {
    /** Table */
    var ExpandedTable = /** @class */function (_super) {
        tslib_1.__extends(ExpandedTable, _super);
        function ExpandedTable() {
            var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
            _this.state = {
                openRowKeys: _this.props.openRowKeys || _this.props.defaultOpenRowKeys || []
            };
            _this.saveExpandedRowRef = function (key, rowRef) {
                if (!_this.expandedRowRefs) {
                    _this.expandedRowRefs = {};
                }
                _this.expandedRowRefs[key] = rowRef;
            };
            _this.setExpandedWidth = function () {
                var prefix = _this.props.prefix;
                var tableEl = _this.getTableNode();
                var totalWidth = +(tableEl && tableEl.clientWidth) - 1 || '100%';
                var bodyNode = tableEl && tableEl.querySelector(".".concat(prefix, "table-body"));
                Object.keys(_this.expandedRowRefs || {}).forEach(function (key) {
                    util_1.dom.setStyle(_this.expandedRowRefs[key], { width: bodyNode && bodyNode.clientWidth || totalWidth });
                });
            };
            _this.getTableInstance = function (instance) {
                _this.tableInc = instance;
            };
            _this.expandedKeydown = function (value, record, index, e) {
                e.preventDefault();
                e.stopPropagation();
                if (e.keyCode === util_1.KEYCODE.ENTER) {
                    _this.onExpandedClick(value, record, index, e);
                }
            };
            _this.renderExpandedCell = function (value, index, record) {
                var _a;
                var _b = _this.props,
                    getExpandedColProps = _b.getExpandedColProps,
                    prefix = _b.prefix,
                    locale = _b.locale,
                    rowExpandable = _b.rowExpandable;
                if (typeof rowExpandable === 'function' && !rowExpandable(record, index)) {
                    return '';
                }
                var openRowKeys = _this.state.openRowKeys,
                    primaryKey = _this.props.primaryKey,
                    hasExpanded = openRowKeys.indexOf(record[primaryKey]) > -1,
                    switchNode = hasExpanded ? react_1.default.createElement(icon_1.default, { type: "minus", size: "xs", className: "".concat(prefix, "table-expand-unfold") }) : react_1.default.createElement(icon_1.default, { type: "add", size: "xs", className: "".concat(prefix, "table-expand-fold") }),
                    attrs = getExpandedColProps(record, index) || {};
                var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "table-expanded-ctrl")] = true, _a.disabled = attrs.disabled, _a[attrs.className] = attrs.className, _a));
                if (!attrs.disabled) {
                    attrs.onClick = _this.onExpandedClick.bind(_this, value, record, index);
                }
                return react_1.default.createElement("span", tslib_1.__assign({}, attrs, { role: "button", tabIndex: "0", onKeyDown: _this.expandedKeydown.bind(_this, value, record, index), "aria-label": hasExpanded ? locale.expanded : locale.folded, "aria-expanded": hasExpanded, className: cls }), switchNode);
            };
            _this.addExpandCtrl = function (columns) {
                var _a = _this.props,
                    prefix = _a.prefix,
                    size = _a.size;
                if (!columns.find(function (record) {
                    return record.key === 'expanded';
                })) {
                    columns.unshift({
                        key: 'expanded',
                        title: '',
                        cell: _this.renderExpandedCell.bind(_this),
                        width: size === 'small' ? 34 : 50,
                        className: "".concat(prefix, "table-expanded ").concat(prefix, "table-prerow"),
                        __normalized: true
                    });
                }
            };
            return _this;
        }
        ExpandedTable.prototype.getChildContext = function () {
            return {
                openRowKeys: this.state.openRowKeys,
                expandedRowRender: this.props.expandedRowRender,
                expandedIndexSimulate: this.props.expandedIndexSimulate,
                expandedRowWidthEquals2Table: stickyLock,
                getExpandedRowRef: this.saveExpandedRowRef,
                getTableInstanceForExpand: this.getTableInstance,
                expandedRowIndent: stickyLock ? [0, 0] : this.props.expandedRowIndent
            };
        };
        ExpandedTable.getDerivedStateFromProps = function (nextProps) {
            if ('openRowKeys' in nextProps) {
                return {
                    openRowKeys: nextProps.openRowKeys || []
                };
            }
            return null;
        };
        ExpandedTable.prototype.componentDidMount = function () {
            this.setExpandedWidth();
            util_1.events.on(window, 'resize', this.setExpandedWidth);
        };
        ExpandedTable.prototype.componentDidUpdate = function () {
            this.setExpandedWidth();
        };
        ExpandedTable.prototype.componentWillUnmount = function () {
            util_1.events.off(window, 'resize', this.setExpandedWidth);
        };
        ExpandedTable.prototype.getTableNode = function () {
            var table = this.tableInc;
            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of table when dataSource Changed
                // use try catch for temporary
                return (0, react_dom_1.findDOMNode)(table.tableEl);
            } catch (error) {
                return null;
            }
        };
        ExpandedTable.prototype.onExpandedClick = function (value, record, i, e) {
            var openRowKeys = tslib_1.__spreadArray([], tslib_1.__read(this.state.openRowKeys), false),
                primaryKey = this.props.primaryKey,
                id = record[primaryKey],
                index = openRowKeys.indexOf(id);
            if (index > -1) {
                openRowKeys.splice(index, 1);
            } else {
                openRowKeys.push(id);
            }
            if (!('openRowKeys' in this.props)) {
                this.setState({
                    openRowKeys: openRowKeys
                });
            }
            this.props.onRowOpen(openRowKeys, id, index === -1, record);
            e.stopPropagation();
        };
        ExpandedTable.prototype.normalizeChildren = function (children) {
            var _a = this.props,
                prefix = _a.prefix,
                size = _a.size;
            var toArrayChildren = react_1.Children.map(children, function (child, index) {
                return react_1.default.cloneElement(child, {
                    key: index
                });
            });
            toArrayChildren.unshift(react_1.default.createElement(column_1.default, { title: "", key: "expanded", cell: this.renderExpandedCell.bind(this), width: size === 'small' ? 34 : 50, className: "".concat(prefix, "table-expanded ").concat(prefix, "table-prerow"), __normalized: true }));
            return toArrayChildren;
        };
        ExpandedTable.prototype.normalizeDataSource = function (ds) {
            var ret = [];
            ds.forEach(function (item) {
                var itemCopy = tslib_1.__assign({}, item);
                itemCopy.__expanded = true;
                ret.push(item, itemCopy);
            });
            return ret;
        };
        ExpandedTable.prototype.render = function () {
            /* eslint-disable no-unused-vars, prefer-const */
            var _a = this.props,
                components = _a.components,
                openRowKeys = _a.openRowKeys,
                expandedRowRender = _a.expandedRowRender,
                rowExpandable = _a.rowExpandable,
                hasExpandedRowCtrl = _a.hasExpandedRowCtrl,
                children = _a.children,
                columns = _a.columns,
                dataSource = _a.dataSource,
                entireDataSource = _a.entireDataSource,
                getExpandedColProps = _a.getExpandedColProps,
                expandedRowIndent = _a.expandedRowIndent,
                onRowOpen = _a.onRowOpen,
                onExpandedRowClick = _a.onExpandedRowClick,
                others = tslib_1.__rest(_a, ["components", "openRowKeys", "expandedRowRender", "rowExpandable", "hasExpandedRowCtrl", "children", "columns", "dataSource", "entireDataSource", "getExpandedColProps", "expandedRowIndent", "onRowOpen", "onExpandedRowClick"]);
            if (expandedRowRender && !components.Row) {
                components = tslib_1.__assign({}, components);
                components.Row = row_1.default;
                dataSource = this.normalizeDataSource(dataSource);
                entireDataSource = this.normalizeDataSource(entireDataSource);
            }
            if (expandedRowRender && hasExpandedRowCtrl) {
                var useColumns = columns && !children;
                if (useColumns) {
                    this.addExpandCtrl(columns);
                } else {
                    children = this.normalizeChildren(children || []);
                }
            }
            return react_1.default.createElement(BaseComponent, tslib_1.__assign({}, others, { columns: columns, dataSource: dataSource, entireDataSource: entireDataSource, components: components }), children);
        };
        ExpandedTable.ExpandedRow = row_1.default;
        ExpandedTable.propTypes = tslib_1.__assign({
            /**
             * 额外渲染行的渲染函数
             * @param {Object} record 该行所对应的数据
             * @param {Number} index 该行所对应的序列
             * @returns {Element}
             */
            expandedRowRender: prop_types_1.default.func,
            /**
             * 设置行是否可展开，设置 false 为不可展开
             * @param {Object} record 该行所对应的数据
             * @param {Number} index 该行所对应的序列
             * @returns {Boolean} 是否可展开
             * @version 1.21
             */
            rowExpandable: prop_types_1.default.func,
            /**
             * 额外渲染行的缩进
             */
            expandedRowIndent: prop_types_1.default.array,
            /**
             * 默认情况下展开的渲染行或者Tree, 传入此属性为受控状态
             */
            openRowKeys: prop_types_1.default.array,
            /**
             * 默认情况下展开的 Expand行 或者 Tree行，非受控模式
             * @version 1.23.22
             */
            defaultOpenRowKeys: prop_types_1.default.array,
            /**
             * 是否显示点击展开额外渲染行的+号按钮
             */
            hasExpandedRowCtrl: prop_types_1.default.bool,
            /**
             * 设置额外渲染行的属性
             */
            getExpandedColProps: prop_types_1.default.func,
            /**
             * 在额外渲染行或者Tree展开或者收起的时候触发的事件
             * @param {Array} openRowKeys 展开的渲染行的key
             * @param {String} currentRowKey 当前点击的渲染行的key
             * @param {Boolean} expanded 当前点击是展开还是收起
             * @param {Object} currentRecord 当前点击额外渲染行的记录
             */
            onRowOpen: prop_types_1.default.func, onExpandedRowClick: prop_types_1.default.func, locale: prop_types_1.default.object }, BaseComponent.propTypes);
        ExpandedTable.defaultProps = tslib_1.__assign(tslib_1.__assign({}, BaseComponent.defaultProps), { getExpandedColProps: noop, onRowOpen: noop, hasExpandedRowCtrl: true, components: {}, expandedRowIndent: stickyLock ? [0, 0] : [1, 0], prefix: 'next-' });
        ExpandedTable.childContextTypes = {
            openRowKeys: prop_types_1.default.array,
            expandedRowRender: prop_types_1.default.func,
            expandedIndexSimulate: prop_types_1.default.bool,
            expandedRowWidthEquals2Table: prop_types_1.default.bool,
            expandedRowIndent: prop_types_1.default.array,
            getExpandedRowRef: prop_types_1.default.func,
            getTableInstanceForExpand: prop_types_1.default.func
        };
        return ExpandedTable;
    }(react_1.default.Component);
    (0, util_2.statics)(ExpandedTable, BaseComponent);
    return (0, react_lifecycles_compat_1.polyfill)(ExpandedTable);
}
exports.default = expanded;

/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var util_1 = __webpack_require__(4);
var body_1 = __webpack_require__(431);
var util_2 = __webpack_require__(18);
var noop = function noop() {};
function virtual(BaseComponent) {
    var VirtualTable = /** @class */function (_super) {
        tslib_1.__extends(VirtualTable, _super);
        function VirtualTable(props, context) {
            var _this = _super.call(this, props, context) || this;
            _this.onScroll = function () {
                // 避免横向滚动带来的性能问题
                var scrollTop = _this.bodyNode.scrollTop;
                if (scrollTop === _this.lastScrollTop) {
                    return;
                }
                var start = _this.computeScrollToRow(scrollTop);
                if (!('scrollToRow' in _this.props)) {
                    _this.setState({
                        scrollToRow: start
                    });
                }
                _this.props.onBodyScroll(start);
                _this.lastScrollTop = scrollTop;
            };
            _this.getBodyNode = function (node, lockType) {
                lockType = lockType ? lockType.charAt(0).toUpperCase() + lockType.substr(1) : '';
                _this["body".concat(lockType, "Node")] = node;
            };
            _this.getTableInstance = function (type, instance) {
                type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';
                _this["table".concat(type, "Inc")] = instance;
            };
            var useVirtual = props.useVirtual,
                dataSource = props.dataSource;
            var hasVirtualData = useVirtual && dataSource && dataSource.length > 0;
            _this.state = {
                rowHeight: _this.props.rowHeight,
                scrollToRow: _this.props.scrollToRow,
                height: _this.props.maxBodyHeight,
                hasVirtualData: hasVirtualData
            };
            return _this;
        }
        VirtualTable.prototype.getChildContext = function () {
            return {
                onVirtualScroll: this.onScroll,
                bodyHeight: this.computeBodyHeight(),
                innerTop: this.computeInnerTop(),
                getBodyNode: this.getBodyNode,
                getTableInstanceForVirtual: this.getTableInstance,
                rowSelection: this.rowSelection
            };
        };
        VirtualTable.getDerivedStateFromProps = function (nextProps, prevState) {
            var state = {};
            if ('maxBodyHeight' in nextProps) {
                if (prevState.height !== nextProps.maxBodyHeight) {
                    state.height = nextProps.maxBodyHeight;
                }
            }
            if ('scrollToRow' in nextProps) {
                state.scrollToRow = nextProps.scrollToRow;
            }
            if (prevState.useVirtual !== nextProps.useVirtual || prevState.dataSource !== nextProps.dataSource) {
                state.hasVirtualData = nextProps.useVirtual && nextProps.dataSource && nextProps.dataSource.length > 0;
            }
            return state;
        };
        VirtualTable.prototype.componentDidMount = function () {
            if (this.state.hasVirtualData && this.bodyNode) {
                this.lastScrollTop = this.bodyNode.scrollTop;
            } else {
                this.lastScrollTop = 0;
            }
            this.adjustScrollTop();
            this.adjustSize();
            this.reComputeSize();
        };
        VirtualTable.prototype.componentDidUpdate = function () {
            this.adjustScrollTop();
            this.adjustSize();
            this.reComputeSize();
        };
        VirtualTable.prototype.reComputeSize = function () {
            var _a = this.state,
                rowHeight = _a.rowHeight,
                hasVirtualData = _a.hasVirtualData;
            if (typeof rowHeight === 'function' && hasVirtualData) {
                var row = this.getRowNode();
                var rowClientHeight = row && row.clientHeight;
                if (rowClientHeight !== this.state.rowHeight) {
                    this.setState({
                        rowHeight: rowClientHeight
                    });
                }
            }
        };
        VirtualTable.prototype.computeBodyHeight = function () {
            var rowHeight = this.state.rowHeight;
            var dataSource = this.props.dataSource;
            if (typeof rowHeight === 'function') {
                return 0;
            }
            var count = 0;
            dataSource.forEach(function (item) {
                if (!item.__hidden) {
                    count += 1;
                }
            });
            return count * rowHeight;
        };
        VirtualTable.prototype.computeInnerTop = function () {
            var keepForwardRenderRows = this.props.keepForwardRenderRows;
            var rowHeight = this.state.rowHeight;
            if (typeof rowHeight === 'function') {
                return 0;
            }
            var start = Math.max(this.start - keepForwardRenderRows, 0);
            return start * rowHeight;
        };
        VirtualTable.prototype.getVisibleRange = function (ExpectStart) {
            var _a = this.state,
                height = _a.height,
                rowHeight = _a.rowHeight;
            var len = this.props.dataSource.length;
            var end,
                visibleCount = 0;
            var start = 0;
            if (typeof rowHeight === 'function') {
                // try get cell height;
                end = 1;
            } else {
                visibleCount = parseInt(util_1.dom.getPixels(height) / rowHeight, 10);
                if ('number' === typeof ExpectStart) {
                    start = ExpectStart < len ? ExpectStart : 0;
                }
                end = Math.min(+start + 1 + visibleCount + 10, len);
            }
            this.end = end;
            this.visibleCount = visibleCount;
            return {
                start: start,
                end: end
            };
        };
        VirtualTable.prototype.adjustScrollTop = function () {
            var _a = this.state,
                rowHeight = _a.rowHeight,
                hasVirtualData = _a.hasVirtualData,
                scrollToRow = _a.scrollToRow;
            var oldScrollToRow = Math.floor(this.lastScrollTop / rowHeight);
            if (hasVirtualData && this.bodyNode) {
                //根据上次lastScrollTop记录的位置计算而来的scrollToRow位置不准 则以最新的scrollToRow为准重新校准位置（可能是由非用户滚动事件导致的props.scrollToRow发生了变化）
                if (oldScrollToRow !== scrollToRow) {
                    this.bodyNode.scrollTop = rowHeight * scrollToRow;
                } else {
                    this.bodyNode.scrollTop = this.lastScrollTop % rowHeight + rowHeight * scrollToRow;
                }
            }
        };
        VirtualTable.prototype.adjustSize = function () {
            if (this.state.hasVirtualData && this.bodyNode) {
                var body = this.bodyNode;
                var virtualScrollNode = body.querySelector('div');
                var clientHeight = body.clientHeight,
                    clientWidth = body.clientWidth;
                var tableInc = this.tableInc;
                var tableNode = (0, react_dom_1.findDOMNode)(tableInc);
                var prefix = this.props.prefix;
                var headerNode = tableNode.querySelector(".".concat(prefix, "table-header table"));
                var headerClientWidth = headerNode && headerNode.clientWidth;
                // todo 2.0 设置宽度这个可以去掉
                if (clientWidth < headerClientWidth) {
                    util_1.dom.setStyle(virtualScrollNode, 'min-width', headerClientWidth);
                    var leftNode = this.bodyLeftNode;
                    var rightNode = this.bodyRightNode;
                    leftNode && util_1.dom.setStyle(leftNode, 'max-height', clientHeight);
                    rightNode && util_1.dom.setStyle(rightNode, 'max-height', clientHeight);
                } else {
                    util_1.dom.setStyle(virtualScrollNode, 'min-width', 'auto');
                }
            }
        };
        VirtualTable.prototype.computeScrollToRow = function (offset) {
            var rowHeight = this.state.rowHeight;
            var start = parseInt(offset / rowHeight);
            this.start = start;
            return start;
        };
        VirtualTable.prototype.getRowNode = function () {
            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of this.tableInc when dataSource Changed
                // use try catch for temporary
                return (0, react_dom_1.findDOMNode)(this.tableInc.getRowRef(0));
            } catch (error) {
                return null;
            }
        };
        VirtualTable.prototype.render = function () {
            /* eslint-disable no-unused-vars, prefer-const */
            var _a = this.props,
                useVirtual = _a.useVirtual,
                components = _a.components,
                dataSource = _a.dataSource,
                fixedHeader = _a.fixedHeader,
                rowHeight = _a.rowHeight,
                scrollToRow = _a.scrollToRow,
                onBodyScroll = _a.onBodyScroll,
                keepForwardRenderRows = _a.keepForwardRenderRows,
                others = tslib_1.__rest(_a, ["useVirtual", "components", "dataSource", "fixedHeader", "rowHeight", "scrollToRow", "onBodyScroll", "keepForwardRenderRows"]);
            var entireDataSource = dataSource;
            var newDataSource = dataSource;
            this.rowSelection = this.props.rowSelection;
            if (this.state.hasVirtualData) {
                newDataSource = [];
                components = tslib_1.__assign({}, components);
                var _b = this.getVisibleRange(this.state.scrollToRow),
                    start_1 = _b.start,
                    end_1 = _b.end;
                var count_1 = -1;
                dataSource.forEach(function (current, index, record) {
                    if (!current.__hidden) {
                        count_1 += 1;
                        if (count_1 >= Math.max(start_1 - keepForwardRenderRows, 0) && count_1 < end_1) {
                            newDataSource.push(current);
                        }
                    }
                    current.__rowIndex = index;
                });
                if (!components.Body) {
                    components.Body = body_1.default;
                }
                fixedHeader = true;
            }
            return react_1.default.createElement(BaseComponent, tslib_1.__assign({}, others, { scrollToRow: scrollToRow, dataSource: newDataSource, entireDataSource: entireDataSource, components: components, fixedHeader: fixedHeader }));
        };
        VirtualTable.VirtualBody = body_1.default;
        VirtualTable.propTypes = tslib_1.__assign({
            /**
             * 是否开启虚拟滚动
             */
            useVirtual: prop_types_1.default.bool,
            /**
             * 设置行高
             */
            rowHeight: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.func]), maxBodyHeight: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]), primaryKey: prop_types_1.default.oneOfType([prop_types_1.default.symbol, prop_types_1.default.string]), dataSource: prop_types_1.default.array,
            /**
             * 在内容区域滚动的时候触发的函数
             */
            onBodyScroll: prop_types_1.default.func, keepForwardRenderRows: prop_types_1.default.number }, BaseComponent.propTypes);
        VirtualTable.defaultProps = tslib_1.__assign(tslib_1.__assign({}, BaseComponent.defaultProps), { primaryKey: 'id', rowHeight: noop, maxBodyHeight: 200, components: {}, prefix: 'next-', onBodyScroll: noop, keepForwardRenderRows: 10 });
        VirtualTable.childContextTypes = {
            onVirtualScroll: prop_types_1.default.func,
            bodyHeight: prop_types_1.default.number,
            innerTop: prop_types_1.default.number,
            getBodyNode: prop_types_1.default.func,
            getTableInstanceForVirtual: prop_types_1.default.func,
            rowSelection: prop_types_1.default.object
        };
        return VirtualTable;
    }(react_1.default.Component);
    (0, util_2.statics)(VirtualTable, BaseComponent);
    return (0, react_lifecycles_compat_1.polyfill)(VirtualTable);
}
exports.default = virtual;

/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var body_1 = __webpack_require__(61);
/* eslint-disable react/prefer-stateless-function */
var VirtualBody = /** @class */function (_super) {
    tslib_1.__extends(VirtualBody, _super);
    function VirtualBody() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.tableRef = function (table) {
            _this.tableNode = table;
        };
        _this.virtualScrollRef = function (virtualScroll) {
            _this.virtualScrollNode = virtualScroll;
        };
        _this.onScroll = function (current) {
            // for fixed
            _this.context.onFixedScrollSync(current);
            // for lock
            _this.context.onLockBodyScroll(current);
            // for virtual
            _this.context.onVirtualScroll();
        };
        return _this;
    }
    VirtualBody.prototype.componentDidMount = function () {
        var bodyNode = (0, react_dom_1.findDOMNode)(this);
        // // for fixed
        this.context.getNode('body', bodyNode);
        // for virtual
        this.context.getBodyNode(bodyNode, this.context.lockType);
        // for lock
        this.context.getLockNode('body', bodyNode, this.context.lockType);
    };
    VirtualBody.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            className = _a.className,
            colGroup = _a.colGroup,
            tableWidth = _a.tableWidth,
            others = tslib_1.__rest(_a, ["prefix", "className", "colGroup", "tableWidth"]);
        var _b = this.context,
            maxBodyHeight = _b.maxBodyHeight,
            bodyHeight = _b.bodyHeight,
            innerTop = _b.innerTop;
        var style = {
            width: tableWidth
        };
        var wrapperStyle = {
            position: 'relative'
        };
        // todo 2.0 ，这里最好自己画滚动条
        if (bodyHeight > maxBodyHeight) {
            wrapperStyle.height = bodyHeight;
        }
        return react_1.default.createElement("div", { style: { maxHeight: maxBodyHeight }, className: className, onScroll: this.onScroll }, react_1.default.createElement("div", { style: wrapperStyle, ref: this.virtualScrollRef }, react_1.default.createElement("div", { style: {
                position: 'relative',
                transform: "translateY(".concat(innerTop, "px)"),
                willChange: 'transform'
            } }, react_1.default.createElement("table", { ref: this.tableRef, style: style }, colGroup, react_1.default.createElement(body_1.default, tslib_1.__assign({}, others, { prefix: prefix }))))));
    };
    VirtualBody.propTypes = {
        children: prop_types_1.default.any,
        prefix: prop_types_1.default.string,
        className: prop_types_1.default.string,
        colGroup: prop_types_1.default.any,
        tableWidth: prop_types_1.default.number
    };
    VirtualBody.contextTypes = {
        maxBodyHeight: prop_types_1.default.oneOfType([prop_types_1.default.number, prop_types_1.default.string]),
        onBodyScroll: prop_types_1.default.func,
        onFixedScrollSync: prop_types_1.default.func,
        onVirtualScroll: prop_types_1.default.func,
        onLockBodyScroll: prop_types_1.default.func,
        bodyHeight: prop_types_1.default.number,
        innerTop: prop_types_1.default.number,
        getNode: prop_types_1.default.func,
        getBodyNode: prop_types_1.default.func,
        getLockNode: prop_types_1.default.func,
        lockType: prop_types_1.default.oneOf(['left', 'right'])
    };
    return VirtualBody;
}(react_1.default.Component);
exports.default = VirtualBody;

/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var shallow_element_equals_1 = __webpack_require__(100);
var util_1 = __webpack_require__(4);
var row_1 = __webpack_require__(102);
var body_1 = __webpack_require__(187);
var header_1 = __webpack_require__(188);
var wrapper_1 = __webpack_require__(65);
var util_2 = __webpack_require__(18);
var ieVersion = util_1.env.ieVersion;
function lock(BaseComponent) {
    /** Table */
    var LockTable = /** @class */function (_super) {
        tslib_1.__extends(LockTable, _super);
        function LockTable(props, context) {
            var _this = _super.call(this, props, context) || this;
            _this.state = {};
            _this.getTableInstance = function (type, instance) {
                type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';
                _this["table".concat(type, "Inc")] = instance;
            };
            _this.getNode = function (type, node, lockType) {
                lockType = lockType ? lockType.charAt(0).toUpperCase() + lockType.substr(1) : '';
                _this["".concat(type).concat(lockType, "Node")] = node;
                if (type === 'header' && !_this.innerHeaderNode && !lockType) {
                    _this.innerHeaderNode = _this.headerNode.querySelector('div');
                }
            };
            _this.onRowMouseEnter = function (record, index) {
                if (_this.isLock()) {
                    var row = _this.getRowNode(index);
                    var leftRow = _this.getRowNode(index, 'left');
                    var rightRow = _this.getRowNode(index, 'right');
                    [row, leftRow, rightRow].forEach(function (row) {
                        row && util_1.dom.addClass(row, 'hovered');
                    });
                }
            };
            _this.onRowMouseLeave = function (record, index) {
                if (_this.isLock()) {
                    var row = _this.getRowNode(index);
                    var leftRow = _this.getRowNode(index, 'left');
                    var rightRow = _this.getRowNode(index, 'right');
                    [row, leftRow, rightRow].forEach(function (row) {
                        row && util_1.dom.removeClass(row, 'hovered');
                    });
                }
            };
            _this.onLockBodyScrollTop = function (event) {
                // set scroll top for lock columns & main body
                var target = event.target;
                if (event.currentTarget !== target) {
                    return;
                }
                var distScrollTop = target.scrollTop;
                if (_this.isLock() && distScrollTop !== _this.lastScrollTop) {
                    var lockRightBody = _this.bodyRightNode,
                        lockLeftBody = _this.bodyLeftNode,
                        bodyNode = _this.bodyNode;
                    var arr = [lockLeftBody, lockRightBody, bodyNode];
                    arr.forEach(function (node) {
                        if (node && node.scrollTop !== distScrollTop) {
                            node.scrollTop = distScrollTop;
                        }
                    });
                    _this.lastScrollTop = distScrollTop;
                }
            };
            _this.onLockBodyScrollLeft = function () {
                // add shadow class for lock columns
                if (_this.isLock()) {
                    var rtl = _this.props.rtl;
                    var lockRightTable = rtl ? _this.getWrapperNode('left') : _this.getWrapperNode('right'),
                        lockLeftTable = rtl ? _this.getWrapperNode('right') : _this.getWrapperNode('left'),
                        shadowClassName = 'shadow';
                    var x = _this.bodyNode.scrollLeft;
                    if (x === 0) {
                        lockLeftTable && util_1.dom.removeClass(lockLeftTable, shadowClassName);
                        lockRightTable && util_1.dom.addClass(lockRightTable, shadowClassName);
                    } else if (x === _this.bodyNode.scrollWidth - _this.bodyNode.clientWidth) {
                        lockLeftTable && util_1.dom.addClass(lockLeftTable, shadowClassName);
                        lockRightTable && util_1.dom.removeClass(lockRightTable, shadowClassName);
                    } else {
                        lockLeftTable && util_1.dom.addClass(lockLeftTable, shadowClassName);
                        lockRightTable && util_1.dom.addClass(lockRightTable, shadowClassName);
                    }
                }
            };
            _this.onLockBodyScroll = function (event) {
                _this.onLockBodyScrollTop(event);
                _this.onLockBodyScrollLeft();
            };
            _this.adjustSize = function () {
                if (!_this.adjustIfTableNotNeedLock()) {
                    _this.adjustHeaderSize();
                    _this.adjustBodySize();
                    _this.adjustRowHeight();
                    _this.onLockBodyScrollLeft();
                }
            };
            _this.getFlatenChildrenLength = function (children) {
                if (children === void 0) {
                    children = [];
                }
                var loop = function loop(arr) {
                    var newArray = [];
                    arr.forEach(function (child) {
                        if (child && child.children) {
                            newArray.push.apply(newArray, tslib_1.__spreadArray([], tslib_1.__read(loop(child.children)), false));
                        } else {
                            newArray.push(child);
                        }
                    });
                    return newArray;
                };
                return loop(children).length;
            };
            _this.saveLockLeftRef = function (ref) {
                _this.lockLeftEl = ref;
            };
            _this.saveLockRightRef = function (ref) {
                _this.lockRightEl = ref;
            };
            _this.lockLeftChildren = [];
            _this.lockRightChildren = [];
            return _this;
        }
        LockTable.prototype.getChildContext = function () {
            return {
                getTableInstance: this.getTableInstance,
                getLockNode: this.getNode,
                onLockBodyScroll: this.onLockBodyScroll,
                onRowMouseEnter: this.onRowMouseEnter,
                onRowMouseLeave: this.onRowMouseLeave
            };
        };
        LockTable.prototype.componentDidMount = function () {
            util_1.events.on(window, 'resize', this.adjustSize);
            this.scroll();
            this.adjustSize();
            this.forceUpdate();
        };
        LockTable.prototype.shouldComponentUpdate = function (nextProps, nextState, nextContext) {
            if (nextProps.pure) {
                var isEqual = (0, shallow_element_equals_1.default)(nextProps, this.props);
                return !(isEqual && util_1.obj.shallowEqual(nextContext, this.context));
            }
            return true;
        };
        LockTable.prototype.componentDidUpdate = function () {
            this.adjustSize();
            this._isLock = false;
        };
        LockTable.prototype.componentWillUnmount = function () {
            util_1.events.off(window, 'resize', this.adjustSize);
        };
        LockTable.prototype.normalizeChildrenState = function (props) {
            var columns = this.normalizeChildren(props);
            var splitChildren = this.splitFromNormalizeChildren(columns);
            var lockLeftChildren = splitChildren.lockLeftChildren,
                lockRightChildren = splitChildren.lockRightChildren;
            return {
                lockLeftChildren: lockLeftChildren,
                lockRightChildren: lockRightChildren,
                children: this.mergeFromSplitLockChildren(splitChildren)
            };
        };
        // 将React结构化数据提取props转换成数组
        LockTable.prototype.normalizeChildren = function (props) {
            var children = props.children,
                columns = props.columns;
            var isLock = false,
                ret;
            var checkLock = function checkLock(col) {
                if ([true, 'left', 'right'].indexOf(col.lock) > -1) {
                    if (!('width' in col)) {
                        util_1.log.warning("Should config width for lock column named [ ".concat(col.dataIndex, " ]."));
                    }
                    isLock = true;
                }
            };
            if (columns && !children) {
                ret = columns;
                var getColumns_1 = function getColumns_1(cols) {
                    cols.forEach(function (col) {
                        if (col === void 0) {
                            col = {};
                        }
                        checkLock(col);
                        if (col.children) {
                            getColumns_1(col.children);
                        }
                    });
                };
                getColumns_1(columns);
            } else {
                var getChildren_1 = function getChildren_1(children) {
                    var ret = [];
                    react_1.Children.forEach(children, function (child) {
                        if (child) {
                            var props_1 = tslib_1.__assign({}, child.props);
                            checkLock(props_1);
                            ret.push(props_1);
                            if (child.props.children) {
                                props_1.children = getChildren_1(child.props.children);
                            }
                        }
                    });
                    return ret;
                };
                ret = getChildren_1(children);
            }
            ret.forEach(function (child) {
                // 为自定义的列特殊处理
                if (child.__normalized && isLock) {
                    // users can set lock type for column selection now, so its origin lock type comes first
                    child.lock = child.lock || 'left';
                    delete child.__normalized;
                }
            });
            this._isLock = isLock;
            return ret;
        };
        //从数组中分离出lock的列和正常的列
        LockTable.prototype.splitFromNormalizeChildren = function (children) {
            var originChildren = deepCopy(children);
            var lockLeftChildren = deepCopy(children);
            var lockRightChildren = deepCopy(children);
            var loop = function loop(lockChildren, condition) {
                var ret = [];
                lockChildren.forEach(function (child) {
                    if (child.children) {
                        var res = loop(child.children, condition);
                        if (!res.length) {
                            ret.push(child);
                        }
                    } else {
                        var order = condition(child);
                        if (!order) {
                            ret.push(child);
                        }
                    }
                });
                ret.forEach(function (res) {
                    var index = lockChildren.indexOf(res);
                    lockChildren.splice(index, 1);
                });
                return lockChildren;
            };
            loop(lockLeftChildren, function (child) {
                if (child.lock === true || child.lock === 'left') {
                    return 'left';
                }
            });
            loop(lockRightChildren, function (child) {
                if (child.lock === 'right') {
                    return 'right';
                }
            });
            loop(originChildren, function (child) {
                return child.lock !== true && child.lock !== 'left' && child.lock !== 'right';
            });
            return {
                lockLeftChildren: lockLeftChildren,
                lockRightChildren: lockRightChildren,
                originChildren: originChildren
            };
        };
        //将左侧的锁列树和中间的普通树及右侧的锁列树进行合并
        LockTable.prototype.mergeFromSplitLockChildren = function (splitChildren) {
            var lockLeftChildren = splitChildren.lockLeftChildren,
                lockRightChildren = splitChildren.lockRightChildren;
            var originChildren = splitChildren.originChildren;
            Array.prototype.unshift.apply(originChildren, lockLeftChildren);
            originChildren = originChildren.concat(lockRightChildren);
            return originChildren;
        };
        LockTable.prototype.scroll = function () {
            var _a = this.props,
                _b = _a.scrollToCol,
                scrollToCol = _b === void 0 ? 0 : _b,
                _c = _a.scrollToRow,
                scrollToRow = _c === void 0 ? 0 : _c;
            if (!scrollToCol && !scrollToRow || !this.bodyNode) {
                return;
            }
            var colCellNode = this.getCellNode(0, scrollToCol);
            var rowCellNode = this.getCellNode(scrollToRow, 0);
            var bodyNodeOffset = this.bodyNode.getBoundingClientRect() || {};
            if (colCellNode) {
                var cellNodeoffset = colCellNode.getBoundingClientRect();
                var scrollLeft = cellNodeoffset.left - bodyNodeOffset.left;
                this.bodyNode.scrollLeft = scrollLeft;
            }
            if (rowCellNode) {
                var cellNodeoffset = rowCellNode.getBoundingClientRect();
                var scrollTop = cellNodeoffset.top - bodyNodeOffset.top;
                this.bodyNode.scrollTop = scrollTop;
            }
        };
        // Table处理过后真实的lock状态
        LockTable.prototype.isLock = function () {
            return this.lockLeftChildren.length || this.lockRightChildren.length;
        };
        // 用户设置的lock状态
        LockTable.prototype.isOriginLock = function () {
            return this._isLock;
        };
        LockTable.prototype.removeLockTable = function () {
            var lockLeftLen = this.lockLeftChildren.length;
            var lockRightLen = this.lockRightChildren.length;
            if (lockLeftLen) {
                this._notNeedAdjustLockLeft = true;
            }
            if (lockRightLen) {
                this._notNeedAdjustLockRight = true;
            }
            if (lockRightLen || lockLeftLen) {
                this.forceUpdate();
                return true;
            }
        };
        LockTable.prototype.adjustIfTableNotNeedLock = function () {
            var _this = this;
            if (this.isOriginLock()) {
                var widthObj = this.tableInc.flatChildren.map(function (item, index) {
                    var cell = _this.getCellNode(0, index) || {};
                    var headerCell = _this.getHeaderCellNode(0, index) || {};
                    // fix https://codesandbox.io/s/fusion-next-template-d9bu8
                    // close #1832
                    try {
                        return {
                            cellWidths: parseFloat(getComputedStyle(cell).width) || 0,
                            headerWidths: parseFloat(getComputedStyle(headerCell).width) || 0
                        };
                    } catch (error) {
                        return {
                            cellWidths: cell.clientWidth || 0,
                            headerWidths: headerCell.clientWidth || 0
                        };
                    }
                }).reduce(function (a, b) {
                    return {
                        cellWidths: a.cellWidths + b.cellWidths,
                        headerWidths: a.headerWidths + b.headerWidths
                    };
                }, {
                    cellWidths: 0,
                    headerWidths: 0
                });
                var node = void 0,
                    width = void 0;
                try {
                    node = (0, react_dom_1.findDOMNode)(this);
                    width = node.clientWidth;
                } catch (err) {
                    node = null;
                    width = 0;
                }
                // if the table doesn't exist, there is no need to adjust
                if (width === 0) {
                    return true;
                }
                var configWidths = parseInt(widthObj.cellWidths) || parseInt(widthObj.headerWidths);
                if (configWidths <= width && configWidths > 0) {
                    this.removeLockTable();
                } else if (this._notNeedAdjustLockLeft || this._notNeedAdjustLockRight) {
                    this._notNeedAdjustLockLeft = this._notNeedAdjustLockRight = false;
                    this.forceUpdate();
                } else {
                    this._notNeedAdjustLockLeft = this._notNeedAdjustLockRight = false;
                    return false;
                }
            }
            return false;
        };
        LockTable.prototype.adjustBodySize = function () {
            var _a;
            var _b = this.props,
                rtl = _b.rtl,
                hasHeader = _b.hasHeader;
            var header = this.headerNode;
            var paddingName = rtl ? 'paddingLeft' : 'paddingRight';
            var marginName = rtl ? 'marginLeft' : 'marginRight';
            var scrollBarSize = +util_1.dom.scrollbar().width || 0;
            var style = (_a = {}, _a[paddingName] = scrollBarSize, _a[marginName] = scrollBarSize, _a);
            var body = this.bodyNode,
                hasVerScroll = body && body.scrollHeight > body.clientHeight;
            if (this.isLock()) {
                var lockLeftBody = this.bodyLeftNode,
                    lockRightBody = this.bodyRightNode,
                    lockRightBodyWrapper = this.getWrapperNode('right'),
                    bodyHeight = body.offsetHeight,
                    width = hasVerScroll ? scrollBarSize : 0,
                    lockBodyHeight = bodyHeight - scrollBarSize;
                if (!hasVerScroll) {
                    style[paddingName] = 0;
                    style[marginName] = 0;
                }
                if (+scrollBarSize) {
                    style.marginBottom = -scrollBarSize;
                    style.paddingBottom = scrollBarSize;
                } else {
                    style.marginBottom = -20;
                    style.paddingBottom = 20;
                }
                var lockStyle = {
                    'max-height': lockBodyHeight
                };
                if (!hasHeader && !+scrollBarSize) {
                    lockStyle[marginName] = 0;
                }
                if (+scrollBarSize) {
                    lockStyle[marginName] = -scrollBarSize;
                }
                lockLeftBody && util_1.dom.setStyle(lockLeftBody, lockStyle);
                lockRightBody && util_1.dom.setStyle(lockRightBody, lockStyle);
                lockRightBodyWrapper && +scrollBarSize && util_1.dom.setStyle(lockRightBodyWrapper, rtl ? 'left' : 'right', "".concat(width, "px"));
            } else {
                style.marginBottom = -scrollBarSize;
                style.paddingBottom = scrollBarSize;
                style[marginName] = 0;
                if (!hasVerScroll) {
                    style[paddingName] = 0;
                }
            }
            header && util_1.dom.setStyle(header, style);
        };
        LockTable.prototype.adjustHeaderSize = function () {
            var _this = this;
            if (this.isLock()) {
                this.tableInc.groupChildren.forEach(function (child, index) {
                    var lastIndex = _this.tableInc.groupChildren[index].length - 1;
                    var headerRightRow = _this.getHeaderCellNode(index, lastIndex),
                        headerLeftRow = _this.getHeaderCellNode(index, 0),
                        headerRightLockRow = _this.getHeaderCellNode(index, 0, 'right'),
                        headerLeftLockRow = _this.getHeaderCellNode(index, 0, 'left');
                    if (headerRightRow && headerRightLockRow) {
                        var maxRightRowHeight = headerRightRow.offsetHeight;
                        util_1.dom.setStyle(headerRightLockRow, 'height', maxRightRowHeight);
                        setTimeout(function () {
                            var affixRef = _this.tableRightInc.affixRef;
                            // if rendered then update postion of affix
                            return affixRef && affixRef.getInstance() && affixRef.getInstance().updatePosition();
                        });
                    }
                    if (headerLeftRow && headerLeftLockRow) {
                        var maxLeftRowHeight = headerLeftRow.offsetHeight;
                        util_1.dom.setStyle(headerLeftLockRow, 'height', maxLeftRowHeight);
                        setTimeout(function () {
                            var affixRef = _this.tableLeftInc.affixRef;
                            // if rendered then update postion of affix
                            return affixRef && affixRef.getInstance() && affixRef.getInstance().updatePosition();
                        });
                    }
                });
            }
        };
        LockTable.prototype.adjustRowHeight = function () {
            var _this = this;
            if (this.isLock()) {
                this.tableInc.props.dataSource.forEach(function (item, index) {
                    // record may be a string
                    var rowIndex = "".concat((typeof item === "undefined" ? "undefined" : (0, _typeof3.default)(item)) === 'object' && '__rowIndex' in item ? item.__rowIndex : index).concat(item.__expanded ? '_expanded' : '');
                    // 同步左侧的锁列
                    _this.setRowHeight(rowIndex, 'left');
                    // 同步右侧的锁列
                    _this.setRowHeight(rowIndex, 'right');
                });
            }
        };
        LockTable.prototype.setRowHeight = function (rowIndex, dir) {
            var lockRow = this.getRowNode(rowIndex, dir),
                row = this.getRowNode(rowIndex),
                rowHeight = (ieVersion ? row && row.offsetHeight : row && parseFloat(getComputedStyle(row).height)) || 'auto',
                lockHeight = (ieVersion ? lockRow && lockRow.offsetHeight : lockRow && parseFloat(getComputedStyle(lockRow).height)) || 'auto';
            if (lockRow && rowHeight !== lockHeight) {
                util_1.dom.setStyle(lockRow, 'height', rowHeight);
            }
        };
        LockTable.prototype.getWrapperNode = function (type) {
            type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';
            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of table when dataSource Changed
                // use try catch for temporary
                return (0, react_dom_1.findDOMNode)(this["lock".concat(type, "El")]);
            } catch (error) {
                return null;
            }
        };
        // remove this in next major version, keep this for temperary incase of using it
        // getFirstNormalCellNode(index) {
        //     let i = 0;
        //     let row;
        //     do {
        //         row = this.getCellNode(index, i);
        //         i++;
        //     } while (
        //         (!row || (row && row.rowSpan && row.rowSpan > 1)) &&
        //         this.tableInc.flatChildren.length > i
        //     );
        //     return row;
        // }
        LockTable.prototype.getRowNode = function (index, type) {
            type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';
            var table = this["table".concat(type, "Inc")];
            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of table when dataSource Changed
                // use try catch for temporary
                return (0, react_dom_1.findDOMNode)(table.getRowRef(index));
            } catch (error) {
                return null;
            }
        };
        LockTable.prototype.getHeaderCellNode = function (index, i, type) {
            type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';
            var table = this["table".concat(type, "Inc")];
            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of table when dataSource Changed
                // use try catch for temporary
                return (0, react_dom_1.findDOMNode)(table.getHeaderCellRef(index, i));
            } catch (error) {
                return null;
            }
        };
        LockTable.prototype.getCellNode = function (index, i, type) {
            type = type ? type.charAt(0).toUpperCase() + type.substr(1) : '';
            var table = this["table".concat(type, "Inc")];
            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of table when dataSource Changed
                // use try catch for temporary
                return (0, react_dom_1.findDOMNode)(table.getCellRef(index, i));
            } catch (error) {
                return null;
            }
        };
        LockTable.prototype.render = function () {
            var _a;
            /* eslint-disable no-unused-vars, prefer-const */
            var _b = this.props,
                children = _b.children,
                columns = _b.columns,
                prefix = _b.prefix,
                components = _b.components,
                className = _b.className,
                dataSource = _b.dataSource,
                tableWidth = _b.tableWidth,
                others = tslib_1.__rest(_b, ["children", "columns", "prefix", "components", "className", "dataSource", "tableWidth"]);
            var _c = this.normalizeChildrenState(this.props),
                lockLeftChildren = _c.lockLeftChildren,
                lockRightChildren = _c.lockRightChildren,
                normalizedChildren = _c.children;
            var leftLen = this.getFlatenChildrenLength(lockLeftChildren);
            var rightLen = this.getFlatenChildrenLength(lockRightChildren);
            var originLen = this.getFlatenChildrenLength(normalizedChildren);
            var lengths = {
                left: leftLen,
                right: rightLen,
                origin: originLen
            };
            if (this._notNeedAdjustLockLeft) {
                lockLeftChildren = [];
            }
            if (this._notNeedAdjustLockRight) {
                lockRightChildren = [];
            }
            this.lockLeftChildren = lockLeftChildren;
            this.lockRightChildren = lockRightChildren;
            if (this.isOriginLock()) {
                components = tslib_1.__assign({}, components);
                components.Body = components.Body || body_1.default;
                components.Header = components.Header || header_1.default;
                components.Wrapper = components.Wrapper || wrapper_1.default;
                components.Row = components.Row || row_1.default;
                className = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "table-lock")] = true, _a["".concat(prefix, "table-wrap-empty")] = !dataSource.length, _a[className] = className, _a));
                var content = [react_1.default.createElement(BaseComponent, tslib_1.__assign({}, others, { dataSource: dataSource, key: "lock-left", columns: lockLeftChildren, className: "".concat(prefix, "table-lock-left"), lengths: lengths, prefix: prefix, lockType: "left", components: components, ref: this.saveLockLeftRef, loading: false, "aria-hidden": true })), react_1.default.createElement(BaseComponent, tslib_1.__assign({}, others, { dataSource: dataSource, key: "lock-right", columns: lockRightChildren, className: "".concat(prefix, "table-lock-right"), lengths: lengths, prefix: prefix, lockType: "right", components: components, ref: this.saveLockRightRef, loading: false, "aria-hidden": true }))];
                return react_1.default.createElement(BaseComponent, tslib_1.__assign({}, others, { tableWidth: tableWidth, dataSource: dataSource, columns: normalizedChildren, prefix: prefix, lengths: lengths, wrapperContent: content, components: components, className: className }));
            }
            return react_1.default.createElement(BaseComponent, tslib_1.__assign({}, this.props));
        };
        LockTable.LockRow = row_1.default;
        LockTable.LockBody = body_1.default;
        LockTable.LockHeader = header_1.default;
        LockTable.propTypes = tslib_1.__assign({ scrollToCol: prop_types_1.default.number,
            /**
             * 指定滚动到某一行，仅在`useVirtual`的时候生效
             */
            scrollToRow: prop_types_1.default.number }, BaseComponent.propTypes);
        LockTable.defaultProps = tslib_1.__assign({}, BaseComponent.defaultProps);
        LockTable.childContextTypes = {
            getTableInstance: prop_types_1.default.func,
            getLockNode: prop_types_1.default.func,
            onLockBodyScroll: prop_types_1.default.func,
            onRowMouseEnter: prop_types_1.default.func,
            onRowMouseLeave: prop_types_1.default.func
        };
        return LockTable;
    }(react_1.default.Component);
    (0, util_2.statics)(LockTable, BaseComponent);
    return LockTable;
}
exports.default = lock;
function deepCopy(arr) {
    var copy = function copy(arr) {
        return arr.map(function (item) {
            var newItem = tslib_1.__assign({}, item);
            if (item.children) {
                item.children = copy(item.children);
            }
            return newItem;
        });
    };
    return copy(arr);
}

/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var shallow_element_equals_1 = __webpack_require__(100);
var util_1 = __webpack_require__(4);
var row_1 = __webpack_require__(102);
var body_1 = __webpack_require__(187);
var header_1 = __webpack_require__(188);
var wrapper_1 = __webpack_require__(65);
var util_2 = __webpack_require__(18);
function stickyLock(BaseComponent) {
    /** Table */
    var LockTable = /** @class */function (_super) {
        tslib_1.__extends(LockTable, _super);
        function LockTable(props, context) {
            var _this = _super.call(this, props) || this;
            _this.state = {};
            _this.updateOffsetArr = function () {
                var _a = _this.splitChildren || {},
                    lockLeftChildren = _a.lockLeftChildren,
                    lockRightChildren = _a.lockRightChildren,
                    originChildren = _a.originChildren;
                var leftLen = _this.getFlatenChildren(lockLeftChildren).length;
                var rightLen = _this.getFlatenChildren(lockRightChildren).length;
                var totalLen = leftLen + rightLen + _this.getFlatenChildren(originChildren).length;
                var hasLockLeft = leftLen > 0;
                var hasLockRight = rightLen > 0;
                var leftOffsetArr = _this.getStickyWidth(lockLeftChildren, 'left', totalLen);
                var rightOffsetArr = _this.getStickyWidth(lockRightChildren, 'right', totalLen);
                var state = {};
                if ("".concat(leftOffsetArr) !== "".concat(_this.state.leftOffsetArr)) {
                    state.leftOffsetArr = leftOffsetArr;
                }
                if ("".concat(rightOffsetArr) !== "".concat(_this.state.rightOffsetArr)) {
                    state.rightOffsetArr = rightOffsetArr;
                }
                if (hasLockLeft !== _this.state.hasLockLeft) {
                    state.hasLockLeft = hasLockLeft;
                }
                if (hasLockRight !== _this.state.hasLockRight) {
                    state.hasLockRight = hasLockRight;
                }
                if (Object.keys(state).length > 0) {
                    _this.setState(state);
                }
            };
            _this.onLockBodyScroll = function (e, forceSet) {
                var _a = e.currentTarget || {},
                    scrollLeft = _a.scrollLeft,
                    scrollWidth = _a.scrollWidth,
                    clientWidth = _a.clientWidth;
                var _b = _this,
                    pingRight = _b.pingRight,
                    pingLeft = _b.pingLeft;
                var pingLeftNext = scrollLeft > 0 && _this.state.hasLockLeft;
                var pingRightNext = scrollLeft < scrollWidth - clientWidth && _this.state.hasLockRight;
                if (forceSet || pingLeft !== pingLeftNext || pingRight !== pingRightNext) {
                    var prefix = _this.props.prefix;
                    var table = _this.getTableNode();
                    _this.pingLeft = pingLeftNext;
                    _this.pingRight = pingRightNext;
                    var leftFunc = pingLeftNext ? 'addClass' : 'removeClass';
                    util_1.dom[leftFunc](table, "".concat(prefix, "table-ping-left"));
                    var rightFunc = pingRightNext ? 'addClass' : 'removeClass';
                    util_1.dom[rightFunc](table, "".concat(prefix, "table-ping-right"));
                }
            };
            _this.getStickyWidth = function (lockChildren, dir, totalLen) {
                var _a = _this.props,
                    dataSource = _a.dataSource,
                    scrollToRow = _a.scrollToRow;
                var offsetArr = [];
                var flatenChildren = _this.getFlatenChildren(lockChildren);
                var len = flatenChildren.length;
                flatenChildren.reduce(function (ret, col, index) {
                    var tag = dir === 'left' ? index : len - 1 - index;
                    var tagNext = dir === 'left' ? tag - 1 : tag + 1;
                    var nodeToGetWidth = dir === 'left' ? tag - 1 : totalLen - index;
                    if (dir === 'left' && tag === 0) {
                        ret[0] = 0;
                        return ret;
                    } else if (dir === 'right' && tag === len - 1) {
                        ret[tag] = 0;
                        return ret;
                    }
                    var _a = flatenChildren[tagNext],
                        headerCellRowIndex = _a.headerCellRowIndex,
                        headerCellColIndex = _a.headerCellColIndex;
                    // header with no dataSource
                    var isEmpty = !(dataSource && dataSource.length > 0);
                    // no header
                    var node = isEmpty ? _this.getHeaderCellNode(headerCellRowIndex, headerCellColIndex) : _this.getCellNode(scrollToRow || dataSource[0] && dataSource[0].__rowIndex || 0, nodeToGetWidth);
                    var colWidth = node && parseFloat(getComputedStyle(node).width) || 0;
                    ret[tag] = (ret[tagNext] || 0) + colWidth;
                    return ret;
                }, offsetArr);
                return offsetArr;
            };
            _this.getTableInstance = function (type, instance) {
                type = '';
                _this["table".concat(type, "Inc")] = instance;
            };
            _this.getNode = function (type, node) {
                _this["".concat(type, "Node")] = node;
            };
            _this.getFlatenChildren = function (children) {
                if (children === void 0) {
                    children = [];
                }
                var loop = function loop(arr) {
                    var newArray = [];
                    arr.forEach(function (child) {
                        if (child.children) {
                            newArray.push.apply(newArray, tslib_1.__spreadArray([], tslib_1.__read(loop(child.children)), false));
                        } else {
                            newArray.push(child);
                        }
                    });
                    return newArray;
                };
                return loop(children);
            };
            _this.state = {
                hasLockLeft: true,
                hasLockRight: true
            };
            _this.pingLeft = false;
            _this.pingRight = false;
            return _this;
        }
        LockTable.prototype.getChildContext = function () {
            return {
                getTableInstance: this.getTableInstance,
                getLockNode: this.getNode,
                onLockBodyScroll: this.onLockBodyScroll
            };
        };
        LockTable.prototype.componentDidMount = function () {
            var dataSource = this.props.dataSource;
            var isEmpty = !(dataSource && dataSource.length > 0);
            this.updateOffsetArr();
            this.onLockBodyScroll(isEmpty ? { currentTarget: this.headerNode } : { currentTarget: this.bodyNode });
            this.forceUpdate();
            util_1.events.on(window, 'resize', this.updateOffsetArr);
        };
        LockTable.prototype.shouldComponentUpdate = function (nextProps, nextState, nextContext) {
            if (nextProps.pure) {
                var isEqual = (0, shallow_element_equals_1.default)(nextProps, this.props);
                return !(isEqual && util_1.obj.shallowEqual(nextContext, this.context));
            }
            return true;
        };
        LockTable.prototype.componentDidUpdate = function () {
            this.updateOffsetArr();
            this.onLockBodyScroll(this.bodyNode ? { currentTarget: this.bodyNode } : { currentTarget: this.headerNode }, true);
        };
        LockTable.prototype.componentWillUnmount = function () {
            this.pingLeft = false;
            this.pingRight = false;
            util_1.events.off(window, 'resize', this.updateOffsetArr);
        };
        LockTable.prototype.normalizeChildrenState = function (props) {
            var columns = this.normalizeChildren(props);
            this.splitChildren = this.splitFromNormalizeChildren(columns);
            return this.mergeFromSplitLockChildren(this.splitChildren, props.prefix);
        };
        // 将React结构化数据提取props转换成数组
        LockTable.prototype.normalizeChildren = function (props) {
            var children = props.children,
                columns = props.columns;
            var isLock = false,
                ret;
            var getChildren = function getChildren(children) {
                var ret = [];
                react_1.Children.forEach(children, function (child) {
                    if (child) {
                        var props_1 = tslib_1.__assign({}, child.props);
                        if ([true, 'left', 'right'].indexOf(props_1.lock) > -1) {
                            isLock = true;
                            if (!('width' in props_1)) {
                                util_1.log.warning("Should config width for lock column named [ ".concat(props_1.dataIndex, " ]."));
                            }
                        }
                        ret.push(props_1);
                        if (child.props.children) {
                            props_1.children = getChildren(child.props.children);
                        }
                    }
                });
                return ret;
            };
            if (columns && !children) {
                ret = columns;
                isLock = columns.find(function (record) {
                    return [true, 'left', 'right'].indexOf(record.lock) > -1;
                });
            } else {
                ret = getChildren(children);
            }
            ret.forEach(function (child) {
                // 为自定义的列特殊处理
                if (child.__normalized && isLock) {
                    // users can set lock type for column selection now, so its origin lock type comes first
                    child.lock = child.lock || 'left';
                    delete child.__normalized;
                }
            });
            return ret;
        };
        /**
         * 从数组中分离出lock的列和正常的列
         * @param {Array} children
         * @return {Object} { lockLeftChildren, lockRightChildren, originChildren } 锁左列, 锁左列, 剩余列
         */
        LockTable.prototype.splitFromNormalizeChildren = function (children) {
            var originChildren = deepCopy(children);
            var lockLeftChildren = deepCopy(children);
            var lockRightChildren = deepCopy(children);
            var loop = function loop(lockChildren, condition) {
                var ret = [];
                lockChildren.forEach(function (child) {
                    if (child.children) {
                        var res = loop(child.children, condition);
                        if (!res.length) {
                            ret.push(child);
                        }
                    } else {
                        var order = condition(child);
                        if (!order) {
                            ret.push(child);
                        }
                    }
                });
                ret.forEach(function (res) {
                    var index = lockChildren.indexOf(res);
                    lockChildren.splice(index, 1);
                });
                return lockChildren;
            };
            loop(lockLeftChildren, function (child) {
                if (child.lock === true || child.lock === 'left') {
                    return 'left';
                }
            });
            loop(lockRightChildren, function (child) {
                if (child.lock === 'right') {
                    return 'right';
                }
            });
            loop(originChildren, function (child) {
                return child.lock !== true && child.lock !== 'left' && child.lock !== 'right';
            });
            return {
                lockLeftChildren: lockLeftChildren,
                lockRightChildren: lockRightChildren,
                originChildren: originChildren
            };
        };
        /**
         * 将左侧的锁列树和中间的普通树及右侧的锁列树进行合并
         * 会在原始 originChildren 上做改动
         * @param {Object} splitChildren { lockLeftChildren, lockRightChildren, originChildren }
         * @return {Array} originChildren
         */
        LockTable.prototype.mergeFromSplitLockChildren = function (splitChildren, prefix) {
            var lockLeftChildren = splitChildren.lockLeftChildren,
                lockRightChildren = splitChildren.lockRightChildren;
            var originChildren = splitChildren.originChildren;
            var flatenLeftChildren = this.getFlatenChildren(lockLeftChildren);
            var flatenRightChildren = this.getFlatenChildren(lockRightChildren);
            (0, util_2.setStickyStyle)(lockLeftChildren, flatenLeftChildren, 'left', this.state.leftOffsetArr, prefix);
            (0, util_2.setStickyStyle)(lockRightChildren, flatenRightChildren, 'right', this.state.rightOffsetArr, prefix);
            return tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(lockLeftChildren), false), tslib_1.__read(originChildren), false), tslib_1.__read(lockRightChildren), false);
        };
        LockTable.prototype.getCellNode = function (index, i) {
            var table = this.tableInc;
            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of table when dataSource Changed
                // use try catch for temporary
                return (0, react_dom_1.findDOMNode)(table.getCellRef(index, i));
            } catch (error) {
                return null;
            }
        };
        LockTable.prototype.getTableNode = function () {
            var table = this.tableInc;
            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of table when dataSource Changed
                // use try catch for temporary
                return (0, react_dom_1.findDOMNode)(table.tableEl);
            } catch (error) {
                return null;
            }
        };
        LockTable.prototype.getHeaderCellNode = function (index, i) {
            var table = this.tableInc;
            try {
                // in case of finding an unmounted component due to cached data
                // need to clear refs of table when dataSource Changed
                // use try catch for temporary
                return (0, react_dom_1.findDOMNode)(table.getHeaderCellRef(index, i));
            } catch (error) {
                return null;
            }
        };
        LockTable.prototype.render = function () {
            var _a;
            /* eslint-disable no-unused-vars, prefer-const */
            var _b = this.props,
                children = _b.children,
                columns = _b.columns,
                prefix = _b.prefix,
                components = _b.components,
                scrollToRow = _b.scrollToRow,
                className = _b.className,
                dataSource = _b.dataSource,
                others = tslib_1.__rest(_b, ["children", "columns", "prefix", "components", "scrollToRow", "className", "dataSource"]);
            var normalizedChildren = this.normalizeChildrenState(this.props);
            components = tslib_1.__assign({}, components);
            components.Body = components.Body || body_1.default;
            components.Header = components.Header || header_1.default;
            components.Wrapper = components.Wrapper || wrapper_1.default;
            components.Row = components.Row || row_1.default;
            className = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "table-lock")] = true, _a["".concat(prefix, "table-stickylock")] = true, _a["".concat(prefix, "table-wrap-empty")] = !dataSource.length, _a[className] = className, _a));
            return react_1.default.createElement(BaseComponent, tslib_1.__assign({}, others, { dataSource: dataSource, columns: normalizedChildren, prefix: prefix, components: components, className: className }));
        };
        LockTable.LockRow = row_1.default;
        LockTable.LockBody = body_1.default;
        LockTable.LockHeader = header_1.default;
        LockTable.propTypes = tslib_1.__assign({ scrollToCol: prop_types_1.default.number,
            /**
             * 指定滚动到某一行，仅在`useVirtual`的时候生效
             */
            scrollToRow: prop_types_1.default.number }, BaseComponent.propTypes);
        LockTable.defaultProps = tslib_1.__assign({}, BaseComponent.defaultProps);
        LockTable.childContextTypes = {
            getTableInstance: prop_types_1.default.func,
            getLockNode: prop_types_1.default.func,
            onLockBodyScroll: prop_types_1.default.func
        };
        return LockTable;
    }(react_1.default.Component);
    (0, util_2.statics)(LockTable, BaseComponent);
    return LockTable;
}
exports.default = stickyLock;
function deepCopy(arr) {
    var copy = function copy(arr) {
        return arr.map(function (item) {
            var newItem = tslib_1.__assign({}, item);
            if (item.children) {
                item.children = copy(item.children);
            }
            return newItem;
        });
    };
    return copy(arr);
}

/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var list_header_1 = __webpack_require__(189);
var list_footer_1 = __webpack_require__(190);
var row_1 = __webpack_require__(435);
var body_1 = __webpack_require__(436);
var header_1 = __webpack_require__(64);
var wrapper_1 = __webpack_require__(65);
var util_1 = __webpack_require__(18);
function list(BaseComponent) {
    var ListTable = /** @class */function (_super) {
        tslib_1.__extends(ListTable, _super);
        function ListTable() {
            var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
            _this.state = {};
            return _this;
        }
        ListTable.prototype.getChildContext = function () {
            return {
                listHeader: this.listHeader,
                listFooter: this.listFooter,
                rowSelection: this.rowSelection
            };
        };
        ListTable.prototype.normalizeDataSource = function (dataSource) {
            var ret = [];
            var loop = function loop(dataSource, level) {
                dataSource.forEach(function (item) {
                    var itemCopy = tslib_1.__assign({}, item);
                    itemCopy.__level = level;
                    ret.push(itemCopy);
                    if (itemCopy.children) {
                        loop(itemCopy.children, level + 1);
                    }
                });
            };
            loop(dataSource, 0);
            this.ds = ret;
            return ret;
        };
        ListTable.prototype.render = function () {
            var _a;
            var _this = this;
            /* eslint-disable prefer-const */
            var _b = this.props,
                components = _b.components,
                children = _b.children,
                className = _b.className,
                prefix = _b.prefix,
                others = tslib_1.__rest(_b, ["components", "children", "className", "prefix"]);
            var isList = false,
                ret = [];
            react_1.Children.forEach(children, function (child) {
                if (child) {
                    if (['function', 'object'].indexOf((0, _typeof3.default)(child.type)) > -1) {
                        if (child.type._typeMark === 'listHeader') {
                            _this.listHeader = child.props;
                            isList = true;
                        } else if (child.type._typeMark === 'listFooter') {
                            _this.listFooter = child.props;
                        } else {
                            ret.push(child);
                        }
                    } else {
                        ret.push(child);
                    }
                }
            });
            this.rowSelection = this.props.rowSelection;
            if (isList) {
                components = tslib_1.__assign({}, components);
                components.Row = components.Row || row_1.default;
                components.Body = components.Body || body_1.default;
                components.Header = components.Header || header_1.default;
                components.Wrapper = components.Wrapper || wrapper_1.default;
                className = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "table-group")] = true, _a[className] = className, _a));
            }
            return react_1.default.createElement(BaseComponent, tslib_1.__assign({}, others, { components: components, children: ret.length > 0 ? ret : undefined, className: className, prefix: prefix }));
        };
        ListTable.ListHeader = list_header_1.default;
        ListTable.ListFooter = list_footer_1.default;
        ListTable.ListRow = row_1.default;
        ListTable.ListBody = body_1.default;
        ListTable.propTypes = tslib_1.__assign({}, BaseComponent.propTypes);
        ListTable.defaultProps = tslib_1.__assign({}, BaseComponent.defaultProps);
        ListTable.childContextTypes = {
            listHeader: prop_types_1.default.any,
            listFooter: prop_types_1.default.any,
            rowSelection: prop_types_1.default.object
        };
        return ListTable;
    }(react_1.default.Component);
    (0, util_1.statics)(ListTable, BaseComponent);
    return ListTable;
}
exports.default = list;

/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var util_1 = __webpack_require__(4);
var row_1 = __webpack_require__(62);
var GroupListRow = /** @class */function (_super) {
    tslib_1.__extends(GroupListRow, _super);
    function GroupListRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GroupListRow.prototype.render = function () {
        var _a;
        /* eslint-disable no-unused-vars*/
        var _b = this.props,
            prefix = _b.prefix,
            className = _b.className,
            onClick = _b.onClick,
            onMouseEnter = _b.onMouseEnter,
            onMouseLeave = _b.onMouseLeave,
            columns = _b.columns,
            Cell = _b.Cell,
            rowIndex = _b.rowIndex,
            __rowIndex = _b.__rowIndex,
            record = _b.record,
            children = _b.children,
            primaryKey = _b.primaryKey,
            colGroup = _b.colGroup,
            cellRef = _b.cellRef,
            getCellProps = _b.getCellProps,
            locale = _b.locale,
            wrapper = _b.wrapper,
            rtl = _b.rtl,
            tableEl = _b.tableEl,
            others = tslib_1.__rest(_b, ["prefix", "className", "onClick", "onMouseEnter", "onMouseLeave", "columns", "Cell", "rowIndex", "__rowIndex", "record", "children", "primaryKey", "colGroup", "cellRef", "getCellProps", "locale", "wrapper", "rtl", "tableEl"]);
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "table-row")] = true, _a[className] = className, _a));
        // clear notRenderCellIndex, incase of cached data
        this.context.notRenderCellIndex = [];
        return react_1.default.createElement("table", tslib_1.__assign({ className: cls, role: "row" }, others, { onClick: this.onClick, onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave }), colGroup, react_1.default.createElement("tbody", null, this.renderContent('header'), this.renderChildren(), this.renderContent('footer')));
    };
    GroupListRow.prototype.isChildrenSelection = function () {
        return this.context.listHeader && this.context.listHeader.hasChildrenSelection;
    };
    GroupListRow.prototype.isFirstLevelDataWhenNoChildren = function () {
        return this.context.listHeader && this.context.listHeader.useFirstLevelDataWhenNoChildren;
    };
    GroupListRow.prototype.isSelection = function () {
        return this.context.listHeader && this.context.listHeader.hasSelection;
    };
    GroupListRow.prototype.renderChildren = function () {
        var _this = this;
        var _a = this.props,
            record = _a.record,
            primaryKey = _a.primaryKey;
        var children = record.children;
        var toRenderList = children;
        if (this.isFirstLevelDataWhenNoChildren()) {
            util_1.log.warning("useFirstLevelDataWhenNoChildren is deprecated, change your dataSource structure, make sure there is 'children' in your dataSource.");
            toRenderList = children || [record];
        }
        if (toRenderList) {
            return toRenderList.map(function (child, index) {
                var cells = _this.renderCells(child, index);
                if (_this.isChildrenSelection()) {
                    if (!child[primaryKey]) {
                        util_1.log.warning('record.children/recored should contains primaryKey when childrenSelection is true.');
                    }
                    return react_1.default.createElement("tr", { key: child[primaryKey] }, cells);
                }
                if (_this.context.rowSelection) {
                    cells.shift();
                    cells[0] = cells[0] && react_1.default.cloneElement(cells[0], tslib_1.__assign({ colSpan: 2 }, cells[0].props));
                }
                return react_1.default.createElement("tr", { key: index }, cells);
            });
        }
        return null;
    };
    GroupListRow.prototype.renderContent = function (type) {
        var _a = this.props,
            columns = _a.columns,
            prefix = _a.prefix,
            record = _a.record,
            rowIndex = _a.rowIndex;
        var cameType = type.charAt(0).toUpperCase() + type.substr(1);
        var list = this.context["list".concat(cameType)];
        var listNode;
        if (list) {
            if (react_1.default.isValidElement(list.cell)) {
                listNode = react_1.default.cloneElement(list.cell, {
                    record: record,
                    index: rowIndex
                });
            } else if (typeof list.cell === 'function') {
                listNode = list.cell(record, rowIndex);
            }
            if (listNode) {
                var cells = this.renderCells(record);
                if (type === 'header' && this.context.rowSelection && this.isSelection()) {
                    cells = cells.slice(0, 1);
                    cells.push(react_1.default.createElement("td", { colSpan: columns.length - 1, key: "listNode" }, react_1.default.createElement("div", { className: "".concat(prefix, "table-cell-wrapper") }, listNode)));
                    listNode = react_1.default.createElement("tr", { className: "".concat(prefix, "table-group-").concat(type) }, cells);
                } else {
                    listNode = react_1.default.createElement("tr", { className: "".concat(prefix, "table-group-").concat(type) }, react_1.default.createElement("td", { colSpan: columns.length }, react_1.default.createElement("div", { className: "".concat(prefix, "table-cell-wrapper") }, listNode)));
                }
            }
        }
        return listNode;
    };
    GroupListRow.contextTypes = {
        listHeader: prop_types_1.default.any,
        listFooter: prop_types_1.default.any,
        rowSelection: prop_types_1.default.object,
        notRenderCellIndex: prop_types_1.default.array,
        lockType: prop_types_1.default.oneOf(['left', 'right'])
    };
    return GroupListRow;
}(row_1.default);
exports.default = GroupListRow;

/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var body_1 = __webpack_require__(61);
var ListBody = /** @class */function (_super) {
    tslib_1.__extends(ListBody, _super);
    function ListBody() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.onScroll = function (e) {
            var onFixedScrollSync = _this.context.onFixedScrollSync;
            onFixedScrollSync && onFixedScrollSync(e);
        };
        return _this;
    }
    ListBody.prototype.componentDidMount = function () {
        var getNode = this.context.getNode;
        getNode && getNode('body', (0, react_dom_1.findDOMNode)(this));
    };
    ListBody.prototype.render = function () {
        return react_1.default.createElement(body_1.default, tslib_1.__assign({ component: "div", onScroll: this.onScroll }, this.props));
    };
    ListBody.contextTypes = {
        getNode: prop_types_1.default.func,
        onFixedScrollSync: prop_types_1.default.func
    };
    return ListBody;
}(react_1.default.Component);
exports.default = ListBody;

/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var header_1 = __webpack_require__(64);
var header_2 = __webpack_require__(438);
var util_1 = __webpack_require__(18);
function sticky(BaseComponent) {
    /** Table */
    var StickyTable = /** @class */function (_super) {
        tslib_1.__extends(StickyTable, _super);
        function StickyTable() {
            var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
            _this.state = {};
            return _this;
        }
        StickyTable.prototype.getChildContext = function () {
            return {
                Header: this.props.components.Header || header_1.default,
                offsetTop: this.props.offsetTop,
                affixProps: this.props.affixProps
            };
        };
        StickyTable.prototype.render = function () {
            /* eslint-disable no-unused-vars */
            var _a = this.props,
                stickyHeader = _a.stickyHeader,
                offsetTop = _a.offsetTop,
                affixProps = _a.affixProps,
                others = tslib_1.__rest(_a, ["stickyHeader", "offsetTop", "affixProps"]);
            var _b = this.props,
                components = _b.components,
                maxBodyHeight = _b.maxBodyHeight,
                fixedHeader = _b.fixedHeader;
            if (stickyHeader) {
                components = tslib_1.__assign({}, components);
                components.Header = header_2.default;
                fixedHeader = true;
                maxBodyHeight = Math.max(maxBodyHeight, 10000);
            }
            return react_1.default.createElement(BaseComponent, tslib_1.__assign({}, others, { components: components, fixedHeader: fixedHeader, maxBodyHeight: maxBodyHeight }));
        };
        StickyTable.StickyHeader = header_2.default;
        StickyTable.propTypes = tslib_1.__assign({
            /**
             * 表头是否是sticky
             */
            stickyHeader: prop_types_1.default.bool,
            /**
             * 距离窗口顶部达到指定偏移量后触发
             */
            offsetTop: prop_types_1.default.number,
            /**
             * affix组件的的属性
             */
            affixProps: prop_types_1.default.object, components: prop_types_1.default.object }, BaseComponent.propTypes);
        StickyTable.defaultProps = tslib_1.__assign({ components: {} }, BaseComponent.defaultProps);
        StickyTable.childContextTypes = {
            Header: prop_types_1.default.any,
            offsetTop: prop_types_1.default.number,
            affixProps: prop_types_1.default.object
        };
        return StickyTable;
    }(react_1.default.Component);
    (0, util_1.statics)(StickyTable, BaseComponent);
    return StickyTable;
}
exports.default = sticky;

/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var affix_1 = __webpack_require__(67);
/* eslint-disable react/prefer-stateless-function*/
var StickHeader = /** @class */function (_super) {
    tslib_1.__extends(StickHeader, _super);
    function StickHeader() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.getAffixRef = function (ref) {
            _this.props.affixRef && _this.props.affixRef(ref);
        };
        return _this;
    }
    StickHeader.prototype.render = function () {
        var _a;
        var prefix = this.props.prefix;
        var _b = this.context,
            Header = _b.Header,
            offsetTop = _b.offsetTop,
            affixProps = _b.affixProps;
        var newAffixProps = affixProps || {};
        var className = newAffixProps.className,
            others = tslib_1.__rest(newAffixProps, ["className"]);
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "table-affix")] = true, _a.className = className, _a));
        return react_1.default.createElement(affix_1.default, tslib_1.__assign({ ref: this.getAffixRef }, others, { className: cls, offsetTop: offsetTop }), react_1.default.createElement(Header, tslib_1.__assign({}, this.props)));
    };
    StickHeader.propTypes = {
        prefix: prop_types_1.default.string
    };
    StickHeader.contextTypes = {
        Header: prop_types_1.default.any,
        offsetTop: prop_types_1.default.number,
        affixProps: prop_types_1.default.object
    };
    return StickHeader;
}(react_1.default.Component);
exports.default = StickHeader;

/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var time_picker_1 = __webpack_require__(440);
exports.default = config_provider_1.default.config(time_picker_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('defaultOpen' in props) {
            deprecated('defaultOpen', 'defaultVisible', 'TimePicker');
            var defaultOpen = props.defaultOpen,
                others = tslib_1.__rest(props, ["defaultOpen"]);
            props = tslib_1.__assign({ defaultVisible: defaultOpen }, others);
        }
        if ('open' in props) {
            deprecated('open', 'visible', 'TimePicker');
            var open_1 = props.open,
                others = tslib_1.__rest(props, ["open"]);
            props = tslib_1.__assign({ visible: open_1 }, others);
        }
        if ('onOpenChange' in props) {
            deprecated('onOpenChange', 'onVisibleChange', 'TimePicker');
            var onOpenChange = props.onOpenChange,
                others = tslib_1.__rest(props, ["onOpenChange"]);
            props = tslib_1.__assign({ onVisibleChange: onOpenChange }, others);
        }
        return props;
    }
});

/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var moment_1 = __webpack_require__(16);
var config_provider_1 = __webpack_require__(5);
var input_1 = __webpack_require__(15);
var icon_1 = __webpack_require__(7);
var overlay_1 = __webpack_require__(12);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var panel_1 = __webpack_require__(88);
var utils_1 = __webpack_require__(89);
var util_2 = __webpack_require__(25);
var Popup = overlay_1.default.Popup;
var noop = util_1.func.noop;
var timePickerLocale = zh_cn_1.default.TimePicker;
/**
 * TimePicker
 */
var TimePicker = /** @class */function (_super) {
    tslib_1.__extends(TimePicker, _super);
    function TimePicker(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.onClearValue = function () {
            _this.setState({
                value: null
            });
            if (_this.state.value) {
                _this.onValueChange(null);
            }
        };
        _this.onInputChange = function (inputValue, e, eventType) {
            if (!('value' in _this.props)) {
                if (eventType === 'clear' || !inputValue) {
                    e.stopPropagation();
                    _this.onClearValue();
                }
                _this.setState({
                    inputStr: inputValue,
                    inputing: true
                });
            } else if (eventType === 'clear') {
                // 受控状态下用户点击 clear
                e.stopPropagation();
                _this.onValueChange(null);
            }
        };
        _this.onInputBlur = function () {
            var inputStr = _this.state.inputStr;
            if (inputStr) {
                var format = _this.props.format;
                var parsed = (0, moment_1.default)(inputStr, format, true);
                if (parsed.isValid()) {
                    _this.setState({
                        value: parsed,
                        inputStr: ''
                    });
                    _this.onValueChange(parsed);
                }
                _this.setState({
                    inputing: false
                });
            }
        };
        _this.onKeyown = function (e) {
            var _a = _this.state,
                value = _a.value,
                inputStr = _a.inputStr;
            var _b = _this.props,
                format = _b.format,
                _c = _b.hourStep,
                hourStep = _c === void 0 ? 1 : _c,
                _d = _b.minuteStep,
                minuteStep = _d === void 0 ? 1 : _d,
                _e = _b.secondStep,
                secondStep = _e === void 0 ? 1 : _e,
                disabledMinutes = _b.disabledMinutes,
                disabledSeconds = _b.disabledSeconds;
            var unit = 'second';
            if (disabledSeconds) {
                unit = disabledMinutes ? 'hour' : 'minute';
            }
            var timeStr = (0, util_2.onTimeKeydown)(e, {
                format: format,
                timeInputStr: inputStr,
                steps: {
                    hour: hourStep,
                    minute: minuteStep,
                    second: secondStep
                },
                value: value
            }, unit);
            if (!timeStr) return;
            _this.onInputChange(timeStr);
        };
        _this.onTimePanelSelect = function (value) {
            if (!('value' in _this.props)) {
                _this.setState({
                    value: value,
                    inputing: false
                });
            }
            if (!_this.state.value || value.valueOf() !== _this.state.value.valueOf()) {
                _this.onValueChange(value);
            }
        };
        _this.onVisibleChange = function (visible, type) {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: visible
                });
            }
            _this.props.onVisibleChange(visible, type);
        };
        var value = (0, utils_1.formatDateValue)(props.value || props.defaultValue, props.format);
        _this.inputAsString = typeof (props.value || props.defaultValue) === 'string';
        _this.state = {
            value: value,
            inputStr: '',
            inputing: false,
            visible: props.visible || props.defaultVisible
        };
        return _this;
    }
    TimePicker.getDerivedStateFromProps = function (props) {
        var state = {};
        if ('value' in props) {
            state.value = (0, utils_1.formatDateValue)(props.value, props.format);
        }
        if ('visible' in props) {
            state.visible = props.visible;
        }
        return state;
    };
    TimePicker.prototype.onValueChange = function (newValue) {
        var ret = this.inputAsString && newValue ? newValue.format(this.props.format) : newValue;
        this.props.onChange(ret);
    };
    TimePicker.prototype.renderPreview = function (others) {
        var _a = this.props,
            prefix = _a.prefix,
            format = _a.format,
            className = _a.className,
            renderPreview = _a.renderPreview;
        var value = this.state.value;
        var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
        var label = value ? value.format(format) : '';
        if (typeof renderPreview === 'function') {
            return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: previewCls }), renderPreview(value, this.props));
        }
        return react_1.default.createElement("p", tslib_1.__assign({}, others, { className: previewCls }), label);
    };
    TimePicker.prototype.render = function () {
        var _a, _b;
        var _c = this.props,
            prefix = _c.prefix,
            label = _c.label,
            state = _c.state,
            placeholder = _c.placeholder,
            size = _c.size,
            format = _c.format,
            hasClear = _c.hasClear,
            hourStep = _c.hourStep,
            minuteStep = _c.minuteStep,
            secondStep = _c.secondStep,
            disabledHours = _c.disabledHours,
            disabledMinutes = _c.disabledMinutes,
            disabledSeconds = _c.disabledSeconds,
            renderTimeMenuItems = _c.renderTimeMenuItems,
            inputProps = _c.inputProps,
            popupAlign = _c.popupAlign,
            popupTriggerType = _c.popupTriggerType,
            popupContainer = _c.popupContainer,
            popupStyle = _c.popupStyle,
            popupClassName = _c.popupClassName,
            popupProps = _c.popupProps,
            popupComponent = _c.popupComponent,
            popupContent = _c.popupContent,
            followTrigger = _c.followTrigger,
            disabled = _c.disabled,
            className = _c.className,
            locale = _c.locale,
            rtl = _c.rtl,
            isPreview = _c.isPreview,
            others = tslib_1.__rest(_c, ["prefix", "label", "state", "placeholder", "size", "format", "hasClear", "hourStep", "minuteStep", "secondStep", "disabledHours", "disabledMinutes", "disabledSeconds", "renderTimeMenuItems", "inputProps", "popupAlign", "popupTriggerType", "popupContainer", "popupStyle", "popupClassName", "popupProps", "popupComponent", "popupContent", "followTrigger", "disabled", "className", "locale", "rtl", "isPreview"]);
        var _d = this.state,
            value = _d.value,
            inputStr = _d.inputStr,
            inputing = _d.inputing,
            visible = _d.visible;
        var triggerCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "time-picker-trigger")] = true, _a));
        if (rtl) {
            others.dir = 'rtl';
        }
        if (isPreview) {
            return this.renderPreview(util_1.obj.pickOthers(others, TimePicker.PropTypes));
        }
        var inputValue = inputing ? inputStr : value && value.format(format) || '';
        var sharedInputProps = tslib_1.__assign(tslib_1.__assign({}, inputProps), { size: size, disabled: disabled, value: inputValue, hasClear: value && hasClear, onChange: this.onInputChange, onBlur: this.onInputBlur, onPressEnter: this.onInputBlur, onKeyDown: this.onKeyown, hint: react_1.default.createElement(icon_1.default, { type: "clock", className: "".concat(prefix, "time-picker-symbol-clock-icon") }) });
        var triggerInput = react_1.default.createElement("div", { className: triggerCls }, react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedInputProps, { label: label, state: state, placeholder: placeholder || locale.placeholder, className: "".concat(prefix, "time-picker-input") })));
        var panelProps = {
            prefix: prefix,
            locale: locale,
            value: value,
            disabled: disabled,
            showHour: format.indexOf('H') > -1,
            showSecond: format.indexOf('s') > -1,
            showMinute: format.indexOf('m') > -1,
            hourStep: hourStep,
            minuteStep: minuteStep,
            secondStep: secondStep,
            disabledHours: disabledHours,
            disabledMinutes: disabledMinutes,
            disabledSeconds: disabledSeconds,
            renderTimeMenuItems: renderTimeMenuItems,
            onSelect: this.onTimePanelSelect
        };
        var classNames = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "time-picker")] = true, _b["".concat(prefix, "time-picker-").concat(size)] = size, _b["".concat(prefix, "disabled")] = disabled, _b), className);
        var PopupComponent = popupComponent ? popupComponent : Popup;
        return react_1.default.createElement("div", tslib_1.__assign({}, util_1.obj.pickOthers(TimePicker.propTypes, others), { className: classNames }), react_1.default.createElement(PopupComponent, tslib_1.__assign({ autoFocus: true, align: popupAlign }, popupProps, { followTrigger: followTrigger, visible: visible, onVisibleChange: this.onVisibleChange, trigger: triggerInput, container: popupContainer, disabled: disabled, triggerType: popupTriggerType, style: popupStyle, className: popupClassName }), popupContent ? popupContent : react_1.default.createElement("div", { dir: others.dir, className: "".concat(prefix, "time-picker-body") }, react_1.default.createElement("div", { className: "".concat(prefix, "time-picker-panel-header") }, react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedInputProps, { placeholder: format, className: "".concat(prefix, "time-picker-panel-input") }))), react_1.default.createElement(panel_1.default, tslib_1.__assign({}, panelProps)))));
    };
    TimePicker.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, rtl: prop_types_1.default.bool,
        /**
         * 按钮的文案
         */
        label: prop_types_1.default.node,
        /**
         * 输入框状态
         */
        state: prop_types_1.default.oneOf(['error', 'success']),
        /**
         * 输入框提示
         */
        placeholder: prop_types_1.default.string,
        /**
         * 时间值（moment 对象或时间字符串，受控状态使用）
         */
        value: utils_1.checkDateValue,
        /**
         * 时间初值（moment 对象或时间字符串，非受控状态使用）
         */
        defaultValue: utils_1.checkDateValue,
        /**
         * 时间选择框的尺寸
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        /**
         * 是否允许清空时间
         */
        hasClear: prop_types_1.default.bool,
        /**
         * 时间的格式
         * https://momentjs.com/docs/#/parsing/string-format/
         */
        format: prop_types_1.default.string,
        /**
         * 小时选项步长
         */
        hourStep: prop_types_1.default.number,
        /**
         * 分钟选项步长
         */
        minuteStep: prop_types_1.default.number,
        /**
         * 秒钟选项步长
         */
        secondStep: prop_types_1.default.number,
        /**
         * 禁用小时函数
         * @param {Number} index 时 0 - 23
         * @return {Boolean} 是否禁用
         */
        disabledHours: prop_types_1.default.func,
        /**
         * 禁用分钟函数
         * @param {Number} index 分 0 - 59
         * @return {Boolean} 是否禁用
         */
        disabledMinutes: prop_types_1.default.func,
        /**
         * 禁用秒钟函数
         * @param {Number} index 秒 0 - 59
         * @return {Boolean} 是否禁用
         */
        disabledSeconds: prop_types_1.default.func,
        /**
         * 渲染的可选择时间列表
         * [{
         *  label: '01',
         *  value: 1
         * }]
         * @param {Array} list 默认渲染的列表
         * @param {String} mode 渲染的菜单 hour, minute, second
         * @param {moment} value 当前时间，可能为 null
         * @return {Array} 返回需要渲染的数据
         */
        renderTimeMenuItems: prop_types_1.default.func,
        /**
         * 弹层是否显示（受控）
         */
        visible: prop_types_1.default.bool,
        /**
         * 弹层默认是否显示（非受控）
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 弹层容器
         * @param {Object} target 目标节点
         * @return {ReactNode} 容器节点
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 弹层对齐方式, 详情见Overlay 文档
         */
        popupAlign: prop_types_1.default.string,
        /**
         * 弹层触发方式
         */
        popupTriggerType: prop_types_1.default.oneOf(['click', 'hover']),
        /**
         * 弹层展示状态变化时的回调
         * @param {Boolean} visible 弹层是否隐藏和显示
         * @param {String} type 触发弹层显示和隐藏的来源 fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
         */
        onVisibleChange: prop_types_1.default.func,
        /**
         * 弹层自定义样式
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 弹层自定义样式类
         */
        popupClassName: prop_types_1.default.string,
        /**
         * 弹层属性
         */
        popupProps: prop_types_1.default.object,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {MomentObject|null} value 时间
         */
        renderPreview: prop_types_1.default.func,
        /**
         * 时间值改变时的回调
         * @param {Object|String} value 时间对象或时间字符串
         */
        onChange: prop_types_1.default.func, className: prop_types_1.default.string, name: prop_types_1.default.string, inputProps: prop_types_1.default.object, popupComponent: prop_types_1.default.elementType, popupContent: prop_types_1.default.node });
    TimePicker.defaultProps = {
        prefix: 'next-',
        rtl: false,
        locale: timePickerLocale,
        size: 'medium',
        format: 'HH:mm:ss',
        hasClear: true,
        disabled: false,
        popupAlign: 'tl tl',
        popupTriggerType: 'click',
        onChange: noop,
        onVisibleChange: noop
    };
    return TimePicker;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(TimePicker);

/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var config_provider_1 = __webpack_require__(5);
var timeline_1 = __webpack_require__(442);
var timeline_item_1 = __webpack_require__(443);
timeline_1.default.Item = config_provider_1.default.config(timeline_item_1.default, {});
exports.default = config_provider_1.default.config(timeline_1.default, {});

/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var util_1 = __webpack_require__(4);
var config_provider_1 = __webpack_require__(5);
var zh_cn_1 = __webpack_require__(9);
/** Timeline */
var Timeline = /** @class */function (_super) {
    tslib_1.__extends(Timeline, _super);
    function Timeline(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.state = {
            fold: props.fold
        };
        return _this;
    }
    Timeline.getDerivedStateFromProps = function (nextProps, prevState) {
        var innerUpdate = prevState.innerUpdate,
            fold = prevState.fold;
        if (innerUpdate) {
            return {
                fold: fold,
                innerUpdate: false
            };
        }
        if ('fold' in nextProps) {
            return {
                fold: nextProps.fold
            };
        }
        return null;
    };
    Timeline.prototype.toggleFold = function (folderIndex, total) {
        var fold = this.state.fold.map(function (item) {
            return tslib_1.__assign({}, item);
        });
        if (folderIndex) {
            for (var i = 0; i < fold.length; i++) {
                var _a = fold[i],
                    foldArea = _a.foldArea,
                    foldShow = _a.foldShow;
                if (foldArea[1] && folderIndex === foldArea[1] || !foldArea[1] && folderIndex === total - 1) {
                    fold[i].foldShow = !foldShow;
                }
            }
            this.setState({ fold: fold, innerUpdate: true });
        }
    };
    Timeline.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props,
            prefix = _b.prefix,
            rtl = _b.rtl,
            className = _b.className,
            children = _b.children,
            locale = _b.locale,
            animation = _b.animation,
            mode = _b.mode,
            others = tslib_1.__rest(_b, ["prefix", "rtl", "className", "children", "locale", "animation", "mode"]);
        var fold = this.state.fold;
        // 修改子节点属性
        var childrenCount = react_1.default.Children.count(children);
        var isAlternateMode = mode === 'alternate';
        var getPositionCls = function getPositionCls(idx) {
            if (isAlternateMode) {
                return idx % 2 === 0 ? "".concat(prefix, "timeline-item-left") : "".concat(prefix, "timeline-item-right");
            }
            return "".concat(prefix, "timeline-item-left");
        };
        var cloneChildren = react_1.Children.map(children, function (child, i) {
            var folderIndex = null;
            var foldNodeShow = false;
            fold.forEach(function (item) {
                var foldArea = item.foldArea,
                    foldShow = item.foldShow;
                if (foldArea[0] && i >= foldArea[0] && (i <= foldArea[1] || !foldArea[1])) {
                    folderIndex = foldArea[1] || childrenCount - 1;
                    foldNodeShow = foldShow;
                }
            });
            return react_1.default.cloneElement(child, {
                prefix: prefix,
                locale: locale,
                total: childrenCount,
                className: getPositionCls(i),
                index: i,
                folderIndex: folderIndex,
                foldShow: foldNodeShow,
                toggleFold: folderIndex === i ? _this.toggleFold.bind(_this, folderIndex, childrenCount) : function () {},
                animation: animation
            });
        });
        var timelineCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "timeline")] = true, _a["".concat(prefix, "alternate")] = isAlternateMode, _a), className);
        if (rtl) {
            others.dir = 'rtl';
        }
        return react_1.default.createElement("ul", tslib_1.__assign({}, util_1.obj.pickOthers(Timeline.propTypes, others), { className: timelineCls }), cloneChildren);
    };
    Timeline.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), {
        /**
         * 样式的品牌前缀
         */
        prefix: prop_types_1.default.string, rtl: prop_types_1.default.bool,
        /**
         * 自定义折叠选项 示例`[{foldArea: [startIndex, endIndex], foldShow: boolean}]`
         */
        fold: prop_types_1.default.array,
        /**
         * 自定义类名
         */
        className: prop_types_1.default.string, children: prop_types_1.default.any, locale: prop_types_1.default.object, animation: prop_types_1.default.bool,
        /**
         * 展示的模式
         * @enumdesc 左, 交错显示
         * @version 1.23.18
         */
        mode: prop_types_1.default.oneOf(['left', 'alternate']) });
    Timeline.defaultProps = {
        prefix: 'next-',
        rtl: false,
        fold: [],
        locale: zh_cn_1.default.Timeline,
        animation: true,
        mode: 'left'
    };
    return Timeline;
}(react_1.Component);
exports.default = config_provider_1.default.config((0, react_lifecycles_compat_1.polyfill)(Timeline));

/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var animate_1 = __webpack_require__(17);
var icon_1 = __webpack_require__(7);
var button_1 = __webpack_require__(14);
var util_1 = __webpack_require__(4);
var Expand = animate_1.default.Expand;
/** Timeline.Item */
var TimelineItem = /** @class */function (_super) {
    tslib_1.__extends(TimelineItem, _super);
    function TimelineItem() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.beforeEnter = function () {
            _this['timeline-item'].style['min-height'] = 'auto';
        };
        _this.beforeLeave = function () {
            _this['timeline-item'].style['min-height'] = '48px'; // timeleft 节点最小高度
        };
        return _this;
    }
    TimelineItem.prototype.toggleFold = function (folderIndex) {
        this.props.toggleFold(folderIndex);
    };
    TimelineItem.prototype.render = function () {
        var _a, _b, _c, _d;
        var _this = this;
        var _e = this.props,
            prefix = _e.prefix,
            className = _e.className,
            state = _e.state,
            icon = _e.icon,
            dot = _e.dot,
            time = _e.time,
            title = _e.title,
            timeLeft = _e.timeLeft,
            content = _e.content,
            index = _e.index,
            total = _e.total,
            folderIndex = _e.folderIndex,
            foldShow = _e.foldShow,
            locale = _e.locale,
            animation = _e.animation,
            others = tslib_1.__rest(_e, ["prefix", "className", "state", "icon", "dot", "time", "title", "timeLeft", "content", "index", "total", "folderIndex", "foldShow", "locale", "animation"]);
        var finalItemNode = dot ? dot : icon ? react_1.default.createElement("span", { className: "".concat(prefix, "timeline-item-icon") }, react_1.default.createElement(icon_1.default, { type: icon, size: "xs" })) : react_1.default.createElement("span", { className: "".concat(prefix, "timeline-item-dot") });
        var itemCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "timeline-item")] = true, _a["".concat(prefix, "timeline-item-first")] = index === 0, _a["".concat(prefix, "timeline-item-last")] = index === total - 1, _a["".concat(prefix, "timeline-item-").concat(state)] = state, _a["".concat(prefix, "timeline-item-folded")] = folderIndex, _a["".concat(prefix, "timeline-item-unfolded")] = foldShow, _a["".concat(prefix, "timeline-item-has-left-content")] = timeLeft, _a[className] = className, _a));
        var folderCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "timeline-item-folder")] = true, _b["".concat(prefix, "timeline-item-has-left-content")] = timeLeft, _b));
        var itemNodeCls = (0, classnames_1.default)((_c = {}, _c["".concat(prefix, "timeline-item-node")] = true, _c["".concat(prefix, "timeline-item-node-custom")] = dot, _c));
        var dotTailCls = (0, classnames_1.default)((_d = {}, _d["".concat(prefix, "timeline-item-dot-tail")] = true, _d["".concat(prefix, "timeline-item-dot-tail-solid")] = foldShow, _d["".concat(prefix, "timeline-hide")] = index === total - 1 && foldShow, _d));
        var renderTimeLineItemContent = function renderTimeLineItemContent(isLeft) {
            if (isLeft) return react_1.default.createElement("p", { className: "".concat(prefix, "timeline-item-body") }, timeLeft);
            return react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement("div", { className: "".concat(prefix, "timeline-item-title") }, title), react_1.default.createElement("div", { className: "".concat(prefix, "timeline-item-body") }, content), react_1.default.createElement("div", { className: "".concat(prefix, "timeline-item-time") }, time));
        };
        var buttonProps = {
            text: true,
            size: 'small',
            type: 'primary',
            onClick: this.toggleFold.bind(this, folderIndex, total)
        };
        var timelineNode = folderIndex && foldShow || !folderIndex ? react_1.default.createElement("div", tslib_1.__assign({}, util_1.obj.pickOthers(TimelineItem.propTypes, others), { className: itemCls, ref: function ref(e) {
                _this['timeline-item'] = e;
            } }), react_1.default.createElement("div", { className: "".concat(prefix, "timeline-item-left-content") }, renderTimeLineItemContent(className.includes("".concat(prefix, "timeline-item-left")))), react_1.default.createElement("div", { className: "".concat(prefix, "timeline-item-timeline") }, react_1.default.createElement("div", { className: "".concat(prefix, "timeline-item-tail") }, react_1.default.createElement("i", null)), react_1.default.createElement("div", { className: itemNodeCls }, finalItemNode)), react_1.default.createElement("div", { className: "".concat(prefix, "timeline-item-content") }, renderTimeLineItemContent(!className.includes("".concat(prefix, "timeline-item-left"))))) : null;
        return react_1.default.createElement("li", { tabIndex: "0" }, animation && folderIndex ? react_1.default.createElement(Expand, { animationAppear: false, beforeEnter: this.beforeEnter, beforeLeave: this.beforeEnter, afterEnter: this.beforeLeave }, timelineNode) : timelineNode, folderIndex === index ? react_1.default.createElement("div", { className: folderCls }, react_1.default.createElement("div", { className: dotTailCls }), foldShow ? react_1.default.createElement(button_1.default, tslib_1.__assign({}, buttonProps), locale.fold, react_1.default.createElement(icon_1.default, { type: "arrow-up" })) : react_1.default.createElement(button_1.default, tslib_1.__assign({}, buttonProps), locale.expand, react_1.default.createElement(icon_1.default, { type: "arrow-down" }))) : null);
    };
    TimelineItem.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, index: prop_types_1.default.number, total: prop_types_1.default.number, folderIndex: prop_types_1.default.number, foldShow: prop_types_1.default.bool,
        /**
         * 节点状态
         */
        state: prop_types_1.default.oneOf(['done', 'process', 'error', 'success']),
        /**
         * 图标
         */
        icon: prop_types_1.default.string,
        /**
         * 自定义时间轴节点
         */
        dot: prop_types_1.default.node,
        /**
         * 格式化后的时间
         */
        time: prop_types_1.default.node,
        /**
         * 标题
         */
        title: prop_types_1.default.node,
        /**
         * 左侧时间
         */
        timeLeft: prop_types_1.default.node,
        /**
         * 右侧内容
         */
        content: prop_types_1.default.node, toggleFold: prop_types_1.default.func, className: prop_types_1.default.string, locale: prop_types_1.default.object,
        /**
         * 动画
         */
        animation: prop_types_1.default.bool });
    TimelineItem.defaultProps = {
        prefix: 'next-',
        state: 'done',
        toggleFold: function toggleFold() {},
        animation: true
    };
    return TimelineItem;
}(react_1.Component);
exports.default = TimelineItem;

/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var transfer_1 = __webpack_require__(445);
exports.default = transfer_1.default;

/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var classnames_1 = __webpack_require__(3);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var icon_1 = __webpack_require__(7);
var button_1 = __webpack_require__(14);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var config_provider_1 = __webpack_require__(5);
var transfer_panel_1 = __webpack_require__(446);
var config = config_provider_1.default.config;
var bindCtx = util_1.func.bindCtx;
var pickOthers = util_1.obj.pickOthers;
var getLeftValue = function getLeftValue(dataSource, rightValue) {
    return dataSource.map(function (item) {
        return item.value;
    }).filter(function (itemValue) {
        return rightValue.indexOf(itemValue) === -1;
    });
};
var filterCheckedValue = function filterCheckedValue(left, right, dataSource) {
    var result = {
        left: [],
        right: []
    };
    if (left.length || right.length) {
        var value = dataSource.map(function (item) {
            return item.value;
        });
        value.forEach(function (itemValue) {
            if (left.indexOf(itemValue) > -1) {
                result.left.push(itemValue);
            } else if (right.indexOf(itemValue) > -1) {
                result.right.push(itemValue);
            }
        });
    }
    return result;
};
/**
 * Transfer
 */
var Transfer = /** @class */function (_super) {
    tslib_1.__extends(Transfer, _super);
    function Transfer(props, context) {
        var _this = _super.call(this, props, context) || this;
        var value = props.value,
            defaultValue = props.defaultValue,
            defaultLeftChecked = props.defaultLeftChecked,
            defaultRightChecked = props.defaultRightChecked,
            dataSource = props.dataSource,
            rtl = props.rtl,
            operations = props.operations;
        if (operations.length === 0) {
            operations.push(react_1.default.createElement(icon_1.default, { rtl: rtl, type: "arrow-right" }));
            operations.push(react_1.default.createElement(icon_1.default, { rtl: rtl, type: "arrow-left" }));
        }
        var _a = filterCheckedValue(Transfer.normalizeValue(defaultLeftChecked), Transfer.normalizeValue(defaultRightChecked), dataSource),
            left = _a.left,
            right = _a.right;
        var stValue = Transfer.normalizeValue('value' in props ? value : defaultValue);
        _this.state = {
            value: stValue,
            leftCheckedValue: left,
            rightCheckedValue: right,
            leftValue: getLeftValue(dataSource, stValue)
        };
        bindCtx(_this, ['handlePanelChange', 'handlePanelSort', 'handleMoveItem', 'handleSimpleMove', 'handleSimpleMoveAll']);
        return _this;
    }
    Transfer.normalizeValue = function (value) {
        if (value) {
            if (Array.isArray(value)) {
                return value;
            }
            /* istanbul ignore next */
            return [value];
        }
        return [];
    };
    Transfer.getDerivedStateFromProps = function (nextProps, prevState) {
        var innerUpdate = prevState.innerUpdate,
            value = prevState.value,
            leftValue = prevState.leftValue;
        if (innerUpdate) {
            return {
                innerUpdate: false,
                value: value,
                leftValue: leftValue
            };
        }
        var st = {};
        var newValue;
        if ('value' in nextProps) {
            var value_1 = Transfer.normalizeValue(nextProps.value);
            st.value = value_1;
            newValue = value_1;
        } else {
            /* istanbul ignore next */
            newValue = prevState.value;
        }
        st.leftValue = getLeftValue(nextProps.dataSource, newValue);
        var _a = filterCheckedValue(prevState.leftCheckedValue, prevState.rightCheckedValue, nextProps.dataSource),
            left = _a.left,
            right = _a.right;
        st.leftCheckedValue = left;
        st.rightCheckedValue = right;
        return st;
    };
    Transfer.prototype.groupDatasource = function (value, itemValues, dataSource) {
        return value.reduce(function (ret, itemValue) {
            var index = itemValues.indexOf(itemValue);
            if (index > -1) {
                ret.push(dataSource[index]);
            }
            return ret;
        }, []);
    };
    Transfer.prototype.handlePanelChange = function (position, value) {
        var _a;
        var _b = this.state,
            leftCheckedValue = _b.leftCheckedValue,
            rightCheckedValue = _b.rightCheckedValue;
        var onSelect = this.props.onSelect;
        var valuePropName = position === 'left' ? 'leftCheckedValue' : 'rightCheckedValue';
        // inner state changed
        this.setState((_a = {
            innerUpdate: true
        }, _a[valuePropName] = value, _a));
        onSelect && onSelect(position === 'left' ? value : leftCheckedValue, position === 'left' ? rightCheckedValue : value, position === 'left' ? 'source' : 'target');
    };
    Transfer.prototype.handlePanelSort = function (position, dragValue, referenceValue, dragGap) {
        var _this = this;
        var _a = this.state,
            value = _a.value,
            leftValue = _a.leftValue;
        var newValue = position === 'right' ? value : leftValue;
        var currentIndex = newValue.indexOf(dragValue);
        var referenceIndex = newValue.indexOf(referenceValue);
        var expectIndex = dragGap === 'before' ? referenceIndex : referenceIndex + 1;
        if (currentIndex === expectIndex) {
            return;
        }
        newValue.splice(currentIndex, 1);
        if (currentIndex < expectIndex) {
            expectIndex = expectIndex - 1;
        }
        newValue.splice(expectIndex, 0, dragValue);
        this.setState({
            innerUpdate: true,
            value: value,
            leftValue: leftValue
        }, function () {
            _this.props.onSort(newValue, position);
        });
    };
    Transfer.prototype.handleMoveItem = function (direction) {
        var _a;
        var rightValue;
        var newLeftValue;
        var movedValue;
        var valuePropName;
        var _b = this.state,
            value = _b.value,
            leftValue = _b.leftValue,
            leftCheckedValue = _b.leftCheckedValue,
            rightCheckedValue = _b.rightCheckedValue;
        if (direction === 'right') {
            rightValue = leftCheckedValue.concat(value);
            newLeftValue = leftValue.filter(function (itemValue) {
                return leftCheckedValue.indexOf(itemValue) === -1;
            });
            movedValue = leftCheckedValue;
            valuePropName = 'leftCheckedValue';
        } else {
            rightValue = value.filter(function (itemValue) {
                return rightCheckedValue.indexOf(itemValue) === -1;
            });
            newLeftValue = rightCheckedValue.concat(leftValue);
            movedValue = rightCheckedValue;
            valuePropName = 'rightCheckedValue';
        }
        var st = (_a = {}, _a[valuePropName] = [], _a);
        this.setValueState(st, rightValue, newLeftValue, movedValue, direction);
    };
    Transfer.prototype.handleSimpleMove = function (direction, v) {
        var rightValue;
        var newLeftValue;
        var _a = this.state,
            value = _a.value,
            leftValue = _a.leftValue;
        if (direction === 'right') {
            rightValue = [v].concat(value);
            newLeftValue = leftValue.filter(function (itemValue) {
                return itemValue !== v;
            });
        } else {
            rightValue = value.filter(function (itemValue) {
                return itemValue !== v;
            });
            newLeftValue = [v].concat(leftValue);
        }
        this.setValueState({}, rightValue, newLeftValue, [v], direction);
    };
    Transfer.prototype.handleSimpleMoveAll = function (direction) {
        var rightValue;
        var newLeftValue;
        var movedValue;
        var dataSource = this.props.dataSource;
        var _a = this.state,
            value = _a.value,
            leftValue = _a.leftValue;
        var disabledValue = dataSource.reduce(function (ret, item) {
            if (item.disabled) {
                ret.push(item.value);
            }
            return ret;
        }, []);
        if (direction === 'right') {
            movedValue = leftValue.filter(function (itemValue) {
                return disabledValue.indexOf(itemValue) === -1;
            });
            rightValue = movedValue.concat(value);
            newLeftValue = leftValue.filter(function (itemValue) {
                return disabledValue.indexOf(itemValue) > -1;
            });
        } else {
            movedValue = value.filter(function (itemValue) {
                return disabledValue.indexOf(itemValue) === -1;
            });
            rightValue = value.filter(function (itemValue) {
                return disabledValue.indexOf(itemValue) > -1;
            });
            newLeftValue = movedValue.concat(leftValue);
        }
        this.setValueState({}, rightValue, newLeftValue, movedValue, direction);
    };
    // eslint-disable-next-line max-params
    Transfer.prototype.setValueState = function (st, rightValue, leftValue, movedValue, direction) {
        var _this = this;
        var dataSource = this.props.dataSource;
        var callback = function callback() {
            if ('onChange' in _this.props) {
                var itemValues = dataSource.map(function (item) {
                    return item.value;
                });
                var rightData = _this.groupDatasource(rightValue, itemValues, dataSource);
                var leftData = _this.groupDatasource(leftValue, itemValues, dataSource);
                var movedData = _this.groupDatasource(movedValue, itemValues, dataSource);
                _this.props.onChange(rightValue, rightData, {
                    leftValue: leftValue,
                    leftData: leftData,
                    movedValue: movedValue,
                    movedData: movedData,
                    direction: direction
                });
            }
        };
        if (!('value' in this.props)) {
            st.value = rightValue;
            st.leftValue = leftValue;
        }
        if (Object.keys(st).length) {
            this.setState(st, callback);
        } else {
            // eslint-disable-next-line callback-return
            callback();
        }
    };
    Transfer.prototype.renderCenter = function () {
        var _a = this.props,
            prefix = _a.prefix,
            mode = _a.mode,
            operations = _a.operations,
            disabled = _a.disabled,
            leftDisabled = _a.leftDisabled,
            rightDisabled = _a.rightDisabled,
            locale = _a.locale;
        var _b = this.state,
            leftCheckedValue = _b.leftCheckedValue,
            rightCheckedValue = _b.rightCheckedValue;
        return react_1.default.createElement("div", { className: "".concat(prefix, "transfer-operations") }, mode === 'simple' ? react_1.default.createElement(icon_1.default, { className: "".concat(prefix, "transfer-move"), size: "large", type: "switch" }) : [react_1.default.createElement(button_1.default, { "aria-label": locale.moveToRight, key: "l2r", className: "".concat(prefix, "transfer-operation"), type: leftCheckedValue.length ? 'primary' : 'normal', disabled: leftDisabled || disabled || !leftCheckedValue.length, onClick: this.handleMoveItem.bind(this, 'right') }, operations[0]), react_1.default.createElement(button_1.default, { "aria-label": locale.moveToLeft, key: "r2l", className: "".concat(prefix, "transfer-operation"), type: rightCheckedValue.length ? 'primary' : 'normal', disabled: rightDisabled || disabled || !rightCheckedValue.length, onClick: this.handleMoveItem.bind(this, 'left') }, operations[1])]);
    };
    Transfer.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            mode = _a.mode,
            disabled = _a.disabled,
            className = _a.className,
            dataSource = _a.dataSource,
            locale = _a.locale,
            _b = _a.showSearch,
            showSearch = _b === void 0 ? false : _b,
            _c = _a.searchProps,
            searchProps = _c === void 0 ? {} : _c,
            filter = _a.filter,
            onSearch = _a.onSearch,
            leftDisabled = _a.leftDisabled,
            rightDisabled = _a.rightDisabled,
            searchPlaceholder = _a.searchPlaceholder,
            notFoundContent = _a.notFoundContent,
            titles = _a.titles,
            listClassName = _a.listClassName,
            listStyle = _a.listStyle,
            itemRender = _a.itemRender,
            sortable = _a.sortable,
            useVirtual = _a.useVirtual,
            rtl = _a.rtl,
            id = _a.id,
            children = _a.children,
            showCheckAll = _a.showCheckAll;
        var _d = this.state,
            value = _d.value,
            leftValue = _d.leftValue,
            leftCheckedValue = _d.leftCheckedValue,
            rightCheckedValue = _d.rightCheckedValue;
        var itemValues = dataSource.map(function (item) {
            return item.value;
        });
        var leftDatasource = this.groupDatasource(leftValue, itemValues, dataSource);
        var rightDatasource = this.groupDatasource(value, itemValues, dataSource);
        var panelProps = {
            prefix: prefix,
            mode: mode,
            locale: locale,
            filter: filter,
            onSearch: onSearch,
            searchPlaceholder: searchPlaceholder,
            listClassName: listClassName,
            listStyle: listStyle,
            itemRender: itemRender,
            onMove: this.handleSimpleMove,
            onMoveAll: this.handleSimpleMoveAll,
            onChange: this.handlePanelChange,
            sortable: sortable,
            useVirtual: useVirtual,
            onSort: this.handlePanelSort,
            baseId: id,
            customerList: children,
            showCheckAll: showCheckAll
        };
        var others = pickOthers(Object.keys(Transfer.propTypes), this.props);
        if (rtl) {
            others.dir = 'rtl';
        }
        var _showSearch = Array.isArray(showSearch) ? showSearch : [showSearch, showSearch];
        var _searchProps = Array.isArray(searchProps) ? searchProps : [searchProps, searchProps];
        var _notFoundContent = Array.isArray(notFoundContent) ? notFoundContent : [notFoundContent, notFoundContent];
        return react_1.default.createElement("div", tslib_1.__assign({ className: (0, classnames_1.default)("".concat(prefix, "transfer"), className), id: id }, others), react_1.default.createElement(transfer_panel_1.default, tslib_1.__assign({}, panelProps, { position: "left", dataSource: leftDatasource, disabled: leftDisabled || disabled, value: leftCheckedValue, showSearch: _showSearch[0], searchProps: _searchProps[0], notFoundContent: _notFoundContent[0], title: titles[0] })), this.renderCenter(), react_1.default.createElement(transfer_panel_1.default, tslib_1.__assign({}, panelProps, { position: "right", dataSource: rightDatasource, disabled: rightDisabled || disabled, value: rightCheckedValue, showSearch: _showSearch[1], searchProps: _searchProps[1], notFoundContent: _notFoundContent[1], title: titles[1] })));
    };
    Transfer.contextTypes = {
        prefix: prop_types_1.default.string
    };
    Transfer.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, pure: prop_types_1.default.bool, rtl: prop_types_1.default.bool, className: prop_types_1.default.string,
        /**
         * 移动选项模式
         */
        mode: prop_types_1.default.oneOf(['normal', 'simple']),
        /**
         * 数据源
         */
        dataSource: prop_types_1.default.arrayOf(prop_types_1.default.object),
        /**
         * （用于受控）当前值
         */
        value: prop_types_1.default.arrayOf(prop_types_1.default.string),
        /**
         * （用于非受控）初始值
         */
        defaultValue: prop_types_1.default.arrayOf(prop_types_1.default.string),
        /**
         * 值发生改变的时候触发的回调函数
         * @param {Array} value 右面板值
         * @param {Array} data 右面板数据
         * @param {Object} extra 额外参数
         * @param {Array} extra.leftValue 左面板值
         * @param {Array} extra.leftData 左面板数据
         * @param {Array} extra.movedValue 发生移动的值
         * @param {Object} extra.movedData 发生移动的数据
         * @param {String} extra.direction 移动的方向，值为'left'或'right'
         */
        onChange: prop_types_1.default.func,
        /**
         * Item 被选中的时候触发的回调函数
         * @param {Array} sourceSelectedValue 源面板选中的 Item 列表
         * @param {Array} targetSelectedValue 目标面板选中的 Item 列表
         * @param {String} trigger 触发面板，值为'source'或'target'
         */
        onSelect: prop_types_1.default.func,
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 是否禁用左侧面板
         */
        leftDisabled: prop_types_1.default.bool,
        /**
         * 是否禁用右侧面板
         */
        rightDisabled: prop_types_1.default.bool,
        /**
         * 列表项渲染函数
         * @param {Object} data 数据
         * @return {ReactNode} 列表项内容
         */
        itemRender: prop_types_1.default.func,
        /**
         * 自定义搜索函数
         * @param {String} searchedValue 搜索的内容
         * @param {Object} data 数据
         * @return {Boolean} 是否匹配到
         * @default 根据 label 属性匹配
         */
        filter: prop_types_1.default.func,
        /**
         * 搜索框输入时触发的回调函数
         * @param {String} searchedValue 搜索的内容
         * @param {String} position 搜索面板的位置
         */
        onSearch: prop_types_1.default.func,
        /**
         * 搜索框占位符
         */
        searchPlaceholder: prop_types_1.default.string,
        /**
         * 左右面板是否显示搜索框
         */
        showSearch: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.arrayOf(prop_types_1.default.bool)]),
        /**
         * 左右面板搜索框配置项，同 Search 组件 props
         */
        searchProps: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.arrayOf(prop_types_1.default.object)]),
        /**
         * 列表为空显示内容
         */
        notFoundContent: prop_types_1.default.oneOfType([prop_types_1.default.node, prop_types_1.default.arrayOf(prop_types_1.default.node)]),
        /**
         * 左右面板标题
         */
        titles: prop_types_1.default.arrayOf(prop_types_1.default.node),
        /**
         * 向右向左移动按钮显示内容
         * @default [<Icon type="arrow-right" />, <Icon type="arrow-left" />]
         */
        operations: prop_types_1.default.arrayOf(prop_types_1.default.node),
        /**
         * 左面板默认选中值
         */
        defaultLeftChecked: prop_types_1.default.arrayOf(prop_types_1.default.string),
        /**
         * 右面板默认选中值
         */
        defaultRightChecked: prop_types_1.default.arrayOf(prop_types_1.default.string),
        /**
         * 左右面板列表自定义样式类名
         */
        listClassName: prop_types_1.default.string,
        /**
         * 左右面板列表自定义样式对象
         */
        listStyle: prop_types_1.default.object,
        /**
         * 是否允许拖拽排序
         */
        sortable: prop_types_1.default.bool,
        /**
         * 拖拽排序时触发的回调函数
         * @param {Array} value 排序后的值
         * @param {String} position 拖拽的面板位置，值为：left 或 right
         */
        onSort: prop_types_1.default.func,
        /**
         * 自定义国际化文案对象
         */
        locale: prop_types_1.default.object,
        /**
         * 请设置 id 以保证transfer的可访问性
         */
        id: prop_types_1.default.string,
        /**
         * 接收 children 自定义渲染列表
         */
        children: prop_types_1.default.func,
        /**
         * 是否开启虚拟滚动
         */
        useVirtual: prop_types_1.default.bool,
        /**
         * 是否显示底部全选 checkbox
         */
        showCheckAll: prop_types_1.default.bool });
    Transfer.defaultProps = {
        prefix: 'next-',
        pure: false,
        mode: 'normal',
        dataSource: [],
        defaultValue: [],
        disabled: false,
        leftDisabled: false,
        rightDisabled: false,
        showCheckAll: true,
        itemRender: function itemRender(data) {
            return data.label;
        },
        showSearch: false,
        filter: function filter(searchedValue, data) {
            var labelString = '';
            var loop = function loop(arg) {
                if (react_1.default.isValidElement(arg) && arg.props.children) {
                    react_1.default.Children.forEach(arg.props.children, loop);
                } else if (typeof arg === 'string') {
                    labelString += arg;
                }
            };
            loop(data.label);
            return labelString.length >= searchedValue.length && labelString.indexOf(searchedValue) > -1;
        },
        onSearch: function onSearch() {},
        notFoundContent: 'Not Found',
        titles: [],
        operations: [],
        defaultLeftChecked: [],
        defaultRightChecked: [],
        sortable: false,
        onSort: function onSort() {},
        locale: zh_cn_1.default.Transfer
    };
    return Transfer;
}(react_1.Component);
exports.default = config((0, react_lifecycles_compat_1.polyfill)(Transfer));

/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var checkbox_1 = __webpack_require__(44);
var search_1 = __webpack_require__(178);
var menu_1 = __webpack_require__(13);
var util_1 = __webpack_require__(4);
var transfer_item_1 = __webpack_require__(447);
var virtual_list_1 = __webpack_require__(46);
var bindCtx = util_1.func.bindCtx;
var TransferPanel = /** @class */function (_super) {
    tslib_1.__extends(TransferPanel, _super);
    function TransferPanel(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.state = {
            searchedValue: '',
            dragValue: null,
            dragOverValue: null
        };
        _this.footerId = props.baseId ? util_1.htmlId.escapeForId("".concat(props.baseId, "-panel-footer-").concat(props.position)) : '';
        _this.headerId = props.baseId ? util_1.htmlId.escapeForId("".concat(props.baseId, "-panel-header-").concat(props.position)) : '';
        bindCtx(_this, ['handleCheck', 'handleAllCheck', 'handleSearch', 'handleItemDragStart', 'handleItemDragOver', 'handleItemDragEnd', 'handleItemDrop', 'getListDOM']);
        _this.firstRender = true;
        return _this;
    }
    TransferPanel.prototype.componentDidMount = function () {
        this.firstRender = false;
    };
    TransferPanel.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.dataSource.length !== this.props.dataSource.length && this.list) {
            if (this.list.scrollTop > 0) {
                this.list.scrollTop = 0;
            }
        }
        this.searched = false;
    };
    TransferPanel.prototype.getListDOM = function (ref) {
        this.list = ref;
    };
    TransferPanel.prototype.getListData = function (dataSource, disableHighlight) {
        var _this = this;
        var _a = this.props,
            prefix = _a.prefix,
            position = _a.position,
            mode = _a.mode,
            value = _a.value,
            onMove = _a.onMove,
            disabled = _a.disabled,
            itemRender = _a.itemRender,
            sortable = _a.sortable;
        var _b = this.state,
            dragPosition = _b.dragPosition,
            dragValue = _b.dragValue,
            dragOverValue = _b.dragOverValue;
        return dataSource.map(function (item) {
            var others = 'title' in item ? {
                title: item.title
            } : {};
            return react_1.default.createElement(transfer_item_1.default, tslib_1.__assign({ key: item.value, prefix: prefix, mode: mode, checked: value.indexOf(item.value) > -1, disabled: disabled || item.disabled, item: item, onCheck: _this.handleCheck, onClick: onMove, needHighlight: !_this.firstRender && !_this.searched && !disableHighlight, itemRender: itemRender, draggable: sortable, onDragStart: _this.handleItemDragStart, onDragOver: _this.handleItemDragOver, onDragEnd: _this.handleItemDragEnd, onDrop: _this.handleItemDrop, dragPosition: dragPosition, dragValue: dragValue, dragOverValue: dragOverValue, panelPosition: position }, others));
        });
    };
    TransferPanel.prototype.handleAllCheck = function (allChecked) {
        var _a = this.props,
            position = _a.position,
            onChange = _a.onChange,
            filter = _a.filter;
        var searchedValue = this.state.searchedValue;
        var newValue;
        if (allChecked) {
            if (searchedValue) {
                newValue = this.enabledDatasource.filter(function (item) {
                    return filter(searchedValue, item);
                }).map(function (item) {
                    return item.value;
                });
            } else {
                newValue = this.enabledDatasource.map(function (item) {
                    return item.value;
                });
            }
        } else {
            newValue = [];
        }
        onChange && onChange(position, newValue);
    };
    TransferPanel.prototype.handleCheck = function (itemValue, checked) {
        var _a = this.props,
            position = _a.position,
            value = _a.value,
            onChange = _a.onChange;
        var newValue = tslib_1.__spreadArray([], tslib_1.__read(value), false);
        var index = value.indexOf(itemValue);
        if (checked && index === -1) {
            newValue.push(itemValue);
        } else if (!checked && index > -1) {
            newValue.splice(index, 1);
        }
        onChange && onChange(position, newValue);
    };
    TransferPanel.prototype.handleSearch = function (searchedValue) {
        this.setState({
            searchedValue: searchedValue
        });
        this.searched = true;
        var _a = this.props,
            onSearch = _a.onSearch,
            position = _a.position;
        onSearch(searchedValue, position);
    };
    TransferPanel.prototype.handleItemDragStart = function (position, value) {
        this.setState({
            dragPosition: position,
            dragValue: value
        });
    };
    TransferPanel.prototype.handleItemDragOver = function (value) {
        this.setState({
            dragOverValue: value
        });
    };
    TransferPanel.prototype.handleItemDragEnd = function () {
        this.setState({
            dragOverValue: null
        });
    };
    TransferPanel.prototype.handleItemDrop = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.setState({
            dragOverValue: null
        });
        (_a = this.props).onSort.apply(_a, tslib_1.__spreadArray([], tslib_1.__read(args), false));
    };
    TransferPanel.prototype.renderHeader = function () {
        var _a = this.props,
            title = _a.title,
            prefix = _a.prefix;
        return react_1.default.createElement("div", { id: this.headerId, className: "".concat(prefix, "transfer-panel-header") }, title);
    };
    TransferPanel.prototype.renderSearch = function () {
        var _a = this.props,
            prefix = _a.prefix,
            searchPlaceholder = _a.searchPlaceholder,
            locale = _a.locale,
            _b = _a.searchProps,
            searchProps = _b === void 0 ? {} : _b;
        return react_1.default.createElement(search_1.default, tslib_1.__assign({ "aria-labelledby": this.headerId, shape: "simple" }, searchProps, { className: "".concat(prefix, "transfer-panel-search"), placeholder: searchPlaceholder || locale.searchPlaceholder, onChange: this.handleSearch }));
    };
    TransferPanel.prototype.renderList = function (dataSource) {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            listClassName = _b.listClassName,
            listStyle = _b.listStyle,
            customerList = _b.customerList,
            useVirtual = _b.useVirtual;
        var newClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "transfer-panel-list")] = true, _a[listClassName] = !!listClassName, _a));
        var customerPanel = customerList && customerList(this.props);
        if (customerPanel) {
            return react_1.default.createElement("div", { className: newClassName, style: listStyle, ref: this.getListDOM }, customerPanel);
        }
        if (!dataSource.length) {
            return react_1.default.createElement("div", { className: newClassName, style: listStyle }, this.renderNotFoundContent());
        }
        if (useVirtual) {
            return react_1.default.createElement("div", { className: newClassName, style: tslib_1.__assign({ position: 'relative' }, listStyle) }, react_1.default.createElement(virtual_list_1.default, { itemsRenderer: function itemsRenderer(items, ref) {
                    return react_1.default.createElement(menu_1.default, { style: { border: 'none' }, ref: ref }, items);
                } }, this.getListData(dataSource, true)));
        }
        return react_1.default.createElement(menu_1.default, { className: newClassName, style: listStyle, ref: this.getListDOM }, this.getListData(dataSource));
    };
    TransferPanel.prototype.renderNotFoundContent = function () {
        var _a = this.props,
            prefix = _a.prefix,
            notFoundContent = _a.notFoundContent;
        return react_1.default.createElement("div", { className: "".concat(prefix, "transfer-panel-not-found-container") }, react_1.default.createElement("div", { className: "".concat(prefix, "transfer-panel-not-found") }, notFoundContent));
    };
    TransferPanel.prototype.renderFooter = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            position = _b.position,
            mode = _b.mode,
            disabled = _b.disabled,
            locale = _b.locale,
            showCheckAll = _b.showCheckAll;
        if (mode === 'simple') {
            var onMoveAll = this.props.onMoveAll;
            var classNames = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "transfer-panel-move-all")] = true, _a["".concat(prefix, "disabled")] = disabled, _a));
            return react_1.default.createElement("div", { className: "".concat(prefix, "transfer-panel-footer") }, react_1.default.createElement("a", { className: classNames, onClick: onMoveAll.bind(this, position === 'left' ? 'right' : 'left') }, locale.moveAll));
        }
        var _c = this.props,
            value = _c.value,
            showSearch = _c.showSearch,
            filter = _c.filter,
            dataSource = _c.dataSource;
        var searchedValue = this.state.searchedValue;
        var totalCount = dataSource.length;
        var _dataSource = dataSource;
        var checkedCount = value.length;
        var _checkedCount = checkedCount;
        if (showSearch && searchedValue) {
            _dataSource = dataSource.filter(function (item) {
                return filter(searchedValue, item);
            });
            totalCount = _dataSource.length;
            _checkedCount = _dataSource.filter(function (item) {
                return value.includes(item.value);
            }).length;
        }
        var totalEnabledCount = Math.min(totalCount, this.enabledDatasource.length);
        var checked = checkedCount > 0 && checkedCount >= totalEnabledCount;
        var indeterminate = checkedCount > 0 && _checkedCount >= 0 && _checkedCount < totalEnabledCount;
        var items = totalCount > 1 ? locale.items : locale.item;
        var countLabel = checkedCount === 0 ? "".concat(totalCount, " ").concat(items) : "".concat(checkedCount, "/").concat(totalCount, " ").concat(items);
        return react_1.default.createElement("div", { className: "".concat(prefix, "transfer-panel-footer") }, showCheckAll && react_1.default.createElement(checkbox_1.default, { disabled: disabled, checked: checked, indeterminate: indeterminate, onChange: this.handleAllCheck, "aria-labelledby": this.footerId }), react_1.default.createElement("span", { className: "".concat(prefix, "transfer-panel-count"), id: this.footerId }, countLabel));
    };
    TransferPanel.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            title = _a.title,
            showSearch = _a.showSearch,
            filter = _a.filter,
            dataSource = _a.dataSource;
        var searchedValue = this.state.searchedValue;
        var _dataSource = this.props.dataSource;
        this.enabledDatasource = dataSource.filter(function (item) {
            return !item.disabled;
        });
        if (showSearch && searchedValue) {
            _dataSource = dataSource.filter(function (item) {
                return filter(searchedValue, item);
            });
        }
        return react_1.default.createElement("div", { className: "".concat(prefix, "transfer-panel") }, title ? this.renderHeader() : null, showSearch ? this.renderSearch() : null, this.renderList(_dataSource), this.renderFooter());
    };
    TransferPanel.propTypes = {
        prefix: prop_types_1.default.string,
        position: prop_types_1.default.oneOf(['left', 'right']),
        mode: prop_types_1.default.oneOf(['normal', 'simple']),
        dataSource: prop_types_1.default.array,
        value: prop_types_1.default.array,
        onChange: prop_types_1.default.func,
        onMove: prop_types_1.default.func,
        onMoveAll: prop_types_1.default.func,
        disabled: prop_types_1.default.bool,
        locale: prop_types_1.default.object,
        title: prop_types_1.default.node,
        showSearch: prop_types_1.default.bool,
        searchProps: prop_types_1.default.object,
        filter: prop_types_1.default.func,
        onSearch: prop_types_1.default.func,
        searchPlaceholder: prop_types_1.default.string,
        notFoundContent: prop_types_1.default.node,
        listClassName: prop_types_1.default.string,
        listStyle: prop_types_1.default.object,
        itemRender: prop_types_1.default.func,
        sortable: prop_types_1.default.bool,
        onSort: prop_types_1.default.func,
        baseId: prop_types_1.default.string,
        customerList: prop_types_1.default.func,
        useVirtual: prop_types_1.default.bool,
        showCheckAll: prop_types_1.default.bool
    };
    return TransferPanel;
}(react_1.Component);
exports.default = TransferPanel;

/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var menu_1 = __webpack_require__(13);
var util_1 = __webpack_require__(4);
var Item = menu_1.default.Item,
    CheckboxItem = menu_1.default.CheckboxItem;
var bindCtx = util_1.func.bindCtx;
var pickOthers = util_1.obj.pickOthers;
var getOffset = util_1.dom.getOffset;
var TransferItem = /** @class */function (_super) {
    tslib_1.__extends(TransferItem, _super);
    function TransferItem(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            highlight: false
        };
        bindCtx(_this, ['getItemDOM', 'handleClick', 'handleDragStart', 'handleDragOver', 'handleDragEnd', 'handleDrop']);
        return _this;
    }
    TransferItem.prototype.componentDidMount = function () {
        var _this = this;
        if (this.props.needHighlight) {
            this.addHighlightTimer = setTimeout(function () {
                _this.setState({
                    highlight: true
                });
            }, 1);
            this.removeHighlightTimer = setTimeout(function () {
                _this.setState({
                    highlight: false
                });
            }, 201);
        }
    };
    TransferItem.prototype.componentWillUnmount = function () {
        clearTimeout(this.addHighlightTimer);
        clearTimeout(this.removeHighlightTimer);
    };
    TransferItem.prototype.getItemDOM = function (ref) {
        this.item = ref;
    };
    TransferItem.prototype.handleClick = function () {
        var _a = this.props,
            onClick = _a.onClick,
            panelPosition = _a.panelPosition,
            item = _a.item;
        onClick(panelPosition === 'left' ? 'right' : 'left', item.value);
    };
    TransferItem.prototype.handleDragStart = function (ev) {
        ev && ev.dataTransfer && typeof ev.dataTransfer.setData === 'function' && ev.dataTransfer.setData('text/plain', ev.target.id);
        var _a = this.props,
            onDragStart = _a.onDragStart,
            panelPosition = _a.panelPosition,
            item = _a.item;
        onDragStart(panelPosition, item.value);
    };
    TransferItem.prototype.getDragGap = function (e) {
        var referenceTop = getOffset(e.currentTarget).top;
        var referenceHeight = e.currentTarget.offsetHeight;
        return e.pageY <= referenceTop + referenceHeight / 2 ? 'before' : 'after';
    };
    TransferItem.prototype.handleDragOver = function (e) {
        var _a = this.props,
            panelPosition = _a.panelPosition,
            dragPosition = _a.dragPosition,
            onDragOver = _a.onDragOver,
            item = _a.item;
        if (panelPosition === dragPosition) {
            e.preventDefault();
            var dragGap = this.getDragGap(e);
            if (this.dragGap !== dragGap) {
                this.dragGap = dragGap;
                onDragOver(item.value);
            }
        }
    };
    TransferItem.prototype.handleDragEnd = function () {
        var onDragEnd = this.props.onDragEnd;
        onDragEnd();
    };
    TransferItem.prototype.handleDrop = function (e) {
        e.preventDefault();
        var _a = this.props,
            onDrop = _a.onDrop,
            item = _a.item,
            panelPosition = _a.panelPosition,
            dragValue = _a.dragValue;
        onDrop(panelPosition, dragValue, item.value, this.dragGap);
    };
    TransferItem.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            mode = _b.mode,
            checked = _b.checked,
            disabled = _b.disabled,
            item = _b.item,
            onCheck = _b.onCheck,
            itemRender = _b.itemRender,
            draggable = _b.draggable,
            dragOverValue = _b.dragOverValue,
            panelPosition = _b.panelPosition,
            dragPosition = _b.dragPosition;
        var others = pickOthers(Object.keys(TransferItem.propTypes), this.props);
        var highlight = this.state.highlight;
        var isSimple = mode === 'simple';
        var classNames = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "transfer-panel-item")] = true, _a["".concat(prefix, "insert-").concat(this.dragGap)] = dragOverValue === item.value && panelPosition === dragPosition, _a["".concat(prefix, "focused")] = highlight, _a["".concat(prefix, "simple")] = isSimple, _a));
        var children = itemRender(item);
        var itemProps = tslib_1.__assign({ ref: this.getItemDOM, className: classNames, children: children, disabled: disabled, draggable: draggable && !disabled, onDragStart: this.handleDragStart, onDragOver: this.handleDragOver, onDragEnd: this.handleDragEnd, onDrop: this.handleDrop }, others);
        var title;
        if (typeof children === 'string') {
            title = children;
        }
        if (isSimple) {
            if (!itemProps.disabled) {
                itemProps.onClick = this.handleClick;
            }
            return react_1.default.createElement(Item, tslib_1.__assign({ title: title }, itemProps));
        }
        return react_1.default.createElement(CheckboxItem, tslib_1.__assign({ checked: checked, onChange: onCheck.bind(this, item.value), title: title }, itemProps));
    };
    TransferItem.menuChildType = CheckboxItem.menuChildType;
    TransferItem.propTypes = {
        prefix: prop_types_1.default.string,
        mode: prop_types_1.default.oneOf(['normal', 'simple']),
        value: prop_types_1.default.array,
        disabled: prop_types_1.default.bool,
        item: prop_types_1.default.object,
        onCheck: prop_types_1.default.func,
        onClick: prop_types_1.default.func,
        needHighlight: prop_types_1.default.bool,
        itemRender: prop_types_1.default.func,
        draggable: prop_types_1.default.bool,
        onDragStart: prop_types_1.default.func,
        onDragOver: prop_types_1.default.func,
        onDragEnd: prop_types_1.default.func,
        onDrop: prop_types_1.default.func,
        dragPosition: prop_types_1.default.oneOf(['left', 'right']),
        dragValue: prop_types_1.default.string,
        dragOverValue: prop_types_1.default.string,
        panelPosition: prop_types_1.default.oneOf(['left', 'right'])
    };
    return TransferItem;
}(react_1.Component);
exports.default = TransferItem;

/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.treeNodeProps = void 0;
var tslib_1 = __webpack_require__(0);
/* eslint-disable max-depth */
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var lodash_clonedeep_1 = __webpack_require__(163);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var util_1 = __webpack_require__(4);
var tree_node_1 = __webpack_require__(103);
var virtual_list_1 = __webpack_require__(46);
var util_2 = __webpack_require__(192);
var bindCtx = util_1.func.bindCtx,
    noop = util_1.func.noop;
var getOffset = util_1.dom.getOffset;
var pickOthers = util_1.obj.pickOthers,
    pickProps = util_1.obj.pickProps,
    isPlainObject = util_1.obj.isPlainObject;
exports.treeNodeProps = ['key', 'label', 'selectable', 'checkable', 'editable', 'draggable', 'disabled', 'checkboxDisabled', 'isLeaf', 'icon'];
var getExpandedKeys = function getExpandedKeys(props, willReceiveProps, _k2n, _p2n) {
    var expandedKeys;
    if (!willReceiveProps && props.defaultExpandAll) {
        expandedKeys = Object.keys(_k2n).filter(function (key) {
            var children = _k2n[key].children;
            return children && children.length;
        });
    } else {
        expandedKeys = 'expandedKeys' in props ? props.expandedKeys : willReceiveProps ? [] : props.defaultExpandedKeys;
        expandedKeys = (0, util_2.normalizeToArray)(expandedKeys);
        if (props.autoExpandParent) {
            var newExpandedKeys_1 = [];
            var expandedPoss = expandedKeys.reduce(function (ret, key) {
                var pos = _k2n[key] && _k2n[key].pos;
                if (pos) {
                    ret.push(pos);
                    newExpandedKeys_1.push(key);
                }
                return ret;
            }, []);
            expandedPoss.forEach(function (pos) {
                var nums = pos.split('-');
                if (nums.length === 2) {
                    return;
                }
                for (var i = 1; i <= nums.length - 2; i++) {
                    var ancestorPos = nums.slice(0, i + 1).join('-');
                    var ancestorKey = _p2n[ancestorPos].key;
                    if (newExpandedKeys_1.indexOf(ancestorKey) === -1) {
                        newExpandedKeys_1.push(ancestorKey);
                    }
                }
            });
            return newExpandedKeys_1;
        }
    }
    return expandedKeys;
};
var getSelectedKeys = function getSelectedKeys(props, willReceiveProps, _k2n) {
    var selectedKeys = 'selectedKeys' in props ? props.selectedKeys : willReceiveProps ? [] : props.defaultSelectedKeys;
    selectedKeys = (0, util_2.normalizeToArray)(selectedKeys);
    return selectedKeys.filter(function (key) {
        return _k2n[key];
    });
};
var getIndeterminateKeys = function getIndeterminateKeys(checkedKeys, checkStrictly, _k2n, _p2n) {
    if (checkStrictly) {
        return [];
    }
    var indeterminateKeys = [];
    var poss = (0, util_2.filterChildKey)(checkedKeys.filter(function (key) {
        return !!_k2n[key];
    }).filter(function (key) {
        return !_k2n[key].disabled && !_k2n[key].checkboxDisabled && _k2n[key].checkable !== false;
    }), _k2n, _p2n).map(function (key) {
        return _k2n[key].pos;
    });
    poss.forEach(function (pos) {
        var nums = pos.split('-');
        for (var i = nums.length; i > 2; i--) {
            var parentPos = nums.slice(0, i - 1).join('-');
            var parent_1 = _p2n[parentPos];
            if (parent_1.disabled || parent_1.checkboxDisabled) break;
            var parentKey = parent_1.key;
            if (indeterminateKeys.indexOf(parentKey) === -1) {
                indeterminateKeys.push(parentKey);
            }
        }
    });
    return indeterminateKeys;
};
var getCheckedKeys = function getCheckedKeys(props, willReceiveProps, _k2n, _p2n) {
    var checkedKeys = props.defaultCheckedKeys;
    var indeterminateKeys;
    if ('checkedKeys' in props) {
        checkedKeys = props.checkedKeys;
    } else if (willReceiveProps) {
        checkedKeys = [];
    }
    var checkStrictly = props.checkStrictly; // TODO TEST
    if (checkStrictly) {
        if (isPlainObject(checkedKeys)) {
            var checked = checkedKeys.checked,
                indeterminate = checkedKeys.indeterminate;
            checkedKeys = (0, util_2.normalizeToArray)(checked);
            indeterminateKeys = (0, util_2.normalizeToArray)(indeterminate);
        } else {
            checkedKeys = (0, util_2.normalizeToArray)(checkedKeys);
        }
        checkedKeys = checkedKeys.filter(function (key) {
            return !!_k2n[key];
        });
    } else {
        checkedKeys = (0, util_2.getAllCheckedKeys)(checkedKeys, _k2n, _p2n);
        checkedKeys = checkedKeys.filter(function (key) {
            return !!_k2n[key];
        });
        indeterminateKeys = getIndeterminateKeys(checkedKeys, props.checkStrictly, _k2n, _p2n);
    }
    return { checkedKeys: checkedKeys, indeterminateKeys: indeterminateKeys };
};
var preHandleData = function preHandleData(dataSource, props) {
    var k2n = {};
    var p2n = {};
    var keyList = [];
    var drill = function drill(data, level, prefix, parent) {
        if (data === void 0) {
            data = [];
        }
        if (level === void 0) {
            level = 1;
        }
        if (prefix === void 0) {
            prefix = '0';
        }
        return data.map(function (item, index) {
            // 为了兼容之前的实现 保留非法节点
            if (item.illegalFlag) {
                return item;
            }
            var children = item.children;
            var pos = "".concat(prefix, "-").concat(index);
            var key = item.key;
            item.pos = pos;
            item.level = level;
            // 判断为叶子节点
            // - 指定isLeaf属性
            // - loadData模式下 没有指定isLeaf为true
            // - 存在children元素
            if (!('isLeaf' in item)) {
                item.isLeaf = !(children && children.length || props.loadData);
            }
            item.isLastChild = parent ? [].concat(parent.isLastChild || [], index === data.length - 1) : [];
            if (key === undefined || key === null) {
                item.key = key = pos;
            }
            keyList.push(key);
            !item.isLeaf && drill(children, level + 1, pos, item);
            k2n[key] = p2n[pos] = tslib_1.__assign({}, item);
            return item;
        });
    };
    return { dataSource: drill(dataSource), k2n: k2n, p2n: p2n, keyList: keyList };
};
var preHandleChildren = function preHandleChildren(props) {
    var k2n = {};
    var p2n = {};
    var keyList = [];
    var loop = function loop(children, prefix, level) {
        if (prefix === void 0) {
            prefix = '0';
        }
        if (level === void 0) {
            level = 1;
        }
        return react_1.Children.map(children, function (node, index) {
            if (!react_1.default.isValidElement(node)) {
                return;
            }
            var pos = "".concat(prefix, "-").concat(index);
            var key = node.key;
            key = key || pos;
            var item = tslib_1.__assign(tslib_1.__assign({}, node.props), { key: key, pos: pos, level: level });
            var children = node.props.children;
            var hasChildren = children && react_1.Children.count(children);
            if (!('isLeaf' in item)) {
                item.isLeaf = !(hasChildren || props.loadData);
            }
            keyList.push(key);
            if (hasChildren) {
                item.children = loop(children, pos, level + 1);
            }
            k2n[key] = p2n[pos] = item;
            return item;
        });
    };
    loop(props.children);
    return { k2n: k2n, p2n: p2n, keyList: keyList };
};
var getData = function getData(props) {
    var dataSource = props.dataSource,
        renderChildNodes = props.renderChildNodes,
        _a = props.children,
        children = _a === void 0 ? [] : _a,
        useVirtual = props.useVirtual,
        immutable = props.immutable;
    var data = immutable ? (0, lodash_clonedeep_1.default)(dataSource) : dataSource;
    if ((renderChildNodes || useVirtual) && !('dataSource' in props)) {
        data = (0, util_2.convertChildren2Data)(children);
    }
    if (data) {
        try {
            return preHandleData(data, props);
        } catch (err) {
            if ((err.message || '').match('object is not extensible')) {
                // eslint-disable-next-line no-console
                console.error(err.message, 'try to set immutable to true to allow immutable dataSource');
            } else {
                throw err;
            }
        }
    } else {
        return preHandleChildren(props);
    }
};
/**
 * Tree
 */
var Tree = /** @class */function (_super) {
    tslib_1.__extends(Tree, _super);
    function Tree(props) {
        var _this = _super.call(this, props) || this;
        var _a = getData(props),
            _b = _a.dataSource,
            dataSource = _b === void 0 ? [] : _b,
            k2n = _a.k2n,
            p2n = _a.p2n,
            keyList = _a.keyList;
        var _c = _this.props,
            focusable = _c.focusable,
            autoFocus = _c.autoFocus,
            focusedKey = _c.focusedKey;
        var willReceiveProps = false;
        var _d = getCheckedKeys(props, willReceiveProps, k2n, p2n),
            checkedKeys = _d.checkedKeys,
            _e = _d.indeterminateKeys,
            indeterminateKeys = _e === void 0 ? [] : _e;
        _this.state = {
            _k2n: k2n,
            _p2n: p2n,
            _keyList: keyList,
            dataSource: dataSource,
            willReceiveProps: willReceiveProps,
            expandedKeys: getExpandedKeys(props, willReceiveProps, k2n, p2n),
            selectedKeys: getSelectedKeys(props, willReceiveProps, k2n, p2n),
            checkedKeys: checkedKeys,
            indeterminateKeys: indeterminateKeys
        };
        if (focusable) {
            _this.tabbableKey = _this.getFirstAvaliablelChildKey('0');
        }
        _this.state.focusedKey = 'focusedKey' in props ? focusedKey : focusable && autoFocus ? _this.tabbableKey : null;
        if (focusable) {
            _this.tabbableKey = _this.getFirstAvaliablelChildKey('0');
        }
        bindCtx(_this, ['handleExpand', 'handleSelect', 'handleCheck', 'handleBlur']);
        return _this;
    }
    Tree.getDerivedStateFromProps = function (props, state) {
        var _a = getData(props),
            _b = _a.dataSource,
            dataSource = _b === void 0 ? [] : _b,
            k2n = _a.k2n,
            p2n = _a.p2n,
            keyList = _a.keyList;
        var st = {};
        if (!state.willReceiveProps) {
            return {
                willReceiveProps: true,
                _k2n: k2n,
                _p2n: p2n,
                _keyList: keyList
            };
        }
        if ('expandedKeys' in props) {
            st.expandedKeys = getExpandedKeys(props, state.willReceiveProps, k2n, p2n);
        }
        if ('selectedKeys' in props) {
            st.selectedKeys = getSelectedKeys(props, state.willReceiveProps, k2n);
        }
        if ('checkedKeys' in props) {
            var checkedKeys = getCheckedKeys(props, state.willReceiveProps, k2n, p2n).checkedKeys;
            st.checkedKeys = checkedKeys;
        }
        st.indeterminateKeys = props.checkStrictly ? props.checkedKeys && props.checkedKeys.indeterminate || [] : getIndeterminateKeys(st.checkedKeys || state.checkedKeys || [], props.checkStrictly, k2n, p2n);
        return tslib_1.__assign(tslib_1.__assign({}, st), { dataSource: dataSource, _k2n: k2n, _p2n: p2n });
    };
    Tree.prototype.setFocusKey = function () {
        var _a = this.state.selectedKeys,
            selectedKeys = _a === void 0 ? [] : _a;
        this.setState({
            focusedKey: selectedKeys.length > 0 ? selectedKeys[0] : this.getFirstAvaliablelChildKey('0')
        });
    };
    Tree.prototype.getAvailableKey = function (pos, prev) {
        var _this = this;
        var ps = Object.keys(this.state._p2n).filter(function (p) {
            return _this.isAvailablePos(pos, p);
        });
        if (ps.length > 1) {
            var index = ps.indexOf(pos);
            var targetIndex = void 0;
            if (prev) {
                targetIndex = index === 0 ? ps.length - 1 : index - 1;
            } else {
                targetIndex = index === ps.length - 1 ? 0 : index + 1;
            }
            return this.state._p2n[ps[targetIndex]].key;
        }
        return null;
    };
    Tree.prototype.getFirstAvaliablelChildKey = function (parentPos) {
        var _this = this;
        var pos = Object.keys(this.state._p2n).find(function (p) {
            return _this.isAvailablePos("".concat(parentPos, "-0"), p);
        });
        return pos ? this.state._p2n[pos].key : null;
    };
    Tree.prototype.isAvailablePos = function (refPos, targetPos) {
        var disabled = this.state._p2n[targetPos].disabled;
        return this.isSibling(refPos, targetPos) && !disabled;
    };
    Tree.prototype.isSibling = function (currentPos, targetPos) {
        var currentNums = currentPos.split('-').slice(0, -1);
        var targetNums = targetPos.split('-').slice(0, -1);
        return currentNums.length === targetNums.length && currentNums.every(function (num, index) {
            return num === targetNums[index];
        });
    };
    Tree.prototype.getParentKey = function (pos) {
        return this.state._p2n[pos.slice(0, pos.length - 2)].key;
    };
    Tree.prototype.processKey = function (keys, key, add) {
        var index = keys.indexOf(key);
        if (add && index === -1) {
            keys.push(key);
        } else if (!add && index > -1) {
            keys.splice(index, 1);
        }
        return keys;
    };
    /*eslint-disable max-statements*/
    Tree.prototype.handleItemKeyDown = function (key, item, e) {
        if ([util_1.KEYCODE.UP, util_1.KEYCODE.DOWN, util_1.KEYCODE.RIGHT, util_1.KEYCODE.LEFT, util_1.KEYCODE.ENTER, util_1.KEYCODE.ESC, util_1.KEYCODE.SPACE].indexOf(e.keyCode) > -1) {
            e.preventDefault();
            e.stopPropagation();
        }
        var focusedKey = this.state.focusedKey;
        var node = this.state._k2n[key];
        var pos = this.state._k2n[key].pos;
        var level = pos.split('-').length - 1;
        switch (e.keyCode) {
            case util_1.KEYCODE.UP:
                {
                    var avaliableKey = this.getAvailableKey(pos, true);
                    if (avaliableKey) {
                        focusedKey = avaliableKey;
                    }
                    break;
                }
            case util_1.KEYCODE.DOWN:
                {
                    var avaliableKey = this.getAvailableKey(pos, false);
                    if (avaliableKey) {
                        focusedKey = avaliableKey;
                    }
                    break;
                }
            case util_1.KEYCODE.RIGHT:
                {
                    this.handleExpand(true, key, node);
                    var avaliableKey = this.getFirstAvaliablelChildKey(pos);
                    if (avaliableKey) {
                        focusedKey = avaliableKey;
                    }
                    break;
                }
            case util_1.KEYCODE.LEFT:
            case util_1.KEYCODE.ESC:
                {
                    if (level === 1) {
                        var avaliableKey = this.getAvailableKey(pos, true);
                        if (avaliableKey) {
                            focusedKey = avaliableKey;
                        }
                    } else if (level > 1) {
                        var parentKey = this.getParentKey(pos);
                        this.handleExpand(false, parentKey, node);
                        focusedKey = parentKey;
                    }
                    break;
                }
            case util_1.KEYCODE.ENTER:
            case util_1.KEYCODE.SPACE:
                {
                    var checkable = 'checkable' in item.props ? item.props.checkable : this.props.checkable;
                    var selectable = 'selectable' in item.props ? item.props.selectable : this.props.selectable;
                    if (checkable) {
                        this.handleCheck(!item.props.checked, key, node);
                    } else if (selectable) {
                        this.handleSelect(!item.props.selected, key, node, e);
                    }
                    break;
                }
            case util_1.KEYCODE.TAB:
                focusedKey = null;
                break;
            default:
                break;
        }
        if (focusedKey !== this.state.focusedKey) {
            if (!('focusedKey' in this.props)) {
                this.setState({
                    focusedKey: focusedKey
                });
            }
        }
        this.props.onItemKeyDown(focusedKey, item, e);
        this.props.onItemFocus(focusedKey, e);
    };
    Tree.prototype.handleBlur = function (e) {
        this.setState({
            focusedKey: null
        });
        this.props.onBlur && this.props.onBlur(e);
    };
    Tree.prototype.handleExpand = function (expand, key, node) {
        var _this = this;
        var _a = this.props,
            onExpand = _a.onExpand,
            loadData = _a.loadData;
        var expandedKeys = this.state.expandedKeys; // 由于setState 是异步操作，所以去掉 [...this.state.expandedKeys]
        this.processKey(expandedKeys, key, expand);
        var setExpandedState = function setExpandedState() {
            if (!('expandedKeys' in _this.props)) {
                _this.setState({ expandedKeys: expandedKeys });
            }
            onExpand(expandedKeys, { expanded: expand, node: node });
        };
        if (expand && loadData) {
            return loadData(node).then(setExpandedState);
        } else {
            setExpandedState();
        }
    };
    Tree.prototype.handleSelect = function (select, key, node, e) {
        var _a = this.props,
            multiple = _a.multiple,
            onSelect = _a.onSelect;
        var selectedKeys = tslib_1.__spreadArray([], tslib_1.__read(this.state.selectedKeys), false);
        if (multiple) {
            this.processKey(selectedKeys, key, select);
        } else {
            selectedKeys = select ? [key] : [];
        }
        if (!('selectedKeys' in this.props)) {
            this.setState({ selectedKeys: selectedKeys });
        }
        onSelect(selectedKeys, {
            selectedNodes: this.getNodes(selectedKeys),
            node: node,
            selected: select,
            event: e
        });
    };
    // eslint-disable-next-line max-statements
    Tree.prototype.handleCheck = function (check, key, node) {
        var _this = this;
        var _a = this.props,
            checkStrictly = _a.checkStrictly,
            checkedStrategy = _a.checkedStrategy,
            onCheck = _a.onCheck;
        var _b = this.state,
            _k2n = _b._k2n,
            _p2n = _b._p2n;
        var checkedKeys = tslib_1.__spreadArray([], tslib_1.__read(this.state.checkedKeys), false);
        if (checkStrictly) {
            this.processKey(checkedKeys, key, check);
            var newCheckedKeys_1 = isPlainObject(this.props.checkedKeys) ? {
                checked: checkedKeys,
                indeterminate: this.state.indeterminateKeys
            } : checkedKeys;
            onCheck(newCheckedKeys_1, {
                checkedNodes: this.getNodes(checkedKeys),
                checkedNodesPositions: checkedKeys.map(function (key) {
                    if (!_k2n[key]) return null;
                    var _a = _k2n[key],
                        node = _a.node,
                        pos = _a.pos;
                    return { node: node, pos: pos };
                }).filter(function (v) {
                    return !!v;
                }),
                node: node,
                indeterminateKeys: this.state.indeterminateKeys,
                checked: check,
                key: key
            });
            return;
        }
        var pos = _k2n[key].pos;
        (0, util_2.forEachEnableNode)(_k2n[key], function (node) {
            if (node.checkable === false) return;
            _this.processKey(checkedKeys, node.key, check);
        });
        var ps = Object.keys(_p2n);
        var currentPos = pos;
        var nums = pos.split('-');
        for (var i = nums.length; i > 2; i--) {
            var parentCheck = true;
            var parentPos = nums.slice(0, i - 1).join('-');
            if (_p2n[parentPos].disabled || _p2n[parentPos].checkboxDisabled || _p2n[parentPos].checkable === false) {
                currentPos = parentPos;
                continue;
            }
            var parentKey = _p2n[parentPos].key;
            var parentChecked = checkedKeys.indexOf(parentKey) > -1;
            if (!check && !parentChecked) {
                break;
            }
            for (var j = 0; j < ps.length; j++) {
                var p = ps[j];
                var pnode = _p2n[p];
                if ((0, util_2.isSiblingOrSelf)(currentPos, p) && !pnode.disabled && !pnode.checkboxDisabled) {
                    var k = pnode.key;
                    if (pnode.checkable === false) {
                        // eslint-disable-next-line max-depth
                        if (!pnode.children || pnode.children.length === 0) continue;
                        // eslint-disable-next-line max-depth
                        for (var m = 0; m < pnode.children.length; m++) {
                            if (!pnode.children.every(function (child) {
                                return (0, util_2.isNodeChecked)(child, checkedKeys);
                            })) {
                                parentCheck = false;
                                break;
                            }
                        }
                    } else if (checkedKeys.indexOf(k) === -1) {
                        parentCheck = false;
                    }
                    if (!parentCheck) break;
                }
            }
            this.processKey(checkedKeys, parentKey, parentCheck);
            currentPos = parentPos;
        }
        var indeterminateKeys = getIndeterminateKeys(checkedKeys, checkStrictly, _k2n, _p2n);
        if (!('checkedKeys' in this.props)) {
            this.setState({
                checkedKeys: checkedKeys,
                indeterminateKeys: indeterminateKeys
            });
        }
        var newCheckedKeys;
        switch (checkedStrategy) {
            case 'parent':
                newCheckedKeys = (0, util_2.filterChildKey)(checkedKeys, _k2n, _p2n);
                break;
            case 'child':
                newCheckedKeys = (0, util_2.filterParentKey)(checkedKeys, _k2n, _p2n);
                break;
            default:
                newCheckedKeys = checkedKeys;
                break;
        }
        onCheck(newCheckedKeys, {
            checkedNodes: this.getNodes(newCheckedKeys),
            checkedNodesPositions: newCheckedKeys.map(function (key) {
                if (!_k2n[key]) return null;
                var _a = _k2n[key],
                    node = _a.node,
                    pos = _a.pos;
                return { node: node, pos: pos };
            }).filter(function (v) {
                return !!v;
            }),
            node: node,
            indeterminateKeys: indeterminateKeys,
            checked: check,
            key: key
        });
    };
    Tree.prototype.getNodeProps = function (key) {
        var prefix = this.props.prefix;
        var _a = this.state,
            expandedKeys = _a.expandedKeys,
            selectedKeys = _a.selectedKeys,
            checkedKeys = _a.checkedKeys,
            dragOverNodeKey = _a.dragOverNodeKey,
            _k2n = _a._k2n,
            indeterminateKeys = _a.indeterminateKeys;
        var _b = _k2n[key],
            pos = _b.pos,
            isLeaf = _b.isLeaf,
            level = _b.level;
        return {
            prefix: prefix,
            root: this,
            eventKey: key,
            pos: pos,
            isLeaf: isLeaf,
            level: level,
            expanded: expandedKeys.indexOf(key) > -1,
            selected: selectedKeys.indexOf(key) > -1,
            checked: checkedKeys.indexOf(key) > -1,
            indeterminate: indeterminateKeys.indexOf(key) > -1,
            dragOver: dragOverNodeKey === key && this.dropPosition === 0,
            dragOverGapTop: dragOverNodeKey === key && this.dropPosition === -1,
            dragOverGapBottom: dragOverNodeKey === key && this.dropPosition === 1
        };
    };
    Tree.prototype.getNodes = function (keys) {
        var _this = this;
        return keys.map(function (key) {
            return _this.state._k2n[key] && _this.state._k2n[key].node;
        }).filter(function (v) {
            return !!v;
        });
    };
    Tree.prototype.handleDragStart = function (e, node) {
        var _this = this;
        var dragNodeKey = node.props.eventKey;
        this.dragNode = node;
        this.dragNodesKeys = Object.keys(this.state._k2n).filter(function (k) {
            return (0, util_2.isDescendantOrSelf)(_this.state._k2n[dragNodeKey].pos, _this.state._k2n[k].pos);
        });
        var expandedKeys = this.processKey(tslib_1.__spreadArray([], tslib_1.__read(this.state.expandedKeys), false), dragNodeKey, false);
        this.setState({ expandedKeys: expandedKeys });
        this.props.onDragStart({
            event: e,
            node: node,
            expandedKeys: expandedKeys
        });
    };
    Tree.prototype.handleDragEnter = function (e, node) {
        var dragOverNodeKey = node.props.eventKey;
        this.dropPosition = this.getDropPosition(e, node);
        if (this.dragNode && this.dragNode.props.eventKey === dragOverNodeKey && this.dropPosition === 0) {
            this.setState({
                dragOverNodeKey: null
            });
            return;
        }
        var expandedKeys = this.processKey(tslib_1.__spreadArray([], tslib_1.__read(this.state.expandedKeys), false), dragOverNodeKey, true);
        this.setState({
            dragOverNodeKey: dragOverNodeKey,
            expandedKeys: expandedKeys
        });
        this.props.onDragEnter({
            event: e,
            node: node,
            expandedKeys: expandedKeys
        });
    };
    Tree.prototype.getDropPosition = function (e, node) {
        var labelWrapperNode = node.labelWrapperEl;
        var offsetTop = getOffset(labelWrapperNode).top;
        var offsetHeight = labelWrapperNode.offsetHeight;
        var pageY = e.pageY;
        var gapHeight = 2;
        if (pageY > offsetTop + offsetHeight - gapHeight) {
            return 1;
        }
        if (pageY < offsetTop + gapHeight) {
            return -1;
        }
        return 0;
    };
    Tree.prototype.handleDragOver = function (e, node) {
        var dragOverNodeKey = node.props.eventKey;
        if (this.state.dragOverNodeKey !== dragOverNodeKey) {
            this.setState({
                dragOverNodeKey: dragOverNodeKey
            });
        }
        this.props.onDragOver({ event: e, node: node });
    };
    Tree.prototype.handleDragLeave = function (e, node) {
        var eventKey = node.props.eventKey;
        var _keyList = this.state._keyList;
        var firstKey = _keyList[0];
        var lastKey = _keyList[_keyList.length - 1];
        // 只针对树的边界节点（第一个和最后一个）做处理
        if (eventKey === firstKey || eventKey === lastKey) {
            this.setState({
                dragOverNodeKey: null
            });
        }
        this.props.onDragLeave({ event: e, node: node });
    };
    Tree.prototype.handleDragEnd = function (e, node) {
        this.setState({
            dragOverNodeKey: null
        });
        this.props.onDragEnd({ event: e, node: node });
        this.dragNode = null;
    };
    Tree.prototype.handleDrop = function (e, node) {
        if (this.dragNode && (0, util_2.isDescendantOrSelf)(this.state._k2n[this.dragNode.props.eventKey].pos, this.state._k2n[node.props.eventKey].pos)) {
            return;
        }
        this.setState({
            dragOverNodeKey: null
        });
        var params = this.generateDropParams(node);
        this.props.onDrop(tslib_1.__assign({ event: e }, params));
        this.dragNode = null;
    };
    Tree.prototype.canDrop = function (node) {
        var params = this.generateDropParams(node);
        return this.props.canDrop(params);
    };
    Tree.prototype.generateDropParams = function (node) {
        return {
            dragNode: this.dragNode,
            dragNodesKeys: tslib_1.__spreadArray([], tslib_1.__read(this.dragNodesKeys), false),
            node: node,
            dropPosition: this.dropPosition
        };
    };
    Tree.prototype.filterTreeNode = function (node) {
        return this.props.filterTreeNode.call(this, node);
    };
    Tree.prototype.shouldNodeShow = function (nodeData) {
        var _a = this.state,
            expandedKeys = _a.expandedKeys,
            _p2n = _a._p2n;
        return !(nodeData.style && nodeData.style.display === 'none') && (0, util_2.getAllDescendantKeys)(nodeData, _p2n).every(function (k) {
            return expandedKeys.includes(k);
        });
    };
    Tree.prototype.renderTreeNode = function (props, childNodes) {
        var _a = this.props,
            rtl = _a.rtl,
            labelRender = _a.labelRender;
        var key = props.key;
        var nodeProps = tslib_1.__assign(tslib_1.__assign({ _key: key }, props), this.getNodeProps(key));
        if (labelRender) {
            nodeProps.label = labelRender(pickProps(exports.treeNodeProps, props));
        }
        return react_1.default.createElement(tree_node_1.default, tslib_1.__assign({ rtl: rtl, key: key }, nodeProps), childNodes);
    };
    Tree.prototype.renderNodeList = function (dataSource) {
        var _this = this;
        var nodeList = [];
        var _k2n = this.state._k2n;
        var drill = function drill(list) {
            list.forEach(function (item) {
                // 为了兼容之前的实现 保留非法节点
                if (item.illegalFlag) {
                    nodeList.push(item);
                    return;
                }
                var children = item.children,
                    nodeProps = tslib_1.__rest(item, ["children"]);
                if (!_this.shouldNodeShow(item)) {
                    return;
                }
                nodeList.push(nodeProps);
                children && children.length && drill(children);
            });
        };
        drill(dataSource);
        return nodeList.map(function (nodeProps, index) {
            // 为了兼容之前的实现 保留非法节点
            if (nodeProps.illegalFlag) {
                return nodeProps.node;
            }
            // aria props
            nodeProps.size = nodeList.length;
            nodeProps.posinset = index + 1;
            return _k2n[nodeProps.key].node = _this.renderTreeNode(nodeProps);
        });
    };
    Tree.prototype.renderWithCustomChildNodes = function (dataSource) {
        var _this = this;
        var renderChildNodes = this.props.renderChildNodes;
        var _k2n = this.state._k2n;
        var drill = function drill(list) {
            return list.map(function (_a, index) {
                var children = _a.children,
                    nodeProps = tslib_1.__rest(_a, ["children"]);
                var childNodes;
                if (children && children.length) {
                    childNodes = renderChildNodes(drill(children));
                }
                // aria props
                nodeProps.size = list.length;
                nodeProps.posinset = index + 1;
                return _k2n[nodeProps.key].node = _this.renderTreeNode(nodeProps, childNodes);
            });
        };
        return drill(dataSource);
    };
    Tree.prototype.renderByDataSource = function (dataSource) {
        var _this = this;
        var drill = function drill(data, prefix) {
            if (prefix === void 0) {
                prefix = '0';
            }
            return data.map(function (item, index) {
                // 为了兼容之前的实现 保留非法节点
                if (item.illegalFlag) {
                    return item.node;
                }
                var pos = "".concat(prefix, "-").concat(index);
                var _a = item.key,
                    key = _a === void 0 ? pos : _a,
                    children = item.children,
                    others = tslib_1.__rest(item, ["key", "children"]);
                var props = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ size: data.length }, others), _this.getNodeProps("".concat(key))), { _key: key, key: key });
                if (children && children.length) {
                    props.children = drill(children, pos);
                }
                var node = _this.renderTreeNode(props, props.children);
                // eslint-disable-next-line
                _this.state._k2n[key].node = node;
                return node;
            });
        };
        return drill(dataSource);
    };
    Tree.prototype.renderByChildren = function () {
        var _this = this;
        var rtl = this.props.rtl;
        var _k2n = this.state._k2n;
        var loop = function loop(children, prefix) {
            if (prefix === void 0) {
                prefix = '0';
            }
            return react_1.Children.map(children, function (child, index) {
                if (!react_1.default.isValidElement(child)) {
                    return;
                }
                var pos = "".concat(prefix, "-").concat(index);
                var key = child.key || pos;
                var props = _this.getNodeProps("".concat(key));
                if (child.props.children) {
                    props.children = loop(child.props.children, pos);
                }
                props._key = key;
                props.rtl = rtl;
                props.size = react_1.Children.count(children);
                var node = (0, react_1.cloneElement)(child, props);
                _k2n[key].node = node;
                return node;
            });
        };
        return loop(this.props.children);
    };
    Tree.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this.props,
            prefix = _b.prefix,
            rtl = _b.rtl,
            className = _b.className,
            showLine = _b.showLine,
            isNodeBlock = _b.isNodeBlock,
            isLabelBlock = _b.isLabelBlock,
            multiple = _b.multiple,
            useVirtual = _b.useVirtual,
            renderChildNodes = _b.renderChildNodes,
            virtualListProps = _b.virtualListProps;
        var dataSource = this.state.dataSource;
        var _c = pickOthers(Object.keys(Tree.propTypes), this.props),
            style = _c.style,
            others = tslib_1.__rest(_c, ["style"]);
        if (rtl) {
            others.dir = 'rtl';
        }
        var newClassName = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "tree")] = true, _a["".concat(prefix, "label-block")] = isLabelBlock, _a["".concat(prefix, "node-block")] = isNodeBlock, _a["".concat(prefix, "node-indent")] = !isNodeBlock, _a["".concat(prefix, "show-line")] = !isNodeBlock && showLine, _a[className] = !!className, _a));
        var treeRender = function treeRender(items, ref) {
            return react_1.default.createElement("ul", tslib_1.__assign({ role: "tree", ref: ref, "aria-multiselectable": multiple, onBlur: _this.handleBlur, className: newClassName, style: useVirtual ? null : style }, others), items);
        };
        var virtualTreeRender = function virtualTreeRender(dataSource) {
            return react_1.default.createElement("div", { className: "".concat(prefix, "virtual-tree-container"), style: style }, react_1.default.createElement(virtual_list_1.default, tslib_1.__assign({ itemsRenderer: function itemsRenderer(items, ref) {
                    return treeRender(items, ref);
                } }, virtualListProps), _this.renderNodeList(dataSource)));
        };
        return useVirtual ? virtualTreeRender(dataSource) : renderChildNodes ? treeRender(this.renderWithCustomChildNodes(dataSource)) : !this.props.dataSource ? treeRender(this.renderByChildren()) : treeRender(this.renderByDataSource(dataSource));
    };
    Tree.propTypes = {
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        pure: prop_types_1.default.bool,
        className: prop_types_1.default.string,
        /**
         * 树节点
         */
        children: prop_types_1.default.node,
        /**
         * 数据源，该属性优先级高于 children
         */
        dataSource: prop_types_1.default.array,
        /**
         * 是否显示树的线
         */
        showLine: prop_types_1.default.bool,
        /**
         * 是否支持选中节点
         */
        selectable: prop_types_1.default.bool,
        /**
         * （用于受控）当前选中节点 key 的数组
         */
        selectedKeys: prop_types_1.default.arrayOf(prop_types_1.default.string),
        /**
         * （用于非受控）默认选中节点 key 的数组
         */
        defaultSelectedKeys: prop_types_1.default.arrayOf(prop_types_1.default.string),
        /**
         * 选中或取消选中节点时触发的回调函数
         * @param {Array} selectedKeys 选中节点key的数组
         * @param {Object} extra 额外参数
         * @param {Array} extra.selectedNodes 选中节点的数组
         * @param {Object} extra.node 当前操作的节点
         * @param {Boolean} extra.selected 当前操作是否是选中
         */
        onSelect: prop_types_1.default.func,
        /**
         * 是否支持多选
         */
        multiple: prop_types_1.default.bool,
        /**
         * 是否支持勾选节点的复选框
         */
        checkable: prop_types_1.default.bool,
        /**
         * （用于受控）当前勾选复选框节点 key 的数组或 `{checked: Array, indeterminate: Array}` 的对象
         */
        checkedKeys: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.string), prop_types_1.default.object]),
        /**
         * （用于非受控）默认勾选复选框节点 key 的数组
         */
        defaultCheckedKeys: prop_types_1.default.arrayOf(prop_types_1.default.string),
        /**
         * 勾选节点复选框是否完全受控（父子节点选中状态不再关联）
         */
        checkStrictly: prop_types_1.default.bool,
        /**
         * 定义选中时回填的方式
         * @enumdesc 返回所有选中的节点, 父子节点都选中时只返回父节点, 父子节点都选中时只返回子节点
         */
        checkedStrategy: prop_types_1.default.oneOf(['all', 'parent', 'child']),
        /**
         * 勾选或取消勾选复选框时触发的回调函数
         * @param {Array} checkedKeys 勾选复选框节点key的数组
         * @param {Object} extra 额外参数
         * @param {Array} extra.checkedNodes 勾选复选框节点的数组
         * @param {Array} extra.checkedNodesPositions 包含有勾选复选框节点和其位置的对象的数组
         * @param {Array} extra.indeterminateKeys 半选复选框节点 key 的数组
         * @param {Object} extra.node 当前操作的节点
         * @param {Boolean} extra.checked 当前操作是否是勾选
         */
        onCheck: prop_types_1.default.func,
        /**
         * （用于受控）当前展开的节点 key 的数组
         */
        expandedKeys: prop_types_1.default.arrayOf(prop_types_1.default.string),
        /**
         * （用于非受控）默认展开的节点 key 的数组
         */
        defaultExpandedKeys: prop_types_1.default.arrayOf(prop_types_1.default.string),
        /**
         * 是否默认展开所有节点
         */
        defaultExpandAll: prop_types_1.default.bool,
        /**
         * 是否自动展开父节点，建议受控时设置为false
         */
        autoExpandParent: prop_types_1.default.bool,
        /**
         * 展开或收起节点时触发的回调函数
         * @param {Array} expandedKeys 展开的节点key的数组
         * @param {Object} extra 额外参数
         * @param {Object} extra.node 当前操作的节点
         * @param {Boolean} extra.expanded 当前操作是否是展开
         */
        onExpand: prop_types_1.default.func,
        /**
         * 是否支持编辑节点内容
         */
        editable: prop_types_1.default.bool,
        /**
         * 编辑节点内容完成时触发的回调函数
         * @param {String} key 编辑节点的 key
         * @param {String} label 编辑节点完成时节点的文本
         * @param {Object} node 当前编辑的节点
         */
        onEditFinish: prop_types_1.default.func,
        /**
         * 是否支持拖拽节点
         */
        draggable: prop_types_1.default.bool,
        /**
         * 开始拖拽节点时触发的回调函数
         * @param {Object} info 拖拽信息
         * @param {Object} info.event 事件对象
         * @param {Object} info.node 拖拽的节点
         */
        onDragStart: prop_types_1.default.func,
        /**
         * 拖拽节点进入目标节点时触发的回调函数
         * @param {Object} info 拖拽信息
         * @param {Object} info.event 事件对象
         * @param {Object} info.node 目标节点
         * @param {Array} info.expandedKeys 当前展开的节点key的数组
         */
        onDragEnter: prop_types_1.default.func,
        /**
         * 拖拽节点在目标节点上移动的时候触发的回调函数
         * @param {Object} info 拖拽信息
         * @param {Object} info.event 事件对象
         * @param {Object} info.node 目标节点
         */
        onDragOver: prop_types_1.default.func,
        /**
         * 拖拽节点离开目标节点时触发的回调函数
         * @param {Object} info 拖拽信息
         * @param {Object} info.event 事件对象
         * @param {Object} info.node 目标节点
         */
        onDragLeave: prop_types_1.default.func,
        /**
         * 拖拽节点拖拽结束时触发的回调函数
         * @param {Object} info 拖拽信息
         * @param {Object} info.event 事件对象
         * @param {Object} info.node 目标节点
         */
        onDragEnd: prop_types_1.default.func,
        /**
         * 拖拽节点放入目标节点内或前后触发的回调函数
         * @param {Object} info 拖拽信息
         * @param {Object} info.event 事件对象
         * @param {Object} info.node 目标节点
         * @param {Object} info.dragNode 拖拽的节点
         * @param {Array} info.dragNodesKeys 拖拽的节点和其子节点 key 的数组
         * @param {Number} info.dropPosition 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后
         */
        onDrop: prop_types_1.default.func,
        /**
         * 节点是否可被作为拖拽的目标节点
         * @param {Object} info 拖拽信息
         * @param {Object} info.node 目标节点
         * @param {Object} info.dragNode 拖拽的节点
         * @param {Array} info.dragNodesKeys 拖拽的节点和其子节点 key 的数组
         * @param {Number} info.dropPosition 放置位置，-1代表当前节点前，0代表当前节点里，1代表当前节点后
         * @return {Boolean} 是否可以被当作目标节点
         */
        canDrop: prop_types_1.default.func,
        /**
         * 异步加载数据的函数
         * @param {Object} node 被点击展开的节点
         */
        loadData: prop_types_1.default.func,
        /**
         * 按需筛选高亮节点
         * @param {Object} node 待筛选的节点
         * @return {Boolean} 是否被筛选中
         */
        filterTreeNode: prop_types_1.default.func,
        /**
         * 右键点击节点时触发的回调函数
         * @param {Object} info 信息对象
         * @param {Object} info.event 事件对象
         * @param {Object} info.node 点击的节点
         */
        onRightClick: prop_types_1.default.func,
        /**
         * 设置节点是否占满剩余空间，一般用于统一在各节点右侧添加元素(借助 flex 实现，暂时只支持 ie10+)
         */
        isLabelBlock: prop_types_1.default.bool,
        /**
         * 设置节点是否占满一行
         */
        isNodeBlock: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.object]),
        /**
         * 是否开启展开收起动画
         */
        animation: prop_types_1.default.bool,
        /**
         * 当前获得焦点的子菜单或菜单项 key 值
         */
        focusedKey: prop_types_1.default.string,
        /**
         * 渲染子节点
         * @param {Array<ReactNode>} nodes 所有的子节点
         * @return {ReactNode} 返回节点
         */
        renderChildNodes: prop_types_1.default.func,
        focusable: prop_types_1.default.bool,
        autoFocus: prop_types_1.default.bool,
        onItemFocus: prop_types_1.default.func,
        onBlur: prop_types_1.default.func,
        onItemKeyDown: prop_types_1.default.func,
        /**
         * 自定义渲染单个子节点
         * @param {Object} node 节点数据
         * @return {ReactNode} 返回节点
         * @version 1.25
         */
        labelRender: prop_types_1.default.func,
        /**
         * 是否开启虚拟滚动
         */
        useVirtual: prop_types_1.default.bool,
        /**
         * 是否是不可变数据
         * @version 1.23
         */
        immutable: prop_types_1.default.bool,
        /**
         * VirtualList透传参数
         */
        virtualListProps: prop_types_1.default.object,
        /**
         * 点击文本是否可以勾选
         */
        clickToCheck: prop_types_1.default.bool
    };
    Tree.defaultProps = {
        prefix: 'next-',
        rtl: false,
        pure: false,
        showLine: false,
        selectable: true,
        editable: false,
        multiple: false,
        checkable: false,
        checkStrictly: false,
        checkedStrategy: 'all',
        draggable: false,
        autoExpandParent: true,
        defaultExpandAll: false,
        defaultExpandedKeys: [],
        defaultCheckedKeys: [],
        defaultSelectedKeys: [],
        onExpand: noop,
        onCheck: noop,
        onSelect: noop,
        onDragStart: noop,
        onDragEnter: noop,
        onDragOver: noop,
        onDragLeave: noop,
        onDragEnd: noop,
        onDrop: noop,
        canDrop: function canDrop() {
            return true;
        },
        onEditFinish: noop,
        onRightClick: noop,
        isLabelBlock: false,
        isNodeBlock: false,
        animation: true,
        focusable: true,
        autoFocus: false,
        onItemFocus: noop,
        onItemKeyDown: noop,
        useVirtual: false,
        immutable: false,
        virtualListProps: {},
        clickToCheck: false
    };
    return Tree;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Tree);

/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var input_1 = __webpack_require__(15);
var TreeNodeInput = /** @class */function (_super) {
    tslib_1.__extends(TreeNodeInput, _super);
    function TreeNodeInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TreeNodeInput.prototype.componentDidMount = function () {
        var inputWrapperNode = (0, react_dom_1.findDOMNode)(this);
        inputWrapperNode.querySelector('input').focus();
    };
    TreeNodeInput.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            others = tslib_1.__rest(_a, ["prefix"]);
        return react_1.default.createElement(input_1.default, tslib_1.__assign({ size: "small", className: "".concat(prefix, "tree-node-input") }, others));
    };
    TreeNodeInput.propTypes = {
        prefix: prop_types_1.default.string
    };
    return TreeNodeInput;
}(react_1.Component);
exports.default = TreeNodeInput;

/***/ }),
/* 450 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var TreeNodeIndent = /** @class */function (_super) {
    tslib_1.__extends(TreeNodeIndent, _super);
    function TreeNodeIndent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TreeNodeIndent.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            level = _b.level,
            isLastChild = _b.isLastChild,
            showLine = _b.showLine;
        var indents = [];
        for (var i = 1; i < level; i++) {
            var classNames = (0, classnames_1.default)("".concat(prefix, "tree-node-indent-unit"), (_a = {}, _a["".concat(prefix, "line")] = !isLastChild[i - 1] && showLine, _a));
            indents.push(react_1.default.createElement("span", { className: classNames, key: i - 1 }));
        }
        return indents;
    };
    TreeNodeIndent.propTypes = {
        prefix: prop_types_1.default.string,
        level: prop_types_1.default.number,
        isLastChild: prop_types_1.default.arrayOf(prop_types_1.default.bool),
        showLine: prop_types_1.default.bool
    };
    TreeNodeIndent.defaultProps = {
        isLastChild: []
    };
    return TreeNodeIndent;
}(react_1.Component);
exports.default = TreeNodeIndent;

/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var config_provider_1 = __webpack_require__(5);
var tree_select_1 = __webpack_require__(452);
exports.default = config_provider_1.default.config(tree_select_1.default, {
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        if ('shape' in props) {
            deprecated('shape', 'hasBorder', 'TreeSelect');
            var shape = props.shape,
                others = tslib_1.__rest(props, ["shape"]);
            props = tslib_1.__assign({ hasBorder: shape !== 'arrow-only' }, others);
        }
        if ('container' in props) {
            deprecated('container', 'popupContainer', 'TreeSelect');
            var container = props.container,
                others = tslib_1.__rest(props, ["container"]);
            props = tslib_1.__assign({ popupContainer: container }, others);
        }
        return props;
    }
});

/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_lifecycles_compat_1 = __webpack_require__(6);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var select_1 = __webpack_require__(24);
var tree_1 = __webpack_require__(191);
var util_1 = __webpack_require__(192);
var util_2 = __webpack_require__(4);
var zh_cn_1 = __webpack_require__(9);
var util_3 = __webpack_require__(60);
var noop = function noop() {};
var TreeNode = tree_1.default.Node;
var bindCtx = util_2.func.bindCtx;
var POS_REGEXP = /^\d+(-\d+){1,}$/;
var flatDataSource = function flatDataSource(props) {
    var _k2n = {};
    var _p2n = {};
    var _v2n = {};
    if ('dataSource' in props) {
        var loop_1 = function loop_1(data, prefix) {
            if (prefix === void 0) {
                prefix = '0';
            }
            return data.map(function (item, index) {
                var value = item.value,
                    children = item.children;
                var pos = "".concat(prefix, "-").concat(index);
                var key = item.key || pos;
                var newItem = tslib_1.__assign(tslib_1.__assign({}, item), { key: key, pos: pos });
                if (children && children.length) {
                    newItem.children = loop_1(children, pos);
                }
                _k2n[key] = _p2n[pos] = _v2n[value] = newItem;
                return newItem;
            });
        };
        loop_1(props.dataSource);
    } else if ('children' in props) {
        var loop_2 = function loop_2(children, prefix) {
            if (prefix === void 0) {
                prefix = '0';
            }
            return react_1.Children.map(children, function (node, index) {
                if (!react_1.default.isValidElement(node)) {
                    return;
                }
                var _a = node.props,
                    value = _a.value,
                    children = _a.children;
                var pos = "".concat(prefix, "-").concat(index);
                var key = node.key || pos;
                var newItem = tslib_1.__assign(tslib_1.__assign({}, node.props), { key: key, pos: pos });
                if (children && react_1.Children.count(children)) {
                    newItem.children = loop_2(children, pos);
                }
                _k2n[key] = _p2n[pos] = _v2n[value] = newItem;
                return newItem;
            });
        };
        loop_2(props.children);
    }
    return { _k2n: _k2n, _p2n: _p2n, _v2n: _v2n };
};
var isSearched = function isSearched(label, searchedValue) {
    var labelString = '';
    searchedValue = String(searchedValue);
    var loop = function loop(arg) {
        if ((0, react_1.isValidElement)(arg) && arg.props.children) {
            react_1.Children.forEach(arg.props.children, loop);
        } else {
            labelString += arg;
        }
    };
    loop(label);
    if (labelString.length >= searchedValue.length && labelString.toLowerCase().indexOf(searchedValue.toLowerCase()) > -1) {
        return true;
    }
    return false;
};
var getSearchKeys = function getSearchKeys(searchedValue, _k2n, _p2n) {
    var searchedKeys = [];
    var retainedKeys = [];
    Object.keys(_k2n).forEach(function (k) {
        var _a = _k2n[k],
            label = _a.label,
            pos = _a.pos;
        if (isSearched(label, searchedValue)) {
            searchedKeys.push(k);
            var posArr_1 = pos.split('-');
            posArr_1.forEach(function (n, i) {
                if (i > 0) {
                    var p = posArr_1.slice(0, i + 1).join('-');
                    var kk = _p2n[p].key;
                    if (retainedKeys.indexOf(kk) === -1) {
                        retainedKeys.push(kk);
                    }
                }
            });
        }
    });
    return { searchedKeys: searchedKeys, retainedKeys: retainedKeys };
};
/**
 * TreeSelect
 */
var TreeSelect = /** @class */function (_super) {
    tslib_1.__extends(TreeSelect, _super);
    function TreeSelect(props, context) {
        var _this = _super.call(this, props, context) || this;
        var defaultVisible = props.defaultVisible,
            visible = props.visible,
            defaultValue = props.defaultValue,
            value = props.value;
        _this.state = tslib_1.__assign({ visible: typeof visible === 'undefined' ? defaultVisible : visible, value: (0, util_1.normalizeToArray)(typeof value === 'undefined' ? defaultValue : value), searchedValue: '', expandedKeys: [], searchedKeys: [], retainedKeys: [], autoExpandParent: false,
            // map of value => item, includes value not exist in dataSource
            mapValueDS: {} }, flatDataSource(props));
        // init value/mapValueDS when defaultValue is not undefined
        if (_this.state.value !== undefined) {
            _this.state.mapValueDS = (0, util_3.getValueDataSource)(_this.state.value, _this.state.mapValueDS).mapValueDS;
            _this.state.value = _this.state.value.map(function (v) {
                return (0, util_3.valueToSelectKey)(v);
            });
        }
        bindCtx(_this, ['handleSelect', 'handleCheck', 'handleSearch', 'handleSearchClear', 'handleVisibleChange', 'handleChange', 'handleRemove', 'handleExpand', 'handleKeyDown', 'saveTreeRef', 'saveSelectRef', 'renderMaxTagPlaceholder']);
        return _this;
    }
    TreeSelect.getDerivedStateFromProps = function (props, state) {
        var st = {};
        if ('value' in props) {
            var valueArray = (0, util_1.normalizeToArray)(props.value);
            // convert value to string[]
            st.value = valueArray.map(function (v) {
                return (0, util_3.valueToSelectKey)(v);
            });
            // re-calculate map
            st.mapValueDS = (0, util_3.getValueDataSource)(props.value, state.mapValueDS).mapValueDS;
        }
        if ('visible' in props) {
            st.visible = props.visible;
        }
        var _a = flatDataSource(props),
            _k2n = _a._k2n,
            _p2n = _a._p2n,
            _v2n = _a._v2n;
        if (props.showSearch && state.searchedValue) {
            var _b = getSearchKeys(state.searchedValue, _k2n, _p2n),
                searchedKeys = _b.searchedKeys,
                retainedKeys = _b.retainedKeys;
            st.searchedKeys = searchedKeys;
            st.retainedKeys = retainedKeys;
        }
        return tslib_1.__assign(tslib_1.__assign({}, st), { _k2n: _k2n, _p2n: _p2n, _v2n: _v2n });
    };
    TreeSelect.prototype.getKeysByValue = function (value) {
        var _this = this;
        return value.reduce(function (ret, v) {
            var k = _this.state._v2n[v] && _this.state._v2n[v].key;
            if (k) {
                ret.push(k);
            }
            return ret;
        }, []);
    };
    TreeSelect.prototype.getValueByKeys = function (keys) {
        var _this = this;
        return keys.map(function (k) {
            return _this.state._k2n[k].value;
        });
    };
    TreeSelect.prototype.getFullItemPath = function (item) {
        if (!item) {
            return [];
        }
        var pos = item.pos;
        if (typeof pos === 'string' && POS_REGEXP.test(pos)) {
            var _p2n_1 = this.state._p2n;
            var posArr_2 = pos.split('-');
            var fullPosArr = posArr_2.map(function (_, i) {
                return posArr_2.slice(0, i + 1).join('-');
            }).slice(1);
            var itemArr = fullPosArr.map(function (pos) {
                return _p2n_1[pos];
            });
            return itemArr;
        }
        return [item];
    };
    TreeSelect.prototype.getValueForSelect = function (value) {
        var treeCheckedStrategy = this.props.treeCheckedStrategy;
        var nonExistentValueKeys = this.getNonExistentValueKeys();
        var keys = this.getKeysByValue(value);
        keys = (0, util_1.getAllCheckedKeys)(keys, this.state._k2n, this.state._p2n);
        switch (treeCheckedStrategy) {
            case 'parent':
                keys = (0, util_1.filterChildKey)(keys, this.state._k2n, this.state._p2n);
                break;
            case 'child':
                keys = (0, util_1.filterParentKey)(keys, this.state._k2n, this.state._p2n);
                break;
            default:
                break;
        }
        var values = this.getValueByKeys(keys);
        return tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(values), false), tslib_1.__read(nonExistentValueKeys), false);
    };
    TreeSelect.prototype.getData = function (value, forSelect) {
        var _this = this;
        var preserveNonExistentValue = this.props.preserveNonExistentValue;
        var mapValueDS = this.state.mapValueDS;
        var ret = value.reduce(function (ret, v) {
            var k = _this.state._v2n[v] && _this.state._v2n[v].key;
            if (k) {
                var _a = _this.state._k2n[k],
                    label = _a.label,
                    pos = _a.pos,
                    disabled = _a.disabled,
                    checkboxDisabled = _a.checkboxDisabled;
                var d = {
                    value: v,
                    label: label,
                    pos: pos
                };
                if (forSelect) {
                    d.disabled = disabled || checkboxDisabled;
                } else {
                    d.key = k;
                }
                ret.push(d);
            } else if (preserveNonExistentValue) {
                // 需要保留 dataSource 中不存在的 value
                var item = mapValueDS[v];
                if (item) {
                    ret.push(item);
                }
            }
            return ret;
        }, []);
        return ret;
    };
    TreeSelect.prototype.getNonExistentValues = function () {
        var _this = this;
        var preserveNonExistentValue = this.props.preserveNonExistentValue;
        var value = this.state.value;
        if (!preserveNonExistentValue) {
            return [];
        }
        var nonExistentValues = value.filter(function (v) {
            return !_this.state._v2n[v];
        });
        return nonExistentValues;
    };
    TreeSelect.prototype.getNonExistentValueKeys = function () {
        var nonExistentValues = this.getNonExistentValues();
        return nonExistentValues.map(function (v) {
            if ((typeof v === "undefined" ? "undefined" : (0, _typeof3.default)(v)) === 'object' && v.hasOwnProperty('value')) {
                return v.value;
            }
            return v;
        });
    };
    TreeSelect.prototype.saveTreeRef = function (ref) {
        this.tree = ref;
    };
    TreeSelect.prototype.saveSelectRef = function (ref) {
        this.select = ref;
    };
    TreeSelect.prototype.handleVisibleChange = function (visible, type) {
        if (!('visible' in this.props)) {
            this.setState({
                visible: visible
            });
        }
        if (['fromTree', 'keyboard'].indexOf(type) !== -1 && !visible) {
            this.select.focusInput();
        }
        this.props.onVisibleChange(visible, type);
    };
    TreeSelect.prototype.handleSelect = function (selectedKeys, extra) {
        var _a = this.props,
            multiple = _a.multiple,
            onChange = _a.onChange,
            autoClearSearch = _a.autoClearSearch;
        var selected = extra.selected;
        if (multiple || selected) {
            var selectedValue = this.getValueByKeys(selectedKeys);
            var nonExistentValues = this.getNonExistentValues();
            var value = tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(nonExistentValues), false), tslib_1.__read(selectedValue), false);
            if (!('value' in this.props)) {
                this.setState({
                    value: value
                });
            }
            if (!multiple) {
                this.handleVisibleChange(false, 'fromTree');
            }
            var data = this.getData(value);
            var selectedData = this.getData(selectedValue);
            // 单选情况下，不返回 nonExistentValue，直接返回当前选择值，避免无法改选的问题
            multiple ? onChange(value, data) : onChange(selectedValue[0], selectedData[0]);
            // clear search value manually
            if (autoClearSearch) {
                this.select.handleSearchClear('select');
            }
        } else {
            this.handleVisibleChange(false, 'fromTree');
        }
    };
    TreeSelect.prototype.handleCheck = function (checkedKeys) {
        var _a = this.props,
            onChange = _a.onChange,
            autoClearSearch = _a.autoClearSearch;
        var value = this.getValueByKeys(checkedKeys);
        var nonExistentValues = this.getNonExistentValues();
        value = tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(nonExistentValues), false), tslib_1.__read(value), false);
        if (!('value' in this.props)) {
            this.setState({
                value: value
            });
        }
        onChange(value, this.getData(value));
        // clear search value manually
        if (autoClearSearch) {
            this.select.handleSearchClear('select');
        }
    };
    TreeSelect.prototype.handleRemove = function (removedItem) {
        var _this = this;
        var removedValue = removedItem.value;
        var _a = this.props,
            treeCheckable = _a.treeCheckable,
            treeCheckStrictly = _a.treeCheckStrictly,
            treeCheckedStrategy = _a.treeCheckedStrategy,
            onChange = _a.onChange;
        var value;
        if (
        // there's linkage relationship among nodes
        treeCheckable && !treeCheckStrictly && ['parent', 'all'].indexOf(treeCheckedStrategy) !== -1 &&
        // value exits in datasource
        this.state._v2n[removedValue]) {
            var removedPos_1 = this.state._v2n[removedValue].pos;
            value = this.state.value.filter(function (v) {
                var p = _this.state._v2n[v].pos;
                return !(0, util_1.isDescendantOrSelf)(removedPos_1, p);
            });
            var nums = removedPos_1.split('-');
            for (var i = nums.length; i > 2; i--) {
                var parentPos = nums.slice(0, i - 1).join('-');
                var parentValue = this.state._p2n[parentPos].value;
                var parentIndex = value.indexOf(parentValue);
                if (parentIndex > -1) {
                    value.splice(parentIndex, 1);
                } else {
                    break;
                }
            }
        } else {
            value = this.state.value.filter(function (v) {
                return v !== removedValue;
            });
        }
        if (!('value' in this.props)) {
            this.setState({
                value: value
            });
        }
        var data = this.getData(value);
        onChange(value, data);
    };
    TreeSelect.prototype.handleSearch = function (searchedValue) {
        var _a = this.state,
            _k2n = _a._k2n,
            _p2n = _a._p2n;
        var _b = getSearchKeys(searchedValue, _k2n, _p2n),
            searchedKeys = _b.searchedKeys,
            retainedKeys = _b.retainedKeys;
        this.setState({
            searchedValue: searchedValue,
            expandedKeys: searchedKeys,
            searchedKeys: searchedKeys,
            retainedKeys: retainedKeys,
            autoExpandParent: true
        });
        this.props.onSearch(searchedValue);
    };
    TreeSelect.prototype.handleSearchClear = function (triggerType) {
        this.setState({
            searchedValue: '',
            expandedKeys: []
        });
        this.props.onSearchClear(triggerType);
    };
    TreeSelect.prototype.handleExpand = function (expandedKeys) {
        this.setState({
            expandedKeys: expandedKeys,
            autoExpandParent: false
        });
    };
    TreeSelect.prototype.handleKeyDown = function (e) {
        var onKeyDown = this.props.onKeyDown;
        var visible = this.state.visible;
        if (onKeyDown) {
            onKeyDown(e);
        }
        if (!visible) {
            return;
        }
        switch (e.keyCode) {
            case util_2.KEYCODE.UP:
            case util_2.KEYCODE.DOWN:
                this.tree.setFocusKey();
                e.preventDefault();
                break;
            default:
                break;
        }
    };
    TreeSelect.prototype.handleChange = function (value, triggerType) {
        if (this.props.hasClear && triggerType === 'clear') {
            if (!('value' in this.props)) {
                this.setState({
                    value: []
                });
            }
            this.props.onChange(null, null);
        }
    };
    TreeSelect.prototype.searchNodes = function (children) {
        var _a = this.state,
            searchedKeys = _a.searchedKeys,
            retainedKeys = _a.retainedKeys;
        var loop = function loop(children) {
            var retainedNodes = [];
            react_1.Children.forEach(children, function (child) {
                if (searchedKeys.indexOf(child.key) > -1) {
                    retainedNodes.push(child);
                } else if (retainedKeys.indexOf(child.key) > -1) {
                    var retainedNode = child.props.children ? (0, react_1.cloneElement)(child, {}, loop(child.props.children)) : child;
                    retainedNodes.push(retainedNode);
                } else {
                    var hideNode = (0, react_1.cloneElement)(child, {
                        style: { display: 'none' }
                    });
                    retainedNodes.push(hideNode);
                }
            });
            return retainedNodes;
        };
        return loop(children);
    };
    TreeSelect.prototype.createNodesByData = function (data, searching) {
        var _this = this;
        var _a = this.state,
            searchedKeys = _a.searchedKeys,
            retainedKeys = _a.retainedKeys;
        var loop = function loop(data, isParentMatched, prefix) {
            if (prefix === void 0) {
                prefix = '0';
            }
            var retainedNodes = [];
            data.forEach(function (item, index) {
                var children = item.children,
                    others = tslib_1.__rest(item, ["children"]);
                var pos = "".concat(prefix, "-").concat(index);
                var key = _this.state._p2n[pos].key;
                var addNode = function addNode(isParentMatched, hide) {
                    if (hide) {
                        others.style = { display: 'none' };
                    }
                    retainedNodes.push(react_1.default.createElement(TreeNode, tslib_1.__assign({}, others, { key: key }), children && children.length ? loop(children, isParentMatched, pos) : null));
                };
                if (searching) {
                    if (searchedKeys.indexOf(key) > -1 || isParentMatched) {
                        addNode(true);
                    } else if (retainedKeys.indexOf(key) > -1) {
                        addNode(false);
                    } else {
                        addNode(false, true);
                    }
                } else {
                    addNode();
                }
            });
            return retainedNodes;
        };
        return loop(data, false);
    };
    /*eslint-disable max-statements*/
    TreeSelect.prototype.renderPopupContent = function () {
        var prefix = this.props.prefix;
        var treeSelectPrefix = "".concat(prefix, "tree-select-");
        if (!this.state.visible) {
            return react_1.default.createElement("div", { className: "".concat(treeSelectPrefix, "dropdown") });
        }
        var _a = this.props,
            multiple = _a.multiple,
            treeCheckable = _a.treeCheckable,
            treeCheckStrictly = _a.treeCheckStrictly,
            treeCheckedStrategy = _a.treeCheckedStrategy,
            treeDefaultExpandAll = _a.treeDefaultExpandAll,
            treeDefaultExpandedKeys = _a.treeDefaultExpandedKeys,
            treeLoadData = _a.treeLoadData,
            _b = _a.treeProps,
            customTreeProps = _b === void 0 ? {} : _b,
            showSearch = _a.showSearch,
            filterLocal = _a.filterLocal,
            dataSource = _a.dataSource,
            children = _a.children,
            readOnly = _a.readOnly,
            notFoundContent = _a.notFoundContent,
            useVirtual = _a.useVirtual,
            clickToCheck = _a.clickToCheck;
        var _c = this.state,
            value = _c.value,
            searchedValue = _c.searchedValue,
            expandedKeys = _c.expandedKeys,
            autoExpandParent = _c.autoExpandParent,
            searchedKeys = _c.searchedKeys;
        var treeProps = {
            multiple: multiple,
            ref: this.saveTreeRef,
            loadData: treeLoadData,
            defaultExpandAll: treeDefaultExpandAll,
            defaultExpandedKeys: treeDefaultExpandedKeys,
            useVirtual: useVirtual,
            isNodeBlock: true,
            clickToCheck: clickToCheck
        };
        // 使用虚拟滚动 设置默认高度
        if (useVirtual) {
            customTreeProps.style = tslib_1.__assign({ maxHeight: '260px', overflow: 'auto', boxSizing: 'border-box' }, customTreeProps.style);
        }
        var keys = this.getKeysByValue(value);
        if (treeCheckable) {
            treeProps.checkable = treeCheckable;
            treeProps.checkStrictly = treeCheckStrictly;
            treeProps.checkedStrategy = treeCheckStrictly ? 'all' : treeCheckedStrategy;
            treeProps.checkedKeys = keys;
            treeProps.selectable = !clickToCheck;
            if (!readOnly) {
                treeProps.onCheck = this.handleCheck;
            }
        } else {
            treeProps.selectedKeys = keys;
            if (!readOnly) {
                treeProps.onSelect = this.handleSelect;
            }
        }
        var notFound = false;
        var newChildren;
        if (filterLocal && showSearch && searchedValue) {
            treeProps.expandedKeys = expandedKeys;
            treeProps.autoExpandParent = autoExpandParent;
            treeProps.onExpand = this.handleExpand;
            treeProps.filterTreeNode = function (node) {
                return searchedKeys.indexOf(node.props.eventKey) > -1;
            };
            if (searchedKeys.length) {
                newChildren = dataSource ? this.createNodesByData(dataSource, true) : this.searchNodes(children);
            } else {
                notFound = true;
            }
        } else {
            // eslint-disable-next-line
            if (dataSource) {
                if (dataSource.length) {
                    newChildren = this.createNodesByData(dataSource);
                } else {
                    notFound = true;
                }
            } else {
                // eslint-disable-next-line
                if (react_1.Children.count(children)) {
                    newChildren = children;
                } else {
                    notFound = true;
                }
            }
        }
        var contentClass = "".concat(treeSelectPrefix, "dropdown-content");
        return react_1.default.createElement("div", { className: "".concat(treeSelectPrefix, "dropdown") }, notFound ? react_1.default.createElement("div", { className: "".concat(treeSelectPrefix, "not-found contentClass") }, notFoundContent) : react_1.default.createElement(tree_1.default, tslib_1.__assign({}, treeProps, customTreeProps, { className: contentClass }), newChildren));
    };
    TreeSelect.prototype.renderPreview = function (data, others) {
        var _a = this.props,
            prefix = _a.prefix,
            className = _a.className,
            renderPreview = _a.renderPreview;
        var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
        var items = data && !Array.isArray(data) ? [data] : data;
        if (typeof renderPreview === 'function') {
            return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: previewCls }), renderPreview(items, this.props));
        }
        return react_1.default.createElement("p", tslib_1.__assign({}, others, { className: previewCls }), items && items.map(function (_a) {
            var label = _a.label;
            return label;
        }).join(', '));
    };
    /**
     * TreeSelect 无法直接使用 Select 的 maxTagPlaceholder 逻辑
     * Select 的 totalValue 是所有 leaf 节点，TreeSelect 的 totalValue 受 treeCheckedStrategy 和 treeCheckStrictly 影响
     *
     * treeCheckStrictly = true: totalValue 为所有节点
     *
     * treeCheckStrictly = false: 根据 treeCheckedStrategy 判断
     *   treeCheckedStrategy = 'all': totalValue 为所有节点
     *   treeCheckedStrategy = 'parent': totalValue 无意义，不返回
     *   treeCheckedStrategy = 'child': totalValue 为所有 leaf 节点
     */
    TreeSelect.prototype.renderMaxTagPlaceholder = function (value, totalValue) {
        // 这里的 totalValue 为所有 leaf 节点
        var _a = this.props,
            treeCheckStrictly = _a.treeCheckStrictly,
            maxTagPlaceholder = _a.maxTagPlaceholder,
            treeCheckedStrategy = _a.treeCheckedStrategy,
            locale = _a.locale;
        var _v2n = this.state._v2n;
        var treeSelectTotalValue = totalValue; // all the leaf nodes
        // calculate total value
        if (treeCheckStrictly) {
            // all the nodes
            treeSelectTotalValue = util_2.obj.values(_v2n);
        } else if (treeCheckedStrategy === 'all') {
            // all
            treeSelectTotalValue = util_2.obj.values(_v2n);
        } else if (treeCheckedStrategy === 'parent') {
            // totalValue is pointless when treeCheckedStrategy = 'parent'
            treeSelectTotalValue = undefined;
        }
        // custom render function
        if (maxTagPlaceholder) {
            return maxTagPlaceholder(value, treeSelectTotalValue);
        }
        // default render function
        if (treeCheckedStrategy === 'parent') {
            // don't show totalValue when treeCheckedStrategy = 'parent'
            return "".concat(util_2.str.template(locale.shortMaxTagPlaceholder, {
                selected: value.length
            }));
        }
        return "".concat(util_2.str.template(locale.maxTagPlaceholder, {
            selected: value.length,
            total: treeSelectTotalValue.length
        }));
    };
    /*eslint-enable*/
    TreeSelect.prototype.render = function () {
        var _this = this;
        var _a = this.props,
            prefix = _a.prefix,
            size = _a.size,
            placeholder = _a.placeholder,
            disabled = _a.disabled,
            hasArrow = _a.hasArrow,
            hasBorder = _a.hasBorder,
            hasClear = _a.hasClear,
            label = _a.label,
            readOnly = _a.readOnly,
            autoWidth = _a.autoWidth,
            popupStyle = _a.popupStyle,
            popupClassName = _a.popupClassName,
            showSearch = _a.showSearch,
            multiple = _a.multiple,
            treeCheckable = _a.treeCheckable,
            treeCheckStrictly = _a.treeCheckStrictly,
            className = _a.className,
            popupContainer = _a.popupContainer,
            popupProps = _a.popupProps,
            followTrigger = _a.followTrigger,
            isPreview = _a.isPreview,
            dataSource = _a.dataSource,
            tagInline = _a.tagInline,
            _valueRender = _a.valueRender;
        var others = util_2.obj.pickOthers(Object.keys(TreeSelect.propTypes), this.props);
        var _b = this.state,
            value = _b.value,
            visible = _b.visible;
        var valueRenderProps = typeof _valueRender === 'function' ? {
            valueRender: function valueRender(item) {
                return _valueRender(item, _this.getFullItemPath(item));
            }
        } : undefined;
        // if (non-leaf 节点可选 & 父子节点选中状态需要联动)，需要额外计算父子节点间的联动关系
        var valueForSelect = treeCheckable && !treeCheckStrictly ? this.getValueForSelect(value) : value;
        var data = this.getData(valueForSelect, true);
        if (!multiple && !treeCheckable) {
            data = data[0];
        }
        if (isPreview) {
            return this.renderPreview(data, others);
        }
        return react_1.default.createElement(select_1.default, tslib_1.__assign({ prefix: prefix, className: className, size: size, hasBorder: hasBorder, hasArrow: hasArrow, hasClear: hasClear, placeholder: placeholder, disabled: disabled, autoWidth: autoWidth, label: label, readOnly: readOnly, ref: this.saveSelectRef, dataSource: dataSource, value: data, onChange: this.handleChange, visible: visible, onVisibleChange: this.handleVisibleChange, showSearch: showSearch, onSearch: this.handleSearch, onSearchClear: this.handleSearchClear, popupContainer: popupContainer, popupStyle: popupStyle, popupClassName: popupClassName, popupProps: popupProps, followTrigger: followTrigger, tagInline: tagInline, maxTagPlaceholder: this.renderMaxTagPlaceholder }, valueRenderProps, others, { onRemove: this.handleRemove, onKeyDown: this.handleKeyDown, popupContent: this.renderPopupContent(), mode: treeCheckable || multiple ? 'multiple' : 'single' }));
    };
    TreeSelect.propTypes = {
        prefix: prop_types_1.default.string,
        pure: prop_types_1.default.bool,
        locale: prop_types_1.default.object,
        className: prop_types_1.default.string,
        /**
         * 树节点
         */
        children: prop_types_1.default.node,
        /**
         * 选择框大小
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        /**
         * 选择框占位符
         */
        placeholder: prop_types_1.default.string,
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 是否有下拉箭头
         */
        hasArrow: prop_types_1.default.bool,
        /**
         * 是否有边框
         */
        hasBorder: prop_types_1.default.bool,
        /**
         * 是否有清空按钮
         */
        hasClear: prop_types_1.default.bool,
        /**
         * 自定义内联 label
         */
        label: prop_types_1.default.node,
        /**
         * 是否只读，只读模式下可以展开弹层但不能选择
         */
        readOnly: prop_types_1.default.bool,
        /**
         * 下拉框是否与选择器对齐
         */
        autoWidth: prop_types_1.default.bool,
        /**
         * 数据源，该属性优先级高于 children
         */
        dataSource: prop_types_1.default.arrayOf(prop_types_1.default.object),
        /**
         * value/defaultValue 在 dataSource 中不存在时，是否展示
         * @version 1.25
         */
        preserveNonExistentValue: prop_types_1.default.bool,
        /**
         * （受控）当前值
         */
        value: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.object, prop_types_1.default.arrayOf(prop_types_1.default.any)]),
        /**
         * （非受控）默认值
         */
        defaultValue: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.object, prop_types_1.default.arrayOf(prop_types_1.default.any)]),
        /**
         * 选中值改变时触发的回调函数
         * @param {String|Array} value 选中的值，单选时返回单个值，多选时返回数组
         * @param {Object|Array} data 选中的数据，包括 value, label, pos, key属性，单选时返回单个值，多选时返回数组，父子节点选中关联时，同时选中，只返回父节点
         */
        onChange: prop_types_1.default.func,
        /**
         * 是否一行显示，仅在 multiple 和 treeCheckable 为 true 时生效
         * @version 1.25
         */
        tagInline: prop_types_1.default.bool,
        /**
         * 隐藏多余 tag 时显示的内容，在 tagInline 生效时起作用
         * @param {Object[]} selectedValues 当前已选中的元素
         * @param {Object[]} totalValues 总待选元素
         * @returns {reactNode}
         * @version 1.25
         */
        maxTagPlaceholder: prop_types_1.default.func,
        /**
         * 选择时是否自动清空 searchValue
         * @version 1.26
         */
        autoClearSearch: prop_types_1.default.bool,
        /**
         * 是否显示搜索框
         */
        showSearch: prop_types_1.default.bool,
        /**
         * 	是否使用本地过滤，在数据源为远程的时候需要关闭此项
         */
        filterLocal: prop_types_1.default.bool,
        /**
         * 在搜索框中输入时触发的回调函数
         * @param {String} keyword 输入的关键字
         */
        onSearch: prop_types_1.default.func,
        onSearchClear: prop_types_1.default.func,
        /**
         * 无数据时显示内容
         */
        notFoundContent: prop_types_1.default.node,
        /**
         * 是否支持多选
         */
        multiple: prop_types_1.default.bool,
        /**
         * 下拉框中的树是否支持勾选节点的复选框
         */
        treeCheckable: prop_types_1.default.bool,
        /**
         * 下拉框中的树勾选节点复选框是否完全受控（父子节点选中状态不再关联）
         */
        treeCheckStrictly: prop_types_1.default.bool,
        /**
         * 定义选中时回填的方式
         * @enumdesc 返回所有选中的节点, 父子节点都选中时只返回父节点, 父子节点都选中时只返回子节点
         */
        treeCheckedStrategy: prop_types_1.default.oneOf(['all', 'parent', 'child']),
        /**
         * 下拉框中的树是否默认展开所有节点
         */
        treeDefaultExpandAll: prop_types_1.default.bool,
        /**
         * 下拉框中的树默认展开节点key的数组
         */
        treeDefaultExpandedKeys: prop_types_1.default.arrayOf(prop_types_1.default.string),
        /**
         * 下拉框中的树异步加载数据的函数，使用请参考[Tree的异步加载数据Demo](https://fusion.design/pc/component/tree?themeid=2#dynamic-container)
         * @param {ReactElement} node 被点击展开的节点
         */
        treeLoadData: prop_types_1.default.func,
        /**
         * 透传到 Tree 的属性对象
         */
        treeProps: prop_types_1.default.object,
        /**
         * 初始下拉框是否显示
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 当前下拉框是否显示
         */
        visible: prop_types_1.default.bool,
        /**
         * 下拉框显示或关闭时触发事件的回调函数
         * @param {Boolean} visible 是否显示
         * @param {String} type 触发显示关闭的操作类型
         */
        onVisibleChange: prop_types_1.default.func,
        /**
         * 下拉框自定义样式对象
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 下拉框样式自定义类名
         */
        popupClassName: prop_types_1.default.string,
        /**
         * 下拉框挂载的容器节点
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 透传到 Popup 的属性对象
         */
        popupProps: prop_types_1.default.object,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {Array<data>} value 选择值 { label: , value:}
         */
        renderPreview: prop_types_1.default.func,
        /**
         * 是否开启虚拟滚动
         */
        useVirtual: prop_types_1.default.bool,
        /**
         * 是否是不可变数据
         * @version 1.23
         */
        immutable: prop_types_1.default.bool,
        /**
         * 点击文本是否可以勾选
         */
        clickToCheck: prop_types_1.default.bool,
        /**
         * 渲染 Select 展现内容的方法
         * @param {Object} item 渲染节点的item
         * @param {Object[]} itemPaths item的全路径数组
         * @return {ReactNode} 展现内容
         * @default item => `item.label || item.value`
         */
        valueRender: prop_types_1.default.func
    };
    TreeSelect.defaultProps = {
        prefix: 'next-',
        pure: false,
        locale: zh_cn_1.default.TreeSelect,
        size: 'medium',
        disabled: false,
        hasArrow: true,
        hasBorder: true,
        hasClear: false,
        autoWidth: true,
        defaultValue: null,
        onChange: noop,
        tagInline: false,
        autoClearSearch: true,
        showSearch: false,
        filterLocal: true,
        onSearch: noop,
        onSearchClear: noop,
        notFoundContent: 'Not Found',
        multiple: false,
        treeCheckable: false,
        treeCheckStrictly: false,
        treeCheckedStrategy: 'parent',
        treeDefaultExpandAll: false,
        treeDefaultExpandedKeys: [],
        treeProps: {},
        defaultVisible: false,
        onVisibleChange: noop,
        useVirtual: false,
        /**
         * TODO
         * 目前 select/cascade select 是默认支持的，在 2.x 版本中 tree-select 也将默认支持
         */
        preserveNonExistentValue: false,
        clickToCheck: false
    };
    return TreeSelect;
}(react_1.Component);
TreeSelect.Node = TreeNode;
exports.default = (0, react_lifecycles_compat_1.polyfill)(TreeSelect);

/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var text_1 = __webpack_require__(66);
var paragraph_1 = __webpack_require__(454);
var typography_1 = __webpack_require__(455);
var title_1 = __webpack_require__(456);
var WithSubTypography = typography_1.default;
WithSubTypography.Text = text_1.default;
WithSubTypography.Paragraph = paragraph_1.default;
WithSubTypography.H1 = (0, title_1.default)('h1');
WithSubTypography.H2 = (0, title_1.default)('h2');
WithSubTypography.H3 = (0, title_1.default)('h3');
WithSubTypography.H4 = (0, title_1.default)('h4');
WithSubTypography.H5 = (0, title_1.default)('h5');
WithSubTypography.H6 = (0, title_1.default)('h6');
exports.default = WithSubTypography;

/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var React = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
var classNames = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var text_1 = __webpack_require__(66);
/**
 * Typography.Paragraph
 */
var Paragraph = /** @class */function (_super) {
    tslib_1.__extends(Paragraph, _super);
    function Paragraph() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Paragraph.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            className = _a.className,
            component = _a.component,
            others = tslib_1.__rest(_a, ["prefix", "className", "component"]);
        var cls = classNames("".concat(prefix, "typography-paragraph"), className);
        return React.createElement(text_1.default, tslib_1.__assign({}, others, { className: cls, component: component }));
    };
    Paragraph.propTypes = {
        prefix: PropTypes.string,
        component: PropTypes.elementType
    };
    Paragraph.defaultProps = {
        prefix: 'next-',
        type: 'long',
        size: 'medium',
        component: 'p'
    };
    return Paragraph;
}(React.Component);
exports.default = config_provider_1.default.config(Paragraph);

/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var React = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
var text_1 = __webpack_require__(66);
/**
 * Typography
 */
var Typography = /** @class */function (_super) {
    tslib_1.__extends(Typography, _super);
    function Typography() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Typography.prototype.render = function () {
        return React.createElement(text_1.default, tslib_1.__assign({}, this.props));
    };
    Typography.propTypes = {
        component: PropTypes.elementType
    };
    Typography.defaultProps = {
        component: 'article'
    };
    return Typography;
}(React.Component);
exports.default = Typography;

/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var React = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
var text_1 = __webpack_require__(66);
var config_provider_1 = __webpack_require__(5);
exports.default = function (Tag) {
    /**
     * Typography.Title
     */
    var Title = /** @class */function (_super) {
        tslib_1.__extends(Title, _super);
        function Title() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Title.prototype.render = function () {
            var _a = this.props,
                prefix = _a.prefix,
                className = _a.className,
                others = tslib_1.__rest(_a, ["prefix", "className"]);
            return React.createElement(text_1.default, tslib_1.__assign({}, others, { component: Tag, className: "".concat(className || '', " ").concat(prefix, "typography-title") }));
        };
        Title.propTypes = {
            prefix: PropTypes.string
        };
        Title.defaultProps = {
            prefix: 'next-'
        };
        Title.displayName = Tag.toUpperCase();
        return Title;
    }(React.Component);
    return config_provider_1.default.config(Title);
};

/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(36);
var transform_1 = __webpack_require__(193);
var upload_1 = __webpack_require__(104);
var list_1 = __webpack_require__(106);
var card_1 = __webpack_require__(461);
var dragger_1 = __webpack_require__(462);
var selecter_1 = __webpack_require__(105);
var uploader_1 = __webpack_require__(196);
upload_1.default.Card = config_provider_1.default.config(card_1.default, { componentName: 'Upload' });
upload_1.default.Dragger = config_provider_1.default.config(dragger_1.default, { componentName: 'Upload' });
upload_1.default.Selecter = selecter_1.default;
upload_1.default.Uploader = uploader_1.default;
upload_1.default.ErrorCode = util_2.errorCode;
// compatible with 0.x version
upload_1.default.ImageUpload = config_provider_1.default.config(card_1.default, {
    componentName: 'Upload',
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        deprecated('Upload.ImageUpload', 'Upload.Card', 'Upload');
        var newprops = (0, transform_1.default)(props, function () {});
        if (newprops.locale && newprops.locale.image) {
            newprops.locale.card = newprops.locale.image;
        }
        return newprops;
    }
});
// compatible with 0.x version
upload_1.default.DragUpload = config_provider_1.default.config(dragger_1.default, {
    componentName: 'Upload',
    transform: /* istanbul ignore next */function transform(props, deprecated) {
        deprecated('Upload.DragUpload', 'Upload.Dragger', 'Upload');
        var newprops = (0, transform_1.default)(props, function () {});
        if (!newprops.listType) {
            newprops.listType = 'card';
        }
        return newprops;
    }
});
// compatible with 0.x version
/* istanbul ignore next */
upload_1.default.Core = /** @class */function (_super) {
    tslib_1.__extends(Core, _super);
    function Core(props) {
        var _this = _super.call(this, props) || this;
        _this.handleSelect = function (files) {
            _this.uploader.startUpload(files);
        };
        // eslint-disable-next-line
        var _a = _this.props,
            action = _a.action,
            name = _a.name,
            method = _a.method,
            beforeUpload = _a.beforeUpload,
            onProgress = _a.onProgress,
            onError = _a.onError,
            withCredentials = _a.withCredentials,
            headers = _a.headers,
            data = _a.data,
            onSuccess = _a.onSuccess;
        _this.uploader = new uploader_1.default({
            action: action,
            name: name,
            method: method,
            beforeUpload: beforeUpload,
            onProgress: onProgress,
            onError: onError,
            withCredentials: withCredentials,
            headers: headers,
            data: data,
            onSuccess: onSuccess
        });
        return _this;
    }
    Core.prototype.abort = function () {
        this.uploader.abort();
    };
    Core.prototype.render = function () {
        util_1.log.deprecated('Upload.Core', 'Upload.Selecter and Upload.Uploader', 'Upload');
        // eslint-disable-next-line
        var _a = this.props,
            action = _a.action,
            name = _a.name,
            method = _a.method,
            beforeUpload = _a.beforeUpload,
            onProgress = _a.onProgress,
            onError = _a.onError,
            withCredentials = _a.withCredentials,
            headers = _a.headers,
            data = _a.data,
            onSuccess = _a.onSuccess,
            others = tslib_1.__rest(_a, ["action", "name", "method", "beforeUpload", "onProgress", "onError", "withCredentials", "headers", "data", "onSuccess"]);
        var props = others;
        return react_1.default.createElement(selecter_1.default, tslib_1.__assign({}, (0, transform_1.default)(props, function () {}), { onSelect: this.handleSelect }));
    };
    return Core;
}(react_1.default.Component);
upload_1.default.List = list_1.default;
// compatible with 0.x version
/* istanbul ignore next */
upload_1.default.CropUpload = function () {
    util_1.log.deprecated('Upload.CropUpload', '@alife/bc-next-crop-upload', 'Upload');
    return null;
};
exports.default = config_provider_1.default.config(upload_1.default, {
    transform: transform_1.default
});

/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var html5_uploader_1 = __webpack_require__(195);
var iframe_uploader_1 = __webpack_require__(460);
var Uploader = /** @class */function (_super) {
    tslib_1.__extends(Uploader, _super);
    function Uploader() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.state = {
            Component: html5_uploader_1.default
        };
        _this.saveUploaderRef = function (ref) {
            _this.uploaderRef = ref;
        };
        return _this;
    }
    Uploader.prototype.componentDidMount = function () {
        if (typeof File === 'undefined') {
            /* eslint react/no-did-mount-set-state:0 */
            this.setState({
                Component: iframe_uploader_1.default
            });
        }
    };
    Uploader.prototype.abort = function (file) {
        this.uploaderRef.abort(file);
    };
    Uploader.prototype.startUpload = function (files) {
        this.uploaderRef.startUpload(files);
    };
    Uploader.prototype.render = function () {
        var Uploader = this.state.Component;
        return react_1.default.createElement(Uploader, tslib_1.__assign({}, this.props, { ref: this.saveUploaderRef }));
    };
    return Uploader;
}(react_1.default.Component);
exports.default = Uploader;

/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * clone from https://github.com/react-component/upload/blob/master/src/request.js
 */

Object.defineProperty(exports, "__esModule", { value: true });
function getError(option, xhr, msg) {
    msg = msg || "cannot post ".concat(option.action, " ").concat(xhr.status, "'");
    var err = new Error(msg);
    err.status = xhr.status;
    err.method = option.method;
    err.url = option.action;
    return err;
}
function getBody(xhr) {
    var text = xhr.responseText || xhr.response;
    if (!text) {
        return text;
    }
    try {
        return JSON.parse(text);
    } catch (e) {
        return text;
    }
}
// option {
//  onProgress: (event: { percent: number }): void,
//  onError: (event: Error, body?: Object): void,
//  onSuccess: (body: Object): void,
//  data: Object,
//  filename: String,
//  file: File,
//  withCredentials: Boolean,
//  action: String,
//  headers: Object,
//  method: String
//  timeout: Number
// }
function upload(option) {
    var xhr = new XMLHttpRequest();
    if (option.onProgress && xhr.upload) {
        xhr.upload.onprogress = function progress(e) {
            if (e.total > 0) {
                e.percent = e.loaded / e.total * 100;
            }
            option.onProgress(e);
        };
    }
    var formData = new FormData();
    if (option.data) {
        Object.keys(option.data).forEach(function (key) {
            formData.append(key, option.data[key]);
        });
    }
    if (option.file instanceof Blob) {
        formData.append(option.filename, option.file, option.file.name);
    } else {
        formData.append(option.filename, option.file);
    }
    xhr.onerror = function error(e) {
        option.onError(e);
    };
    xhr.onload = function onload() {
        // allow success when 2xx status
        // see https://github.com/react-component/upload/issues/34
        if (xhr.status < 200 || xhr.status >= 300) {
            return option.onError(getError(option, xhr), getBody(xhr));
        }
        option.onSuccess(getBody(xhr), xhr);
    };
    option.method = option.method || 'POST';
    xhr.open(option.method, option.action, true);
    // In Internet Explorer, the timeout property may be set only after calling the open() method and before calling the send() method.
    // see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout
    var timeout = option.timeout;
    if (typeof timeout === 'number' && timeout > 0) {
        xhr.timeout = timeout;
        xhr.ontimeout = function () {
            var msg = "Upload abort for exceeding time (timeout: ".concat(timeout, "ms)");
            option.onError(getError(option, xhr, msg), getBody(xhr));
        };
    }
    // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179
    if (option.withCredentials && 'withCredentials' in xhr) {
        xhr.withCredentials = true;
    }
    var headers = option.headers || {};
    // when set headers['X-Requested-With'] = null , can close default XHR header
    // see https://github.com/react-component/upload/issues/33
    if (headers['X-Requested-With'] !== null) {
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    }
    for (var h in headers) {
        if (headers.hasOwnProperty(h) && headers[h] !== null) {
            xhr.setRequestHeader(h, headers[h]);
        }
    }
    xhr.send(formData);
    return {
        abort: function abort() {
            xhr.abort();
        }
    };
}
exports.default = upload;

/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
/* istanbul ignore file */
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_dom_1 = __webpack_require__(8);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(36);
var INPUT_STYLE = {
    position: 'absolute',
    top: 0,
    right: 0,
    fontSize: 9999,
    zIndex: 9999,
    opacity: 0,
    outline: 'none',
    cursor: 'pointer'
};
var IframeUploader = /** @class */function (_super) {
    tslib_1.__extends(IframeUploader, _super);
    function IframeUploader(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            uploading: false
        };
        _this.file = {};
        _this.uid = '';
        _this.onLoad = function () {
            if (!_this.state.uploading) {
                return;
            }
            var _a = _this,
                props = _a.props,
                file = _a.file;
            var response;
            try {
                var doc = _this.iFrameEl.contentDocument;
                var script = doc.getElementsByTagName('script')[0];
                if (script && script.parentNode === doc.body) {
                    doc.body.removeChild(script);
                }
                response = doc.body.innerHTML;
                props.onSuccess(response, file);
            } catch (err) {
                util_1.log.warning('cross domain error for Upload. Maybe server should return document.domain script.');
                response = 'cross-domain';
                props.onError(err, null, file);
            }
            _this.endUpload();
        };
        _this.onSelect = function (e) {
            _this.file = {
                uid: (0, util_2.uid)(),
                name: e.target.value
            };
            _this.props.onSelect([_this.file]);
        };
        _this.saveIFrameRef = function (ref) {
            _this.iFrameEl = ref;
        };
        _this.saveFormRef = function (ref) {
            _this.formEl = ref;
        };
        _this.saveDataRef = function (ref) {
            _this.dataEl = ref;
        };
        _this.saveInputRef = function (ref) {
            _this.inputEl = ref;
        };
        _this.domain = typeof document !== 'undefined' && document.domain ? document.domain : '';
        _this.uid = (0, util_2.uid)();
        return _this;
    }
    IframeUploader.prototype.componentDidMount = function () {
        this.updateInputWH();
    };
    IframeUploader.prototype.componentDidUpdate = function () {
        this.updateInputWH();
    };
    IframeUploader.prototype.startUpload = function () {
        this.upload(this.file);
    };
    IframeUploader.prototype.upload = function (file) {
        var _this = this;
        if (!this.state.uploading) {
            // eslint-disable-next-line
            this.state.uploading = true;
            this.setState({ uploading: true });
        }
        var _a = this.props,
            beforeUpload = _a.beforeUpload,
            action = _a.action,
            name = _a.name,
            data = _a.data;
        if (!beforeUpload) {
            return this.post(file);
        }
        var requestData = {
            action: action,
            name: name,
            data: data
        };
        var before = beforeUpload(file, requestData);
        if (before && before.then) {
            before.then(function (data) {
                _this.post(file, data);
            }, function () {
                _this.endUpload();
            });
        } else if (before !== false) {
            this.post(file, util_1.obj.isPlainObject(before) ? before : undefined);
        } else {
            this.endUpload();
        }
    };
    IframeUploader.prototype.endUpload = function () {
        this.file = {};
        if (this.state.uploading) {
            // eslint-disable-next-line
            this.state.uploading = false;
            this.setState({ uploading: false });
        }
    };
    IframeUploader.prototype.updateInputWH = function () {
        var rootNode = react_dom_1.default.findDOMNode(this);
        var inputNode = this.inputEl;
        inputNode.style.height = "".concat(rootNode.offsetHeight, "px");
        inputNode.style.width = "".concat(rootNode.offsetWidth, "px");
    };
    IframeUploader.prototype.abort = function (file) {
        if (file) {
            var uid_1 = file;
            if (file && file.uid) {
                uid_1 = file.uid;
            }
            if (uid_1 === this.file.uid) {
                this.endUpload();
            }
        } else {
            this.endUpload();
        }
    };
    IframeUploader.prototype.post = function (file, requestOption) {
        if (requestOption === void 0) {
            requestOption = {};
        }
        var formNode = this.formEl;
        var dataSpan = this.dataEl;
        var fileInput = this.inputEl;
        var propsData = this.props.data;
        if (typeof propsData === 'function') {
            propsData = propsData(file);
        }
        var action = requestOption.action,
            name = requestOption.name,
            data = requestOption.data;
        if (name) {
            fileInput.setAttribute('name', name);
        }
        if (action) {
            formNode.setAttribute('action', action);
        }
        if (data) {
            propsData = data;
        }
        var inputs = document.createDocumentFragment();
        for (var key in propsData) {
            if (data.hasOwnProperty(key)) {
                var input = document.createElement('input');
                input.setAttribute('name', key);
                input.value = propsData[key];
                inputs.appendChild(input);
            }
        }
        dataSpan.appendChild(inputs);
        formNode.submit();
        dataSpan.innerHTML = '';
        this.props.onStart(file);
    };
    IframeUploader.prototype.render = function () {
        var _a = this.props,
            disabled = _a.disabled,
            className = _a.className,
            children = _a.children,
            accept = _a.accept,
            name = _a.name,
            style = _a.style;
        var uid = this.uid;
        var iframeName = "".concat(name, "-").concat(uid, "-iframe");
        return react_1.default.createElement("span", { className: className, style: tslib_1.__assign({ position: 'relative', zIndex: 0, display: 'inline-block' }, style) }, !disabled ? react_1.default.createElement("iframe", { ref: this.saveIFrameRef, name: iframeName, onLoad: this.onLoad, style: { display: 'none' } }) : null, react_1.default.createElement("form", { ref: this.saveFormRef, method: "post", action: this.props.action, encType: "multipart/form-data", target: iframeName }, react_1.default.createElement("input", { name: "_documentDomain", value: this.domain, type: "hidden" }), react_1.default.createElement("span", { ref: this.saveDataRef }), react_1.default.createElement("input", { ref: this.saveInputRef, type: "file", accept: accept, name: name, onChange: this.onSelect, style: INPUT_STYLE })), children);
    };
    IframeUploader.propTypes = {
        style: prop_types_1.default.object,
        action: prop_types_1.default.string.isRequired,
        name: prop_types_1.default.string.isRequired,
        data: prop_types_1.default.oneOfType([prop_types_1.default.object, prop_types_1.default.func]),
        disabled: prop_types_1.default.bool,
        className: prop_types_1.default.string,
        children: prop_types_1.default.node,
        headers: prop_types_1.default.object,
        autoUpload: prop_types_1.default.bool,
        onSelect: prop_types_1.default.func,
        beforeUpload: prop_types_1.default.func,
        onStart: prop_types_1.default.func,
        onSuccess: prop_types_1.default.func,
        onError: prop_types_1.default.func,
        accept: prop_types_1.default.string
    };
    IframeUploader.defaultProps = {
        name: 'file',
        onSelect: util_1.func.noop,
        beforeUpload: util_1.func.noop,
        onStart: util_1.func.noop,
        onSuccess: util_1.func.noop,
        onError: util_1.func.noop,
        onAbort: util_1.func.noop
    };
    return IframeUploader;
}(react_1.default.Component);
exports.default = IframeUploader;

/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var base_1 = __webpack_require__(194);
var list_1 = __webpack_require__(106);
var upload_1 = __webpack_require__(104);
/**
 * Upload.Card
 * @description 继承 Upload 的 API，除非特别说明
 */
var Card = /** @class */function (_super) {
    tslib_1.__extends(Card, _super);
    function Card(props) {
        var _this = _super.call(this, props) || this;
        _this.onProgress = function (value, targetItem) {
            _this.setState({
                value: value
            });
            _this.props.onProgress(value, targetItem);
        };
        _this.onChange = function (value, file) {
            if (!('value' in _this.props)) {
                _this.setState({
                    value: value
                });
            }
            _this.props.onChange(value, file);
        };
        var value;
        /* istanbul ignore else */
        if ('value' in props) {
            value = props.value;
        } else {
            value = props.defaultValue;
        }
        _this.state = {
            value: !Array.isArray(value) ? [] : value,
            uploaderRef: _this.uploaderRef
        };
        return _this;
    }
    Card.prototype.componentDidMount = function () {
        this.updateUploaderRef(this.uploaderRef);
    };
    Card.prototype.componentDidUpdate = function () {
        var uploaderRef = this.state.uploaderRef;
        if (!uploaderRef && this.uploaderRef) {
            this.updateUploaderRef(this.uploaderRef);
        }
    };
    Card.getDerivedStateFromProps = function (nextProps, prevState) {
        var isUploading = prevState.uploaderRef && prevState.uploaderRef.isUploading();
        if ('value' in nextProps && nextProps.value !== prevState.value && !isUploading) {
            return {
                value: !Array.isArray(nextProps.value) ? [] : [].concat(nextProps.value)
            };
        }
        return null;
    };
    Card.prototype.isUploading = function () {
        return this.uploaderRef.isUploading();
    };
    Card.prototype.saveRef = function (ref) {
        this.saveUploaderRef(ref);
    };
    Card.prototype.updateUploaderRef = function (uploaderRef) {
        this.setState({ uploaderRef: uploaderRef });
    };
    Card.prototype.render = function () {
        var _a, _b;
        var _this = this;
        var _c = this.props,
            action = _c.action,
            disabled = _c.disabled,
            prefix = _c.prefix,
            locale = _c.locale,
            className = _c.className,
            style = _c.style,
            limit = _c.limit,
            onPreview = _c.onPreview,
            onRemove = _c.onRemove,
            onCancel = _c.onCancel,
            timeout = _c.timeout,
            isPreview = _c.isPreview,
            renderPreview = _c.renderPreview,
            itemRender = _c.itemRender,
            reUpload = _c.reUpload,
            showDownload = _c.showDownload;
        var isExceedLimit = this.state.value.length >= limit;
        var uploadButtonCls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "upload-list-item")] = true, _a["".concat(prefix, "hidden")] = isExceedLimit, _a));
        var children = this.props.children || locale.card.addPhoto;
        var onRemoveFunc = disabled ? util_1.func.prevent : onRemove;
        var othersForList = util_1.obj.pickOthers(Card.propTypes, this.props);
        var othersForUpload = util_1.obj.pickOthers(list_1.default.propTypes, othersForList);
        if (isPreview) {
            if (typeof renderPreview === 'function') {
                var previewCls = (0, classnames_1.default)((_b = {}, _b["".concat(prefix, "form-preview")] = true, _b[className] = !!className, _b));
                return react_1.default.createElement("div", { style: style, className: previewCls }, renderPreview(this.state.value, this.props));
            }
        }
        return react_1.default.createElement(list_1.default, tslib_1.__assign({ className: className, style: style, listType: "card", closable: true, locale: locale, value: this.state.value, onRemove: onRemoveFunc, onCancel: onCancel, onPreview: onPreview, itemRender: itemRender, isPreview: isPreview, uploader: this.uploaderRef, reUpload: reUpload, showDownload: showDownload }, othersForList), react_1.default.createElement(upload_1.default, tslib_1.__assign({}, othersForUpload, { shape: "card", prefix: prefix, disabled: disabled, action: action, timeout: timeout, isPreview: isPreview, value: this.state.value, onProgress: this.onProgress, onChange: this.onChange, ref: function ref(_ref) {
                return _this.saveRef(_ref);
            }, className: uploadButtonCls }), children));
    };
    Card.displayName = 'Card';
    Card.propTypes = {
        prefix: prop_types_1.default.string,
        locale: prop_types_1.default.object,
        children: prop_types_1.default.object,
        value: prop_types_1.default.oneOfType([prop_types_1.default.array, prop_types_1.default.object]),
        defaultValue: prop_types_1.default.oneOfType([prop_types_1.default.array, prop_types_1.default.object]),
        /**
         * 点击图片回调
         */
        onPreview: prop_types_1.default.func,
        /**
         * 改变时候的回调
         */
        onChange: prop_types_1.default.func,
        /**
         * 点击移除的回调
         */
        onRemove: prop_types_1.default.func,
        /**
         * 取消上传的回调
         */
        onCancel: prop_types_1.default.func,
        /**
         * 自定义成功和失败的列表渲染方式
         * @param {File} file 文件对象
         * @param {Object} obj {remove: 删除回调}
         * @retuns {ReactNode} React元素
         * @version 1.21
         */
        itemRender: prop_types_1.default.func,
        /**
         * 选择新文件上传并替换
         * @version 1.24
         */
        reUpload: prop_types_1.default.bool,
        /**
         * 展示下载按钮
         * @version 1.24
         */
        showDownload: prop_types_1.default.bool,
        /**
         * 上传中
         */
        onProgress: prop_types_1.default.func,
        isPreview: prop_types_1.default.bool,
        renderPreview: prop_types_1.default.func
    };
    Card.defaultProps = {
        prefix: 'next-',
        locale: zh_cn_1.default.Upload,
        showDownload: true,
        onChange: util_1.func.noop,
        onPreview: util_1.func.noop,
        onProgress: util_1.func.noop
    };
    return Card;
}(base_1.default);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Card);

/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
var zh_cn_1 = __webpack_require__(9);
var upload_1 = __webpack_require__(104);
/**
 * Upload.Dragger
 * @description IE10+ 支持。继承 Upload 的 API，除非特别说明
 */
var Dragger = /** @class */function (_super) {
    tslib_1.__extends(Dragger, _super);
    function Dragger() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.state = {
            dragOver: false
        };
        _this.onDragOver = function (e) {
            if (!_this.state.dragOver) {
                _this.setState({
                    dragOver: true
                });
            }
            _this.props.onDragOver(e);
        };
        _this.onDragLeave = function (e) {
            _this.setState({
                dragOver: false
            });
            _this.props.onDragLeave(e);
        };
        _this.onDrop = function (e) {
            _this.setState({
                dragOver: false
            });
            _this.props.onDrop(e);
        };
        _this.saveUploaderRef = function (ref) {
            /* istanbul ignore if */
            if (ref && typeof ref.getInstance === 'function') {
                _this.uploaderRef = ref.getInstance();
            } else {
                _this.uploaderRef = ref;
            }
        };
        return _this;
    }
    /* istanbul ignore next */
    Dragger.prototype.abort = function (file) {
        /* istanbul ignore next */
        this.uploaderRef.abort(file);
    };
    /* istanbul ignore next */
    Dragger.prototype.startUpload = function () {
        /* istanbul ignore next */
        this.uploaderRef.startUpload();
    };
    Dragger.prototype.render = function () {
        var _a;
        var _b = this.props,
            className = _b.className,
            style = _b.style,
            shape = _b.shape,
            locale = _b.locale,
            prefix = _b.prefix,
            listType = _b.listType,
            others = tslib_1.__rest(_b, ["className", "style", "shape", "locale", "prefix", "listType"]);
        var prefixCls = "".concat(prefix, "upload-drag");
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefixCls)] = true, _a["".concat(prefixCls, "-over")] = this.state.dragOver, _a[className] = !!className, _a));
        var children = this.props.children || react_1.default.createElement("div", { className: cls }, react_1.default.createElement("p", { className: "".concat(prefixCls, "-icon") }, react_1.default.createElement(icon_1.default, { size: "large", className: "".concat(prefixCls, "-upload-icon") })), react_1.default.createElement("p", { className: "".concat(prefixCls, "-text") }, locale.drag.text), react_1.default.createElement("p", { className: "".concat(prefixCls, "-hint") }, locale.drag.hint));
        return react_1.default.createElement(upload_1.default, tslib_1.__assign({}, others, { prefix: prefix, shape: shape, listType: listType, dragable: true, style: style, onDragOver: this.onDragOver, onDragLeave: this.onDragLeave, onDrop: this.onDrop, ref: this.saveUploaderRef }), children);
    };
    Dragger.propTypes = {
        /**
         * 样式前缀
         */
        prefix: prop_types_1.default.string,
        locale: prop_types_1.default.object,
        shape: prop_types_1.default.string,
        onDragOver: prop_types_1.default.func,
        onDragLeave: prop_types_1.default.func,
        onDrop: prop_types_1.default.func,
        limit: prop_types_1.default.number,
        className: prop_types_1.default.string,
        style: prop_types_1.default.object,
        defaultValue: prop_types_1.default.array,
        children: prop_types_1.default.node,
        listType: prop_types_1.default.string,
        timeout: prop_types_1.default.number
    };
    Dragger.defaultProps = {
        prefix: 'next-',
        onDragOver: util_1.func.noop,
        onDragLeave: util_1.func.noop,
        onDrop: util_1.func.noop,
        locale: zh_cn_1.default.Upload
    };
    return Dragger;
}(react_1.default.Component);
exports.default = Dragger;

/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_dom_1 = __webpack_require__(8);
var prop_types_1 = __webpack_require__(2);
var config_provider_1 = __webpack_require__(5);
var animate_1 = __webpack_require__(17);
var message_1 = __webpack_require__(91);
var guid_1 = __webpack_require__(126);
var config_1 = __webpack_require__(464);
var getAnimation = function getAnimation(placement) {
    switch (placement) {
        case 'tl':
        case 'bl':
            return 'slideInLeft';
        case 'tr':
        case 'br':
            return 'slideInRight';
        default:
            return null;
    }
};
var Notification = /** @class */function (_super) {
    tslib_1.__extends(Notification, _super);
    function Notification(props) {
        var _this = _super.call(this, props) || this;
        _this.close = function (key) {
            var notifications = _this.state.notifications;
            var index = notifications.findIndex(function (notification) {
                return notification.key === key;
            });
            if (index === -1) return;
            var _a = notifications[index],
                onClose = _a.onClose,
                timer = _a.timer;
            notifications.splice(index, 1);
            var timerIndex = _this.timers.findIndex(function (v) {
                return v === timer;
            });
            if (timerIndex !== -1) {
                _this.timers.splice(timerIndex, 1);
            }
            if (timer) {
                clearTimeout(timer);
            }
            _this.setState({
                notifications: notifications
            });
            if (onClose) {
                onClose();
            }
        };
        _this.open = function (_a) {
            var key = _a.key,
                duration = _a.duration,
                others = tslib_1.__rest(_a, ["key", "duration"]);
            var notifications = tslib_1.__spreadArray([], tslib_1.__read(_this.state.notifications), false);
            if (!key) {
                key = (0, guid_1.default)('notification-');
            }
            var index = notifications.findIndex(function (notification) {
                return notification.key === key;
            });
            if (index !== -1) {
                notifications[index] = tslib_1.__assign(tslib_1.__assign({}, notifications[index]), others);
            } else {
                var timer = void 0;
                if (duration > 0) {
                    timer = setTimeout(function () {
                        _this.close(key);
                    }, duration);
                    _this.timers.push(timer);
                }
                notifications.push(tslib_1.__assign(tslib_1.__assign({}, others), { key: key, timer: timer }));
            }
            if (config_1.default.maxCount > 0 && config_1.default.maxCount < notifications.length) {
                while (notifications.length > config_1.default.maxCount) {
                    var key_1 = notifications[0].key;
                    _this.close(key_1);
                    notifications.splice(0, 1);
                }
            }
            _this.setState({
                notifications: notifications
            });
            return key;
        };
        _this.state = {
            notifications: []
        };
        _this.timers = [];
        return _this;
    }
    Notification.prototype.componentWillUnmount = function () {
        this.timers.forEach(function (timer) {
            if (!timer) return;
            clearTimeout(timer);
        });
    };
    Notification.prototype.render = function () {
        var _a;
        var prefix = this.props.prefix;
        var notifications = this.state.notifications;
        return react_1.default.createElement("div", { className: "".concat(prefix, "notification"), style: (_a = {}, _a[config_1.default.placement.indexOf('b') === 0 ? 'bottom' : 'top'] = config_1.default.offset[1], _a[config_1.default.placement.indexOf('l') !== -1 ? 'left' : 'right'] = config_1.default.offset[0], _a) }, react_1.default.createElement(animate_1.default, { animationAppear: true, animation: {
                enter: getAnimation(config_1.default.placement),
                leave: "".concat(prefix, "notification-fade-leave")
            }, singleMode: false }, notifications.map(function (_a) {
            var key = _a.key,
                type = _a.type,
                title = _a.title,
                content = _a.content,
                icon = _a.icon,
                onClick = _a.onClick,
                style = _a.style,
                className = _a.className;
            return react_1.default.createElement(message_1.default, { key: key, shape: "toast", type: type, title: title, iconType: icon, closeable: true, animation: false, size: config_1.default.size, visible: true, style: style, className: className, onClick: onClick, onClose: function onClose() {
                    return close(key);
                } }, content);
        })));
    };
    Notification.propTypes = {
        prefix: prop_types_1.default.string
    };
    Notification.defaultProps = {
        prefix: 'next-'
    };
    return Notification;
}(react_1.Component);
var ConfigedNotification = config_provider_1.default.config(Notification, {
    exportNames: ['open', 'close']
});
var instance;
var mounting = false;
var waitOpens = [];
function open(options) {
    if (options === void 0) {
        options = {};
    }
    if (!options.title && !options.content) return;
    var duration = !options.duration && options.duration !== 0 ? config_1.default.duration : options.duration;
    if (!instance) {
        if (!options.key) {
            options.key = (0, guid_1.default)('notification-');
        }
        waitOpens.push(tslib_1.__assign(tslib_1.__assign({}, options), { duration: duration }));
        if (!mounting) {
            mounting = true;
            var div = document.createElement('div');
            if (config_1.default.getContainer) {
                var root = config_1.default.getContainer();
                root.appendChild(div);
            } else {
                document.body.appendChild(div);
            }
            react_dom_1.default.render(react_1.default.createElement(config_provider_1.default, tslib_1.__assign({}, config_provider_1.default.getContext()), react_1.default.createElement(ConfigedNotification, { ref: function ref(_ref) {
                    instance = _ref;
                } })), div, function () {
                waitOpens.forEach(function (item) {
                    return instance.open(item);
                });
                waitOpens = [];
                mounting = false;
            });
        }
        return options.key;
    }
    var key = instance.open(tslib_1.__assign(tslib_1.__assign({}, options), { duration: duration }));
    return key;
}
function close(key) {
    if (!instance) {
        var index = waitOpens.findIndex(function (item) {
            return item.key === key;
        });
        waitOpens.splice(index, 1);
        return;
    }
    instance.close(key);
}
function destroy() {
    if (!instance) return;
    var mountNode = react_dom_1.default.findDOMNode(instance).parentNode;
    if (mountNode) {
        react_dom_1.default.unmountComponentAtNode(mountNode);
        mountNode.parentNode.removeChild(mountNode);
    }
}
var levels = {};
['success', 'error', 'warning', 'notice', 'help'].forEach(function (type) {
    levels[type] = function (options) {
        if (options === void 0) {
            options = {};
        }
        return open(tslib_1.__assign(tslib_1.__assign({}, options), { type: type }));
    };
});
exports.default = tslib_1.__assign({ config: function config() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return Object.assign.apply(Object, tslib_1.__spreadArray([config_1.default], tslib_1.__read(args), false));
    }, open: open, close: close, destroy: destroy }, levels);

/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    offset: [30, 30],
    maxCount: 0,
    size: 'large',
    placement: 'tr',
    duration: 4500,
    getContainer: function getContainer() {
        return document.body;
    }
};

/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var config_provider_1 = __webpack_require__(5);
var util_1 = __webpack_require__(4);
/**
 * Divider
 */
var Divider = /** @class */function (_super) {
    tslib_1.__extends(Divider, _super);
    function Divider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Divider.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            className = _b.className,
            dashed = _b.dashed,
            direction = _b.direction,
            orientation = _b.orientation,
            children = _b.children;
        var others = util_1.obj.pickOthers(Divider.propTypes, this.props);
        var cls = (0, classnames_1.default)((_a = {}, _a["".concat(prefix, "divider")] = true, _a["".concat(prefix, "divider-dashed")] = !!dashed, _a["".concat(prefix, "divider-").concat(direction)] = !!direction, _a["".concat(prefix, "divider-with-text-").concat(orientation)] = !!orientation && children, _a), className);
        return react_1.default.createElement("div", tslib_1.__assign({ role: "separator", className: cls }, others), children && react_1.default.createElement("span", { className: "".concat(prefix, "divider-inner-text") }, children));
    };
    Divider.propTypes = {
        prefix: prop_types_1.default.string,
        children: prop_types_1.default.any,
        className: prop_types_1.default.string,
        /**
         * 是否为虚线
         */
        dashed: prop_types_1.default.bool,
        /**
         * 线是水平还是垂直类型
         */
        direction: prop_types_1.default.oneOf(['hoz', 'ver']),
        /**
         * 分割线标题的位置
         */
        orientation: prop_types_1.default.oneOf(['left', 'right', 'center'])
    };
    Divider.defaultProps = {
        prefix: 'next-',
        direction: 'hoz',
        orientation: 'center',
        dashed: false
    };
    return Divider;
}(react_1.Component);
exports.default = config_provider_1.default.config((0, react_lifecycles_compat_1.polyfill)(Divider));

/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var React = __webpack_require__(1);
var PropTypes = __webpack_require__(2);
var classNames = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var icon_1 = __webpack_require__(7);
var util_1 = __webpack_require__(4);
/**
 * Avatar
 */
var Avatar = /** @class */function (_super) {
    tslib_1.__extends(Avatar, _super);
    function Avatar() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.state = {
            isImgExist: true
        };
        _this.handleImgLoadError = function () {
            var onError = _this.props.onError;
            var errorFlag = onError ? onError() : undefined;
            if (errorFlag !== false) {
                _this.setState({ isImgExist: false });
            }
        };
        _this.getIconSize = function (avatarSize) {
            return typeof avatarSize === 'number' ? avatarSize / 2 : avatarSize;
        };
        return _this;
    }
    Avatar.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.src !== this.props.src) {
            // eslint-disable-next-line react/no-did-update-set-state
            this.setState({ isImgExist: true });
        }
    };
    Avatar.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            className = _b.className,
            style = _b.style,
            size = _b.size,
            icon = _b.icon,
            alt = _b.alt,
            srcSet = _b.srcSet,
            shape = _b.shape,
            src = _b.src;
        var isImgExist = this.state.isImgExist;
        var children = this.props.children;
        var others = util_1.obj.pickOthers(Avatar.propTypes, this.props);
        var cls = classNames((_a = {}, _a["".concat(prefix, "avatar")] = true, _a["".concat(prefix, "avatar-").concat(shape)] = !!shape, _a["".concat(prefix, "avatar-image")] = src && isImgExist, _a["".concat(prefix, "avatar-").concat(size)] = typeof size === 'string', _a), className);
        var sizeStyle = typeof size === 'number' ? {
            width: size,
            height: size,
            lineHeight: "".concat(size, "px"),
            fontSize: icon ? size / 2 : 18
        } : {};
        var iconSize = this.getIconSize(size);
        if (src) {
            if (isImgExist) {
                children = React.createElement("img", { src: src, srcSet: srcSet, onError: this.handleImgLoadError, alt: alt });
            } else {
                children = React.createElement(icon_1.default, { type: 'picture', size: iconSize });
            }
        } else if (typeof icon === 'string') {
            children = React.createElement(icon_1.default, { type: icon, size: iconSize });
        } else if (icon) {
            var newIconSize = 'size' in icon.props ? icon.props.size : iconSize;
            children = React.cloneElement(icon, { size: newIconSize });
        }
        return React.createElement("span", tslib_1.__assign({ className: cls, style: tslib_1.__assign(tslib_1.__assign({}, sizeStyle), style) }, others), children);
    };
    Avatar.propTypes = {
        prefix: PropTypes.string,
        children: PropTypes.any,
        className: PropTypes.string,
        size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.number]),
        shape: PropTypes.oneOf(['circle', 'square']),
        icon: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),
        src: PropTypes.string,
        onError: PropTypes.func,
        alt: PropTypes.string,
        srcSet: PropTypes.string
    };
    Avatar.defaultProps = {
        prefix: 'next-',
        size: 'medium',
        shape: 'circle'
    };
    return Avatar;
}(react_1.Component);
exports.default = config_provider_1.default.config(Avatar);

/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = __webpack_require__(468);
var item_1 = __webpack_require__(469);
list_1.default.Item = item_1.default;
exports.default = list_1.default;

/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var loading_1 = __webpack_require__(98);
var zh_cn_1 = __webpack_require__(9);
var config_provider_1 = __webpack_require__(5);
/**
 * List
 */
var List = /** @class */function (_super) {
    tslib_1.__extends(List, _super);
    function List() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    List.prototype.render = function () {
        var _a;
        var _b = this.props,
            prefix = _b.prefix,
            header = _b.header,
            footer = _b.footer,
            size = _b.size,
            divider = _b.divider,
            className = _b.className,
            children = _b.children,
            rtl = _b.rtl,
            dataSource = _b.dataSource,
            renderItem = _b.renderItem,
            locale = _b.locale,
            loading = _b.loading,
            _c = _b.loadingComponent,
            LoadingComponent = _c === void 0 ? loading_1.default : _c,
            emptyContent = _b.emptyContent,
            others = tslib_1.__rest(_b, ["prefix", "header", "footer", "size", "divider", "className", "children", "rtl", "dataSource", "renderItem", "locale", "loading", "loadingComponent", "emptyContent"]);
        if (rtl) {
            others.dir = 'rtl';
        }
        var dSValid = Array.isArray(dataSource);
        var classes = (0, classnames_1.default)("".concat(prefix, "list"), (_a = {}, _a["".concat(prefix, "list-").concat(size)] = size, _a["".concat(prefix, "list-divider")] = divider, _a), className);
        var customContent = dSValid && dataSource.map(function (one, index) {
            return renderItem(one, index);
        });
        var content = react_1.default.createElement("div", tslib_1.__assign({}, others, { className: classes }), header ? react_1.default.createElement("div", { className: "".concat(prefix, "list-header") }, header) : null, !(dSValid && dataSource.length > 0) && !children ? react_1.default.createElement("div", { className: "".concat(prefix, "list-empty") }, emptyContent || locale.empty) : react_1.default.createElement("ul", { key: "list-body", className: "".concat(prefix, "list-items") }, customContent, children), footer ? react_1.default.createElement("div", { className: "".concat(prefix, "list-footer") }, footer) : null);
        if (loading) {
            var loadingClassName = "".concat(prefix, "list-loading");
            return react_1.default.createElement(LoadingComponent, { className: loadingClassName }, content);
        }
        return content;
    };
    List.propTypes = {
        prefix: prop_types_1.default.string,
        rtl: prop_types_1.default.bool,
        /**
         * 列表头部
         */
        header: prop_types_1.default.node,
        /**
         * 列表尾部
         */
        footer: prop_types_1.default.node,
        /**
         * 列表尺寸
         */
        size: prop_types_1.default.oneOf(['medium', 'small']),
        /**
         * 是否显示分割线
         */
        divider: prop_types_1.default.bool,
        /**
         * 列表数据源
         */
        dataSource: prop_types_1.default.array,
        /**
         * 当使用 dataSource 时，可以用 renderItem 自定义渲染列表项
         * @param {Any} current 当前遍历的项
         * @param {Number} index 当前遍历的项的索引
         */
        renderItem: prop_types_1.default.func,
        /**
         * 是否在加载中
         */
        loading: prop_types_1.default.bool,
        /**
         * 自定义 Loading 组件
         * 请务必传递 props, 使用方式： loadingComponent={props => <Loading {...props}/>}
         * @param {LoadingProps} props 需要透传给组件的参数
         * @return {React.ReactNode} 展示的组件
         */
        loadingComponent: prop_types_1.default.func,
        /**
         * 设置数据为空的时候的表格内容展现
         */
        emptyContent: prop_types_1.default.node,
        className: prop_types_1.default.string,
        children: prop_types_1.default.any,
        locale: prop_types_1.default.object
    };
    List.defaultProps = {
        rtl: false,
        size: 'medium',
        divider: true,
        prefix: 'next-',
        locale: zh_cn_1.default.List,
        renderItem: function renderItem(item) {
            return item;
        },
        loading: false
    };
    return List;
}(react_1.Component);
exports.default = config_provider_1.default.config((0, react_lifecycles_compat_1.polyfill)(List));

/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var react_lifecycles_compat_1 = __webpack_require__(6);
var config_provider_1 = __webpack_require__(5);
/**
 * List.Item
 */
var ListItem = /** @class */function (_super) {
    tslib_1.__extends(ListItem, _super);
    function ListItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ListItem.prototype.render = function () {
        var _a = this.props,
            prefix = _a.prefix,
            title = _a.title,
            description = _a.description,
            media = _a.media,
            extra = _a.extra,
            className = _a.className,
            children = _a.children,
            others = tslib_1.__rest(_a, ["prefix", "title", "description", "media", "extra", "className", "children"]);
        var classes = (0, classnames_1.default)("".concat(prefix, "list-item"), className);
        return react_1.default.createElement("li", tslib_1.__assign({}, others, { className: classes }), media ? react_1.default.createElement("div", { className: "".concat(prefix, "list-item-media") }, media) : null, react_1.default.createElement("div", { className: "".concat(prefix, "list-item-content") }, title ? react_1.default.createElement("div", { className: "".concat(prefix, "list-item-title") }, title) : null, description ? react_1.default.createElement("div", { className: "".concat(prefix, "list-item-description") }, description) : null, children), extra ? react_1.default.createElement("div", { className: "".concat(prefix, "list-item-extra") }, extra) : null);
    };
    ListItem.propTypes = {
        prefix: prop_types_1.default.string,
        /**
         * 列表元素的标题
         */
        title: prop_types_1.default.node,
        /**
         * 列表元素的描述内容
         */
        description: prop_types_1.default.node,
        /**
         * 列表元素的头像 / 图标 / 图片内容
         */
        media: prop_types_1.default.node,
        /**
         * 额外内容
         */
        extra: prop_types_1.default.node,
        className: prop_types_1.default.any
    };
    ListItem.defaultProps = {
        prefix: 'next-'
    };
    return ListItem;
}(react_1.Component);
exports.default = config_provider_1.default.config((0, react_lifecycles_compat_1.polyfill)(ListItem));

/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var config_provider_1 = __webpack_require__(5);
var time_picker_1 = __webpack_require__(471);
var ConfigTimePicker = config_provider_1.default.config(time_picker_1.default);
ConfigTimePicker.RangePicker = react_1.default.forwardRef(function (props, ref) {
  return react_1.default.createElement(ConfigTimePicker, tslib_1.__assign({ ref: ref }, props, { type: "range" }));
});
ConfigTimePicker.RangePicker.displayName = 'RangePicker';
exports.default = ConfigTimePicker;

/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var config_provider_1 = __webpack_require__(5);
var input_1 = __webpack_require__(15);
var button_1 = __webpack_require__(14);
var overlay_1 = __webpack_require__(12);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var panel_1 = __webpack_require__(197);
var utils_1 = __webpack_require__(198);
var prop_types_2 = __webpack_require__(107);
var util_2 = __webpack_require__(37);
var footer_panel_1 = __webpack_require__(199);
var date_input_1 = __webpack_require__(473);
var constant_1 = __webpack_require__(108);
var Popup = overlay_1.default.Popup;
var noop = util_1.func.noop,
    checkDate = util_1.func.checkDate,
    checkRangeDate = util_1.func.checkRangeDate;
var timePickerLocale = zh_cn_1.default.TimePicker;
var presetPropType = prop_types_1.default.shape(tslib_1.__assign({ label: prop_types_1.default.string, value: prop_types_1.default.oneOfType([prop_types_1.default.func, utils_1.checkDateValue]) }, button_1.default.propTypes));
var TimePicker2 = /** @class */function (_super) {
    tslib_1.__extends(TimePicker2, _super);
    function TimePicker2(props, context) {
        var _this = _super.call(this, props, context) || this;
        /**
         * 获取初始值
         */
        _this.getInitValue = function () {
            var props = _this.props;
            var type = props.type,
                value = props.value,
                defaultValue = props.defaultValue;
            var val = type === constant_1.TIME_PICKER_TYPE.RANGE ? [null, null] : null;
            val = 'value' in props ? value : 'defaultValue' in props ? defaultValue : val;
            return _this.checkValue(val);
        };
        /**
         * 获取 RangePicker 输入框初始输入状态
         * @returns {Object} inputState
         * @returns {boolean} inputState.justBeginInput 是否初始输入
         * @returns {number} inputState.inputType 当前输入框
         */
        _this.getInitRangeInputState = function () {
            return {
                justBeginInput: _this.isEnabled(),
                inputType: _this.isEnabled(0) ? constant_1.TIME_INPUT_TYPE.BEGIN : constant_1.TIME_INPUT_TYPE.END
            };
        };
        _this.onKeyDown = function (e) {
            if (e.keyCode === util_1.KEYCODE.ENTER) {
                var inputValue = _this.state.inputValue;
                _this.handleChange(inputValue, 'KEYDOWN_ENTER');
                _this.onClick();
                return;
            }
            var _a = _this.state,
                value = _a.value,
                inputStr = _a.inputStr,
                inputType = _a.inputType,
                isRange = _a.isRange;
            var _b = _this.props,
                format = _b.format,
                _c = _b.hourStep,
                hourStep = _c === void 0 ? 1 : _c,
                _d = _b.minuteStep,
                minuteStep = _d === void 0 ? 1 : _d,
                _e = _b.secondStep,
                secondStep = _e === void 0 ? 1 : _e,
                disabledMinutes = _b.disabledMinutes,
                disabledSeconds = _b.disabledSeconds;
            var unit = 'second';
            if (disabledSeconds) {
                unit = disabledMinutes ? 'hour' : 'minute';
            }
            var timeStr = (0, utils_1.onTimeKeydown)(e, {
                format: format,
                timeInputStr: isRange ? inputStr[inputType] : inputStr,
                steps: {
                    hour: hourStep,
                    minute: minuteStep,
                    second: secondStep
                },
                value: value
            }, unit);
            if (!timeStr) return;
            var newInputStr = timeStr;
            if (isRange) {
                newInputStr = inputStr;
                newInputStr[inputType] = timeStr;
            }
            _this.handleChange(newInputStr, 'KEYDOWN_CODE');
        };
        _this.onVisibleChange = function (visible, type) {
            if (!('visible' in _this.props)) {
                _this.setState({
                    visible: visible
                });
            }
            _this.props.onVisibleChange(visible, type);
        };
        _this.onClick = function () {
            var _a = _this.state,
                visible = _a.visible,
                inputType = _a.inputType;
            if (!visible) {
                _this.onVisibleChange(true);
                _this.handleInputFocus(inputType);
            }
        };
        /**
         * 处理点击文档区域导致的弹层收起逻辑
         * @param {boolean} visible 是否可见
         * @param {string} type 事件类型
         */
        _this.handleVisibleChange = function (visible, targetType) {
            if (targetType === 'docClick') {
                // 弹层收起 触发 Change 逻辑
                if (!visible) {
                    _this.handleChange(_this.state.curValue, 'VISIBLE_CHANGE');
                }
                _this.onVisibleChange(visible);
            }
        };
        _this.handleInputFocus = function (inputType) {
            var inputEl = _this.dateInput && _this.dateInput.input;
            if (_this.state.isRange) {
                inputEl = inputEl && inputEl[inputType];
            }
            inputEl && inputEl.focus();
        };
        _this.onOk = function () {
            var curValue = _this.state.curValue;
            var checkedValue = _this.checkValue(curValue);
            util_1.func.invoke(_this.props, 'onOk', _this.getOutputArgs(checkedValue));
            _this.setState({ value: checkedValue });
            _this.handleChange(checkedValue, 'CLICK_OK');
        };
        _this.onInputTypeChange = function (idx) {
            var _a = _this.state,
                inputType = _a.inputType,
                visible = _a.visible;
            if (idx !== inputType) {
                _this.setState({
                    inputType: idx,
                    justBeginInput: !(idx !== null && visible)
                });
            }
        };
        _this.checkValue = function (value, strictly) {
            var inputType = _this.state.inputType;
            var formatter = function formatter(v) {
                return typeof v === 'string' ? (0, util_1.datejs)(v, 'HH:mm:ss') : v;
            };
            var formattedValue = Array.isArray(value) ? value.map(function (v) {
                return formatter(v);
            }) : formatter(value);
            return _this.props.type === constant_1.TIME_PICKER_TYPE.RANGE ? checkRangeDate(formattedValue, inputType, _this.props.disabled, strictly) : checkDate(formattedValue);
        };
        /**
         * 获取 `onChange` 和 `onOk` 方法的输出参数
         * @param {Dayjs} value
         * @returns 默认返回 `Dayjs` 实例和 `format` 格式化的值
         *          如果传了了 `outputFormat` 属性则返回 `outputFormat` 格式化的值
         */
        _this.getOutputArgs = function (value) {
            var format = _this.props.format;
            return [value, (0, util_2.fmtValue)(value, format)];
        };
        _this.onChange = function (v) {
            var _a = _this,
                state = _a.state,
                props = _a.props;
            var format = props.format;
            var nextValue = v === undefined ? state.value : v;
            var value = _this.checkValue(nextValue);
            _this.setState({
                curValue: value,
                preValue: value,
                inputStr: (0, util_2.fmtValue)(value, format),
                inputValue: (0, util_2.fmtValue)(value, format)
            });
            util_1.func.invoke(_this.props, 'onChange', _this.getOutputArgs(nextValue));
        };
        _this.shouldSwitchInput = function (value) {
            var _a = _this.state,
                inputType = _a.inputType,
                justBeginInput = _a.justBeginInput;
            var idx = justBeginInput ? (0, util_2.switchInputType)(inputType) : value.indexOf(null);
            if (idx !== -1 && _this.isEnabled(idx)) {
                _this.onInputTypeChange(idx);
                _this.handleInputFocus(idx);
                return true;
            }
            return false;
        };
        _this.handleChange = function (v, eventType) {
            var format = _this.props.format;
            var _a = _this.state,
                isRange = _a.isRange,
                value = _a.value,
                preValue = _a.preValue;
            var forceEvents = ['KEYDOWN_ENTER', 'CLICK_PRESET', 'CLICK_OK', 'INPUT_CLEAR', 'VISIBLE_CHANGE'];
            var isTemporary = isRange && !forceEvents.includes(eventType);
            // 面板收起时候，将值设置为确认值
            v = eventType === 'VISIBLE_CHANGE' ? value : _this.checkValue(v, !isTemporary);
            var stringV = (0, util_2.fmtValue)(v, format);
            _this.setState({
                curValue: v,
                inputStr: stringV,
                inputValue: stringV,
                inputing: false,
                selecting: eventType === 'start' || eventType === 'end'
            });
            if (!isTemporary) {
                _this.setState({
                    value: v
                }, function () {
                    // 判断当前选择结束，收起面板：
                    // 1. 非 Range 选择
                    // 2. 非 选择预设时间、面板收起、清空输入 操作
                    // 3. 不需要切换输入框
                    var shouldHidePanel = ['CLICK_PRESET', 'VISIBLE_CHANGE', 'KEYDOWN_ENTER', 'INPUT_CLEAR', 'CLICK_OK'].includes(eventType) || isRange && !_this.shouldSwitchInput(v);
                    if (shouldHidePanel) {
                        _this.onVisibleChange(false);
                    }
                    if ((0, util_2.isValueChanged)(v, preValue)) {
                        _this.onChange(v);
                    }
                });
            }
        };
        /**
         * 获取输入框的禁用状态
         * @param {Number} idx
         * @returns {Boolean}
         */
        _this.isEnabled = function (idx) {
            var disabled = _this.props.disabled;
            return Array.isArray(disabled) ? idx === undefined ? !disabled[0] && !disabled[1] : !disabled[idx] : !disabled;
        };
        _this.handleClear = function () {
            /**
             * 清空输入之后 input 组件内部会让第二个输入框获得焦点
             * 所以这里需要设置 setTimeout 才能让第一个 input 获得焦点
             */
            _this.clearTimeoutId = setTimeout(function () {
                _this.handleInputFocus(0);
            });
            _this.setState({
                inputType: constant_1.TIME_INPUT_TYPE.BEGIN,
                justBeginInput: _this.isEnabled()
            });
        };
        _this.handleInput = function (v, eventType) {
            var isRange = _this.state.isRange;
            if (eventType === 'clear') {
                _this.handleChange(v, 'INPUT_CLEAR');
                if (isRange) {
                    _this.handleClear();
                }
            } else {
                _this.setState({
                    inputStr: v,
                    inputValue: v,
                    curValue: _this.checkValue(v),
                    inputing: true,
                    visible: true
                });
            }
        };
        var isRange = props.type === constant_1.TIME_PICKER_TYPE.RANGE;
        _this.state = {};
        if (isRange) {
            var _a = _this.getInitRangeInputState(),
                inputType = _a.inputType,
                justBeginInput = _a.justBeginInput;
            _this.state = {
                inputType: inputType,
                justBeginInput: justBeginInput
            };
        }
        var _b = _this.props,
            format = _b.format,
            visible = _b.visible,
            defaultVisible = _b.defaultVisible,
            prefix = _b.prefix;
        var value = _this.getInitValue();
        // const value = formatInputTimeValue(props.value || props.defaultValue, props.format, isRange);
        _this.state = tslib_1.__assign(tslib_1.__assign({}, _this.state), { isRange: isRange, inputStr: '', // 输入框的输入值， string类型
            value: value, curValue: value, preValue: value, inputValue: (0, util_2.fmtValue)(value, format), inputing: false, visible: 'visible' in _this.props ? visible : defaultVisible });
        _this.prefixCls = "".concat(prefix, "time-picker2");
        return _this;
    }
    TimePicker2.getDerivedStateFromProps = function (props, prevState) {
        var disabled = props.disabled,
            type = props.type,
            format = props.format,
            propsValue = props.value;
        var isRange = type === constant_1.TIME_PICKER_TYPE.RANGE;
        var state = {
            isRange: isRange
        };
        if ('value' in props) {
            // checkDate function doesn't support hh:mm:ss format, convert to valid dayjs value in advance
            var formatter_1 = function formatter_1(v) {
                return typeof v === 'string' ? (0, util_1.datejs)(v, format) : v;
            };
            var formattedValue = Array.isArray(propsValue) ? propsValue.map(function (v) {
                return formatter_1(v);
            }) : formatter_1(propsValue);
            var value = isRange ? checkRangeDate(formattedValue, state.inputType, disabled) : checkDate(formattedValue);
            if ((0, util_2.isValueChanged)(value, state.preValue)) {
                state = tslib_1.__assign(tslib_1.__assign({}, state), { value: value, preValue: value });
                if (isRange && !prevState.selecting) {
                    state.inputValue = (0, util_2.fmtValue)(value, format);
                    state.curValue = formattedValue || [];
                }
            }
        }
        if ('visible' in props) {
            state.visible = props.visible;
        }
        return state;
    };
    TimePicker2.prototype.renderPreview = function (others) {
        var _a = this.props,
            prefix = _a.prefix,
            format = _a.format,
            className = _a.className,
            renderPreview = _a.renderPreview;
        var value = this.state.value;
        var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
        var label = '';
        if (value) {
            var valueArr = Array.isArray(value) ? value : [value];
            label = valueArr.map(function (v) {
                return v ? v.format(format) : '';
            }).join('-');
        }
        if (typeof renderPreview === 'function') {
            return react_1.default.createElement("div", tslib_1.__assign({}, others, { className: previewCls }), renderPreview(value, this.props));
        }
        return react_1.default.createElement("p", tslib_1.__assign({}, others, { className: previewCls }), label);
    };
    TimePicker2.prototype.render = function () {
        var _a, _b;
        var _this = this;
        var _c = this.props,
            prefix = _c.prefix,
            label = _c.label,
            state = _c.state,
            placeholder = _c.placeholder,
            size = _c.size,
            format = _c.format,
            hasClear = _c.hasClear,
            hourStep = _c.hourStep,
            minuteStep = _c.minuteStep,
            secondStep = _c.secondStep,
            disabledHours = _c.disabledHours,
            disabledMinutes = _c.disabledMinutes,
            disabledSeconds = _c.disabledSeconds,
            renderTimeMenuItems = _c.renderTimeMenuItems,
            inputProps = _c.inputProps,
            popupAlign = _c.popupAlign,
            popupTriggerType = _c.popupTriggerType,
            popupContainer = _c.popupContainer,
            popupStyle = _c.popupStyle,
            popupClassName = _c.popupClassName,
            popupProps = _c.popupProps,
            popupComponent = _c.popupComponent,
            followTrigger = _c.followTrigger,
            disabled = _c.disabled,
            hasBorder = _c.hasBorder,
            className = _c.className,
            locale = _c.locale,
            rtl = _c.rtl,
            isPreview = _c.isPreview,
            preset = _c.preset,
            others = tslib_1.__rest(_c, ["prefix", "label", "state", "placeholder", "size", "format", "hasClear", "hourStep", "minuteStep", "secondStep", "disabledHours", "disabledMinutes", "disabledSeconds", "renderTimeMenuItems", "inputProps", "popupAlign", "popupTriggerType", "popupContainer", "popupStyle", "popupClassName", "popupProps", "popupComponent", "followTrigger", "disabled", "hasBorder", "className", "locale", "rtl", "isPreview", "preset"]);
        var _d = this.state,
            value = _d.value,
            inputStr = _d.inputStr,
            inputValue = _d.inputValue,
            curValue = _d.curValue,
            inputing = _d.inputing,
            visible = _d.visible,
            isRange = _d.isRange,
            inputType = _d.inputType;
        var triggerCls = (0, classnames_1.default)((_a = {}, _a["".concat(this.prefixCls, "-trigger")] = true, _a));
        if (rtl) {
            others.dir = 'rtl';
        }
        if (isPreview) {
            return this.renderPreview(util_1.obj.pickOthers(others, TimePicker2.PropTypes));
        }
        var sharedInputProps = tslib_1.__assign(tslib_1.__assign({ prefix: prefix, locale: locale, label: label, state: state, placeholder: placeholder }, inputProps), { size: size, disabled: disabled,
            // RangePicker 有临时输入态在 inputValue 里面
            value: inputing ? inputStr : isRange ? inputValue : (0, util_2.fmtValue)(value, format) || '', hasClear: value && hasClear, inputType: inputType, isRange: isRange, onInputTypeChange: this.onInputTypeChange, onInput: this.handleInput, onKeyDown: this.onKeyDown, ref: function ref(el) {
                return _this.dateInput = el;
            } });
        var triggerInput = react_1.default.createElement("div", { className: triggerCls }, react_1.default.createElement(date_input_1.default, tslib_1.__assign({}, sharedInputProps, { label: label, state: state, onClick: this.onClick, hasBorder: hasBorder, placeholder: placeholder || locale.placeholder, className: (0, classnames_1.default)("".concat(this.prefixCls, "-input")) })));
        var panelProps = {
            prefix: prefix,
            locale: locale,
            value: inputing ? this.checkValue(inputStr) : curValue,
            // value: curValue,
            isRange: isRange,
            disabled: disabled,
            showHour: format.indexOf('H') > -1,
            showSecond: format.indexOf('s') > -1,
            showMinute: format.indexOf('m') > -1,
            hourStep: hourStep,
            minuteStep: minuteStep,
            secondStep: secondStep,
            disabledHours: disabledHours,
            disabledMinutes: disabledMinutes,
            disabledSeconds: disabledSeconds,
            renderTimeMenuItems: renderTimeMenuItems,
            onSelect: this.handleChange
        };
        var classNames = (0, classnames_1.default)((_b = {}, _b["".concat(this.prefixCls)] = true, _b["".concat(this.prefixCls, "-").concat(size)] = size, _b["".concat(prefix, "disabled")] = disabled, _b), className);
        var PopupComponent = popupComponent ? popupComponent : Popup;
        var oKable = !!(isRange ? inputValue && inputValue[inputType] : inputValue);
        return react_1.default.createElement("div", tslib_1.__assign({}, util_1.obj.pickOthers(TimePicker2.propTypes, others), { className: classNames }), react_1.default.createElement(PopupComponent, tslib_1.__assign({ align: popupAlign }, popupProps, { followTrigger: followTrigger, visible: visible, onVisibleChange: this.handleVisibleChange, trigger: triggerInput, container: popupContainer, disabled: disabled, triggerType: popupTriggerType, style: popupStyle, className: popupClassName }), react_1.default.createElement("div", { dir: others.dir, className: "".concat(this.prefixCls, "-wrapper") }, react_1.default.createElement("div", { className: "".concat(this.prefixCls, "-body") }, react_1.default.createElement(panel_1.default, tslib_1.__assign({}, panelProps)), preset || isRange ? react_1.default.createElement(footer_panel_1.default, { prefix: prefix, className: "".concat(this.prefixCls, "-footer"), showTime: true, locale: locale, oKable: oKable, showOk: isRange, onOk: this.onOk, onChange: this.handleChange, preset: preset }) : null))));
    };
    TimePicker2.propTypes = tslib_1.__assign(tslib_1.__assign({}, config_provider_1.default.propTypes), { prefix: prop_types_1.default.string, rtl: prop_types_1.default.bool,
        /**
         * 按钮的文案
         */
        label: prop_types_1.default.node,
        /**
         * 输入框状态
         */
        state: prop_types_1.default.oneOf(['error', 'success']),
        /**
         * 输入框提示
         */
        placeholder: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(prop_types_1.default.string), prop_types_1.default.string]),
        /**
         * 时间值，dayjs格式或者2020-01-01字符串格式，受控状态使用
         */
        value: prop_types_2.default.value,
        /**
         * 时间初值，dayjs格式或者2020-01-01字符串格式，非受控状态使用
         */
        defaultValue: prop_types_2.default.value,
        /**
         * 时间选择框的尺寸
         */
        size: prop_types_1.default.oneOf(['small', 'medium', 'large']),
        /**
         * 是否允许清空时间
         */
        hasClear: prop_types_1.default.bool,
        /**
         * 时间的格式
         * https://dayjs.gitee.io/docs/zh-CN/display/format
         */
        format: prop_types_1.default.string,
        /**
         * 小时选项步长
         */
        hourStep: prop_types_1.default.number,
        /**
         * 分钟选项步长
         */
        minuteStep: prop_types_1.default.number,
        /**
         * 秒钟选项步长
         */
        secondStep: prop_types_1.default.number,
        /**
         * 禁用小时函数
         * @param {Number} index 时 0 - 23
         * @return {Boolean} 是否禁用
         */
        disabledHours: prop_types_1.default.func,
        /**
         * 禁用分钟函数
         * @param {Number} index 分 0 - 59
         * @return {Boolean} 是否禁用
         */
        disabledMinutes: prop_types_1.default.func,
        /**
         * 禁用秒钟函数
         * @param {Number} index 秒 0 - 59
         * @return {Boolean} 是否禁用
         */
        disabledSeconds: prop_types_1.default.func,
        /**
         * 渲染的可选择时间列表
         * [{
         *  label: '01',
         *  value: 1
         * }]
         * @param {Array} list 默认渲染的列表
         * @param {String} mode 渲染的菜单 hour, minute, second
         * @param {dayjs} value 当前时间，可能为 null
         * @return {Array} 返回需要渲染的数据
         */
        renderTimeMenuItems: prop_types_1.default.func,
        /**
         * 弹层是否显示（受控）
         */
        visible: prop_types_1.default.bool,
        /**
         * 弹层默认是否显示（非受控）
         */
        defaultVisible: prop_types_1.default.bool,
        /**
         * 弹层容器
         * @param {Object} target 目标节点
         * @return {ReactNode} 容器节点
         */
        popupContainer: prop_types_1.default.any,
        /**
         * 弹层对齐方式, 详情见Overlay 文档
         */
        popupAlign: prop_types_1.default.string,
        /**
         * 弹层触发方式
         */
        popupTriggerType: prop_types_1.default.oneOf(['click', 'hover']),
        /**
         * 弹层展示状态变化时的回调
         * @param {Boolean} visible 弹层是否隐藏和显示
         * @param {String} type 触发弹层显示和隐藏的来源 fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
         */
        onVisibleChange: prop_types_1.default.func,
        /**
         * 弹层自定义样式
         */
        popupStyle: prop_types_1.default.object,
        /**
         * 弹层自定义样式类
         */
        popupClassName: prop_types_1.default.string,
        /**
         * 弹层属性
         */
        popupProps: prop_types_1.default.object,
        /**
         * 是否跟随滚动
         */
        followTrigger: prop_types_1.default.bool,
        /**
         * 是否禁用
         */
        disabled: prop_types_1.default.bool,
        /**
         * 输入框是否有边框
         */
        hasBorder: prop_types_1.default.bool,
        /**
         * 是否为预览态
         */
        isPreview: prop_types_1.default.bool,
        /**
         * 预览态模式下渲染的内容
         * @param {DayjsObject|DayjsObject[]} value 时间
         */
        renderPreview: prop_types_1.default.func,
        /**
         * 时间值改变时的回调
         * @param {DayjsObject} date dayjs时间对象
         * @param {Object|String} dateString 时间对象或时间字符串
         */
        onChange: prop_types_1.default.func, className: prop_types_1.default.string, name: prop_types_1.default.string,
        /**
         * 预设值，会显示在时间面板下面
         */
        preset: prop_types_1.default.oneOfType([prop_types_1.default.arrayOf(presetPropType), presetPropType]), inputProps: prop_types_1.default.shape(input_1.default.propTypes), popupComponent: prop_types_1.default.elementType, type: prop_types_1.default.oneOf(['time', 'range']) });
    TimePicker2.defaultProps = {
        prefix: 'next-',
        rtl: false,
        locale: timePickerLocale,
        size: 'medium',
        format: 'HH:mm:ss',
        hasClear: true,
        disabled: false,
        hasBorder: true,
        type: 'time',
        popupAlign: 'tl bl',
        popupTriggerType: 'click',
        onChange: noop,
        onVisibleChange: noop
    };
    return TimePicker2;
}(react_1.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(TimePicker2);

/***/ }),
/* 472 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var prop_types_1 = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var utils_1 = __webpack_require__(198);
function scrollTo(element, to, duration) {
    var requestAnimationFrame = window.requestAnimationFrame || function requestAnimationFrameTimeout() {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return setTimeout(params[0], 10);
    };
    if (duration <= 0) {
        element.scrollTop = to;
        return;
    }
    var difference = to - element.scrollTop;
    var perTick = difference / duration * 10;
    requestAnimationFrame(function () {
        element.scrollTop = element.scrollTop + perTick;
        if (element.scrollTop === to) {
            return;
        }
        scrollTo(element, to, duration - 10);
    });
}
var noop = function noop() {};
var TimeMenu = /** @class */function (_super) {
    tslib_1.__extends(TimeMenu, _super);
    function TimeMenu() {
        var _this = _super.apply(this, tslib_1.__spreadArray([], tslib_1.__read(arguments), false)) || this;
        _this.prefixCls = "".concat(_this.props.prefix, "time-picker2");
        _this._menuRefHandler = function (ref) {
            _this.menu = ref;
        };
        _this._menuWrapperRefHandler = function (ref) {
            _this.menuWrapper = ref;
        };
        _this.createMenuItems = function (list) {
            var _a = _this.props,
                prefix = _a.prefix,
                mode = _a.mode,
                disabled = _a.disabled,
                disabledItems = _a.disabledItems,
                activeIndex = _a.activeIndex,
                onSelect = _a.onSelect,
                renderTimeMenuItems = _a.renderTimeMenuItems,
                timeValue = _a.value;
            list = renderTimeMenuItems(list, mode, timeValue) || list;
            return list.map(function (_a) {
                var _b;
                var label = _a.label,
                    value = _a.value;
                var isDisabled = disabled || disabledItems(value);
                var itemCls = (0, classnames_1.default)((_b = {}, _b["".concat(_this.prefixCls, "-menu-item")] = true, _b["".concat(prefix, "disabled")] = isDisabled, _b["".concat(prefix, "selected")] = value === activeIndex, _b));
                var onClick = isDisabled ? noop : function () {
                    return onSelect(value, mode);
                };
                return react_1.default.createElement("li", { role: "option", "aria-selected": String(value === activeIndex), key: value, title: value, className: itemCls, onClick: onClick }, label);
            });
        };
        return _this;
    }
    TimeMenu.prototype.componentDidMount = function () {
        this.scrollToSelected(0);
    };
    TimeMenu.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.activeIndex !== this.props.activeIndex) {
            this.scrollToSelected(120);
        }
    };
    TimeMenu.prototype.scrollToSelected = function (duration) {
        if (duration === void 0) {
            duration = 0;
        }
        var _a = this.props,
            activeIndex = _a.activeIndex,
            step = _a.step;
        var targetIndex = Math.floor((activeIndex || 0) / step);
        var firstItem = this.menu.children[targetIndex];
        var offsetTo = firstItem.offsetTop;
        scrollTo(this.menu, offsetTo, duration);
    };
    TimeMenu.prototype.render = function () {
        var _a = this.props,
            mode = _a.mode,
            step = _a.step;
        var total = mode === 'hour' ? 24 : 60;
        var list = [];
        for (var i = 0; i < total; i++) {
            if (i % step === 0) {
                list.push({
                    label: i,
                    value: i
                });
            }
        }
        return react_1.default.createElement("div", { className: "".concat(this.prefixCls, "-menu"), ref: this._menuWrapperRefHandler }, react_1.default.createElement("ul", { role: "listbox", className: "".concat(this.prefixCls, "-menu-").concat(mode), ref: this._menuRefHandler }, this.createMenuItems(list)));
    };
    TimeMenu.propTypes = {
        prefix: prop_types_1.default.string,
        title: prop_types_1.default.node,
        mode: prop_types_1.default.oneOf(['hour', 'minute', 'second']),
        step: prop_types_1.default.number,
        activeIndex: prop_types_1.default.number,
        value: utils_1.checkDayjsObj,
        disabledItems: prop_types_1.default.func,
        renderTimeMenuItems: prop_types_1.default.func,
        onSelect: prop_types_1.default.func,
        disabled: prop_types_1.default.bool
    };
    TimeMenu.defaultProps = {
        step: 1,
        disabledItems: function disabledItems() {
            return false;
        },
        renderTimeMenuItems: function renderTimeMenuItems(list) {
            return list;
        },
        onSelect: function onSelect() {},
        disabled: false
    };
    return TimeMenu;
}(react_1.default.Component);
exports.default = TimeMenu;

/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_lifecycles_compat_1 = __webpack_require__(6);
var PT = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var prop_types_1 = __webpack_require__(107);
var constant_1 = __webpack_require__(108);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(37);
var input_1 = __webpack_require__(15);
var icon_1 = __webpack_require__(7);
var DateInput = /** @class */function (_super) {
    tslib_1.__extends(DateInput, _super);
    function DateInput(props) {
        var _this = _super.call(this, props) || this;
        _this.setInputRef = function (el, index) {
            if (_this.props.isRange) {
                if (!_this.input) {
                    _this.input = [];
                }
                _this.input[index] = el;
            } else {
                _this.input = el;
            }
        };
        _this.setValue = function (v) {
            var _a = _this.props,
                isRange = _a.isRange,
                inputType = _a.inputType,
                value = _a.value;
            var newVal = v;
            if (isRange) {
                newVal = tslib_1.__spreadArray([], tslib_1.__read(value), false);
                newVal[inputType] = v;
            }
            return newVal;
        };
        _this.formatter = function (v) {
            var format = _this.props.format;
            return typeof format === 'function' ? format(v) : v.format(format);
        };
        _this.onInput = function (v, e, eventType) {
            v = _this.setValue(v);
            if (eventType === 'clear') {
                v = null;
                e.stopPropagation();
            }
            util_1.func.invoke(_this.props, 'onInput', [v, eventType]);
        };
        _this.handleTypeChange = function (inputType) {
            if (inputType !== _this.props.inputType) {
                util_1.func.invoke(_this.props, 'onInputTypeChange', [inputType]);
            }
        };
        _this.getPlaceholder = function () {
            var isRange = _this.props.isRange;
            var holder = _this.props.placeholder;
            if (isRange && !Array.isArray(holder)) {
                holder = Array(2).fill(holder);
            }
            return holder;
        };
        /**
         * 根据 format 计算输入框 htmlSize
         */
        _this.getHtmlSize = function () {
            var _a = _this.props,
                isRange = _a.isRange,
                format = _a.format,
                hasBorder = _a.hasBorder;
            var value = '12:12:12';
            var size = 0;
            if (isRange) {
                var fmtStr = (0, util_2.fmtValue)([value, value].map(util_1.datejs), format);
                size = Math.max.apply(Math, tslib_1.__spreadArray([], tslib_1.__read(fmtStr.map(function (s) {
                    return s && s.length || 0;
                })), false));
            } else {
                var fmtStr = (0, util_2.fmtValue)((0, util_1.datejs)(value), format);
                size = fmtStr && fmtStr.length || 0;
            }
            return String(Math.max(size, hasBorder ? 12 : 8));
        };
        _this.prefixCls = "".concat(props.prefix, "time-picker2-input");
        return _this;
    }
    DateInput.prototype.render = function () {
        var _a;
        var _b = this,
            onInput = _b.onInput,
            setInputRef = _b.setInputRef,
            handleTypeChange = _b.handleTypeChange,
            prefixCls = _b.prefixCls;
        var _c = this.props,
            autoFocus = _c.autoFocus,
            readOnly = _c.readOnly,
            isRange = _c.isRange,
            value = _c.value,
            onBlur = _c.onBlur,
            hasClear = _c.hasClear,
            inputType = _c.inputType,
            size = _c.size,
            focus = _c.focus,
            prefix = _c.prefix,
            hasBorder = _c.hasBorder,
            separator = _c.separator,
            disabled = _c.disabled,
            inputProps = _c.inputProps,
            state = _c.state,
            label = _c.label,
            onClick = _c.onClick,
            onKeyDown = _c.onKeyDown,
            restProps = tslib_1.__rest(_c, ["autoFocus", "readOnly", "isRange", "value", "onBlur", "hasClear", "inputType", "size", "focus", "prefix", "hasBorder", "separator", "disabled", "inputProps", "state", "label", "onClick", "onKeyDown"]);
        var placeholder = this.getPlaceholder();
        var htmlSize = this.getHtmlSize();
        var sharedProps = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, util_1.obj.pickProps(restProps, input_1.default)), inputProps), { size: size, prefix: prefix, htmlSize: htmlSize, readOnly: readOnly, hasBorder: hasBorder, onBlur: onBlur, onChange: onInput, onClick: onClick, onKeyDown: onKeyDown });
        var rangeProps;
        if (isRange) {
            rangeProps = [constant_1.TIME_INPUT_TYPE.BEGIN, constant_1.TIME_INPUT_TYPE.END].map(function (idx) {
                var _a;
                var _disabled = Array.isArray(disabled) ? disabled[idx] : disabled;
                return tslib_1.__assign(tslib_1.__assign({}, sharedProps), { autoFocus: autoFocus, placeholder: placeholder[idx], value: value[idx] || '', disabled: _disabled, ref: function ref(_ref) {
                        return setInputRef(_ref, idx);
                    }, onFocus: _disabled ? undefined : function () {
                        return handleTypeChange(idx);
                    }, className: (0, classnames_1.default)((_a = {}, _a["".concat(prefixCls, "-active")] = inputType === idx, _a)) });
            });
        }
        var className = (0, classnames_1.default)([prefixCls, "".concat(prefixCls, "-").concat(size), "".concat(prefixCls, "-").concat(isRange ? 'range' : 'time')], (_a = {}, _a["".concat(prefixCls, "-focus")] = focus, _a["".concat(prefixCls, "-noborder")] = !hasBorder, _a["".concat(prefixCls, "-disabled")] = isRange && Array.isArray(disabled) ? disabled.every(function (v) {
            return v;
        }) : disabled, _a["".concat(prefixCls, "-error")] = state === 'error', _a));
        var calendarIcon = react_1.default.createElement(icon_1.default, { type: "clock", className: "".concat(this.prefixCls, "-symbol-clock-icon") });
        return react_1.default.createElement("div", { className: className }, isRange ? react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(input_1.default, tslib_1.__assign({}, rangeProps[0], { label: label, hasBorder: false, autoFocus: autoFocus })), react_1.default.createElement("div", { className: "".concat(prefixCls, "-separator") }, separator), react_1.default.createElement(input_1.default, tslib_1.__assign({}, rangeProps[1], { state: state, hasBorder: false, hasClear: !state && hasClear, hint: state ? null : calendarIcon }))) : react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedProps, { label: label, state: state, disabled: disabled, hasClear: !state && hasClear, placeholder: placeholder, autoFocus: autoFocus, ref: setInputRef, value: value || '', hint: state ? null : calendarIcon })));
    };
    DateInput.propTypes = {
        prefix: PT.string,
        rtl: PT.bool,
        locale: PT.object,
        value: PT.oneOfType([PT.arrayOf(PT.string), PT.string]),
        inputType: prop_types_1.default.inputType,
        format: prop_types_1.default.format,
        isRange: PT.bool,
        hasClear: PT.bool,
        onInputTypeChange: PT.func,
        autoFocus: PT.bool,
        readOnly: prop_types_1.default.readOnly,
        placeholder: prop_types_1.default.placeholder,
        size: prop_types_1.default.size,
        focus: PT.bool,
        hasBorder: PT.bool,
        onKeyDown: PT.func,
        onClick: PT.func,
        separator: PT.node,
        disabled: prop_types_1.default.disabled,
        inputProps: PT.object,
        label: PT.node
    };
    DateInput.defaultProps = {
        autoFocus: false,
        readOnly: false,
        hasClear: true,
        separator: '-',
        hasBorder: true,
        size: 'medium'
    };
    return DateInput;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(DateInput);

/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var config_provider_1 = __webpack_require__(5);
var picker_1 = __webpack_require__(475);
var constant_1 = __webpack_require__(38);
var DATE = constant_1.DATE_PICKER_MODE.DATE,
    WEEK = constant_1.DATE_PICKER_MODE.WEEK,
    MONTH = constant_1.DATE_PICKER_MODE.MONTH,
    QUARTER = constant_1.DATE_PICKER_MODE.QUARTER,
    YEAR = constant_1.DATE_PICKER_MODE.YEAR;
var MODE2FORMAT = (_a = {}, _a[DATE] = 'YYYY-MM-DD', _a[WEEK] = 'YYYY-wo', _a[MONTH] = 'YYYY-MM', _a[QUARTER] = 'YYYY-[Q]Q', _a[YEAR] = 'YYYY', _a);
/* istanbul ignore next */
var transform = function transform(props, deprecated) {
    var footerRender = props.footerRender,
        onVisibleMonthChange = props.onVisibleMonthChange,
        defaultVisibleMonth = props.defaultVisibleMonth,
        ranges = props.ranges,
        newProps = tslib_1.__rest(props, ["footerRender", "onVisibleMonthChange", "defaultVisibleMonth", "ranges"]);
    var mode = props.mode || DATE;
    if ('footerRender' in props) {
        deprecated('footerRender', 'extraFooterRender', 'DatePicker');
        newProps.extraFooterRender = footerRender;
    }
    if (onVisibleMonthChange) {
        deprecated('onVisibleMonthChange', 'onPanelChange', 'DatePicker');
        newProps.onPanelChange = onVisibleMonthChange;
    }
    if (defaultVisibleMonth) {
        deprecated('defaultVisibleMonth', 'defaultPanelValue', 'DatePicker');
        newProps.defaultPanelValue = onVisibleMonthChange;
    }
    if ('ranges' in props) {
        deprecated('ranges', 'preset: PT.oneOfType([PT.array, PT.object])', 'DatePicker');
        newProps.preset = ranges;
    }
    if ([WEEK, MONTH, QUARTER, YEAR].includes(mode)) {
        delete newProps.showTime;
    } else if ((0, _typeof3.default)(props.showTime) === 'object') {
        deprecated('showTime: object', 'showTime && timePanelProps', 'DatePicker');
        newProps.timePanelProps = props.showTime;
        newProps.showTime = true;
    }
    if (!newProps.format) {
        newProps.format = MODE2FORMAT[mode] + (newProps.showTime ? ' HH:mm:ss' : '');
    }
    return newProps;
};
var ConfigPicker = config_provider_1.default.config(picker_1.default, {
    componentName: 'DatePicker2',
    transform: transform
});
var generatePicker = function generatePicker(mode) {
    return react_1.default.forwardRef(function (props, ref) {
        return react_1.default.createElement(ConfigPicker, tslib_1.__assign({ ref: ref }, props, { mode: mode }));
    });
};
var DatePicker2 = generatePicker();
DatePicker2.displayName = 'DatePicker2';
DatePicker2.MonthPicker = generatePicker(MONTH);
DatePicker2.MonthPicker.displayName = 'MonthPicker2';
DatePicker2.YearPicker = generatePicker(YEAR);
DatePicker2.YearPicker.displayName = 'YearPicker2';
DatePicker2.WeekPicker = generatePicker(WEEK);
DatePicker2.WeekPicker.displayName = 'WeekPicker2';
DatePicker2.QuarterPicker = generatePicker(QUARTER);
DatePicker2.QuarterPicker.displayName = 'QuarterPicker2';
DatePicker2.RangePicker = react_1.default.forwardRef(function (props, ref) {
    return react_1.default.createElement(ConfigPicker, tslib_1.__assign({ ref: ref }, props, { type: "range" }));
});
DatePicker2.RangePicker.displayName = 'RangePicker2';
exports.default = DatePicker2;

/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var PT = __webpack_require__(2);
var prop_types_1 = __webpack_require__(39);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(37);
var constant_1 = __webpack_require__(38);
var overlay_1 = __webpack_require__(12);
var date_input_1 = __webpack_require__(476);
var date_panel_1 = __webpack_require__(477);
var range_panel_1 = __webpack_require__(481);
var footer_panel_1 = __webpack_require__(199);
var Popup = overlay_1.default.Popup;
var pickProps = util_1.obj.pickProps,
    pickOthers = util_1.obj.pickOthers;
var renderNode = util_1.func.renderNode,
    checkDate = util_1.func.checkDate,
    checkRangeDate = util_1.func.checkRangeDate;
var Picker = /** @class */function (_super) {
    tslib_1.__extends(Picker, _super);
    function Picker(props) {
        var _this = _super.call(this, props) || this;
        /**
         * 获取初始值
         */
        _this.getInitValue = function () {
            var props = _this.props;
            var type = props.type,
                value = props.value,
                defaultValue = props.defaultValue;
            var val = type === constant_1.DATE_PICKER_TYPE.RANGE ? [null, null] : null;
            val = 'value' in props ? value : 'defaultValue' in props ? defaultValue : val;
            return _this.checkValue(val);
        };
        /**
         * 获取 RangePicker 输入框初始输入状态
         * @returns {Object} inputState
         * @returns {boolean} inputState.justBeginInput 是否初始输入
         * @returns {number} inputState.inputType 当前输入框
         */
        _this.getInitRangeInputState = function () {
            return {
                justBeginInput: _this.isEnabled(),
                inputType: _this.isEnabled(0) ? constant_1.DATE_INPUT_TYPE.BEGIN : constant_1.DATE_INPUT_TYPE.END
            };
        };
        /**
         * 处理点击文档区域导致的弹层收起逻辑
         * @param {boolean} visible 是否可见
         * @param {string} type 事件类型
         */
        _this.handleVisibleChange = function (visible, targetType) {
            if (['docClick', 'fromTrigger'].indexOf(targetType) > -1) {
                // 弹层收起 触发 Change 逻辑
                if (!visible) {
                    _this.handleChange(_this.state.curValue, 'VISIBLE_CHANGE');
                }
                _this.onVisibleChange(visible);
            }
        };
        _this.checkValue = function (value, strictly, format) {
            return _this.props.type === constant_1.DATE_PICKER_TYPE.RANGE ? checkRangeDate(value, _this.state.inputType, _this.props.disabled, strictly, format) : checkDate(value, format);
        };
        _this.handleInputFocus = function (inputType) {
            var inputEl = _this.dateInput && _this.dateInput.input;
            if (_this.state.isRange) {
                inputEl = inputEl && inputEl[inputType];
            }
            inputEl && inputEl.focus();
        };
        _this.handleMouseDown = function (e) {
            e.preventDefault();
        };
        _this.handleInput = function (v, eventType) {
            if (eventType === 'clear') {
                _this.handleChange(v, 'INPUT_CLEAR');
                if (_this.state.isRange) {
                    _this.handleClear();
                }
            } else {
                var newState = {
                    inputValue: v,
                    visible: true
                };
                var curValue = _this.checkValue(v, true, _this.props.format);
                if (curValue !== null) {
                    newState.curValue = curValue;
                }
                _this.setState(newState);
            }
        };
        _this.onPanelChange = function (value, mode) {
            _this.setState({
                panelMode: mode
            });
            util_1.func.invoke(_this.props, 'onPanelChange', [value, mode]);
        };
        _this.handleClear = function () {
            /**
             * 清空输入之后 input 组件内部会让第二个输入框获得焦点
             * 所以这里需要设置 setTimeout 才能让第一个 input 获得焦点
             */
            _this.clearTimeoutId = setTimeout(function () {
                _this.handleInputFocus(0);
            });
            _this.setState({
                inputType: constant_1.DATE_INPUT_TYPE.BEGIN,
                justBeginInput: _this.isEnabled()
            });
            _this.onCalendarChange(null);
        };
        _this.shouldSwitchInput = function (value) {
            var _a = _this.state,
                inputType = _a.inputType,
                justBeginInput = _a.justBeginInput;
            var idx = justBeginInput ? (0, util_2.switchInputType)(inputType) : value.indexOf(null);
            if (idx !== -1 && _this.isEnabled(idx)) {
                _this.onInputTypeChange(idx);
                _this.handleInputFocus(idx);
                return true;
            }
            return false;
        };
        /**
         * 获取输入框的禁用状态
         * @param {Number} idx
         * @returns {Boolean}
         */
        _this.isEnabled = function (idx) {
            var disabled = _this.props.disabled;
            return Array.isArray(disabled) ? idx === undefined ? !disabled[0] && !disabled[1] : !disabled[idx] : !disabled;
        };
        /**
         * check if value has disabled value
         *
         * @param {string|string[]|Dayjs|Dayjs[]} val
         * @returns {Boolean}
         */
        _this.checkValueDisabled = function (val) {
            var disabledDate = _this.props.disabledDate;
            var panelMode = _this.state.panelMode;
            var values = (Array.isArray(val) ? val : [val]).map(function (value) {
                return checkDate(value);
            });
            if (!disabledDate) {
                return false;
            }
            return values.some(function (value) {
                return disabledDate(value, panelMode);
            });
        };
        _this.onKeyDown = function (e) {
            switch (e.keyCode) {
                case util_1.KEYCODE.ENTER:
                    {
                        var inputValue = _this.state.inputValue;
                        _this.onClick();
                        if (_this.checkValueDisabled(inputValue)) {
                            // reset inputValue when current inputValue is disabled
                            _this.handleChange(inputValue, 'VISIBLE_CHANGE');
                            return;
                        }
                        _this.handleChange(inputValue, 'KEYDOWN_ENTER');
                        break;
                    }
                default:
                    return;
            }
        };
        _this.handleChange = function (v, eventType) {
            var format = _this.props.format;
            var _a = _this.state,
                isRange = _a.isRange,
                showOk = _a.showOk,
                value = _a.value,
                preValue = _a.preValue;
            var forceEvents = ['KEYDOWN_ENTER', 'CLICK_PRESET', 'CLICK_OK', 'INPUT_CLEAR', 'VISIBLE_CHANGE'];
            var isTemporary = showOk && !forceEvents.includes(eventType);
            // 面板收起时候，将值设置为确认值
            v = eventType === 'VISIBLE_CHANGE' ? value : _this.checkValue(v, !isTemporary);
            _this.setState({
                curValue: v,
                inputValue: (0, util_2.fmtValue)(v, format)
            });
            if (!isTemporary) {
                _this.setState({
                    value: v
                }, function () {
                    // 判断当前选择结束，收起面板：
                    // 1. 非 Range 选择
                    // 2. 非 选择预设时间、面板收起、清空输入 操作
                    // 3. 不需要切换输入框
                    var shouldHidePanel = !isRange || ['CLICK_PRESET', 'VISIBLE_CHANGE', 'INPUT_CLEAR'].includes(eventType) || !_this.shouldSwitchInput(v);
                    if (shouldHidePanel) {
                        _this.onVisibleChange(false);
                        if ((0, util_2.isValueChanged)(v, preValue)) {
                            _this.onChange();
                        }
                    }
                });
            }
        };
        _this.onChange = function () {
            var _a = _this,
                state = _a.state,
                props = _a.props;
            var format = props.format;
            var value = _this.checkValue('value' in props ? props.value : state.value);
            _this.setState({
                curValue: value,
                preValue: value,
                inputValue: (0, util_2.fmtValue)(value, format)
            });
            util_1.func.invoke(_this.props, 'onChange', _this.getOutputArgs(state.value));
        };
        _this.onCalendarChange = function (values) {
            var _a = _this.props,
                format = _a.format,
                onCalendarChange = _a.onCalendarChange;
            if (onCalendarChange) {
                var startValue = values && values[0];
                var endValue = values && values[1];
                var startStr = startValue ? (0, util_2.fmtValue)(values[0], format) : '';
                var endStr = endValue ? (0, util_2.fmtValue)(values[1], format) : '';
                onCalendarChange(values, [startStr, endStr]);
            }
        };
        _this.onOk = function () {
            var inputValue = _this.state.inputValue;
            var checkedValue = _this.checkValue(inputValue, true, _this.props.format);
            util_1.func.invoke(_this.props, 'onOk', _this.getOutputArgs(checkedValue));
            _this.setState({ value: checkedValue });
            _this.handleChange(checkedValue, 'CLICK_OK');
        };
        _this.onInputTypeChange = function (idx) {
            var _a = _this.state,
                inputType = _a.inputType,
                visible = _a.visible;
            if (idx !== inputType) {
                _this.setState({
                    inputType: idx,
                    justBeginInput: !(idx !== null && visible)
                });
            }
        };
        _this.onClick = function () {
            var _a = _this.state,
                visible = _a.visible,
                inputType = _a.inputType;
            if (!visible) {
                _this.handleInputFocus(inputType);
            }
        };
        /**
         * 获取 `onChange` 和 `onOk` 方法的输出参数
         * @param {Dayjs} value
         * @returns 默认返回 `Dayjs` 实例和 `format` 格式化的值
         *          如果传了了 `outputFormat` 属性则返回 `outputFormat` 格式化的值
         */
        _this.getOutputArgs = function (value) {
            var _a = _this.props,
                outputFormat = _a.outputFormat,
                format = _a.format;
            if (outputFormat) {
                return [(0, util_2.fmtValue)(value, outputFormat)];
            }
            return [value, (0, util_2.fmtValue)(value, format)];
        };
        _this.getCurrentAlign = function (_a) {
            var align = _a.align;
            _this.setState({
                align: align
            });
        };
        _this.getRangeInputOffsetLeft = function () {
            var left = _this.dateInput && _this.dateInput.input && _this.dateInput.input[_this.state.inputType] && _this.dateInput.input[_this.state.inputType].getInputNode().offsetLeft;
            return left;
        };
        _this.getPopupOffsetLeft = function () {
            var inputOffsetLeft = _this.getRangeInputOffsetLeft();
            var popupElement = _this.popupRef.current;
            var popupElementWidth = popupElement ? popupElement.offsetWidth : 0;
            // 弹层宽度大于输入元素长度，只偏移 arrow
            if (popupElementWidth > 1.2 * inputOffsetLeft) {
                return {
                    arrowLeft: inputOffsetLeft,
                    panelLeft: 0
                };
            } else {
                // 否则 panel 整体偏移，arrow 随 panel 整体偏移
                return {
                    arrowLeft: 0,
                    panelLeft: inputOffsetLeft
                };
            }
        };
        _this.renderArrow = function (left) {
            return react_1.default.createElement("div", { key: "arrow", className: "".concat(_this.props.prefix, "range-picker2-arrow"), style: { left: left } });
        };
        var prefix = props.prefix,
            type = props.type,
            format = props.format,
            mode = props.mode,
            defaultVisible = props.defaultVisible;
        _this.state = {
            panelMode: mode,
            visible: defaultVisible
        };
        if (type === constant_1.DATE_PICKER_TYPE.RANGE) {
            var _a = _this.getInitRangeInputState(),
                inputType = _a.inputType,
                justBeginInput = _a.justBeginInput;
            _this.state = tslib_1.__assign({ inputType: inputType, justBeginInput: justBeginInput }, _this.state);
        }
        var value = _this.getInitValue();
        _this.state = tslib_1.__assign({ value: value, curValue: value, preValue: value, inputValue: (0, util_2.fmtValue)(value, format) }, _this.state);
        _this.prefixCls = "".concat(prefix, "date-picker2");
        _this.popupRef = react_1.default.createRef();
        return _this;
    }
    Picker.getDerivedStateFromProps = function (props, state) {
        var type = props.type,
            showTime = props.showTime,
            showOk = props.showOk,
            disabled = props.disabled,
            format = props.format,
            mode = props.mode;
        var isRange = type === constant_1.DATE_PICKER_TYPE.RANGE;
        var newState = {
            isRange: isRange,
            showOk: !!(showOk || showTime)
        };
        /**
         * 如果当前输入框可能被 disabled
         * 且另一个输入框非 disabled 则切换到另一个输入框
         */
        if (isRange) {
            var inputType = state.inputType;
            var _disabled = Array.isArray(disabled) ? disabled : [disabled, disabled];
            if (_disabled[inputType]) {
                var otherType = (0, util_2.switchInputType)(state.inputType);
                if (!_disabled[otherType]) {
                    inputType = otherType;
                }
            }
            newState.inputType = inputType;
        }
        if ('value' in props) {
            var value = isRange ? checkRangeDate(props.value, state.inputType, disabled) : checkDate(props.value);
            if ((0, util_2.isValueChanged)(value, state.preValue)) {
                newState = tslib_1.__assign(tslib_1.__assign({}, newState), { value: value, curValue: value, preValue: value, inputValue: (0, util_2.fmtValue)(value, format) });
            }
            if ('mode' in props) {
                if (mode !== state.panelMode) {
                    newState = tslib_1.__assign(tslib_1.__assign({}, newState), { panelMode: mode, inputValue: (0, util_2.fmtValue)(value, format) });
                }
            }
            if ('showTime' in props) {
                if (showTime !== state.showTime) {
                    newState = tslib_1.__assign(tslib_1.__assign({}, newState), { showTime: !!showTime, inputValue: (0, util_2.fmtValue)(value, format) });
                }
            }
        }
        return newState;
    };
    Picker.prototype.componentWillUnmount = function () {
        [this.clearTimeoutId, this.timeoutId].forEach(function (id) {
            return id && clearTimeout(id);
        });
    };
    Picker.prototype.onVisibleChange = function (visible) {
        var _this = this;
        if (visible !== this.state.visible) {
            var callback = function callback() {
                _this.setState({
                    visible: visible,
                    justBeginInput: _this.isEnabled()
                });
            };
            if (this.timeoutId) {
                clearTimeout(this.timeoutId);
                this.timeoutId = null;
            }
            if (visible) {
                callback();
            } else {
                this.timeoutId = setTimeout(callback, 0);
            }
            util_1.func.invoke(this.props, 'onVisibleChange', [visible]);
        }
    };
    Picker.prototype.render = function () {
        var _a;
        var _this = this;
        var _b = this,
            prefixCls = _b.prefixCls,
            handleChange = _b.handleChange,
            handleMouseDown = _b.handleMouseDown,
            handleVisibleChange = _b.handleVisibleChange,
            onOk = _b.onOk,
            onClick = _b.onClick,
            handleInput = _b.handleInput,
            onInputTypeChange = _b.onInputTypeChange,
            onPanelChange = _b.onPanelChange,
            onKeyDown = _b.onKeyDown,
            onCalendarChange = _b.onCalendarChange;
        var _c = this.props,
            rtl = _c.rtl,
            locale = _c.locale,
            prefix = _c.prefix,
            inputReadOnly = _c.inputReadOnly,
            showTime = _c.showTime,
            preset = _c.preset,
            mode = _c.mode,
            format = _c.format,
            trigger = _c.trigger,
            disabledDate = _c.disabledDate,
            extraFooterRender = _c.extraFooterRender,
            timePanelProps = _c.timePanelProps,
            resetTime = _c.resetTime,
            placeholder = _c.placeholder,
            disabledTime = _c.disabledTime,
            dateCellRender = _c.dateCellRender,
            disabled = _c.disabled,
            isPreview = _c.isPreview,
            className = _c.className,
            defaultPanelValue = _c.defaultPanelValue,
            renderPreview = _c.renderPreview,
            label = _c.label,
            restProps = tslib_1.__rest(_c, ["rtl", "locale", "prefix", "inputReadOnly", "showTime", "preset", "mode", "format", "trigger", "disabledDate", "extraFooterRender", "timePanelProps", "resetTime", "placeholder", "disabledTime", "dateCellRender", "disabled", "isPreview", "className", "defaultPanelValue", "renderPreview", "label"]);
        var _d = this.state,
            isRange = _d.isRange,
            inputType = _d.inputType,
            justBeginInput = _d.justBeginInput,
            panelMode = _d.panelMode,
            showOk = _d.showOk,
            align = _d.align;
        var _e = this.state,
            inputValue = _e.inputValue,
            curValue = _e.curValue;
        var _f = this.getPopupOffsetLeft(),
            arrowLeft = _f.arrowLeft,
            panelLeft = _f.panelLeft;
        // 预览态
        if (isPreview) {
            var previewCls = (0, classnames_1.default)(className, "".concat(prefix, "form-preview"));
            return react_1.default.createElement("div", { className: previewCls }, renderNode(renderPreview, isRange ? inputValue.join('-') : inputValue, [curValue, this.props]));
        }
        var visible = 'visible' in this.props ? this.props.visible : this.state.visible;
        var allDisabled = isRange && Array.isArray(disabled) ? disabled.every(function (v) {
            return v;
        }) : disabled;
        var sharedProps = {
            rtl: rtl,
            prefix: prefix,
            locale: locale,
            mode: mode,
            format: format,
            showTime: showTime,
            inputType: inputType
        };
        // 输入框
        var inputProps = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, pickProps(date_input_1.default.propTypes, restProps)), sharedProps), { value: inputValue, label: label, isRange: isRange, disabled: disabled, placeholder: placeholder, onInputTypeChange: onInputTypeChange, focus: visible, onInput: handleInput, readOnly: inputReadOnly, inputProps: this.props.inputProps, ref: function ref(el) {
                return _this.dateInput = el;
            } });
        // 禁用状态下 不允许清空
        if (!this.isEnabled()) {
            inputProps.hasClear = false;
        }
        var triggerNode = renderNode(trigger, react_1.default.createElement(date_input_1.default, tslib_1.__assign({}, inputProps)));
        // 日期
        var panelProps = tslib_1.__assign(tslib_1.__assign({}, sharedProps), { panelMode: panelMode, value: curValue, disabledDate: disabledDate, onPanelChange: onPanelChange, timePanelProps: timePanelProps, disabledTime: disabledTime, resetTime: resetTime, dateCellRender: dateCellRender, defaultPanelValue: defaultPanelValue, onSelect: handleChange });
        var DateNode = isRange ? react_1.default.createElement(range_panel_1.default, tslib_1.__assign({ justBeginInput: justBeginInput, onCalendarChange: onCalendarChange }, panelProps)) : react_1.default.createElement(date_panel_1.default, tslib_1.__assign({}, panelProps));
        // 底部节点
        var oKable = !!(isRange ? inputValue && inputValue[inputType] : inputValue);
        var shouldShowFooter = showOk || preset || extraFooterRender;
        var footerNode = shouldShowFooter ? react_1.default.createElement(footer_panel_1.default, { oKable: oKable, onOk: onOk, showOk: showOk, onChange: handleChange, preset: preset, locale: locale, prefix: prefix, extraRender: extraFooterRender }) : null;
        var triggerProps;
        if (!allDisabled) {
            triggerProps = { onKeyDown: onKeyDown, onClick: onClick };
        }
        // popup
        var _g = this.props,
            followTrigger = _g.followTrigger,
            popupTriggerType = _g.popupTriggerType,
            popupAlign = _g.popupAlign,
            popupContainer = _g.popupContainer,
            popupStyle = _g.popupStyle,
            popupClassName = _g.popupClassName,
            popupComponent = _g.popupComponent,
            popupProps = _g.popupProps;
        var popupCls = (0, classnames_1.default)(popupClassName || popupProps && popupProps.className, (_a = {}, _a["".concat(prefixCls, "-overlay")] = true, _a["".concat(prefixCls, "-").concat((align || []).join('-'))] = align, _a["".concat(prefixCls, "-overlay-range")] = isRange, _a));
        var PopupComp = popupComponent || Popup;
        return react_1.default.createElement("div", tslib_1.__assign({}, pickOthers(Picker.propTypes, restProps), { dir: rtl ? 'rtl' : undefined, className: (0, classnames_1.default)(className, prefixCls), style: this.props.style }), react_1.default.createElement(PopupComp, tslib_1.__assign({ rtl: rtl, key: "date-picker-popup", visible: visible, align: popupAlign, container: popupContainer, followTrigger: followTrigger, triggerType: popupTriggerType, style: popupStyle, onVisibleChange: handleVisibleChange, disabled: allDisabled, trigger: react_1.default.createElement("div", tslib_1.__assign({}, triggerProps, { role: "button", tabIndex: "0", style: { width: '100%' } }), triggerNode), onPosition: this.getCurrentAlign, canCloseByTrigger: false }, popupProps, { className: popupCls }), react_1.default.createElement("div", { onMouseDown: handleMouseDown, style: { marginLeft: panelLeft } }, react_1.default.createElement("div", { dir: rtl ? 'rtl' : undefined, className: "".concat(prefixCls, "-wrapper"), ref: this.popupRef }, isRange ? this.renderArrow(arrowLeft) : null, DateNode, this.state.panelMode !== this.props.mode ? null : footerNode))));
    };
    Picker.propTypes = {
        rtl: PT.bool,
        prefix: PT.string,
        locale: PT.object,
        name: PT.string,
        // calendar
        mode: prop_types_1.default.mode,
        type: prop_types_1.default.type,
        value: prop_types_1.default.value,
        defaultValue: prop_types_1.default.value,
        defaultPanelValue: prop_types_1.default.date,
        disabledDate: PT.func,
        visible: PT.bool,
        defaultVisible: PT.bool,
        dateCellRender: PT.func,
        // event
        onOk: PT.func,
        onChange: PT.func,
        onVisibleChange: PT.func,
        onPanelChange: PT.func,
        onCalendarChange: PT.func,
        // time
        showTime: PT.bool,
        resetTime: PT.bool,
        timePanelProps: PT.object,
        disabledTime: PT.object,
        // header
        titleRender: PT.func,
        // footer
        preset: PT.oneOfType([PT.array, PT.object]),
        extraFooterRender: prop_types_1.default.render,
        showOk: PT.bool,
        // input
        trigger: prop_types_1.default.render,
        hasBorder: PT.bool,
        inputProps: PT.object,
        hasClear: PT.bool,
        placeholder: prop_types_1.default.placeholder,
        disabled: prop_types_1.default.disabled,
        inputReadOnly: prop_types_1.default.readOnly,
        /**
         * 日期显示格式
         */
        format: prop_types_1.default.format,
        label: PT.node,
        separator: PT.node,
        /**
         * 输出格式：控制 onChange、onOk 事件的输出值格式
         *  - string 类型：根据时间格式进行转换
         *  - function 类型：((date: Dayjs, dateStr: string) => any)
         *
         * @version 1.23
         */
        outputFormat: prop_types_1.default.format,
        // popup
        followTrigger: PT.bool,
        popupTriggerType: PT.oneOf(['click', 'hover']),
        popupAlign: PT.string,
        popupContainer: PT.any,
        popupStyle: PT.object,
        popupClassName: PT.string,
        popupComponent: PT.elementType,
        popupProps: PT.object,
        // preview
        isPreview: PT.bool,
        renderPreview: PT.func,
        // ariaLabel
        dateInputAriaLabel: prop_types_1.default.ariaLabel
    };
    Picker.defaultProps = {
        rtl: false,
        prefix: 'next-',
        popupTriggerType: 'click',
        locale: zh_cn_1.default.DatePicker,
        defaultVisible: false,
        type: constant_1.DATE_PICKER_TYPE.DATE,
        mode: constant_1.DATE_PICKER_MODE.DATE,
        format: 'YYYY-MM-DD'
    };
    return Picker;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Picker);

/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_lifecycles_compat_1 = __webpack_require__(6);
var PT = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var prop_types_1 = __webpack_require__(39);
var constant_1 = __webpack_require__(38);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(37);
var input_1 = __webpack_require__(15);
var icon_1 = __webpack_require__(7);
var DATE = constant_1.DATE_PICKER_MODE.DATE,
    WEEK = constant_1.DATE_PICKER_MODE.WEEK,
    MONTH = constant_1.DATE_PICKER_MODE.MONTH,
    QUARTER = constant_1.DATE_PICKER_MODE.QUARTER,
    YEAR = constant_1.DATE_PICKER_MODE.YEAR;
var DateInput = /** @class */function (_super) {
    tslib_1.__extends(DateInput, _super);
    function DateInput(props) {
        var _this = _super.call(this, props) || this;
        _this.setInputRef = function (el, index) {
            if (_this.props.isRange) {
                if (!_this.input) {
                    _this.input = [];
                }
                _this.input[index] = el;
            } else {
                _this.input = el;
            }
        };
        _this.setValue = function (v) {
            var _a = _this.props,
                isRange = _a.isRange,
                inputType = _a.inputType,
                value = _a.value;
            var newVal = v;
            if (isRange) {
                newVal = tslib_1.__spreadArray([], tslib_1.__read(value), false);
                newVal[inputType] = v;
            }
            return newVal;
        };
        _this.formatter = function (v) {
            var format = _this.props.format;
            return typeof format === 'function' ? format(v) : v.format(format);
        };
        _this.onInput = function (v, e, eventType) {
            v = _this.setValue(v);
            if (eventType === 'clear') {
                v = null;
                e.stopPropagation();
            }
            util_1.func.invoke(_this.props, 'onInput', [v, eventType]);
        };
        _this.handleTypeChange = function (inputType) {
            if (inputType !== _this.props.inputType) {
                util_1.func.invoke(_this.props, 'onInputTypeChange', [inputType]);
            }
        };
        _this.getPlaceholder = function () {
            var _a;
            var _b = _this.props,
                locale = _b.locale,
                isRange = _b.isRange,
                mode = _b.mode;
            var placeholder = locale.placeholder,
                selectDate = locale.selectDate,
                monthPlaceholder = locale.monthPlaceholder,
                weekPlaceholder = locale.weekPlaceholder,
                yearPlaceholder = locale.yearPlaceholder,
                startPlaceholder = locale.startPlaceholder,
                quarterPlaceholder = locale.quarterPlaceholder,
                endPlaceholder = locale.endPlaceholder;
            var mode2placeholder = (_a = {}, _a[DATE] = selectDate, _a[WEEK] = weekPlaceholder, _a[MONTH] = monthPlaceholder, _a[QUARTER] = quarterPlaceholder, _a[YEAR] = yearPlaceholder, _a);
            var holder = _this.props.placeholder;
            holder = holder || (isRange ? [startPlaceholder, endPlaceholder] : mode2placeholder[mode] || placeholder);
            if (isRange && !Array.isArray(holder)) {
                holder = Array(2).fill(holder);
            }
            return holder;
        };
        /**
         * 根据 format 计算输入框 htmlSize
         */
        _this.getHtmlSize = function () {
            var _a = _this.props,
                isRange = _a.isRange,
                format = _a.format,
                hasBorder = _a.hasBorder;
            var value = '2020-12-12 12:12:12';
            var size = 0;
            if (isRange) {
                var fmtStr = (0, util_2.fmtValue)([value, value].map(util_1.datejs), format);
                size = Math.max.apply(Math, tslib_1.__spreadArray([], tslib_1.__read(fmtStr.map(function (s) {
                    return s && s.length || 0;
                })), false));
            } else {
                var fmtStr = (0, util_2.fmtValue)((0, util_1.datejs)(value), format);
                (0, util_2.fmtValue)((0, util_1.datejs)(value), format);
                size = fmtStr && fmtStr.length || 0;
            }
            return String(Math.max(size, hasBorder ? 12 : 8));
        };
        _this.prefixCls = "".concat(props.prefix, "date-picker2-input");
        return _this;
    }
    DateInput.prototype.render = function () {
        var _a;
        var _b = this,
            onInput = _b.onInput,
            setInputRef = _b.setInputRef,
            handleTypeChange = _b.handleTypeChange,
            prefixCls = _b.prefixCls;
        var _c = this.props,
            autoFocus = _c.autoFocus,
            readOnly = _c.readOnly,
            isRange = _c.isRange,
            value = _c.value,
            prefix = _c.prefix,
            hasClear = _c.hasClear,
            inputType = _c.inputType,
            size = _c.size,
            focus = _c.focus,
            hasBorder = _c.hasBorder,
            separator = _c.separator,
            disabled = _c.disabled,
            inputProps = _c.inputProps,
            dateInputAriaLabel = _c.dateInputAriaLabel,
            state = _c.state,
            label = _c.label,
            restProps = tslib_1.__rest(_c, ["autoFocus", "readOnly", "isRange", "value", "prefix", "hasClear", "inputType", "size", "focus", "hasBorder", "separator", "disabled", "inputProps", "dateInputAriaLabel", "state", "label"]);
        var placeholder = this.getPlaceholder();
        var htmlSize = this.getHtmlSize();
        var sharedProps = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, util_1.obj.pickProps(restProps, input_1.default)), inputProps), { size: size, htmlSize: htmlSize, readOnly: readOnly, hasBorder: false, onChange: onInput });
        var rangeProps;
        if (isRange) {
            rangeProps = [constant_1.DATE_INPUT_TYPE.BEGIN, constant_1.DATE_INPUT_TYPE.END].map(function (idx) {
                var _a;
                var _disabled = Array.isArray(disabled) ? disabled[idx] : disabled;
                return tslib_1.__assign(tslib_1.__assign({}, sharedProps), { autoFocus: autoFocus, placeholder: placeholder[idx], value: value[idx] || '', 'aria-label': Array.isArray(dateInputAriaLabel) ? dateInputAriaLabel[idx] : dateInputAriaLabel, disabled: _disabled, ref: function ref(_ref) {
                        return setInputRef(_ref, idx);
                    }, onFocus: _disabled ? undefined : function () {
                        return handleTypeChange(idx);
                    }, className: (0, classnames_1.default)((_a = {}, _a["".concat(prefixCls, "-active")] = inputType === idx, _a)) });
            });
        }
        var className = (0, classnames_1.default)([prefixCls, "".concat(prefixCls, "-").concat(size), "".concat(prefixCls, "-").concat(isRange ? 'range' : 'date')], (_a = {}, _a["".concat(prefixCls, "-focus")] = focus, _a["".concat(prefixCls, "-noborder")] = !hasBorder, _a["".concat(prefixCls, "-disabled")] = isRange && Array.isArray(disabled) ? disabled.every(function (v) {
            return v;
        }) : disabled, _a["".concat(prefixCls, "-error")] = state === 'error', _a));
        var calendarIcon = react_1.default.createElement(icon_1.default, { type: "calendar", className: "".concat(prefix, "date-picker2-symbol-calendar-icon") });
        return react_1.default.createElement("div", { className: className }, isRange ? react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(input_1.default, tslib_1.__assign({}, rangeProps[0], { label: label, autoFocus: autoFocus })), react_1.default.createElement("div", { className: "".concat(prefixCls, "-separator") }, separator), react_1.default.createElement(input_1.default, tslib_1.__assign({}, rangeProps[1], { state: state, hasClear: !state && hasClear, hint: state ? null : calendarIcon }))) : react_1.default.createElement(input_1.default, tslib_1.__assign({}, sharedProps, { label: label, state: state, disabled: disabled, hasClear: !state && hasClear, placeholder: placeholder, autoFocus: autoFocus, ref: setInputRef, "aria-label": dateInputAriaLabel, value: value || '', hint: state ? null : calendarIcon })));
    };
    DateInput.propTypes = {
        prefix: PT.string,
        rtl: PT.bool,
        locale: PT.object,
        value: prop_types_1.default.inputValue,
        inputType: prop_types_1.default.inputType,
        format: prop_types_1.default.format,
        isRange: PT.bool,
        hasClear: PT.bool,
        onInputTypeChange: PT.func,
        autoFocus: PT.bool,
        readOnly: prop_types_1.default.readOnly,
        placeholder: prop_types_1.default.placeholder,
        size: prop_types_1.default.size,
        focus: PT.bool,
        hasBorder: PT.bool,
        separator: PT.node,
        disabled: prop_types_1.default.disabled,
        inputProps: PT.object,
        dateInputAriaLabel: prop_types_1.default.ariaLabel,
        label: PT.node,
        state: PT.string
    };
    DateInput.defaultProps = {
        autoFocus: false,
        readOnly: false,
        hasClear: true,
        separator: '-',
        hasBorder: true,
        size: 'medium'
    };
    return DateInput;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(DateInput);

/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = __webpack_require__(10);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var PT = __webpack_require__(2);
var prop_types_1 = __webpack_require__(39);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(37);
var calendar2_1 = __webpack_require__(109);
var time_panel_1 = __webpack_require__(201);
var DatePanel = /** @class */function (_super) {
    tslib_1.__extends(DatePanel, _super);
    function DatePanel(props) {
        var _this = _super.call(this, props) || this;
        _this.onTimeSelect = function (v) {
            _this.handleSelect(v, true);
        };
        _this.handleSelect = function (v, fromTimeChange) {
            var defaultTime = _this.state.defaultTime;
            var timeVal = null;
            if (!_this.props.resetTime && !fromTimeChange) {
                timeVal = _this.props.value || defaultTime || (0, util_1.datejs)();
            }
            v = (0, util_2.setTime)(v, timeVal);
            util_1.func.invoke(_this.props, 'onSelect', [v]);
        };
        _this.handlePanelChange = function (v, mode) {
            util_1.func.invoke(_this.props, 'onPanelChange', [v, mode]);
        };
        // 默认时间
        var _a = props.timePanelProps,
            timePanelProps = _a === void 0 ? {} : _a;
        var defaultTime = timePanelProps.defaultValue;
        if (defaultTime) {
            // fix: https://github.com/alibaba-fusion/next/issues/3203
            defaultTime = (0, util_1.datejs)(defaultTime, typeof defaultTime === 'string' ? timePanelProps.format || 'HH:mm:ss' : undefined);
        }
        _this.state = {
            defaultTime: defaultTime
        };
        return _this;
    }
    DatePanel.prototype.render = function () {
        var _a;
        var _b = this.props,
            mode = _b.mode,
            panelMode = _b.panelMode,
            prefix = _b.prefix,
            showTime = _b.showTime,
            value = _b.value,
            disabledDate = _b.disabledDate,
            disabledTime = _b.disabledTime,
            timePanelProps = _b.timePanelProps,
            dateCellRender = _b.dateCellRender,
            restProps = tslib_1.__rest(_b, ["mode", "panelMode", "prefix", "showTime", "value", "disabledDate", "disabledTime", "timePanelProps", "dateCellRender"]);
        var className = (0, classnames_1.default)("".concat(prefix, "date-picker2-panel"), (_a = {}, _a["".concat(prefix, "date-time-picker2-panel")] = showTime, _a));
        // 禁用时间
        var _disabledTime;
        if (showTime && mode === panelMode && disabledTime) {
            _disabledTime = typeof disabledTime === 'function' ? disabledTime(value) : disabledTime;
            if ((typeof _disabledTime === "undefined" ? "undefined" : (0, _typeof3.default)(_disabledTime)) !== 'object') {
                _disabledTime = null;
            }
        }
        return react_1.default.createElement("div", { className: className }, react_1.default.createElement(calendar2_1.default, tslib_1.__assign({}, util_1.obj.pickProps(calendar2_1.default.propTypes, restProps), { shape: "panel", value: value, panelMode: mode, colNum: showTime ? 6 : undefined, onSelect: this.handleSelect, onPanelChange: this.handlePanelChange, disabledDate: disabledDate, dateCellRender: dateCellRender })), showTime && mode === panelMode ? react_1.default.createElement(time_panel_1.default, tslib_1.__assign({}, util_1.obj.pickProps(time_panel_1.default.propTypes, restProps), { prefix: prefix, value: value || this.state.defaultTime, onSelect: this.onTimeSelect, disabledTime: disabledTime, timePanelProps: tslib_1.__assign(tslib_1.__assign({}, _disabledTime), timePanelProps) })) : null);
    };
    DatePanel.propTypes = {
        rtl: PT.bool,
        prefix: PT.string,
        locale: PT.object,
        mode: prop_types_1.default.mode,
        panelMode: PT.any,
        value: prop_types_1.default.date,
        disabledDate: PT.func,
        showTime: PT.bool,
        resetTime: PT.bool,
        timePanelProps: PT.object,
        disabledTime: prop_types_1.default.disabledTime,
        dateCellRender: PT.func
    };
    DatePanel.defaultProps = {
        showTime: false,
        resetTime: false
    };
    return DatePanel;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(DatePanel);

/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_lifecycles_compat_1 = __webpack_require__(6);
var PT = __webpack_require__(2);
var classnames_1 = __webpack_require__(3);
var zh_cn_1 = __webpack_require__(9);
var util_1 = __webpack_require__(4);
var prop_types_1 = __webpack_require__(200);
var constant_1 = __webpack_require__(48);
var header_panel_1 = __webpack_require__(479);
var date_table_1 = __webpack_require__(480);
var pickProps = util_1.obj.pickProps,
    pickOthers = util_1.obj.pickOthers;
// CALENDAR_MODE => DATE_PANEL_MODE
function getPanelMode(mode) {
    return mode && (mode === constant_1.CALENDAR_MODE.YEAR ? constant_1.DATE_PANEL_MODE.MONTH : constant_1.DATE_PANEL_MODE.DATE);
}
function isValueChanged(newVal, oldVal) {
    return newVal !== oldVal && !(0, util_1.datejs)(newVal).isSame((0, util_1.datejs)(oldVal));
}
var Calendar = /** @class */function (_super) {
    tslib_1.__extends(Calendar, _super);
    function Calendar(props) {
        var _this = _super.call(this, props) || this;
        _this.switchPanelMode = function (mode) {
            var MONTH = constant_1.DATE_PANEL_MODE.MONTH,
                YEAR = constant_1.DATE_PANEL_MODE.YEAR,
                DECADE = constant_1.DATE_PANEL_MODE.DECADE;
            var originalPanelMode = _this.props.panelMode || getPanelMode(mode);
            switch (mode) {
                case YEAR:
                    return MONTH;
                case DECADE:
                    return YEAR;
                default:
                    return originalPanelMode;
            }
        };
        _this.shouldSwitchPanelMode = function () {
            var _a = _this.props,
                mode = _a.mode,
                shape = _a.shape;
            var panelMode = _this.state.panelMode;
            var originalPanelMode = _this.props.panelMode || getPanelMode(mode);
            return shape === constant_1.CALENDAR_SHAPE.PANEL && panelMode !== originalPanelMode;
        };
        _this.onDateSelect = function (value, _, _a) {
            var isCurrent = _a.isCurrent;
            var panelMode = _this.state.panelMode;
            var unit = panelMode === 'date' ? 'day' : panelMode;
            if (_this.shouldSwitchPanelMode()) {
                _this.onPanelChange(value, _this.switchPanelMode(panelMode), 'DATESELECT_VALUE_SWITCH_MODE');
            } else {
                isCurrent || _this.onPanelValueChange(value, 'DATESELECT');
                value.isSame(_this.state.value, unit) || _this.onChange(value);
                util_1.func.invoke(_this.props, 'onSelect', [value]);
            }
        };
        _this.onModeChange = function (mode, reason) {
            _this.setState({
                mode: mode
            });
            var panelMode = getPanelMode(mode);
            if (_this.state.panelMode !== panelMode) {
                _this.onPanelModeChange(panelMode, reason);
            }
        };
        _this.onPanelValueChange = function (panelValue, reason) {
            _this.onPanelChange(panelValue, _this.state.panelMode, reason);
        };
        _this.onPanelModeChange = function (panelMode, reason) {
            _this.onPanelChange(_this.state.panelValue, panelMode, reason);
        };
        _this.onPanelChange = function (value, mode, reason) {
            _this.setState({
                panelMode: mode,
                panelValue: value
            });
            util_1.func.invoke(_this.props, 'onPanelChange', [value, mode, reason]);
        };
        _this.onChange = function (value) {
            _this.setState({
                value: value,
                panelValue: value
            });
            util_1.func.invoke(_this.props, 'onChange', [value]);
        };
        var defaultValue = props.defaultValue,
            mode = props.mode,
            _a = props.defaultPanelValue,
            defaultPanelValue = _a === void 0 ? (0, util_1.datejs)() : _a;
        var value = 'value' in props ? props.value : defaultValue;
        var panelValue = (0, util_1.datejs)('panelValue' in props ? props.panelValue : value || defaultPanelValue);
        var panelMode = props.panelMode || getPanelMode(mode) || constant_1.DATE_PANEL_MODE.DATE;
        _this.state = {
            mode: mode,
            value: value,
            panelMode: panelMode,
            panelValue: panelValue.isValid() ? panelValue : (0, util_1.datejs)()
        };
        return _this;
    }
    Calendar.getDerivedStateFromProps = function (props, state) {
        var newState = null;
        var value;
        var panelValue;
        if ('value' in props && isValueChanged(props.value, state.value)) {
            value = props.value;
            panelValue = (0, util_1.datejs)(value);
        }
        if ('panelValue' in props) {
            panelValue = (0, util_1.datejs)(props.panelValue);
        }
        // panelValue不能是无效值
        if (panelValue) {
            panelValue = panelValue.isValid() ? panelValue : (0, util_1.datejs)();
            newState = {
                panelValue: panelValue
            };
        }
        if (value) {
            newState.value = value;
        }
        return newState;
    };
    Calendar.prototype.render = function () {
        var value = 'value' in this.props ? (0, util_1.datejs)(this.props.value) : this.state.value;
        var _a = this.state,
            panelMode = _a.panelMode,
            mode = _a.mode,
            panelValue = _a.panelValue;
        var _b = this.props,
            prefix = _b.prefix,
            shape = _b.shape,
            rtl = _b.rtl,
            className = _b.className,
            restProps = tslib_1.__rest(_b, ["prefix", "shape", "rtl", "className"]);
        var sharedProps = {
            rtl: rtl,
            prefix: prefix,
            shape: shape,
            value: value,
            panelValue: panelValue
        };
        var headerPanelProps = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, pickProps(header_panel_1.default.propTypes, restProps)), sharedProps), { mode: mode, panelMode: panelMode, onPanelValueChange: this.onPanelValueChange, onModeChange: this.onModeChange, onPanelModeChange: this.onPanelModeChange, showModeSwitch: this.props.mode !== constant_1.CALENDAR_MODE.YEAR });
        var dateTableProps = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, pickProps(date_table_1.default.propTypes, restProps)), sharedProps), { mode: panelMode, onSelect: this.onDateSelect });
        var classNames = (0, classnames_1.default)(["".concat(prefix, "calendar2"), "".concat(prefix, "calendar2-").concat(shape), className]);
        return react_1.default.createElement("div", tslib_1.__assign({}, pickOthers(Calendar.propTypes, restProps), { dir: rtl ? 'rtl' : undefined, className: classNames }), react_1.default.createElement(header_panel_1.default, tslib_1.__assign({}, headerPanelProps)), react_1.default.createElement("div", { className: "".concat(prefix, "calendar2-body") }, react_1.default.createElement(date_table_1.default, tslib_1.__assign({}, dateTableProps))));
    };
    Calendar.propTypes = {
        rtl: PT.bool,
        name: PT.string,
        prefix: PT.string,
        locale: PT.object,
        /**
         * 展现形态
         */
        shape: prop_types_1.default.shape,
        /*
         * 日期模式: month | year
         */
        mode: prop_types_1.default.mode,
        /**
         * 默认选中的日期（受控）
         */
        value: prop_types_1.default.date,
        /**
         * 默认选中的日期
         */
        defaultValue: prop_types_1.default.date,
        /**
         * 面板显示的日期（受控）
         */
        panelValue: prop_types_1.default.date,
        /**
         * 面板默认显示的日期
         */
        defaultPanelValue: prop_types_1.default.date,
        /**
         * 不可选择的日期
         */
        disabledDate: PT.func,
        /**
         * 可显示的日期范围
         */
        validRange: PT.arrayOf(prop_types_1.default.date),
        /**
         * 自定义日期渲染
         */
        dateCellRender: PT.func,
        quarterCellRender: PT.func,
        monthCellRender: PT.func,
        yearCellRender: PT.func,
        /**
         * 自定义头部渲染
         */
        headerRender: PT.func,
        /**
         * 日期变化回调
         */
        onChange: PT.func,
        /**
         * 点击选择日期回调
         */
        onSelect: PT.func,
        /**
         * 日期面板变化回调
         */
        onPanelChange: PT.func,
        cellProps: PT.object,
        cellClassName: PT.oneOfType([PT.func, PT.string]),
        panelMode: PT.any,
        onPrev: PT.func,
        onNext: PT.func,
        onSuperPrev: PT.func,
        onSuperNext: PT.func,
        colNum: PT.number
    };
    Calendar.defaultProps = {
        rtl: false,
        prefix: 'next-',
        locale: zh_cn_1.default.Calendar,
        shape: constant_1.CALENDAR_SHAPE.FULLSCREEN,
        mode: constant_1.CALENDAR_MODE.MONTH
    };
    return Calendar;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(Calendar);

/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_lifecycles_compat_1 = __webpack_require__(6);
var PT = __webpack_require__(2);
var util_1 = __webpack_require__(4);
var constant_1 = __webpack_require__(48);
var radio_1 = __webpack_require__(45);
var select_1 = __webpack_require__(24);
var button_1 = __webpack_require__(14);
var icon_1 = __webpack_require__(7);
var renderNode = util_1.func.renderNode;
var DATE = constant_1.DATE_PANEL_MODE.DATE,
    WEEK = constant_1.DATE_PANEL_MODE.WEEK,
    QUARTER = constant_1.DATE_PANEL_MODE.QUARTER,
    MONTH = constant_1.DATE_PANEL_MODE.MONTH,
    YEAR = constant_1.DATE_PANEL_MODE.YEAR,
    DECADE = constant_1.DATE_PANEL_MODE.DECADE;
var HeaderPanel = /** @class */function (_super) {
    tslib_1.__extends(HeaderPanel, _super);
    function HeaderPanel(props) {
        var _this = _super.call(this, props) || this;
        _this.createPanelBtns = function (_a) {
            var unit = _a.unit,
                _b = _a.num,
                num = _b === void 0 ? 1 : _b,
                _c = _a.isSuper,
                isSuper = _c === void 0 ? true : _c;
            var value = _this.props.panelValue.clone();
            var prefixCls = _this.prefixCls;
            var iconTypes = isSuper ? ['arrow-double-left', 'arrow-double-right'] : ['arrow-left', 'arrow-right'];
            return [react_1.default.createElement(button_1.default, { text: true, className: "".concat(prefixCls, "-btn  ").concat(prefixCls, "-left-btn"), onClick: function onClick() {
                    return _this.handleClick(value, { num: num, unit: unit, isSuper: isSuper, isNext: false });
                }, key: "prev-btn-".concat(unit) }, react_1.default.createElement(icon_1.default, { type: iconTypes[0] })), react_1.default.createElement(button_1.default, { text: true, className: "".concat(prefixCls, "-btn ").concat(prefixCls, "-right-btn"), onClick: function onClick() {
                    return _this.handleClick(value, { num: num, unit: unit, isSuper: isSuper, isNext: true });
                }, key: "next-btn-".concat(unit) }, react_1.default.createElement(icon_1.default, { type: iconTypes[1] }))];
        };
        _this.renderModeSwitch = function () {
            var _a = _this.props,
                mode = _a.mode,
                locale = _a.locale,
                onModeChange = _a.onModeChange;
            return react_1.default.createElement(radio_1.default.Group, { key: "mode-switch", shape: "button", value: mode, onChange: onModeChange }, react_1.default.createElement(radio_1.default, { value: constant_1.CALENDAR_MODE.MONTH }, locale.month), react_1.default.createElement(radio_1.default, { value: constant_1.CALENDAR_MODE.YEAR }, locale.year));
        };
        _this.renderMonthSelect = function () {
            var prefixCls = _this.prefixCls;
            var _a = _this.props,
                panelValue = _a.panelValue,
                onPanelValueChange = _a.onPanelValueChange;
            var curMonth = panelValue.month();
            var dataSource = util_1.datejs.monthsShort().map(function (label, value) {
                return {
                    label: label,
                    value: value
                };
            });
            return react_1.default.createElement(select_1.default, { className: "".concat(prefixCls, "-select-month"), popupClassName: "".concat(prefixCls, "-select-month-popup"), value: curMonth, dataSource: dataSource, onChange: function onChange(v) {
                    return onPanelValueChange(panelValue.month(v));
                } });
        };
        _this.prefixCls = "".concat(props.prefix, "calendar2-header");
        return _this;
    }
    HeaderPanel.prototype.handleClick = function (value, _a) {
        var unit = _a.unit,
            num = _a.num,
            isSuper = _a.isSuper,
            isNext = _a.isNext;
        var _b = this.props,
            onPanelValueChange = _b.onPanelValueChange,
            onPrev = _b.onPrev,
            onSuperPrev = _b.onSuperPrev,
            onNext = _b.onNext,
            onSuperNext = _b.onSuperNext;
        var handler;
        if (isSuper) {
            handler = isNext ? onSuperNext : onSuperPrev;
        } else {
            handler = isNext ? onNext : onPrev;
        }
        if (handler) {
            handler(value, { unit: unit, num: num });
        } else {
            var m = isNext ? 'add' : 'subtract';
            onPanelValueChange(value[m](num, unit), "PANEL");
        }
    };
    HeaderPanel.prototype.renderYearSelect = function () {
        var prefixCls = this.prefixCls;
        var _a = this.props,
            validValue = _a.validValue,
            panelValue = _a.panelValue,
            onPanelValueChange = _a.onPanelValueChange;
        var curYear = panelValue.year();
        var beginYear;
        var endYear;
        // TODO 有效区间
        if (validValue) {
            var _b = tslib_1.__read(validValue, 2),
                begin = _b[0],
                end = _b[1];
            beginYear = begin.year();
            endYear = end.year();
        } else {
            for (var i = 0; i < 20; i++) {
                beginYear = curYear - 10;
                endYear = curYear + 10;
            }
        }
        var dataSource = [];
        for (var i = beginYear; i < endYear; i++) {
            dataSource.push({ label: i, value: i });
        }
        return react_1.default.createElement(select_1.default, { key: "year-select", className: "".concat(prefixCls, "-select-year"), popupClassName: "".concat(prefixCls, "-select-year-popup"), value: curYear, dataSource: dataSource, onChange: function onChange(v) {
                return onPanelValueChange(panelValue.year(v));
            } });
    };
    HeaderPanel.prototype.renderTextField = function () {
        var prefixCls = this.prefixCls;
        var _a = this.props,
            panelValue = _a.panelValue,
            locale = _a.locale,
            panelMode = _a.panelMode,
            onPanelModeChange = _a.onPanelModeChange;
        var monthBeforeYear = locale.monthBeforeYear || false;
        var localeData = util_1.datejs.localeData();
        var year = panelValue.year() + (locale && locale.year === '年' ? '年' : '');
        var month = localeData.monthsShort()[panelValue.month()];
        var DATE = constant_1.DATE_PANEL_MODE.DATE,
            WEEK = constant_1.DATE_PANEL_MODE.WEEK,
            QUARTER = constant_1.DATE_PANEL_MODE.QUARTER,
            MONTH = constant_1.DATE_PANEL_MODE.MONTH,
            YEAR = constant_1.DATE_PANEL_MODE.YEAR,
            DECADE = constant_1.DATE_PANEL_MODE.DECADE;
        var nodes;
        var yearNode = react_1.default.createElement(button_1.default, { text: true, key: "year-btn", tabIndex: -1, className: "".concat(prefixCls, "-btn"), onClick: function onClick() {
                return onPanelModeChange(YEAR);
            } }, year);
        switch (panelMode) {
            case DATE:
            case WEEK:
                {
                    var monthNode = react_1.default.createElement(button_1.default, { text: true, key: "month-btn", tabIndex: -1, className: "".concat(prefixCls, "-btn"), onClick: function onClick() {
                            return onPanelModeChange(MONTH);
                        } }, month);
                    nodes = monthBeforeYear ? [monthNode, yearNode] : [yearNode, monthNode];
                    break;
                }
            case MONTH:
            case QUARTER:
                {
                    nodes = yearNode;
                    break;
                }
            case YEAR:
                {
                    var curYear = panelValue.year();
                    var start = curYear - curYear % 10;
                    var end = start + 9;
                    nodes = react_1.default.createElement(button_1.default, { text: true, key: "decade-btn", tabIndex: -1, className: "".concat(prefixCls, "-btn"), onClick: function onClick() {
                            return onPanelModeChange(DECADE);
                        } }, this.props.rtl ? "".concat(end, "-").concat(start) : "".concat(start, "-").concat(end));
                    break;
                }
            case DECADE:
                {
                    var curYear = panelValue.year();
                    var start = curYear - curYear % 100;
                    var end = start + 99;
                    nodes = this.props.rtl ? "".concat(end, "-").concat(start) : "".concat(start, "-").concat(end);
                    break;
                }
        }
        return react_1.default.createElement("div", { key: "header-text-field", className: "".concat(prefixCls, "-text-field") }, nodes);
    };
    HeaderPanel.prototype.renderPanelHeader = function () {
        var createPanelBtns = this.createPanelBtns;
        var panelMode = this.props.panelMode;
        var nodes = [];
        var textFieldNode = this.renderTextField();
        switch (panelMode) {
            case DATE:
            case WEEK:
                {
                    var _a = tslib_1.__read(createPanelBtns({
                        unit: 'month',
                        isSuper: false
                    }), 2),
                        preMonthBtn = _a[0],
                        nextMonthBtn = _a[1];
                    var _b = tslib_1.__read(createPanelBtns({
                        unit: 'year'
                    }), 2),
                        preYearBtn = _b[0],
                        nextYearBtn = _b[1];
                    nodes = [preYearBtn, preMonthBtn, textFieldNode, nextMonthBtn, nextYearBtn];
                    break;
                }
            case QUARTER:
            case MONTH:
                {
                    var _c = tslib_1.__read(createPanelBtns({
                        unit: 'year'
                    }), 2),
                        preYearBtn = _c[0],
                        nextYearBtn = _c[1];
                    nodes = [preYearBtn, textFieldNode, nextYearBtn];
                    break;
                }
            case YEAR:
                {
                    var _d = tslib_1.__read(createPanelBtns({
                        unit: 'year',
                        num: 10
                    }), 2),
                        preDecadeBtn = _d[0],
                        nextDecadeBtn = _d[1];
                    nodes = [preDecadeBtn, textFieldNode, nextDecadeBtn];
                    break;
                }
            case DECADE:
                {
                    var _e = tslib_1.__read(createPanelBtns({
                        unit: 'year',
                        num: 100
                    }), 2),
                        preCenturyBtn = _e[0],
                        nextCenturyBtn = _e[1];
                    nodes = [preCenturyBtn, textFieldNode, nextCenturyBtn];
                    break;
                }
        }
        return nodes;
    };
    HeaderPanel.prototype.renderInner = function () {
        var prefixCls = this.prefixCls;
        var _a = this.props,
            shape = _a.shape,
            showTitle = _a.showTitle,
            value = _a.value,
            mode = _a.mode,
            showModeSwitch = _a.showModeSwitch;
        var nodes = [];
        if (shape === constant_1.CALENDAR_SHAPE.PANEL) {
            return this.renderPanelHeader();
        } else {
            if (showTitle) {
                nodes.push(react_1.default.createElement("div", { key: "title", className: "".concat(prefixCls, "-title") }, renderNode(this.props.titleRender, value.format(), [value])));
            }
            nodes.push(react_1.default.createElement("div", { key: "actions", className: "".concat(prefixCls, "-actions") }, this.renderYearSelect(), mode !== constant_1.CALENDAR_MODE.YEAR ? this.renderMonthSelect() : null, showModeSwitch ? this.renderModeSwitch() : null, this.props.renderHeaderExtra && this.props.renderHeaderExtra(tslib_1.__assign({}, this.props))));
        }
        return nodes;
    };
    HeaderPanel.prototype.render = function () {
        return react_1.default.createElement("div", { className: "".concat(this.prefixCls) }, renderNode(this.props.headerRender, this.renderInner(), tslib_1.__spreadArray([], tslib_1.__read(this.props), false)));
    };
    HeaderPanel.propTypes = {
        rtl: PT.bool,
        prefix: PT.string,
        locale: PT.object,
        mode: PT.any,
        shape: PT.string,
        value: PT.any,
        panelMode: PT.any,
        panelValue: PT.any,
        validValue: PT.any,
        showTitle: PT.bool,
        showModeSwitch: PT.bool,
        onModeChange: PT.func,
        onPanelValueChange: PT.func,
        onPanelModeChange: PT.func,
        onPrev: PT.func,
        onNext: PT.func,
        onSuperPrev: PT.func,
        onSuperNext: PT.func,
        titleRender: PT.func,
        /**
         * 扩展操作区域渲染
         */
        renderHeaderExtra: PT.func,
        /**
         * 自定义头部渲染
         */
        headerRender: PT.func
    };
    HeaderPanel.defaultProps = {
        showTitle: false
    };
    return HeaderPanel;
}(react_1.default.PureComponent);
exports.default = (0, react_lifecycles_compat_1.polyfill)(HeaderPanel);

/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var PT = __webpack_require__(2);
var prop_types_1 = __webpack_require__(200);
var constant_1 = __webpack_require__(48);
var util_1 = __webpack_require__(4);
var bindCtx = util_1.func.bindCtx,
    renderNode = util_1.func.renderNode;
var DATE = constant_1.DATE_PANEL_MODE.DATE,
    WEEK = constant_1.DATE_PANEL_MODE.WEEK,
    MONTH = constant_1.DATE_PANEL_MODE.MONTH,
    QUARTER = constant_1.DATE_PANEL_MODE.QUARTER,
    YEAR = constant_1.DATE_PANEL_MODE.YEAR,
    DECADE = constant_1.DATE_PANEL_MODE.DECADE;
// 面板行数
var mode2Rows = (_a = {}, _a[DATE] = 7, _a[WEEK] = 7, _a[MONTH] = 4, _a[QUARTER] = 4, _a[YEAR] = 4, _a[DECADE] = 3, _a);
var DateTable = /** @class */function (_super) {
    tslib_1.__extends(DateTable, _super);
    function DateTable(props) {
        var _this = _super.call(this, props) || this;
        _this.getCustomRender = function (mode) {
            var _a;
            var mode2RenderName = (_a = {}, _a[DATE] = 'dateCellRender', _a[QUARTER] = 'quarterCellRender', _a[MONTH] = 'monthCellRender', _a[YEAR] = 'yearCellRender', _a);
            return _this.props[mode2RenderName[mode]];
        };
        _this.prefixCls = "".concat(props.prefix, "calendar2");
        bindCtx(_this, ['getDateCellData', 'getMonthCellData', 'getQuarterCellData', 'getYearCellData', 'getDecadeData', 'handleKeyDown', 'handleSelect', 'handleMouseEnter', 'handleMouseLeave']);
        _this.state = {
            hoverValue: null
        };
        return _this;
    }
    DateTable.prototype.handleSelect = function (v, e, args) {
        util_1.func.invoke(this.props, 'onSelect', [v, e, args]);
    };
    DateTable.prototype.handleKeyDown = function (v, e, args) {
        switch (e.keyCode) {
            case util_1.KEYCODE.ENTER:
                this.handleSelect(v, e, args);
                break;
            case util_1.KEYCODE.RIGHT:
                break;
        }
        // e.preventDefault();
    };
    DateTable.prototype.handleMouseEnter = function (v, e, args) {
        util_1.func.invoke(this.props.cellProps, 'onMouseEnter', [v, e, args]);
    };
    DateTable.prototype.handleMouseLeave = function (v, e, args) {
        util_1.func.invoke(this.props.cellProps, 'onMouseLeave', [v, e, args]);
    };
    DateTable.prototype.isSame = function (curDate, date, mode) {
        switch (mode) {
            case DATE:
                return curDate.isSame(date, 'day');
            case WEEK:
                return curDate.isSame(date, 'week');
            case QUARTER:
                return curDate.isSame(date, 'quarter');
            case MONTH:
                return curDate.isSame(date, 'month');
            case YEAR:
                return curDate.isSame(date, 'year');
            case DECADE:
                {
                    var curYear = curDate.year();
                    var targetYear = date.year();
                    return curYear <= targetYear && targetYear < curYear + 10;
                }
        }
    };
    /**
     * 渲染日期面板
     * @param {Object[]} cellData - 单元格数据
     * @param {String}   cellData[].label - 单元格显示文本
     * @param {Object}   cellData[].value - 日期对象
     * @param {Boolean}  cellData[].isCurrent - 是否是当前面板时间范围内的值
     */
    DateTable.prototype.renderCellContent = function (cellData) {
        var _a;
        var _this = this;
        var props = this.props;
        var mode = props.mode,
            hoveredState = props.hoveredState,
            cellClassName = props.cellClassName;
        var hoverValue = this.state.hoverValue;
        var cellContent = [];
        var cellCls = "".concat(this.prefixCls, "-cell");
        var now = (0, util_1.datejs)();
        var rowLen = mode2Rows[mode];
        for (var i = 0; i < cellData.length;) {
            var children = [];
            var isCurrentWeek = void 0;
            var _loop_1 = function _loop_1(j) {
                var _b;
                var _c = cellData[i++],
                    label = _c.label,
                    value = _c.value,
                    key = _c.key,
                    isCurrent = _c.isCurrent;
                var v = value.startOf(mode);
                var isDisabled = props.disabledDate && props.disabledDate(v, mode);
                var hoverState = hoverValue && hoveredState && hoveredState(hoverValue);
                var className_1 = (0, classnames_1.default)(cellCls, tslib_1.__assign((_b = {}, _b["".concat(cellCls, "-current")] = isCurrent, _b["".concat(cellCls, "-today")] = mode === WEEK ? this_1.isSame(value, now, DATE) : this_1.isSame(v, now, mode), _b["".concat(cellCls, "-selected")] = this_1.isSame(v, props.value, mode), _b["".concat(cellCls, "-disabled")] = isDisabled, _b["".concat(cellCls, "-range-hover")] = hoverState, _b), cellClassName && cellClassName(v)));
                var onEvents = null;
                if (!isDisabled) {
                    onEvents = {
                        onClick: function onClick(e) {
                            return _this.handleSelect(v, e, { isCurrent: isCurrent, label: label });
                        },
                        onKeyDown: function onKeyDown(e) {
                            return _this.handleKeyDown(v, e, { isCurrent: isCurrent, label: label });
                        },
                        onMouseEnter: function onMouseEnter(e) {
                            return _this.handleMouseEnter(v, e, { isCurrent: isCurrent, label: label });
                        },
                        onMouseLeave: function onMouseLeave(e) {
                            return _this.handleMouseLeave(v, e, { isCurrent: isCurrent, label: label });
                        }
                    };
                }
                if (mode === WEEK && j === 0) {
                    var week = v.week();
                    children.push(react_1.default.createElement("td", { key: "w-".concat(week), className: "".concat(cellCls) }, react_1.default.createElement("div", { className: "".concat(cellCls, "-inner") }, week)));
                    isCurrentWeek = isCurrent;
                }
                var customRender = this_1.getCustomRender(mode);
                children.push(react_1.default.createElement("td", tslib_1.__assign({ key: key, title: key }, onEvents, { className: className_1 }), react_1.default.createElement("div", { className: "".concat(cellCls, "-inner") }, renderNode(customRender, react_1.default.createElement("div", { className: "".concat(cellCls, "-value") }, label), [v]))));
            };
            var this_1 = this;
            for (var j = 0; j < rowLen; j++) {
                _loop_1(j);
            }
            var className = void 0;
            if (mode === WEEK) {
                className = (0, classnames_1.default)("".concat(this.prefixCls, "-week"), (_a = {}, _a["".concat(this.prefixCls, "-week-current")] = isCurrentWeek, _a));
            }
            cellContent.push(react_1.default.createElement("tr", { key: i, className: className }, children));
        }
        return cellContent;
    };
    // 星期几
    DateTable.prototype.renderWeekdaysHead = function () {
        var weekdaysMin = util_1.datejs.weekdaysMin();
        var firstDayOfWeek = util_1.datejs.localeData().firstDayOfWeek();
        // 默认一周的第一天是周日，否则需要调整
        if (firstDayOfWeek !== 0) {
            weekdaysMin = weekdaysMin.slice(firstDayOfWeek).concat(weekdaysMin.slice(0, firstDayOfWeek));
        }
        return react_1.default.createElement("thead", null, react_1.default.createElement("tr", null, this.props.mode === WEEK ? react_1.default.createElement("th", { className: "".concat(this.prefixCls, "-cell-week") }) : null, weekdaysMin.map(function (d) {
            return react_1.default.createElement("th", { key: d }, d);
        })));
    };
    DateTable.prototype.getDateCellData = function () {
        var _a = this.props,
            panelValue = _a.panelValue,
            colNum = _a.colNum;
        var firstDayOfMonth = panelValue.clone().startOf('month');
        var weekOfFirstDay = firstDayOfMonth.day(); // 当月第一天星期几
        var daysOfCurMonth = panelValue.endOf('month').date(); // 当月天数
        var firstDayOfWeek = util_1.datejs.localeData().firstDayOfWeek(); // 一周的第一天是星期几
        var cellData = [];
        var preDays = (weekOfFirstDay - firstDayOfWeek + 7) % 7;
        var nextDays = colNum ? colNum * mode2Rows[DATE] - preDays - daysOfCurMonth : (7 - (preDays + daysOfCurMonth) % 7) % 7;
        // 上个月日期
        for (var i = preDays; i > 0; i--) {
            cellData.push(firstDayOfMonth.clone().subtract(i, 'day'));
        }
        // 本月日期
        for (var i = 0; i < daysOfCurMonth; i++) {
            cellData.push(firstDayOfMonth.clone().add(i, 'day'));
        }
        // 下个月日期
        for (var i = 0; i < nextDays; i++) {
            cellData.push(firstDayOfMonth.clone().add(daysOfCurMonth + i, 'day'));
        }
        return cellData.map(function (value) {
            return {
                value: value,
                label: value.date(),
                isCurrent: value.isSame(firstDayOfMonth, 'month'),
                key: value.format('YYYY-MM-DD')
            };
        });
    };
    DateTable.prototype.getMonthCellData = function () {
        var panelValue = this.props.panelValue;
        return util_1.datejs.monthsShort().map(function (label, index) {
            var value = panelValue.clone().month(index);
            return {
                label: label,
                value: value,
                isCurrent: true,
                key: value.format('YYYY-MM')
            };
        });
    };
    DateTable.prototype.getQuarterCellData = function () {
        var panelValue = this.props.panelValue;
        return [1, 2, 3, 4].map(function (i) {
            return {
                label: "Q".concat(i),
                value: panelValue.clone().quarter(i),
                isCurrent: true,
                key: "Q".concat(i)
            };
        });
    };
    DateTable.prototype.getYearCellData = function () {
        var panelValue = this.props.panelValue;
        var curYear = panelValue.year();
        var startYear = curYear - curYear % 10 - 1;
        var cellData = [];
        for (var i = 0; i < 12; i++) {
            var y = startYear + i;
            cellData.push({
                value: panelValue.clone().year(y),
                label: y,
                isCurrent: i > 0 && i < 11,
                key: y
            });
        }
        return cellData;
    };
    DateTable.prototype.getDecadeData = function () {
        var panelValue = this.props.panelValue;
        var curYear = panelValue.year();
        var startYear = curYear - curYear % 100 - 10;
        var cellData = [];
        for (var i = 0; i < 12; i++) {
            var y = startYear + i * 10;
            cellData.push({
                value: panelValue.clone().year(y),
                label: "".concat(y, "-").concat(y + 9),
                isCurrent: i > 0 && i < 11,
                key: "".concat(y, "-").concat(y + 9)
            });
        }
        return cellData;
    };
    DateTable.prototype.render = function () {
        var _a;
        var mode = this.props.mode;
        var mode2Data = (_a = {}, _a[DATE] = this.getDateCellData, _a[WEEK] = this.getDateCellData, _a[MONTH] = this.getMonthCellData, _a[QUARTER] = this.getQuarterCellData, _a[YEAR] = this.getYearCellData, _a[DECADE] = this.getDecadeData, _a);
        return react_1.default.createElement("table", { className: "".concat(this.prefixCls, "-table ").concat(this.prefixCls, "-table-").concat(mode) }, [DATE, WEEK].includes(mode) ? this.renderWeekdaysHead() : null, react_1.default.createElement("tbody", null, this.renderCellContent(mode2Data[mode]())));
    };
    DateTable.propTypes = {
        mode: prop_types_1.default.panelMode,
        value: prop_types_1.default.date,
        panelValue: prop_types_1.default.date,
        dateCellRender: PT.func,
        quarterCellRender: PT.func,
        monthCellRender: PT.func,
        yearCellRender: PT.func,
        disabledDate: PT.func,
        selectedState: PT.func,
        hoveredState: PT.func,
        onSelect: PT.func,
        onDateSelect: PT.func,
        startOnSunday: PT.bool,
        cellClassName: PT.oneOfType([PT.func, PT.string]),
        colNum: PT.number,
        cellProps: PT.object
    };
    return DateTable;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(DateTable);

/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = __webpack_require__(0);
var react_1 = __webpack_require__(1);
var react_lifecycles_compat_1 = __webpack_require__(6);
var classnames_1 = __webpack_require__(3);
var PT = __webpack_require__(2);
var prop_types_1 = __webpack_require__(39);
var util_1 = __webpack_require__(4);
var util_2 = __webpack_require__(37);
var constant_1 = __webpack_require__(38);
var constant_2 = __webpack_require__(48);
var calendar2_1 = __webpack_require__(109);
var time_panel_1 = __webpack_require__(201);
var DATE = constant_2.DATE_PANEL_MODE.DATE,
    WEEK = constant_2.DATE_PANEL_MODE.WEEK,
    MONTH = constant_2.DATE_PANEL_MODE.MONTH,
    QUARTER = constant_2.DATE_PANEL_MODE.QUARTER,
    YEAR = constant_2.DATE_PANEL_MODE.YEAR;
var UN_SELECTED = constant_2.CALENDAR_CELL_STATE.UN_SELECTED,
    SELECTED = constant_2.CALENDAR_CELL_STATE.SELECTED,
    SELECTED_BEGIN = constant_2.CALENDAR_CELL_STATE.SELECTED_BEGIN,
    SELECTED_END = constant_2.CALENDAR_CELL_STATE.SELECTED_END;
var BEGIN = constant_1.DATE_INPUT_TYPE.BEGIN,
    END = constant_1.DATE_INPUT_TYPE.END;
var operate = function operate(mode, value, operator) {
    var newVal = value.clone();
    switch (mode) {
        case DATE:
        case WEEK:
            return newVal[operator](1, 'month');
        case QUARTER:
        case MONTH:
            return newVal[operator](1, 'year');
        case YEAR:
            return newVal[operator](10, 'year');
    }
};
var isSamePanel = function isSamePanel(a, b, mode) {
    switch (mode) {
        case DATE:
        case WEEK:
            return a.isSame(b, 'month');
        case QUARTER:
        case MONTH:
            return a.isSame(b, 'year');
        case YEAR:
            {
                var begin = a.year() - a.year() % 20;
                var byear = b.year();
                return byear >= begin && byear < begin + 20;
            }
    }
};
// 计算 面板日期
var getPanelValue = function getPanelValue(_a, defaultValue) {
    var mode = _a.mode,
        value = _a.value,
        inputType = _a.inputType,
        showTime = _a.showTime;
    var _b = tslib_1.__read(value, 2),
        begin = _b[0],
        end = _b[1];
    var otherType = inputType === BEGIN ? END : BEGIN;
    var _inputType = inputType;
    if (!value[inputType] && value[otherType]) {
        _inputType = otherType;
    }
    var panelValue = value[_inputType] || (0, util_1.datejs)(defaultValue);
    // https://github.com/alibaba-fusion/next/issues/3186
    if (!showTime && _inputType === END && end && (begin && !isSamePanel(begin, end, mode) || !begin)) {
        panelValue = operate(mode, panelValue, 'subtract');
    }
    return panelValue && panelValue.isValid() ? panelValue : (0, util_1.datejs)();
};
var RangePanel = /** @class */function (_super) {
    tslib_1.__extends(RangePanel, _super);
    function RangePanel(props) {
        var _this = _super.call(this, props) || this;
        _this.disabledDate = function (v) {
            var _a = _this.props,
                mode = _a.mode,
                inputType = _a.inputType,
                disabledDate = _a.disabledDate,
                _b = tslib_1.__read(_a.value, 2),
                begin = _b[0],
                end = _b[1];
            var unit = (0, util_2.mode2unit)(mode);
            return disabledDate(v, mode) || inputType === END && begin && begin.isAfter(v, unit) || inputType === BEGIN && end && end.isBefore(v, unit);
        };
        _this.onTimeSelect = function (v) {
            var _a = _this.props,
                value = _a.value,
                inputType = _a.inputType;
            var _b = tslib_1.__read(value, 2),
                begin = _b[0],
                end = _b[1];
            var curDateVal = value[inputType];
            if (!curDateVal) {
                curDateVal = inputType === BEGIN && end ? end.subtract(1, 'day') : inputType === END && begin ? begin.add(1, 'day') : (0, util_1.datejs)();
            }
            curDateVal = (0, util_2.setTime)(curDateVal, v);
            _this.handleSelect(curDateVal, true);
        };
        _this.handleSelect = function (v, fromTimeChange) {
            var _a = _this.props,
                value = _a.value,
                inputType = _a.inputType,
                resetTime = _a.resetTime,
                onCalendarChange = _a.onCalendarChange;
            var otherType = (0, util_2.switchInputType)(inputType);
            var newValue = tslib_1.__spreadArray([], tslib_1.__read(value), false);
            var defaultTime = _this.state.defaultTime[inputType];
            var timeVal = null;
            // 如果不是选择时间面板触发的时间改变或不需要重置时间
            // 则需要设置时间值，优先级如下：
            // - 目前这个日期时间
            // - 默认时间
            // - 另一日期时间
            // - 当前时间
            if (!fromTimeChange && !resetTime) {
                timeVal = value[inputType] || defaultTime || value[otherType] || (0, util_1.datejs)();
            }
            newValue[inputType === BEGIN ? 0 : 1] = (0, util_2.setTime)(v, timeVal);
            onCalendarChange(newValue);
            util_1.func.invoke(_this.props, 'onSelect', [newValue]);
        };
        _this.handlePanelChange = function (v, mode, idx) {
            _this.setState({
                mode: mode,
                panelValue: v,
                calendarIdx: idx
            });
            util_1.func.invoke(_this.props, 'onPanelChange', [v, mode]);
        };
        _this.handleMouseEnter = function (value) {
            _this.currentRaf && window.cancelAnimationFrame(_this.currentRaf);
            _this.currentRaf = window.requestAnimationFrame(function () {
                _this.setState({
                    curHoverValue: value
                });
            });
        };
        _this.handleMouseLeave = function () {
            _this.currentRaf && window.cancelAnimationFrame(_this.currentRaf);
            _this.setState({
                curHoverValue: null
            });
        };
        _this.handleEdgeState = function (value, mode) {
            var unit = _this.getUnitByMode(mode);
            switch (mode) {
                case DATE:
                    {
                        var endDate = value.endOf('month');
                        var beginDate = value.startOf('month');
                        return beginDate.isSame(value, unit) ? 1 : endDate.isSame(value, unit) ? 2 : 0;
                    }
                case YEAR:
                    {
                        var year = value.year();
                        var beginYear = value.year() - value.year() % 10;
                        var endYear = beginYear + 9;
                        return year === beginYear ? 1 : year === endYear ? 2 : 0;
                    }
                default:
                    return 0;
            }
        };
        _this.getCellClassName = function (value) {
            var _a, _b, _c, _d;
            var _e = _this.props,
                prefix = _e.prefix,
                inputType = _e.inputType,
                mode = _e.mode;
            var curHoverValue = _this.state.curHoverValue;
            var _f = tslib_1.__read(_this.props.value, 2),
                begin = _f[0],
                end = _f[1];
            var unit = _this.getUnitByMode(mode);
            var state = _this.handleCellState(value, _this.props.value);
            var prefixCls = "".concat(prefix, "calendar2-cell");
            var hoverClassName;
            if (curHoverValue) {
                var hoverValue = tslib_1.__spreadArray([], tslib_1.__read(_this.props.value), false);
                hoverValue[inputType] = curHoverValue;
                var _g = tslib_1.__read(hoverValue, 2),
                    hoverBegin = _g[0],
                    hoverEnd = _g[1];
                if (hoverBegin && hoverEnd && hoverBegin.isBefore(hoverEnd, unit)) {
                    var hoverState = _this.handleCellState(value, hoverValue);
                    hoverClassName = (_a = {}, _a["".concat(prefixCls, "-hover")] = hoverState >= SELECTED, _a["".concat(prefixCls, "-hover-begin")] = hoverState === SELECTED_BEGIN, _a["".concat(prefixCls, "-hover-end")] = hoverState === SELECTED_END, _a["".concat(prefixCls, "-hover-end")] = hoverState === SELECTED_END, _a);
                }
            }
            var rangeClassName;
            if (!_this.hasModeChanged) {
                var edgeState = _this.handleEdgeState(value, mode);
                var isIllegal = end && begin && begin.isAfter(end);
                rangeClassName = mode === WEEK ? (_b = {}, _b["".concat(prefixCls, "-week-range-begin")] = state === SELECTED_BEGIN, _b["".concat(prefixCls, "-week-range-end")] = state === SELECTED_END, _b) : (_c = {}, _c["".concat(prefixCls, "-range-begin")] = state === SELECTED_BEGIN, _c["".concat(prefixCls, "-range-end")] = state === SELECTED_END, _c["".concat(prefixCls, "-range-begin-single")] = state >= SELECTED && (!end || end.isSame(begin, unit) || isIllegal), _c["".concat(prefixCls, "-range-end-single")] = state >= SELECTED && (!begin || begin.isSame(end, unit) || isIllegal), _c["".concat(prefixCls, "-edge-begin")] = edgeState === 1, _c["".concat(prefixCls, "-edge-end")] = edgeState === 2, _c);
            }
            return tslib_1.__assign(tslib_1.__assign((_d = {}, _d["".concat(prefixCls, "-selected")] = state >= SELECTED, _d), rangeClassName), hoverClassName);
        };
        // 头部面板日期切换点击事件
        _this.handleCanlendarClick = function (_, _a) {
            var unit = _a.unit,
                num = _a.num;
            _this.setState({
                panelValue: _this.state.panelValue.clone().add(num, unit)
            });
        };
        _this.renderRangeTime = function (sharedProps) {
            var _a;
            var _b = _this.props,
                value = _b.value,
                prefix = _b.prefix,
                showTime = _b.showTime,
                inputType = _b.inputType,
                _c = _b.timePanelProps,
                timePanelProps = _c === void 0 ? {} : _c,
                disabledTime = _b.disabledTime;
            var className = (0, classnames_1.default)("".concat(prefix, "range-picker2-panel"), (_a = {}, _a["".concat(prefix, "range-picker2-panel-single")] = _this.hasModeChanged, _a));
            // 禁用时间
            var _disabledTime;
            if (showTime && !_this.hasModeChanged && disabledTime) {
                _disabledTime = typeof disabledTime === 'function' ? disabledTime(value, inputType) : disabledTime;
            }
            return react_1.default.createElement("div", { key: "range-time-panel", className: className }, react_1.default.createElement(calendar2_1.default, tslib_1.__assign({ panelValue: _this.state.panelValue }, sharedProps, { value: value[inputType], onPanelChange: _this.handlePanelChange })), showTime && !_this.hasModeChanged ? react_1.default.createElement(time_panel_1.default, { prefix: prefix, inputType: inputType, value: value[inputType] || _this.state.defaultTime[inputType], onSelect: _this.onTimeSelect, disabledTime: disabledTime, timePanelProps: tslib_1.__assign(tslib_1.__assign({}, _disabledTime), timePanelProps) }) : null);
        };
        var mode = props.mode,
            defaultPanelValue = props.defaultPanelValue,
            _a = props.timePanelProps,
            timePanelProps = _a === void 0 ? {} : _a;
        // 默认时间
        var defaultTime = timePanelProps.defaultValue || [];
        if (!Array.isArray(defaultTime)) {
            defaultTime = [defaultTime, defaultTime];
        }
        defaultTime = defaultTime.map(function (t) {
            return (0, util_1.datejs)(t, timePanelProps.format || 'HH:mm:ss');
        });
        _this.state = {
            mode: mode,
            panelValue: getPanelValue(props, defaultPanelValue),
            inputType: props.inputType,
            curHoverValue: null,
            defaultTime: defaultTime
        };
        return _this;
    }
    RangePanel.getDerivedStateFromProps = function (props, state) {
        if (props.inputType !== state.inputType) {
            return {
                inputType: props.inputType,
                panelValue: getPanelValue(props, state.panelValue)
            };
        }
        return null;
    };
    RangePanel.prototype.componentWillUnmount = function () {
        this.currentRaf && window.cancelAnimationFrame(this.currentRaf);
    };
    // 日期面板显示的日期区间
    RangePanel.prototype.getRanges = function () {
        var mode = this.props.mode;
        var v = this.state.panelValue;
        var begin = v.clone();
        var end = operate(mode, v, 'add');
        return [begin, end];
    };
    // 日期cell状态
    RangePanel.prototype.handleCellState = function (v, value) {
        var mode = this.props.mode;
        var _a = tslib_1.__read(value, 2),
            begin = _a[0],
            end = _a[1];
        var unit = this.getUnitByMode(mode);
        return begin && begin.isSame(v, unit) ? SELECTED_BEGIN : end && end.isSame(v, unit) ? SELECTED_END : begin && end && v.isAfter(begin, unit) && v.isBefore(end, unit) ? SELECTED : UN_SELECTED;
    };
    RangePanel.prototype.getUnitByMode = function (mode) {
        return mode === DATE ? 'day' : mode;
    };
    RangePanel.prototype.renderRange = function (sharedProps) {
        var _a;
        var _b = this,
            handlePanelChange = _b.handlePanelChange,
            handleCanlendarClick = _b.handleCanlendarClick,
            hasModeChanged = _b.hasModeChanged;
        var _c = this.props,
            value = _c.value,
            prefix = _c.prefix;
        var ranges = this.getRanges();
        var calendarProps = function calendarProps(idx) {
            return tslib_1.__assign(tslib_1.__assign({}, sharedProps), { value: value[idx], panelValue: ranges[idx], onPanelChange: function onPanelChange(v, m) {
                    return handlePanelChange(v, m, idx);
                } });
        };
        var calendarNodes = [react_1.default.createElement(calendar2_1.default, tslib_1.__assign({}, calendarProps(0), { className: "".concat(prefix, "range-picker-left"), key: "range-panel-calendar-left" })), react_1.default.createElement(calendar2_1.default, tslib_1.__assign({}, calendarProps(1), { className: "".concat(prefix, "range-picker-right"), key: "range-panel-calendar-right", onNext: handleCanlendarClick, onSuperNext: handleCanlendarClick }))];
        var className = (0, classnames_1.default)("".concat(prefix, "range-picker2-panel"), (_a = {}, _a["".concat(prefix, "range-picker2-panel-single")] = hasModeChanged, _a));
        return react_1.default.createElement("div", { key: "range-panel", className: className }, !this.hasModeChanged ? calendarNodes : calendarNodes[this.state.calendarIdx]);
    };
    RangePanel.prototype.render = function () {
        var _a = this,
            handleSelect = _a.handleSelect,
            getCellClassName = _a.getCellClassName,
            handleMouseEnter = _a.handleMouseEnter,
            handleMouseLeave = _a.handleMouseLeave;
        var _b = this.props,
            mode = _b.mode,
            justBeginInput = _b.justBeginInput,
            dateCellRender = _b.dateCellRender,
            restProps = tslib_1.__rest(_b, ["mode", "justBeginInput", "dateCellRender"]);
        // 切换面板mode
        this.hasModeChanged = this.state.mode !== this.props.mode;
        var sharedProps = tslib_1.__assign(tslib_1.__assign({}, util_1.obj.pickProps(calendar2_1.default.propTypes, restProps)), { shape: 'panel', panelMode: mode, dateCellRender: dateCellRender });
        sharedProps.disabledDate = justBeginInput ? this.props.disabledDate : this.disabledDate;
        // 日期面板固定列数 保证对齐
        if ([DATE, WEEK].includes(mode)) {
            sharedProps.colNum = 6;
        }
        if (!this.hasModeChanged) {
            sharedProps = tslib_1.__assign(tslib_1.__assign({}, sharedProps), { onSelect: handleSelect, cellClassName: getCellClassName, cellProps: {
                    onMouseEnter: handleMouseEnter,
                    onMouseLeave: handleMouseLeave
                } });
        }
        return this.props.showTime ? this.renderRangeTime(sharedProps) : this.renderRange(sharedProps);
    };
    RangePanel.propTypes = {
        rtl: PT.bool,
        prefix: PT.string,
        locale: PT.object,
        mode: prop_types_1.default.mode,
        value: PT.arrayOf(prop_types_1.default.date),
        inputType: prop_types_1.default.inputType,
        handleCellState: PT.func,
        disabledDate: PT.func,
        justBeginInput: PT.bool,
        resetTime: PT.bool,
        showTime: PT.bool,
        timePanelProps: PT.object,
        disabledTime: PT.object,
        dateCellRender: PT.func,
        onCalendarChange: PT.func
    };
    RangePanel.defaultProps = {
        disabledDate: function disabledDate() {
            return false;
        },
        justBeginInput: true
    };
    return RangePanel;
}(react_1.default.Component);
exports.default = (0, react_lifecycles_compat_1.polyfill)(RangePanel);

/***/ }),
/* 482 */,
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(484);
module.exports = __webpack_require__(202);


/***/ }),
/* 484 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })
/******/ ]);
});